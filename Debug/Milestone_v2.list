
Milestone_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b70c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021914  0801b8e0  0801b8e0  0002b8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d1f4  0803d1f4  00050398  2**0
                  CONTENTS
  4 .ARM          00000008  0803d1f4  0803d1f4  0004d1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d1fc  0803d1fc  00050398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803d1fc  0803d1fc  0004d1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0803d204  0803d204  0004d204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  0803d20c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f08  20000398  0803d5a4  00050398  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200072a0  0803d5a4  000572a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050398  2**0
                  CONTENTS, READONLY
 12 .debug_info   000ff405  00000000  00000000  000503c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00010c92  00000000  00000000  0014f7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000044f0  00000000  00000000  00160460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004290  00000000  00000000  00164950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031bcc  00000000  00000000  00168be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004d3d7  00000000  00000000  0019a7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00171a2e  00000000  00000000  001e7b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003595b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014d40  00000000  00000000  00359604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000398 	.word	0x20000398
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b8c4 	.word	0x0801b8c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000039c 	.word	0x2000039c
 800020c:	0801b8c4 	.word	0x0801b8c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	2203      	movs	r2, #3
 80010a6:	4798      	blx	r3
    }
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf0c      	ite	eq
 80010c2:	2301      	moveq	r3, #1
 80010c4:	2300      	movne	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	731a      	strb	r2, [r3, #12]
 80010f4:	e00f      	b.n	8001116 <_ZN2ei9ei_matrixC1EmmPf+0x42>
        }
        else {
            buffer = (float*)calloc(n_rows * n_cols * sizeof(float), 1);
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	2101      	movs	r1, #1
 8001102:	4618      	mov	r0, r3
 8001104:	f019 f84c 	bl	801a1a0 <calloc>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2201      	movs	r2, #1
 8001114:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float));
            }
#endif
        }
    }
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <_ZN2ei9ei_matrixD1Ev+0x22>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7b1b      	ldrb	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <_ZN2ei9ei_matrixD1Ev+0x22>
            free(buffer);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f019 f8fb 	bl	801a344 <free>
            else {
                ei_dsp_register_matrix_free(rows, cols, sizeof(float));
            }
#endif
        }
    }
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>:
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_dequantization_fn How to dequantize the values in this matrix
     * @param a_buffer Optional: a buffer, if set we won't allocate memory ourselves
     */
    ei_quantized_matrix(uint32_t n_rows,
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
                        const char *file = NULL,
                        int line = 0
#endif
                        )
    {
        if (a_buffer) {
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x22>
            buffer = a_buffer;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	731a      	strb	r2, [r3, #12]
 8001178:	e00e      	b.n	8001198 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x40>
        }
        else {
            buffer = (uint8_t*)calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f019 f80b 	bl	801a1a0 <calloc>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2201      	movs	r2, #1
 8001196:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
        dequantization_fn = a_dequantization_fn;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	611a      	str	r2, [r3, #16]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(uint8_t));
            }
#endif
        }
    }
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN2ei19ei_quantized_matrixD1Ev>:

    ~ei_quantized_matrix() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7b1b      	ldrb	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
            free(buffer);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f019 f8b7 	bl	801a344 <free>
            else {
                ei_dsp_register_matrix_free(rows, cols, sizeof(uint8_t));
            }
#endif
        }
    }
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	e7fe      	b.n	80011e4 <_ZSt25__throw_bad_function_callv+0x4>

080011e6 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	ed87 0a01 	vstr	s0, [r7, #4]
 80011f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80011f4:	f016 f96c 	bl	80174d0 <ceilf>
 80011f8:	eef0 7a40 	vmov.f32	s15, s0
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001210:	ed97 0a01 	vldr	s0, [r7, #4]
 8001214:	f016 fb8e 	bl	8017934 <expf>
 8001218:	eef0 7a40 	vmov.f32	s15, s0
 800121c:	eeb0 0a67 	vmov.f32	s0, s15
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001230:	ed97 0a01 	vldr	s0, [r7, #4]
 8001234:	f016 f9ce 	bl	80175d4 <floorf>
 8001238:	eef0 7a40 	vmov.f32	s15, s0
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001250:	ed97 0a01 	vldr	s0, [r7, #4]
 8001254:	f016 fbac 	bl	80179b0 <sqrtf>
 8001258:	eef0 7a40 	vmov.f32	s15, s0
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001270:	ed97 0a01 	vldr	s0, [r7, #4]
 8001274:	f016 fa14 	bl	80176a0 <roundf>
 8001278:	eef0 7a40 	vmov.f32	s15, s0
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <_ZN2ei5numpy4rollEPfji>:
     * @param input_array
     * @param input_array_size
     * @param shift The number of places by which elements are shifted.
     * @returns EIDSP_OK if OK
     */
    static int roll(float *input_array, size_t input_array_size, int shift) {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
        if (shift < 0) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	da03      	bge.n	80012a2 <_ZN2ei5numpy4rollEPfji+0x1a>
            shift = input_array_size + shift;
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	607b      	str	r3, [r7, #4]
        }

        if (shift == 0) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <_ZN2ei5numpy4rollEPfji+0x24>
            return EIDSP_OK;
 80012a8:	2400      	movs	r4, #0
 80012aa:	e039      	b.n	8001320 <_ZN2ei5numpy4rollEPfji+0x98>
        }

        // so we need to allocate a buffer of the size of shift...
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f107 0010 	add.w	r0, r7, #16
 80012b2:	2300      	movs	r3, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	f7ff ff0d 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10a      	bne.n	80012d6 <_ZN2ei5numpy4rollEPfji+0x4e>
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <_ZN2ei5numpy4rollEPfji+0xa4>)
 80012c2:	491b      	ldr	r1, [pc, #108]	; (8001330 <_ZN2ei5numpy4rollEPfji+0xa8>)
 80012c4:	481b      	ldr	r0, [pc, #108]	; (8001334 <_ZN2ei5numpy4rollEPfji+0xac>)
 80012c6:	f019 fc1d 	bl	801ab04 <iprintf>
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <_ZN2ei5numpy4rollEPfji+0xb0>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <_ZN2ei5numpy4rollEPfji+0xb4>)
 80012ce:	2149      	movs	r1, #73	; 0x49
 80012d0:	481b      	ldr	r0, [pc, #108]	; (8001340 <_ZN2ei5numpy4rollEPfji+0xb8>)
 80012d2:	f018 ff41 	bl	801a158 <__assert_func>

        // we copy from the end of the buffer into the shift buffer
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 80012d6:	6938      	ldr	r0, [r7, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	18d1      	adds	r1, r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	461a      	mov	r2, r3
 80012ea:	f019 f833 	bl	801a354 <memcpy>

        // now we do a memmove to shift the array
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	18d0      	adds	r0, r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	461a      	mov	r2, r3
 8001300:	68f9      	ldr	r1, [r7, #12]
 8001302:	f019 f835 	bl	801a370 <memmove>

        // and copy the shift buffer back to the beginning of the array
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	461a      	mov	r2, r3
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f019 f820 	bl	801a354 <memcpy>

        return EIDSP_OK;
 8001314:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff06 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 8001320:	4623      	mov	r3, r4
    }
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	0801b918 	.word	0x0801b918
 8001330:	fffffc16 	.word	0xfffffc16
 8001334:	0801b92c 	.word	0x0801b92c
 8001338:	0801b93c 	.word	0x0801b93c
 800133c:	0801b944 	.word	0x0801b944
 8001340:	0801b974 	.word	0x0801b974

08001344 <_ZN2ei5numpy3sumEPfj>:

    static float sum(float *input_array, size_t input_array_size) {
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d20f      	bcs.n	8001380 <_ZN2ei5numpy3sumEPfj+0x3c>
            res += input_array[ix];
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001374:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3301      	adds	r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	e7eb      	b.n	8001358 <_ZN2ei5numpy3sumEPfj+0x14>
        }
        return res;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	ee07 3a90 	vmov	s15, r3
    }
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>:
     * @param matrix1_cols matrix1 row size
     * @param matrix2 Pointer to matrix2 (NxK)
     * @param out_matrix Pointer to out matrix (MxK)
     * @returns EIDSP_OK if OK
     */
    static inline int dot_by_row(int i, float *row, size_t matrix1_cols,
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b08b      	sub	sp, #44	; 0x2c
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
        quantized_matrix_t *matrix2, matrix_t *out_matrix)
    {
        if (matrix1_cols != matrix2->rows) {
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d00a      	beq.n	80013c2 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80013ac:	4a3b      	ldr	r2, [pc, #236]	; (800149c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x108>)
 80013ae:	493c      	ldr	r1, [pc, #240]	; (80014a0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x10c>)
 80013b0:	483c      	ldr	r0, [pc, #240]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013b2:	f019 fba7 	bl	801ab04 <iprintf>
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013b8:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 80013ba:	21e1      	movs	r1, #225	; 0xe1
 80013bc:	483c      	ldr	r0, [pc, #240]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 80013be:	f018 fecb 	bl	801a158 <__assert_func>
        }

#if EIDSP_USE_CMSIS_DSP
        EI_DSP_MATRIX(dequantized_matrix, 1, matrix1_cols);
 80013c2:	f107 0014 	add.w	r0, r7, #20
 80013c6:	2300      	movs	r3, #0
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	2101      	movs	r1, #1
 80013cc:	f7ff fe82 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10a      	bne.n	80013ec <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x58>
 80013d6:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x120>)
 80013d8:	4937      	ldr	r1, [pc, #220]	; (80014b8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x124>)
 80013da:	4832      	ldr	r0, [pc, #200]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013dc:	f019 fb92 	bl	801ab04 <iprintf>
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 80013e4:	21e5      	movs	r1, #229	; 0xe5
 80013e6:	4832      	ldr	r0, [pc, #200]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 80013e8:	f018 feb6 	bl	801a158 <__assert_func>
        if (!dequantized_matrix.buffer) {
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x74>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80013f2:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x120>)
 80013f4:	4930      	ldr	r1, [pc, #192]	; (80014b8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x124>)
 80013f6:	482b      	ldr	r0, [pc, #172]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013f8:	f019 fb84 	bl	801ab04 <iprintf>
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013fe:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 8001400:	21e7      	movs	r1, #231	; 0xe7
 8001402:	482b      	ldr	r0, [pc, #172]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 8001404:	f018 fea8 	bl	801a158 <__assert_func>
        }
#endif

        for (uint16_t j = 0; j < matrix2->cols; j++) {
 8001408:	2300      	movs	r3, #0
 800140a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800140c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	429a      	cmp	r2, r3
 8001414:	d237      	bcs.n	8001486 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xf2>
#if EIDSP_USE_CMSIS_DSP
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 8001416:	2300      	movs	r3, #0
 8001418:	84bb      	strh	r3, [r7, #36]	; 0x24
 800141a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d919      	bls.n	8001456 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xc2>
                dequantized_matrix.buffer[k] = matrix2->dequantization_fn(matrix2->buffer[k * matrix2->cols + j]);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6811      	ldr	r1, [r2, #0]
 800142a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	6880      	ldr	r0, [r0, #8]
 8001430:	fb00 f002 	mul.w	r0, r0, r2
 8001434:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001436:	4402      	add	r2, r0
 8001438:	440a      	add	r2, r1
 800143a:	7810      	ldrb	r0, [r2, #0]
 800143c:	6979      	ldr	r1, [r7, #20]
 800143e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	188c      	adds	r4, r1, r2
 8001444:	4798      	blx	r3
 8001446:	eef0 7a40 	vmov.f32	s15, s0
 800144a:	edc4 7a00 	vstr	s15, [r4]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 800144e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001454:	e7e1      	b.n	800141a <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x86>
            }

            float result;
            arm_dot_prod_f32(row, dequantized_matrix.buffer, matrix1_cols, &result);
 8001456:	6979      	ldr	r1, [r7, #20]
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f009 f9b6 	bl	800a7d0 <arm_dot_prod_f32>
            out_matrix->buffer[i * matrix2->cols + j] = result;
 8001464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	fb01 f103 	mul.w	r1, r1, r3
 8001472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001474:	440b      	add	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 800147e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001480:	3301      	adds	r3, #1
 8001482:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001484:	e7c2      	b.n	800140c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x78>
                    row[k] * matrix2->dequantization_fn(matrix2->buffer[k * matrix2->cols + j]);
            }
#endif
        }

        return EIDSP_OK;
 8001486:	2400      	movs	r4, #0
        EI_DSP_MATRIX(dequantized_matrix, 1, matrix1_cols);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe4d 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 8001492:	4623      	mov	r3, r4
    }
 8001494:	4618      	mov	r0, r3
 8001496:	372c      	adds	r7, #44	; 0x2c
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	0801b9dc 	.word	0x0801b9dc
 80014a0:	fffffc14 	.word	0xfffffc14
 80014a4:	0801b92c 	.word	0x0801b92c
 80014a8:	0801b93c 	.word	0x0801b93c
 80014ac:	0801b9f8 	.word	0x0801b9f8
 80014b0:	0801b974 	.word	0x0801b974
 80014b4:	0801b918 	.word	0x0801b918
 80014b8:	fffffc16 	.word	0xfffffc16

080014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4619      	mov	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	461a      	mov	r2, r3
 80014d4:	f000 f818 	bl	8001508 <_ZN2ei5numpy9transposeEPfii>
 80014d8:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	e00c      	b.n	80014fe <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 80014f0:	893a      	ldrh	r2, [r7, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 80014f6:	897a      	ldrh	r2, [r7, #10]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80014fc:	2300      	movs	r3, #0
    }
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <_ZN2ei5numpy9transposeEPfii>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b08f      	sub	sp, #60	; 0x3c
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800151c:	2300      	movs	r3, #0
 800151e:	f7ff fdd9 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10b      	bne.n	8001540 <_ZN2ei5numpy9transposeEPfii+0x38>
 8001528:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <_ZN2ei5numpy9transposeEPfii+0xd8>)
 800152a:	492e      	ldr	r1, [pc, #184]	; (80015e4 <_ZN2ei5numpy9transposeEPfii+0xdc>)
 800152c:	482e      	ldr	r0, [pc, #184]	; (80015e8 <_ZN2ei5numpy9transposeEPfii+0xe0>)
 800152e:	f019 fae9 	bl	801ab04 <iprintf>
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <_ZN2ei5numpy9transposeEPfii+0xe4>)
 8001534:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <_ZN2ei5numpy9transposeEPfii+0xe8>)
 8001536:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800153a:	482e      	ldr	r0, [pc, #184]	; (80015f4 <_ZN2ei5numpy9transposeEPfii+0xec>)
 800153c:	f018 fe0c 	bl	801a158 <__assert_func>
        if (!temp_matrix.buffer) {
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10b      	bne.n	800155e <_ZN2ei5numpy9transposeEPfii+0x56>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <_ZN2ei5numpy9transposeEPfii+0xd8>)
 8001548:	4926      	ldr	r1, [pc, #152]	; (80015e4 <_ZN2ei5numpy9transposeEPfii+0xdc>)
 800154a:	4827      	ldr	r0, [pc, #156]	; (80015e8 <_ZN2ei5numpy9transposeEPfii+0xe0>)
 800154c:	f019 fada 	bl	801ab04 <iprintf>
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <_ZN2ei5numpy9transposeEPfii+0xe4>)
 8001552:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <_ZN2ei5numpy9transposeEPfii+0xe8>)
 8001554:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001558:	4826      	ldr	r0, [pc, #152]	; (80015f4 <_ZN2ei5numpy9transposeEPfii+0xec>)
 800155a:	f018 fdfd 	bl	801a158 <__assert_func>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	da03      	bge.n	800156e <_ZN2ei5numpy9transposeEPfii+0x66>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	db01      	blt.n	8001572 <_ZN2ei5numpy9transposeEPfii+0x6a>
            return EIDSP_NARROWING;
 800156e:	4c22      	ldr	r4, [pc, #136]	; (80015f8 <_ZN2ei5numpy9transposeEPfii+0xf0>)
 8001570:	e02c      	b.n	80015cc <_ZN2ei5numpy9transposeEPfii+0xc4>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	b29b      	uxth	r3, r3
 8001576:	83bb      	strh	r3, [r7, #28]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	b29b      	uxth	r3, r3
 800157c:	83fb      	strh	r3, [r7, #30]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	b29b      	uxth	r3, r3
 8001586:	82bb      	strh	r3, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	b29b      	uxth	r3, r3
 800158c:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001590:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001592:	f107 0214 	add.w	r2, r7, #20
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f009 f97b 	bl	800a898 <arm_mat_trans_f32>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 80015a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <_ZN2ei5numpy9transposeEPfii+0xae>
            return status;
 80015b0:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 80015b4:	e00a      	b.n	80015cc <_ZN2ei5numpy9transposeEPfii+0xc4>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 80015b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	461a      	mov	r2, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f018 fec5 	bl	801a354 <memcpy>

        return EIDSP_OK;
 80015ca:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fdab 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 80015d6:	4623      	mov	r3, r4
    }
 80015d8:	4618      	mov	r0, r3
 80015da:	373c      	adds	r7, #60	; 0x3c
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	0801b918 	.word	0x0801b918
 80015e4:	fffffc16 	.word	0xfffffc16
 80015e8:	0801b92c 	.word	0x0801b92c
 80015ec:	0801b93c 	.word	0x0801b93c
 80015f0:	0801ba58 	.word	0x0801ba58
 80015f4:	0801b974 	.word	0x0801b974
 80015f8:	fffffc0c 	.word	0xfffffc0c

080015fc <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>:
     * Return the Discrete Cosine Transform of arbitrary type sequence 2.
     * @param input Input array (of size N)
     * @param N number of items in input and output array
     * @returns EIDSP_OK if OK
     */
    static int dct2(float *input, size_t N, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	ed2d 8b02 	vpush	{d8}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	71fb      	strb	r3, [r7, #7]
        if (N == 0) {
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x1c>
            return EIDSP_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e06f      	b.n	80016f8 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfc>
        }

        int ret = ei::dct::transform(input, N);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f00c f834 	bl	800d688 <_ZN2ei3dct9transformEPfj>
 8001620:	6178      	str	r0, [r7, #20]
        if (ret != EIDSP_OK) {
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x44>
            EIDSP_ERR(ret);
 8001628:	4a36      	ldr	r2, [pc, #216]	; (8001704 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x108>)
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	4836      	ldr	r0, [pc, #216]	; (8001708 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x10c>)
 800162e:	f019 fa69 	bl	801ab04 <iprintf>
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x110>)
 8001634:	4a36      	ldr	r2, [pc, #216]	; (8001710 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x114>)
 8001636:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800163a:	4836      	ldr	r0, [pc, #216]	; (8001714 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x118>)
 800163c:	f018 fd8c 	bl	801a158 <__assert_func>
        }

        // for some reason the output is 2x too low...
        for (size_t ix = 0; ix < N; ix++) {
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d211      	bcs.n	8001670 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x74>
            input[ix] *= 2;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001664:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < N; ix++) {
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3301      	adds	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e7e9      	b.n	8001644 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x48>
        }

        if (normalization == DCT_NORMALIZATION_ORTHO) {
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d13f      	bne.n	80016f6 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfa>
            input[0] = input[0] * sqrt(1.0f / static_cast<float>(4 * N));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	ed93 8a00 	vldr	s16, [r3]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800168c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	f7ff fdd7 	bl	8001246 <_ZSt4sqrtf>
 8001698:	eef0 7a40 	vmov.f32	s15, s0
 800169c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d221      	bcs.n	80016f6 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfa>
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	ed93 8a00 	vldr	s16, [r3]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d2:	eeb0 0a47 	vmov.f32	s0, s14
 80016d6:	f7ff fdb6 	bl	8001246 <_ZSt4sqrtf>
 80016da:	eef0 7a40 	vmov.f32	s15, s0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016ea:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	e7d9      	b.n	80016aa <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xae>
            }
        }

        return EIDSP_OK;
 80016f6:	2300      	movs	r3, #0
    }
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	ecbd 8b02 	vpop	{d8}
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0801ba8c 	.word	0x0801ba8c
 8001708:	0801b92c 	.word	0x0801b92c
 800170c:	0801b93c 	.word	0x0801b93c
 8001710:	0801ba90 	.word	0x0801ba90
 8001714:	0801b974 	.word	0x0801b974

08001718 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>:
    /**
     * Discrete Cosine Transform of arbitrary type sequence 2 on a matrix.
     * @param matrix
     * @returns EIDSP_OK if OK
     */
    static int dct2(matrix_t *matrix, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	429a      	cmp	r2, r3
 8001730:	d218      	bcs.n	8001764 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4c>
            int r = dct2(matrix->buffer + (row * matrix->cols), matrix->cols, normalization);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	18d0      	adds	r0, r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff ff56 	bl	80015fc <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>
 8001750:	60b8      	str	r0, [r7, #8]
            if (r != EIDSP_OK) {
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x44>
                return r;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	e004      	b.n	8001766 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4e>
        for (size_t row = 0; row < matrix->rows; row++) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e7e1      	b.n	8001728 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x10>
            }
        }

        return EIDSP_OK;
 8001764:	2300      	movs	r3, #0
    }
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <_ZN2ei5numpy17quantize_zero_oneEf>:

    /**
     * Quantize a float value between zero and one
     * @param value Float value
     */
    static uint8_t quantize_zero_one(float value) {
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
        const size_t length = sizeof(quantized_values_one_zero) / sizeof(float);
 800177a:	23e7      	movs	r3, #231	; 0xe7
 800177c:	613b      	str	r3, [r7, #16]

        // look in the table
        for (size_t ix = 0; ix < length; ix++) {
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2be6      	cmp	r3, #230	; 0xe6
 8001786:	d813      	bhi.n	80017b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x40>
            if (quantized_values_one_zero[ix] == value) return ix;
 8001788:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ed97 7a01 	vldr	s14, [r7, #4]
 8001798:	eeb4 7a67 	vcmp.f32	s14, s15
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d102      	bne.n	80017a8 <_ZN2ei5numpy17quantize_zero_oneEf+0x38>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e083      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        for (size_t ix = 0; ix < length; ix++) {
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	3301      	adds	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e7e8      	b.n	8001782 <_ZN2ei5numpy17quantize_zero_oneEf+0x12>
        }

        // no match?

        if (value < quantized_values_one_zero[0]) {
 80017b0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80018c0 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	d508      	bpl.n	80017d4 <_ZN2ei5numpy17quantize_zero_oneEf+0x64>
            return quantized_values_one_zero[0];
 80017c2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80018c0 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 80017c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ca:	edc7 7a00 	vstr	s15, [r7]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	e06d      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }
        if (value > quantized_values_one_zero[length - 1]) {
 80017d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	dd08      	ble.n	80017f8 <_ZN2ei5numpy17quantize_zero_oneEf+0x88>
            return quantized_values_one_zero[length - 1];
 80017e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	edc7 7a00 	vstr	s15, [r7]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e05b      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }

        int lo = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
        int hi = length - 1;
 80017fc:	23e6      	movs	r3, #230	; 0xe6
 80017fe:	617b      	str	r3, [r7, #20]

        while (lo <= hi) {
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	dc35      	bgt.n	8001874 <_ZN2ei5numpy17quantize_zero_oneEf+0x104>
            int mid = (hi + lo) / 2;
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4413      	add	r3, r2
 800180e:	0fda      	lsrs	r2, r3, #31
 8001810:	4413      	add	r3, r2
 8001812:	105b      	asrs	r3, r3, #1
 8001814:	60fb      	str	r3, [r7, #12]

            if (value < quantized_values_one_zero[mid]) {
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ed97 7a01 	vldr	s14, [r7, #4]
 8001826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	d503      	bpl.n	8001838 <_ZN2ei5numpy17quantize_zero_oneEf+0xc8>
                hi = mid - 1;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3b01      	subs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e7e3      	b.n	8001800 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else if (value > quantized_values_one_zero[mid]) {
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed97 7a01 	vldr	s14, [r7, #4]
 8001848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	dd03      	ble.n	800185a <_ZN2ei5numpy17quantize_zero_oneEf+0xea>
                lo = mid + 1;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	e7d2      	b.n	8001800 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else {
                return quantized_values_one_zero[mid];
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186a:	edc7 7a00 	vstr	s15, [r7]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e01d      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
            }
        }

        // lo == hi + 1
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	ed93 7a00 	vldr	s14, [r3]
 8001880:	edd7 7a01 	vldr	s15, [r7, #4]
 8001884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	edd7 6a01 	vldr	s13, [r7, #4]
 8001898:	ee76 7ae7 	vsub.f32	s15, s13, s15
            lo :
            hi;
 800189c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d502      	bpl.n	80018ac <_ZN2ei5numpy17quantize_zero_oneEf+0x13c>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e001      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	b2db      	uxtb	r3, r3
    }
 80018b0:	4618      	mov	r0, r3
 80018b2:	3724      	adds	r7, #36	; 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	0801e2bc 	.word	0x0801e2bc
 80018c0:	00000000 	.word	0x00000000

080018c4 <_ZN2ei5numpy19dequantize_zero_oneEh>:

    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
        if (value > 247) value = 247;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2bf7      	cmp	r3, #247	; 0xf7
 80018d2:	d901      	bls.n	80018d8 <_ZN2ei5numpy19dequantize_zero_oneEh+0x14>
 80018d4:	23f7      	movs	r3, #247	; 0xf7
 80018d6:	71fb      	strb	r3, [r7, #7]
        return quantized_values_one_zero[value];
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <_ZN2ei5numpy19dequantize_zero_oneEh+0x30>)
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	ee07 3a90 	vmov	s15, r3
    }
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	0801e2bc 	.word	0x0801e2bc

080018f8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
     * @param output Output matrix of size (M+pad_before+pad_after x N)
     * @param pad_before Number of items to pad before
     * @param pad_after Number of items to pad after
     * @returns 0 if OK
     */
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	460b      	mov	r3, r1
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	4613      	mov	r3, r2
 800190c:	80bb      	strh	r3, [r7, #4]
        if (output->cols != input->cols) {
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	d00b      	beq.n	8001932 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800191a:	4a75      	ldr	r2, [pc, #468]	; (8001af0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1f8>)
 800191c:	4975      	ldr	r1, [pc, #468]	; (8001af4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1fc>)
 800191e:	4876      	ldr	r0, [pc, #472]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 8001920:	f019 f8f0 	bl	801ab04 <iprintf>
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001926:	4a76      	ldr	r2, [pc, #472]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001928:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800192c:	4875      	ldr	r0, [pc, #468]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800192e:	f018 fc13 	bl	801a158 <__assert_func>
        }

        if (output->rows != input->rows + pad_before + pad_after) {
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4419      	add	r1, r3
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	440b      	add	r3, r1
 8001942:	429a      	cmp	r2, r3
 8001944:	d00b      	beq.n	800195e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x66>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001946:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1f8>)
 8001948:	496a      	ldr	r1, [pc, #424]	; (8001af4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1fc>)
 800194a:	486b      	ldr	r0, [pc, #428]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 800194c:	f019 f8da 	bl	801ab04 <iprintf>
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001952:	4a6b      	ldr	r2, [pc, #428]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001954:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8001958:	486a      	ldr	r0, [pc, #424]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800195a:	f018 fbfd 	bl	801a158 <__assert_func>
        }

        if (input->rows == 0) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10b      	bne.n	800197e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x86>
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 8001966:	4a68      	ldr	r2, [pc, #416]	; (8001b08 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x210>)
 8001968:	4968      	ldr	r1, [pc, #416]	; (8001b0c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x214>)
 800196a:	4863      	ldr	r0, [pc, #396]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 800196c:	f019 f8ca 	bl	801ab04 <iprintf>
 8001970:	4b62      	ldr	r3, [pc, #392]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001972:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001974:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001978:	4862      	ldr	r0, [pc, #392]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800197a:	f018 fbed 	bl	801a158 <__assert_func>
        }

        uint32_t pad_before_index = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
        bool pad_before_direction_up = true;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	3b01      	subs	r3, #1
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db42      	blt.n	8001a1a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x122>
            memcpy(output->buffer + (input->cols * ix),
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	69f9      	ldr	r1, [r7, #28]
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_before_index * input->cols),
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * ix),
 80019be:	461a      	mov	r2, r3
 80019c0:	f018 fcc8 	bl	801a354 <memcpy>

            if (pad_before_index == 0 && !pad_before_direction_up) {
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe8>
 80019ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ce:	f083 0301 	eor.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe8>
                pad_before_direction_up = true;
 80019d8:	2301      	movs	r3, #1
 80019da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019de:	e018      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>
 80019ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>
                pad_before_direction_up = false;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019fa:	e00a      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else if (pad_before_direction_up) {
 80019fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x114>
                pad_before_index++;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	3301      	adds	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	e002      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else {
                pad_before_index--;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	e7b9      	b.n	800198e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x96>
            }
        }

        memcpy(output->buffer + (input->cols * pad_before),
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	88f9      	ldrh	r1, [r7, #6]
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	18d0      	adds	r0, r2, r3
            input->buffer,
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6819      	ldr	r1, [r3, #0]
            input->rows * input->cols * sizeof(float));
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	6892      	ldr	r2, [r2, #8]
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	009b      	lsls	r3, r3, #2
        memcpy(output->buffer + (input->cols * pad_before),
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f018 fc88 	bl	801a354 <memcpy>

        int32_t pad_after_index = input->rows - 1;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
        bool pad_after_direction_up = false;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]

        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	da43      	bge.n	8001ae4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1ec>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	88f8      	ldrh	r0, [r7, #6]
 8001a66:	6939      	ldr	r1, [r7, #16]
 8001a68:	4401      	add	r1, r0
 8001a6a:	4608      	mov	r0, r1
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	6849      	ldr	r1, [r1, #4]
 8001a70:	4401      	add	r1, r0
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_after_index * input->cols),
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001a92:	461a      	mov	r2, r3
 8001a94:	f018 fc5e 	bl	801a354 <memcpy>

            if (pad_after_index == 0 && !pad_after_direction_up) {
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b8>
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b8>
                pad_after_direction_up = true;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
 8001aae:	e015      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d105      	bne.n	8001ac8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1d0>
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1d0>
                pad_after_direction_up = false;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
 8001ac6:	e009      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else if (pad_after_direction_up) {
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1de>
                pad_after_index++;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	e002      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else {
                pad_after_index--;
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	e7b7      	b.n	8001a54 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x15c>
            }
        }

        return EIDSP_OK;
 8001ae4:	2300      	movs	r3, #0
    }
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	0801b9dc 	.word	0x0801b9dc
 8001af4:	fffffc14 	.word	0xfffffc14
 8001af8:	0801b92c 	.word	0x0801b92c
 8001afc:	0801b93c 	.word	0x0801b93c
 8001b00:	0801bad8 	.word	0x0801bad8
 8001b04:	0801b974 	.word	0x0801b974
 8001b08:	0801bb34 	.word	0x0801bb34
 8001b0c:	fffffc12 	.word	0xfffffc12

08001b10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001b1c:	edd7 7a00 	vldr	s15, [r7]
 8001b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b24:	eef4 7a47 	vcmp.f32	s15, s14
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	d101      	bne.n	8001b32 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e033      	b.n	8001b9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d204      	bcs.n	8001b46 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d301      	bcc.n	8001b4a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001b48:	e027      	b.n	8001b9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	82bb      	strh	r3, [r7, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	82fb      	strh	r3, [r7, #22]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	81bb      	strh	r3, [r7, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	81fb      	strh	r3, [r7, #14]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001b76:	f107 020c 	add.w	r2, r7, #12
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4611      	mov	r1, r2
 8001b80:	ed97 0a00 	vldr	s0, [r7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f008 fe51 	bl	800a82c <arm_mat_scale_f32>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	e000      	b.n	8001b9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001b98:	2300      	movs	r3, #0
    }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	fffffc0c 	.word	0xfffffc0c

08001ba8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6892      	ldr	r2, [r2, #8]
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d215      	bcs.n	8001bf6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	ed93 7a00 	vldr	s14, [r3]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	edd7 7a00 	vldr	s15, [r7]
 8001be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bea:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e7e0      	b.n	8001bb8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001bf6:	2300      	movs	r3, #0
    }
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>:
     * Calculate the mean over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int mean_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
        if (input_matrix->cols != output_matrix->rows) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d00b      	beq.n	8001c32 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c1a:	4a34      	ldr	r2, [pc, #208]	; (8001cec <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xe8>)
 8001c1c:	4934      	ldr	r1, [pc, #208]	; (8001cf0 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xec>)
 8001c1e:	4835      	ldr	r0, [pc, #212]	; (8001cf4 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001c20:	f018 ff70 	bl	801ab04 <iprintf>
 8001c24:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001c26:	4a35      	ldr	r2, [pc, #212]	; (8001cfc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001c28:	f240 21eb 	movw	r1, #747	; 0x2eb
 8001c2c:	4834      	ldr	r0, [pc, #208]	; (8001d00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001c2e:	f018 fa93 	bl	801a158 <__assert_func>
        }

        if (output_matrix->cols != 1) {
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d00b      	beq.n	8001c52 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x4e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	; (8001cec <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xe8>)
 8001c3c:	492c      	ldr	r1, [pc, #176]	; (8001cf0 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xec>)
 8001c3e:	482d      	ldr	r0, [pc, #180]	; (8001cf4 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001c40:	f018 ff60 	bl	801ab04 <iprintf>
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001c46:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001c48:	f240 21ef 	movw	r1, #751	; 0x2ef
 8001c4c:	482c      	ldr	r0, [pc, #176]	; (8001d00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001c4e:	f018 fa83 	bl	801a158 <__assert_func>
        }

        int ret = transpose(input_matrix);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fc32 	bl	80014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8001c58:	6138      	str	r0, [r7, #16]
        if (ret != EIDSP_OK) {
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00b      	beq.n	8001c78 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x74>
            EIDSP_ERR(ret);
 8001c60:	4a28      	ldr	r2, [pc, #160]	; (8001d04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x100>)
 8001c62:	6939      	ldr	r1, [r7, #16]
 8001c64:	4823      	ldr	r0, [pc, #140]	; (8001cf4 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001c66:	f018 ff4d 	bl	801ab04 <iprintf>
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001c6c:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001c6e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8001c72:	4823      	ldr	r0, [pc, #140]	; (8001d00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001c74:	f018 fa70 	bl	801a158 <__assert_func>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d21a      	bcs.n	8001cbc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb8>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	6979      	ldr	r1, [r7, #20]
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	18d0      	adds	r0, r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f107 020c 	add.w	r2, r7, #12
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f008 fe72 	bl	800a98a <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e7df      	b.n	8001c7c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x78>
            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        // retranspose
        ret = transpose(input_matrix);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fbfd 	bl	80014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8001cc2:	6138      	str	r0, [r7, #16]
        if (ret != EIDSP_OK) {
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xde>
            EIDSP_ERR(ret);
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x100>)
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	4809      	ldr	r0, [pc, #36]	; (8001cf4 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001cd0:	f018 ff18 	bl	801ab04 <iprintf>
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001cd8:	f240 310b 	movw	r1, #779	; 0x30b
 8001cdc:	4808      	ldr	r0, [pc, #32]	; (8001d00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001cde:	f018 fa3b 	bl	801a158 <__assert_func>
        }

        return EIDSP_OK;
 8001ce2:	2300      	movs	r3, #0
    }
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	0801b9dc 	.word	0x0801b9dc
 8001cf0:	fffffc14 	.word	0xfffffc14
 8001cf4:	0801b92c 	.word	0x0801b92c
 8001cf8:	0801b93c 	.word	0x0801b93c
 8001cfc:	0801bc04 	.word	0x0801bc04
 8001d00:	0801b974 	.word	0x0801b974
 8001d04:	0801ba8c 	.word	0x0801ba8c

08001d08 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>:
     * Calculate the standard deviation over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int std_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
#if EIDSP_USE_CMSIS_DSP
        return std_axis0_CMSIS(input_matrix, output_matrix);
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fed3 	bl	8002ac0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
 8001d1a:	4603      	mov	r3, r0
            EIDSP_ERR(ret);
        }

        return EIDSP_OK;
#endif
    }
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d00b      	beq.n	8001d52 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d3a:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xa0>)
 8001d3c:	4922      	ldr	r1, [pc, #136]	; (8001dc8 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xa4>)
 8001d3e:	4823      	ldr	r0, [pc, #140]	; (8001dcc <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xa8>)
 8001d40:	f018 fee0 	bl	801ab04 <iprintf>
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xac>)
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xb0>)
 8001d48:	f44f 7153 	mov.w	r1, #844	; 0x34c
 8001d4c:	4822      	ldr	r0, [pc, #136]	; (8001dd8 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xb4>)
 8001d4e:	f018 fa03 	bl	801a158 <__assert_func>
        }
        if (output_matrix->cols != 1) {
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d00b      	beq.n	8001d72 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x4e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xa0>)
 8001d5c:	491a      	ldr	r1, [pc, #104]	; (8001dc8 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xa4>)
 8001d5e:	481b      	ldr	r0, [pc, #108]	; (8001dcc <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xa8>)
 8001d60:	f018 fed0 	bl	801ab04 <iprintf>
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xac>)
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xb0>)
 8001d68:	f240 314f 	movw	r1, #847	; 0x34f
 8001d6c:	481a      	ldr	r0, [pc, #104]	; (8001dd8 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0xb4>)
 8001d6e:	f018 f9f3 	bl	801a158 <__assert_func>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d21b      	bcs.n	8001db8 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x94>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	6979      	ldr	r1, [r7, #20]
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	18d0      	adds	r0, r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	f107 0210 	add.w	r2, r7, #16
 8001d9e:	f008 fe23 	bl	800a9e8 <arm_min_f32>
            output_matrix->buffer[row] = min;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e7de      	b.n	8001d76 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x52>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001db8:	2300      	movs	r3, #0
    }
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	0801b9dc 	.word	0x0801b9dc
 8001dc8:	fffffc14 	.word	0xfffffc14
 8001dcc:	0801b92c 	.word	0x0801b92c
 8001dd0:	0801b93c 	.word	0x0801b93c
 8001dd4:	0801bc44 	.word	0x0801bc44
 8001dd8:	0801b974 	.word	0x0801b974

08001ddc <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00b      	beq.n	8001e0a <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001df2:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xa0>)
 8001df4:	4922      	ldr	r1, [pc, #136]	; (8001e80 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xa4>)
 8001df6:	4823      	ldr	r0, [pc, #140]	; (8001e84 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xa8>)
 8001df8:	f018 fe84 	bl	801ab04 <iprintf>
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xac>)
 8001dfe:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xb0>)
 8001e00:	f44f 715c 	mov.w	r1, #880	; 0x370
 8001e04:	4822      	ldr	r0, [pc, #136]	; (8001e90 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xb4>)
 8001e06:	f018 f9a7 	bl	801a158 <__assert_func>
        }
        if (output_matrix->cols != 1) {
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d00b      	beq.n	8001e2a <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x4e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e12:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xa0>)
 8001e14:	491a      	ldr	r1, [pc, #104]	; (8001e80 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xa4>)
 8001e16:	481b      	ldr	r0, [pc, #108]	; (8001e84 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xa8>)
 8001e18:	f018 fe74 	bl	801ab04 <iprintf>
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xac>)
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xb0>)
 8001e20:	f240 3173 	movw	r1, #883	; 0x373
 8001e24:	481a      	ldr	r0, [pc, #104]	; (8001e90 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0xb4>)
 8001e26:	f018 f997 	bl	801a158 <__assert_func>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d21b      	bcs.n	8001e70 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x94>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	6979      	ldr	r1, [r7, #20]
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	18d0      	adds	r0, r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	f107 0210 	add.w	r2, r7, #16
 8001e56:	f008 fd60 	bl	800a91a <arm_max_f32>
            output_matrix->buffer[row] = max;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e7de      	b.n	8001e2e <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x52>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 8001e70:	2300      	movs	r3, #0
    }
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	0801b9dc 	.word	0x0801b9dc
 8001e80:	fffffc14 	.word	0xfffffc14
 8001e84:	0801b92c 	.word	0x0801b92c
 8001e88:	0801b93c 	.word	0x0801b93c
 8001e8c:	0801bc7c 	.word	0x0801bc7c
 8001e90:	0801b974 	.word	0x0801b974

08001e94 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b098      	sub	sp, #96	; 0x60
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d00b      	beq.n	8001eca <_ZN2ei5numpy4rfftEPKfjPfjj+0x36>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001eb2:	4a88      	ldr	r2, [pc, #544]	; (80020d4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x240>)
 8001eb4:	4988      	ldr	r1, [pc, #544]	; (80020d8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x244>)
 8001eb6:	4889      	ldr	r0, [pc, #548]	; (80020dc <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001eb8:	f018 fe24 	bl	801ab04 <iprintf>
 8001ebc:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001ebe:	4a89      	ldr	r2, [pc, #548]	; (80020e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001ec0:	f240 4145 	movw	r1, #1093	; 0x445
 8001ec4:	4888      	ldr	r0, [pc, #544]	; (80020e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001ec6:	f018 f947 	bl	801a158 <__assert_func>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d901      	bls.n	8001ed6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x42>
            src_size = n_fft;
 8001ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed4:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001ed6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001eda:	2300      	movs	r3, #0
 8001edc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ede:	2101      	movs	r1, #1
 8001ee0:	f7ff f8f8 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8001ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10b      	bne.n	8001f02 <_ZN2ei5numpy4rfftEPKfjPfjj+0x6e>
 8001eea:	4a80      	ldr	r2, [pc, #512]	; (80020ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001eec:	4980      	ldr	r1, [pc, #512]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001eee:	487b      	ldr	r0, [pc, #492]	; (80020dc <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001ef0:	f018 fe08 	bl	801ab04 <iprintf>
 8001ef4:	4b7a      	ldr	r3, [pc, #488]	; (80020e0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001ef6:	4a7b      	ldr	r2, [pc, #492]	; (80020e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001ef8:	f240 414e 	movw	r1, #1102	; 0x44e
 8001efc:	487a      	ldr	r0, [pc, #488]	; (80020e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001efe:	f018 f92b 	bl	801a158 <__assert_func>
        if (!fft_input.buffer) {
 8001f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10b      	bne.n	8001f20 <_ZN2ei5numpy4rfftEPKfjPfjj+0x8c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f08:	4a78      	ldr	r2, [pc, #480]	; (80020ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001f0a:	4979      	ldr	r1, [pc, #484]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001f0c:	4873      	ldr	r0, [pc, #460]	; (80020dc <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001f0e:	f018 fdf9 	bl	801ab04 <iprintf>
 8001f12:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001f14:	4a73      	ldr	r2, [pc, #460]	; (80020e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001f16:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001f1a:	4873      	ldr	r0, [pc, #460]	; (80020e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001f1c:	f018 f91c 	bl	801a158 <__assert_func>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001f20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	f018 fa13 	bl	801a354 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001f2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	18d0      	adds	r0, r2, r3
 8001f36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2100      	movs	r1, #0
 8001f42:	f018 fa2f 	bl	801a3a4 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d030      	beq.n	8001fae <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f4e:	2b40      	cmp	r3, #64	; 0x40
 8001f50:	d02d      	beq.n	8001fae <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d02a      	beq.n	8001fae <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f5e:	d026      	beq.n	8001fae <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001f60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f66:	d022      	beq.n	8001fae <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d01e      	beq.n	8001fae <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f76:	d01a      	beq.n	8001fae <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7e:	d016      	beq.n	8001fae <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f000 fbd0 	bl	800272c <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001f8c:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8093 	beq.w	80020bc <_ZN2ei5numpy4rfftEPKfjPfjj+0x228>
                EIDSP_ERR(ret);
 8001f96:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x260>)
 8001f98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f9a:	4850      	ldr	r0, [pc, #320]	; (80020dc <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001f9c:	f018 fdb2 	bl	801ab04 <iprintf>
 8001fa0:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001fa2:	4a50      	ldr	r2, [pc, #320]	; (80020e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001fa4:	f240 415d 	movw	r1, #1117	; 0x45d
 8001fa8:	484f      	ldr	r0, [pc, #316]	; (80020e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001faa:	f018 f8d5 	bl	801a158 <__assert_func>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 8001fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00b fad9 	bl	800d570 <arm_rfft_fast_init_f32>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (status != ARM_MATH_SUCCESS) {
 8001fc4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x13e>
                return status;
 8001fcc:	f997 404f 	ldrsb.w	r4, [r7, #79]	; 0x4f
 8001fd0:	e076      	b.n	80020c0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x22c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001fd2:	f107 0014 	add.w	r0, r7, #20
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001fda:	2101      	movs	r1, #1
 8001fdc:	f7ff f87a 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <_ZN2ei5numpy4rfftEPKfjPfjj+0x16a>
 8001fe6:	4a41      	ldr	r2, [pc, #260]	; (80020ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001fe8:	4941      	ldr	r1, [pc, #260]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001fea:	483c      	ldr	r0, [pc, #240]	; (80020dc <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001fec:	f018 fd8a 	bl	801ab04 <iprintf>
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001ff2:	4a3c      	ldr	r2, [pc, #240]	; (80020e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001ff4:	f44f 618d 	mov.w	r1, #1128	; 0x468
 8001ff8:	483b      	ldr	r0, [pc, #236]	; (80020e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001ffa:	f018 f8ad 	bl	801a158 <__assert_func>
            if (!fft_output.buffer) {
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <_ZN2ei5numpy4rfftEPKfjPfjj+0x188>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002004:	4a39      	ldr	r2, [pc, #228]	; (80020ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8002006:	493a      	ldr	r1, [pc, #232]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8002008:	4834      	ldr	r0, [pc, #208]	; (80020dc <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 800200a:	f018 fd7b 	bl	801ab04 <iprintf>
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8002010:	4a34      	ldr	r2, [pc, #208]	; (80020e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8002012:	f240 416a 	movw	r1, #1130	; 0x46a
 8002016:	4834      	ldr	r0, [pc, #208]	; (80020e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8002018:	f018 f89e 	bl	801a158 <__assert_func>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 800201c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002024:	2300      	movs	r3, #0
 8002026:	f00b f943 	bl	800d2b0 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002036:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800203a:	3b01      	subs	r3, #1
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	440b      	add	r3, r1
 8002042:	6852      	ldr	r2, [r2, #4]
 8002044:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8002046:	2302      	movs	r3, #2
 8002048:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800204a:	2301      	movs	r3, #1
 800204c:	65bb      	str	r3, [r7, #88]	; 0x58
 800204e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002050:	3b01      	subs	r3, #1
 8002052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002054:	429a      	cmp	r2, r3
 8002056:	d22b      	bcs.n	80020b0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x21c>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	f107 0210 	add.w	r2, r7, #16
 8002064:	2102      	movs	r1, #2
 8002066:	4618      	mov	r0, r3
 8002068:	f008 fcf6 	bl	800aa58 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa8a 	bl	8000588 <__aeabi_f2d>
 8002074:	4604      	mov	r4, r0
 8002076:	460d      	mov	r5, r1
 8002078:	2002      	movs	r0, #2
 800207a:	f003 ffa2 	bl	8005fc2 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800207e:	ec53 2b10 	vmov	r2, r3, d0
 8002082:	4620      	mov	r0, r4
 8002084:	4629      	mov	r1, r5
 8002086:	f7fe fad7 	bl	8000638 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	18d4      	adds	r4, r2, r3
 800209a:	f7fe fdc5 	bl	8000c28 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	6023      	str	r3, [r4, #0]

                fft_output_buffer_ix += 2;
 80020a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a4:	3302      	adds	r3, #2
 80020a6:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80020a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020aa:	3301      	adds	r3, #1
 80020ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80020ae:	e7ce      	b.n	800204e <_ZN2ei5numpy4rfftEPKfjPfjj+0x1ba>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff f839 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 80020ba:	e000      	b.n	80020be <_ZN2ei5numpy4rfftEPKfjPfjj+0x22a>
            }
 80020bc:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80020be:	2400      	movs	r4, #0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 80020c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f831 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 80020ca:	4623      	mov	r3, r4
    }
 80020cc:	4618      	mov	r0, r3
 80020ce:	3760      	adds	r7, #96	; 0x60
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bdb0      	pop	{r4, r5, r7, pc}
 80020d4:	0801bd6c 	.word	0x0801bd6c
 80020d8:	fffffc11 	.word	0xfffffc11
 80020dc:	0801b92c 	.word	0x0801b92c
 80020e0:	0801b93c 	.word	0x0801b93c
 80020e4:	0801bd88 	.word	0x0801bd88
 80020e8:	0801b974 	.word	0x0801b974
 80020ec:	0801b918 	.word	0x0801b918
 80020f0:	fffffc16 	.word	0xfffffc16
 80020f4:	0801ba8c 	.word	0x0801ba8c

080020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b099      	sub	sp, #100	; 0x64
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	3301      	adds	r3, #1
 800210c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002112:	429a      	cmp	r2, r3
 8002114:	d00b      	beq.n	800212e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x36>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002116:	4a8d      	ldr	r2, [pc, #564]	; (800234c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x254>)
 8002118:	498d      	ldr	r1, [pc, #564]	; (8002350 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x258>)
 800211a:	488e      	ldr	r0, [pc, #568]	; (8002354 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 800211c:	f018 fcf2 	bl	801ab04 <iprintf>
 8002120:	4b8d      	ldr	r3, [pc, #564]	; (8002358 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8002122:	4a8e      	ldr	r2, [pc, #568]	; (800235c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8002124:	f240 4192 	movw	r1, #1170	; 0x492
 8002128:	488d      	ldr	r0, [pc, #564]	; (8002360 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 800212a:	f018 f815 	bl	801a158 <__assert_func>
        }

        // truncate if needed
        if (src_size > n_fft) {
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002132:	429a      	cmp	r2, r3
 8002134:	d901      	bls.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x42>
            src_size = n_fft;
 8002136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002138:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 800213a:	2300      	movs	r3, #0
 800213c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002142:	429a      	cmp	r2, r3
 8002144:	d101      	bne.n	800214a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x52>
            fft_input_buffer = (float*)src;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800214a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800214e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002150:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002152:	2101      	movs	r1, #1
 8002154:	f7fe ffbe 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8002158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10b      	bne.n	8002176 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x7e>
 800215e:	4a81      	ldr	r2, [pc, #516]	; (8002364 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8002160:	4981      	ldr	r1, [pc, #516]	; (8002368 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8002162:	487c      	ldr	r0, [pc, #496]	; (8002354 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002164:	f018 fcce 	bl	801ab04 <iprintf>
 8002168:	4b7b      	ldr	r3, [pc, #492]	; (8002358 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 800216a:	4a7c      	ldr	r2, [pc, #496]	; (800235c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 800216c:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 8002170:	487b      	ldr	r0, [pc, #492]	; (8002360 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8002172:	f017 fff1 	bl	801a158 <__assert_func>
        if (!fft_input.buffer) {
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x9c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800217c:	4a79      	ldr	r2, [pc, #484]	; (8002364 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 800217e:	497a      	ldr	r1, [pc, #488]	; (8002368 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8002180:	4874      	ldr	r0, [pc, #464]	; (8002354 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002182:	f018 fcbf 	bl	801ab04 <iprintf>
 8002186:	4b74      	ldr	r3, [pc, #464]	; (8002358 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8002188:	4a74      	ldr	r2, [pc, #464]	; (800235c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 800218a:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800218e:	4874      	ldr	r0, [pc, #464]	; (8002360 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8002190:	f017 ffe2 	bl	801a158 <__assert_func>
        }

        if (!fft_input_buffer) {
 8002194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d112      	bne.n	80021c0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xc8>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 800219a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	461a      	mov	r2, r3
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	f018 f8d6 	bl	801a354 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 80021a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	18d0      	adds	r0, r2, r3
 80021b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	2100      	movs	r1, #0
 80021bc:	f018 f8f2 	bl	801a3a4 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80021c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d030      	beq.n	8002228 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 80021c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d02d      	beq.n	8002228 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 80021cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ce:	2b80      	cmp	r3, #128	; 0x80
 80021d0:	d02a      	beq.n	8002228 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 80021d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d8:	d026      	beq.n	8002228 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 80021da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e0:	d022      	beq.n	8002228 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80021e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e8:	d01e      	beq.n	8002228 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 80021ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f0:	d01a      	beq.n	8002228 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 80021f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f8:	d016      	beq.n	8002228 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80021fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	f000 fb25 	bl	8002850 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8002206:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8002208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8091 	beq.w	8002332 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23a>
                EIDSP_ERR(ret);
 8002210:	4a56      	ldr	r2, [pc, #344]	; (800236c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x274>)
 8002212:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002214:	484f      	ldr	r0, [pc, #316]	; (8002354 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002216:	f018 fc75 	bl	801ab04 <iprintf>
 800221a:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 800221c:	4a4f      	ldr	r2, [pc, #316]	; (800235c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 800221e:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8002222:	484f      	ldr	r0, [pc, #316]	; (8002360 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8002224:	f017 ff98 	bl	801a158 <__assert_func>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 8002228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800222a:	b29a      	uxth	r2, r3
 800222c:	f107 0320 	add.w	r3, r7, #32
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f00b f99c 	bl	800d570 <arm_rfft_fast_init_f32>
 8002238:	4603      	mov	r3, r0
 800223a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if (status != ARM_MATH_SUCCESS) {
 800223e:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x154>
                return status;
 8002246:	f997 404b 	ldrsb.w	r4, [r7, #75]	; 0x4b
 800224a:	e074      	b.n	8002336 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23e>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800224c:	f107 0010 	add.w	r0, r7, #16
 8002250:	2300      	movs	r3, #0
 8002252:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002254:	2101      	movs	r1, #1
 8002256:	f7fe ff3d 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x180>
 8002260:	4a40      	ldr	r2, [pc, #256]	; (8002364 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8002262:	4941      	ldr	r1, [pc, #260]	; (8002368 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8002264:	483b      	ldr	r0, [pc, #236]	; (8002354 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002266:	f018 fc4d 	bl	801ab04 <iprintf>
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 800226c:	4a3b      	ldr	r2, [pc, #236]	; (800235c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 800226e:	f240 41bc 	movw	r1, #1212	; 0x4bc
 8002272:	483b      	ldr	r0, [pc, #236]	; (8002360 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8002274:	f017 ff70 	bl	801a158 <__assert_func>
            if (!fft_output.buffer) {
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10b      	bne.n	8002296 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x19e>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800227e:	4a39      	ldr	r2, [pc, #228]	; (8002364 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8002280:	4939      	ldr	r1, [pc, #228]	; (8002368 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8002282:	4834      	ldr	r0, [pc, #208]	; (8002354 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002284:	f018 fc3e 	bl	801ab04 <iprintf>
 8002288:	4b33      	ldr	r3, [pc, #204]	; (8002358 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 800228c:	f240 41be 	movw	r1, #1214	; 0x4be
 8002290:	4833      	ldr	r0, [pc, #204]	; (8002360 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8002292:	f017 ff61 	bl	801a158 <__assert_func>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	f107 0020 	add.w	r0, r7, #32
 800229e:	2300      	movs	r3, #0
 80022a0:	f00b f806 	bl	800d2b0 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80022bc:	3b01      	subs	r3, #1
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	440b      	add	r3, r1
 80022c4:	6852      	ldr	r2, [r2, #4]
 80022c6:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 80022c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80022ce:	3b01      	subs	r3, #1
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 80022dc:	2302      	movs	r3, #2
 80022de:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80022e0:	2301      	movs	r3, #1
 80022e2:	657b      	str	r3, [r7, #84]	; 0x54
 80022e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d21b      	bcs.n	8002326 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22e>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	441a      	add	r2, r3
 80022f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	440b      	add	r3, r1
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002306:	3301      	adds	r3, #1
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	441a      	add	r2, r3
 800230c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	440b      	add	r3, r1
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8002318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800231a:	3302      	adds	r3, #2
 800231c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800231e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002320:	3301      	adds	r3, #1
 8002322:	657b      	str	r3, [r7, #84]	; 0x54
 8002324:	e7de      	b.n	80022e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fefe 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 8002330:	e000      	b.n	8002334 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23c>
            }
 8002332:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002334:	2400      	movs	r4, #0
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8002336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fef6 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 8002340:	4623      	mov	r3, r4
    }
 8002342:	4618      	mov	r0, r3
 8002344:	3764      	adds	r7, #100	; 0x64
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	0801bd6c 	.word	0x0801bd6c
 8002350:	fffffc11 	.word	0xfffffc11
 8002354:	0801b92c 	.word	0x0801b92c
 8002358:	0801b93c 	.word	0x0801b93c
 800235c:	0801bdd4 	.word	0x0801bdd4
 8002360:	0801b974 	.word	0x0801b974
 8002364:	0801b918 	.word	0x0801b918
 8002368:	fffffc16 	.word	0xfffffc16
 800236c:	0801ba8c 	.word	0x0801ba8c

08002370 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	ed87 0a03 	vstr	s0, [r7, #12]
 800237a:	edc7 0a02 	vstr	s1, [r7, #8]
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <_ZN2ei5numpy8linspaceEffmPf+0x36>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800238e:	4a28      	ldr	r2, [pc, #160]	; (8002430 <_ZN2ei5numpy8linspaceEffmPf+0xc0>)
 8002390:	4928      	ldr	r1, [pc, #160]	; (8002434 <_ZN2ei5numpy8linspaceEffmPf+0xc4>)
 8002392:	4829      	ldr	r0, [pc, #164]	; (8002438 <_ZN2ei5numpy8linspaceEffmPf+0xc8>)
 8002394:	f018 fbb6 	bl	801ab04 <iprintf>
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <_ZN2ei5numpy8linspaceEffmPf+0xcc>)
 800239a:	4a29      	ldr	r2, [pc, #164]	; (8002440 <_ZN2ei5numpy8linspaceEffmPf+0xd0>)
 800239c:	f240 41eb 	movw	r1, #1259	; 0x4eb
 80023a0:	4828      	ldr	r0, [pc, #160]	; (8002444 <_ZN2ei5numpy8linspaceEffmPf+0xd4>)
 80023a2:	f017 fed9 	bl	801a158 <__assert_func>
        }

        if (number == 1) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d104      	bne.n	80023b6 <_ZN2ei5numpy8linspaceEffmPf+0x46>
            out[0] = start;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e037      	b.n	8002426 <_ZN2ei5numpy8linspaceEffmPf+0xb6>
        }

        // step size
        float step = (stop - start) / (number - 1);
 80023b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80023ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80023be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d2:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3b01      	subs	r3, #1
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d216      	bcs.n	8002412 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
            out[ix] = start + ix * step;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80023f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002406:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	e7e3      	b.n	80023da <_ZN2ei5numpy8linspaceEffmPf+0x6a>
        }

        // last entry always stop
        out[number - 1] = stop;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002418:	3b01      	subs	r3, #1
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8002424:	2300      	movs	r3, #0
    }
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	0801be2c 	.word	0x0801be2c
 8002434:	fffffc10 	.word	0xfffffc10
 8002438:	0801b92c 	.word	0x0801b92c
 800243c:	0801b93c 	.word	0x0801b93c
 8002440:	0801be44 	.word	0x0801be44
 8002444:	0801b974 	.word	0x0801b974

08002448 <_ZN2ei5numpy14int16_to_floatEPKsPfj>:
     * @param input
     * @param output
     * @param length
     * @returns 0 if OK
     */
    static int int16_to_float(const EIDSP_i16 *input, float *output, size_t length) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
#if EIDSP_USE_CMSIS_DSP
        arm_q15_to_float(input, output, length);
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f008 fb45 	bl	800aae8 <arm_q15_to_float>
#else
        for (size_t ix = 0; ix < length; ix++) {
            output[ix] = (float)(input[ix]) / 32768;
        }
#endif
        return EIDSP_OK;
 800245e:	2300      	movs	r3, #0
    }
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZN2ei5numpy3logEPNS_9ei_matrixE>:
    /**
     * Calculate the natural log value of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log(matrix_t *matrix)
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b08d      	sub	sp, #52	; 0x34
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6892      	ldr	r2, [r2, #8]
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002482:	429a      	cmp	r2, r3
 8002484:	d26e      	bcs.n	8002564 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xfc>
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6811      	ldr	r1, [r2, #0]
 8002496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	188c      	adds	r4, r1, r2
 800249c:	60fb      	str	r3, [r7, #12]
        g = (int32_t) * ((int32_t *)&a);
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60bb      	str	r3, [r7, #8]
        e = (g - 0x3f2aaaab) & 0xff800000;
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x108>)
 80024aa:	4413      	add	r3, r2
 80024ac:	0ddb      	lsrs	r3, r3, #23
 80024ae:	05db      	lsls	r3, r3, #23
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
        g = g - e;
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	60bb      	str	r3, [r7, #8]
        m = (float) * ((float *)&g);
 80024ba:	f107 0308 	add.w	r3, r7, #8
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024cc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002574 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x10c>
 80024d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d4:	edc7 7a08 	vstr	s15, [r7, #32]
        f = m - 1.0f;
 80024d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024e4:	edc7 7a07 	vstr	s15, [r7, #28]
        s = f * f;
 80024e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f0:	edc7 7a06 	vstr	s15, [r7, #24]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 80024f4:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8002578 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x110>
 80024f8:	edd7 0a07 	vldr	s1, [r7, #28]
 80024fc:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800257c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x114>
 8002500:	f015 f8aa 	bl	8017658 <fmaf>
 8002504:	ed87 0a05 	vstr	s0, [r7, #20]
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8002508:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8002580 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x118>
 800250c:	edd7 0a07 	vldr	s1, [r7, #28]
 8002510:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002584 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x11c>
 8002514:	f015 f8a0 	bl	8017658 <fmaf>
 8002518:	ed87 0a04 	vstr	s0, [r7, #16]
        r = fmaf(r, s, t);
 800251c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002520:	edd7 0a06 	vldr	s1, [r7, #24]
 8002524:	ed97 0a05 	vldr	s0, [r7, #20]
 8002528:	f015 f896 	bl	8017658 <fmaf>
 800252c:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, f);
 8002530:	ed97 1a07 	vldr	s2, [r7, #28]
 8002534:	edd7 0a06 	vldr	s1, [r7, #24]
 8002538:	ed97 0a05 	vldr	s0, [r7, #20]
 800253c:	f015 f88c 	bl	8017658 <fmaf>
 8002540:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8002544:	ed97 1a05 	vldr	s2, [r7, #20]
 8002548:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002588 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x120>
 800254c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002550:	f015 f882 	bl	8017658 <fmaf>
 8002554:	ed87 0a05 	vstr	s0, [r7, #20]
        return r;
 8002558:	697b      	ldr	r3, [r7, #20]
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 800255a:	6023      	str	r3, [r4, #0]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	3301      	adds	r3, #1
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002562:	e787      	b.n	8002474 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 8002564:	2300      	movs	r3, #0
    }
 8002566:	4618      	mov	r0, r3
 8002568:	3734      	adds	r7, #52	; 0x34
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	c0d55555 	.word	0xc0d55555
 8002574:	34000000 	.word	0x34000000
 8002578:	be8ef46d 	.word	0xbe8ef46d
 800257c:	3e6c6078 	.word	0x3e6c6078
 8002580:	beff712d 	.word	0xbeff712d
 8002584:	3ea9e51a 	.word	0x3ea9e51a
 8002588:	3f317218 	.word	0x3f317218

0800258c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b091      	sub	sp, #68	; 0x44
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6892      	ldr	r2, [r2, #8]
 800259c:	fb02 f203 	mul.w	r2, r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80025a8:	2101      	movs	r1, #1
 80025aa:	f7fe fd93 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>

        matrix_t min_matrix(1, 1);
 80025ae:	f107 0018 	add.w	r0, r7, #24
 80025b2:	2300      	movs	r3, #0
 80025b4:	2201      	movs	r2, #1
 80025b6:	2101      	movs	r1, #1
 80025b8:	f7fe fd8c 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
        if (!min_matrix.buffer) {
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x4e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80025c2:	4a53      	ldr	r2, [pc, #332]	; (8002710 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x184>)
 80025c4:	4953      	ldr	r1, [pc, #332]	; (8002714 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x188>)
 80025c6:	4854      	ldr	r0, [pc, #336]	; (8002718 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x18c>)
 80025c8:	f018 fa9c 	bl	801ab04 <iprintf>
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x190>)
 80025ce:	4a54      	ldr	r2, [pc, #336]	; (8002720 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x194>)
 80025d0:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80025d4:	4853      	ldr	r0, [pc, #332]	; (8002724 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x198>)
 80025d6:	f017 fdbf 	bl	801a158 <__assert_func>
        }
        r = min(&temp_matrix, &min_matrix);
 80025da:	f107 0218 	add.w	r2, r7, #24
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fb9d 	bl	8001d24 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
 80025ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (r != EIDSP_OK) {
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x7e>
            EIDSP_ERR(r);
 80025f2:	4a4d      	ldr	r2, [pc, #308]	; (8002728 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x19c>)
 80025f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025f6:	4848      	ldr	r0, [pc, #288]	; (8002718 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x18c>)
 80025f8:	f018 fa84 	bl	801ab04 <iprintf>
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x190>)
 80025fe:	4a48      	ldr	r2, [pc, #288]	; (8002720 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x194>)
 8002600:	f240 517c 	movw	r1, #1404	; 0x57c
 8002604:	4847      	ldr	r0, [pc, #284]	; (8002724 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x198>)
 8002606:	f017 fda7 	bl	801a158 <__assert_func>
        }

        matrix_t max_matrix(1, 1);
 800260a:	f107 0008 	add.w	r0, r7, #8
 800260e:	2300      	movs	r3, #0
 8002610:	2201      	movs	r2, #1
 8002612:	2101      	movs	r1, #1
 8002614:	f7fe fd5e 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
        if (!max_matrix.buffer) {
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xaa>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800261e:	4a3c      	ldr	r2, [pc, #240]	; (8002710 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x184>)
 8002620:	493c      	ldr	r1, [pc, #240]	; (8002714 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x188>)
 8002622:	483d      	ldr	r0, [pc, #244]	; (8002718 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x18c>)
 8002624:	f018 fa6e 	bl	801ab04 <iprintf>
 8002628:	4b3c      	ldr	r3, [pc, #240]	; (800271c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x190>)
 800262a:	4a3d      	ldr	r2, [pc, #244]	; (8002720 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x194>)
 800262c:	f240 5181 	movw	r1, #1409	; 0x581
 8002630:	483c      	ldr	r0, [pc, #240]	; (8002724 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x198>)
 8002632:	f017 fd91 	bl	801a158 <__assert_func>
        }
        r = max(&temp_matrix, &max_matrix);
 8002636:	f107 0208 	add.w	r2, r7, #8
 800263a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fbcb 	bl	8001ddc <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
 8002646:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (r != EIDSP_OK) {
 8002648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xda>
            EIDSP_ERR(r);
 800264e:	4a36      	ldr	r2, [pc, #216]	; (8002728 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x19c>)
 8002650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002652:	4831      	ldr	r0, [pc, #196]	; (8002718 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x18c>)
 8002654:	f018 fa56 	bl	801ab04 <iprintf>
 8002658:	4b30      	ldr	r3, [pc, #192]	; (800271c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x190>)
 800265a:	4a31      	ldr	r2, [pc, #196]	; (8002720 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x194>)
 800265c:	f240 5185 	movw	r1, #1413	; 0x585
 8002660:	4830      	ldr	r0, [pc, #192]	; (8002724 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x198>)
 8002662:	f017 fd79 	bl	801a158 <__assert_func>
        }

        float row_scale = 1.0f / (max_matrix.buffer[0] - min_matrix.buffer[0]);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	ed93 7a00 	vldr	s14, [r3]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800267a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800267e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268c:	eeb0 0a67 	vmov.f32	s0, s15
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fa89 	bl	8001ba8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8002696:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (r != EIDSP_OK) {
 8002698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
            EIDSP_ERR(r);
 800269e:	4a22      	ldr	r2, [pc, #136]	; (8002728 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x19c>)
 80026a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026a2:	481d      	ldr	r0, [pc, #116]	; (8002718 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x18c>)
 80026a4:	f018 fa2e 	bl	801ab04 <iprintf>
 80026a8:	4b1c      	ldr	r3, [pc, #112]	; (800271c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x190>)
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x194>)
 80026ac:	f240 518c 	movw	r1, #1420	; 0x58c
 80026b0:	481c      	ldr	r0, [pc, #112]	; (8002724 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x198>)
 80026b2:	f017 fd51 	bl	801a158 <__assert_func>
        }

        r = scale(&temp_matrix, row_scale);
 80026b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ba:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fa26 	bl	8001b10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80026c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (r != EIDSP_OK) {
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x158>
            EIDSP_ERR(r);
 80026cc:	4a16      	ldr	r2, [pc, #88]	; (8002728 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x19c>)
 80026ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026d0:	4811      	ldr	r0, [pc, #68]	; (8002718 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x18c>)
 80026d2:	f018 fa17 	bl	801ab04 <iprintf>
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x190>)
 80026d8:	4a11      	ldr	r2, [pc, #68]	; (8002720 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x194>)
 80026da:	f240 5191 	movw	r1, #1425	; 0x591
 80026de:	4811      	ldr	r0, [pc, #68]	; (8002724 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x198>)
 80026e0:	f017 fd3a 	bl	801a158 <__assert_func>
        }

        return EIDSP_OK;
 80026e4:	2400      	movs	r4, #0
        matrix_t max_matrix(1, 1);
 80026e6:	f107 0308 	add.w	r3, r7, #8
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fd1e 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
 80026f0:	f107 0318 	add.w	r3, r7, #24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fd19 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 80026fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fd14 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 8002704:	4623      	mov	r3, r4
    }
 8002706:	4618      	mov	r0, r3
 8002708:	3744      	adds	r7, #68	; 0x44
 800270a:	46bd      	mov	sp, r7
 800270c:	bd90      	pop	{r4, r7, pc}
 800270e:	bf00      	nop
 8002710:	0801b918 	.word	0x0801b918
 8002714:	fffffc16 	.word	0xfffffc16
 8002718:	0801b92c 	.word	0x0801b92c
 800271c:	0801b93c 	.word	0x0801b93c
 8002720:	0801be84 	.word	0x0801be84
 8002724:	0801b974 	.word	0x0801b974
 8002728:	0801beb4 	.word	0x0801beb4

0800272c <_ZN2ei5numpy13software_rfftEPfS1_jj>:

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4618      	mov	r0, r3
 8002740:	f017 fdf8 	bl	801a334 <malloc>
 8002744:	4603      	mov	r3, r0
 8002746:	61bb      	str	r3, [r7, #24]
        if (!fft_output) {
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800274e:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x10c>)
 8002750:	493a      	ldr	r1, [pc, #232]	; (800283c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x110>)
 8002752:	483b      	ldr	r0, [pc, #236]	; (8002840 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x114>)
 8002754:	f018 f9d6 	bl	801ab04 <iprintf>
 8002758:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x118>)
 800275a:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x11c>)
 800275c:	f240 519b 	movw	r1, #1435	; 0x59b
 8002760:	483a      	ldr	r0, [pc, #232]	; (800284c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x120>)
 8002762:	f017 fcf9 	bl	801a158 <__assert_func>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2300      	movs	r3, #0
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	f00c f9c0 	bl	800eaf8 <kiss_fftr_alloc>
 8002778:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10e      	bne.n	800279e <_ZN2ei5numpy13software_rfftEPfS1_jj+0x72>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002780:	69b8      	ldr	r0, [r7, #24]
 8002782:	f017 fddf 	bl	801a344 <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002786:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x10c>)
 8002788:	492c      	ldr	r1, [pc, #176]	; (800283c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x110>)
 800278a:	482d      	ldr	r0, [pc, #180]	; (8002840 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x114>)
 800278c:	f018 f9ba 	bl	801ab04 <iprintf>
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x118>)
 8002792:	4a2d      	ldr	r2, [pc, #180]	; (8002848 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x11c>)
 8002794:	f240 51a4 	movw	r1, #1444	; 0x5a4
 8002798:	482c      	ldr	r0, [pc, #176]	; (800284c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x120>)
 800279a:	f017 fcdd 	bl	801a158 <__assert_func>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f00c fa7e 	bl	800eca4 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d235      	bcs.n	8002820 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xf4>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	edd3 7a00 	vldr	s15, [r3]
 80027c0:	2002      	movs	r0, #2
 80027c2:	eeb0 0a67 	vmov.f32	s0, s15
 80027c6:	f003 fc14 	bl	8005ff2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027ca:	ec55 4b10 	vmov	r4, r5, d0
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80027da:	2002      	movs	r0, #2
 80027dc:	eeb0 0a67 	vmov.f32	s0, s15
 80027e0:	f003 fc07 	bl	8005ff2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027e4:	ec53 2b10 	vmov	r2, r3, d0
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fd6e 	bl	80002cc <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	ec43 2b17 	vmov	d7, r2, r3
 80027f8:	eeb0 0a47 	vmov.f32	s0, s14
 80027fc:	eef0 0a67 	vmov.f32	s1, s15
 8002800:	f015 f864 	bl	80178cc <sqrt>
 8002804:	ec51 0b10 	vmov	r0, r1, d0
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	18d4      	adds	r4, r2, r3
 8002810:	f7fe fa0a 	bl	8000c28 <__aeabi_d2f>
 8002814:	4603      	mov	r3, r0
 8002816:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3301      	adds	r3, #1
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e7c5      	b.n	80027ac <_ZN2ei5numpy13software_rfftEPfS1_jj+0x80>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f017 fd8f 	bl	801a344 <free>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002826:	69b8      	ldr	r0, [r7, #24]
 8002828:	f017 fd8c 	bl	801a344 <free>

        return EIDSP_OK;
 800282c:	2300      	movs	r3, #0
    }
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bdb0      	pop	{r4, r5, r7, pc}
 8002836:	bf00      	nop
 8002838:	0801b918 	.word	0x0801b918
 800283c:	fffffc16 	.word	0xfffffc16
 8002840:	0801b92c 	.word	0x0801b92c
 8002844:	0801b93c 	.word	0x0801b93c
 8002848:	0801beb8 	.word	0x0801beb8
 800284c:	0801b974 	.word	0x0801b974

08002850 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f107 0310 	add.w	r3, r7, #16
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2300      	movs	r3, #0
 8002868:	2200      	movs	r2, #0
 800286a:	2100      	movs	r1, #0
 800286c:	f00c f944 	bl	800eaf8 <kiss_fftr_alloc>
 8002870:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x40>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x5c>)
 800287a:	490d      	ldr	r1, [pc, #52]	; (80028b0 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x60>)
 800287c:	480d      	ldr	r0, [pc, #52]	; (80028b4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x64>)
 800287e:	f018 f941 	bl	801ab04 <iprintf>
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x68>)
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x6c>)
 8002886:	f240 51be 	movw	r1, #1470	; 0x5be
 800288a:	480d      	ldr	r0, [pc, #52]	; (80028c0 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x70>)
 800288c:	f017 fc64 	bl	801a158 <__assert_func>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	6978      	ldr	r0, [r7, #20]
 8002896:	f00c fa05 	bl	800eca4 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f017 fd52 	bl	801a344 <free>

        return EIDSP_OK;
 80028a0:	2300      	movs	r3, #0
    }
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	0801b918 	.word	0x0801b918
 80028b0:	fffffc16 	.word	0xfffffc16
 80028b4:	0801b92c 	.word	0x0801b92c
 80028b8:	0801b93c 	.word	0x0801b93c
 80028bc:	0801befc 	.word	0x0801befc
 80028c0:	0801b974 	.word	0x0801b974

080028c4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 80028c4:	b480      	push	{r7}
 80028c6:	b08b      	sub	sp, #44	; 0x2c
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d804      	bhi.n	80028f0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
            return;
 80028ee:	e0e2      	b.n	8002ab6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d02f      	beq.n	800295c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	61ba      	str	r2, [r7, #24]
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	ed97 7a08 	vldr	s14, [r7, #32]
 800290a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290e:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1d1a      	adds	r2, r3, #4
 8002916:	61ba      	str	r2, [r7, #24]
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002924:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1d1a      	adds	r2, r3, #4
 800292c:	61ba      	str	r2, [r7, #24]
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	ed97 7a08 	vldr	s14, [r7, #32]
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	1d1a      	adds	r2, r3, #4
 8002942:	61ba      	str	r2, [r7, #24]
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	ed97 7a08 	vldr	s14, [r7, #32]
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3b01      	subs	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800295a:	e7cc      	b.n	80028f6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00e      	beq.n	8002988 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	1d1a      	adds	r2, r3, #4
 800296e:	61ba      	str	r2, [r7, #24]
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ed97 7a08 	vldr	s14, [r7, #32]
 8002978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297c:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	3b01      	subs	r3, #1
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002986:	e7ed      	b.n	8002964 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002992:	edd7 6a08 	vldr	s13, [r7, #32]
 8002996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800299a:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d057      	beq.n	8002a5e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1d1a      	adds	r2, r3, #4
 80029b2:	61ba      	str	r2, [r7, #24]
 80029b4:	ed93 7a00 	vldr	s14, [r3]
 80029b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80029bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c0:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80029c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80029c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d4:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	61ba      	str	r2, [r7, #24]
 80029de:	ed93 7a00 	vldr	s14, [r3]
 80029e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ea:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80029ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80029f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1d1a      	adds	r2, r3, #4
 8002a06:	61ba      	str	r2, [r7, #24]
 8002a08:	ed93 7a00 	vldr	s14, [r3]
 8002a0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a14:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002a18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a20:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a28:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	1d1a      	adds	r2, r3, #4
 8002a30:	61ba      	str	r2, [r7, #24]
 8002a32:	ed93 7a00 	vldr	s14, [r3]
 8002a36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3e:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002a42:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a52:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002a5c:	e7a4      	b.n	80029a8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d018      	beq.n	8002a9e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	61ba      	str	r2, [r7, #24]
 8002a72:	ed93 7a00 	vldr	s14, [r3]
 8002a76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7e:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a92:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002a9c:	e7e3      	b.n	8002a66 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
    }
 8002ab6:	372c      	adds	r7, #44	; 0x2c
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
     * @param      input_matrix   The input matrix
     * @param      output_matrix  The output matrix
     *
     * @return     EIDSP error
     */
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	; 0x30
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    {
        arm_matrix_instance_f32 arm_in_matrix, arm_transposed_matrix;

        if (input_matrix->cols != output_matrix->rows) {
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d00b      	beq.n	8002aee <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002ad6:	4a54      	ldr	r2, [pc, #336]	; (8002c28 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x168>)
 8002ad8:	4954      	ldr	r1, [pc, #336]	; (8002c2c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x16c>)
 8002ada:	4855      	ldr	r0, [pc, #340]	; (8002c30 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 8002adc:	f018 f812 	bl	801ab04 <iprintf>
 8002ae0:	4b54      	ldr	r3, [pc, #336]	; (8002c34 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 8002ae2:	4a55      	ldr	r2, [pc, #340]	; (8002c38 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 8002ae4:	f240 6125 	movw	r1, #1573	; 0x625
 8002ae8:	4854      	ldr	r0, [pc, #336]	; (8002c3c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002aea:	f017 fb35 	bl	801a158 <__assert_func>
        }

        if (output_matrix->cols != 1) {
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d00b      	beq.n	8002b0e <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002af6:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x168>)
 8002af8:	494c      	ldr	r1, [pc, #304]	; (8002c2c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x16c>)
 8002afa:	484d      	ldr	r0, [pc, #308]	; (8002c30 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 8002afc:	f018 f802 	bl	801ab04 <iprintf>
 8002b00:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 8002b02:	4a4d      	ldr	r2, [pc, #308]	; (8002c38 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 8002b04:	f240 6129 	movw	r1, #1577	; 0x629
 8002b08:	484c      	ldr	r0, [pc, #304]	; (8002c3c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002b0a:	f017 fb25 	bl	801a158 <__assert_func>
        }

        /* Copy input matrix to arm matrix */
        arm_in_matrix.numRows = input_matrix->rows;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	833b      	strh	r3, [r7, #24]
        arm_in_matrix.numCols = input_matrix->cols;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	837b      	strh	r3, [r7, #26]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	61fb      	str	r3, [r7, #28]
        /* Create transposed matrix */
        arm_transposed_matrix.numRows = input_matrix->cols;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	823b      	strh	r3, [r7, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	827b      	strh	r3, [r7, #18]
        arm_transposed_matrix.pData = (float *)calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6852      	ldr	r2, [r2, #4]
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f017 fb2b 	bl	801a1a0 <calloc>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	617b      	str	r3, [r7, #20]

        if (arm_transposed_matrix.pData == NULL) {
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xac>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002b54:	4a3a      	ldr	r2, [pc, #232]	; (8002c40 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x180>)
 8002b56:	493b      	ldr	r1, [pc, #236]	; (8002c44 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x184>)
 8002b58:	4835      	ldr	r0, [pc, #212]	; (8002c30 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 8002b5a:	f017 ffd3 	bl	801ab04 <iprintf>
 8002b5e:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 8002b60:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 8002b62:	f240 6136 	movw	r1, #1590	; 0x636
 8002b66:	4835      	ldr	r0, [pc, #212]	; (8002c3c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002b68:	f017 faf6 	bl	801a158 <__assert_func>
        }

        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 8002b6c:	f107 0210 	add.w	r2, r7, #16
 8002b70:	f107 0318 	add.w	r3, r7, #24
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f007 fe8e 	bl	800a898 <arm_mat_trans_f32>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ret != EIDSP_OK) {
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xde>
            EIDSP_ERR(ret);
 8002b86:	4a30      	ldr	r2, [pc, #192]	; (8002c48 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x188>)
 8002b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b8a:	4829      	ldr	r0, [pc, #164]	; (8002c30 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 8002b8c:	f017 ffba 	bl	801ab04 <iprintf>
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 8002b92:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 8002b94:	f240 613b 	movw	r1, #1595	; 0x63b
 8002b98:	4828      	ldr	r0, [pc, #160]	; (8002c3c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002b9a:	f017 fadd 	bl	801a158 <__assert_func>
        }

        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba2:	8a3b      	ldrh	r3, [r7, #16]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d234      	bcs.n	8002c16 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x156>
            float std;
            float var;

            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	8a7b      	ldrh	r3, [r7, #18]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	fb03 f301 	mul.w	r3, r3, r1
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
                               arm_transposed_matrix.numCols, &var);
 8002bbc:	8a7a      	ldrh	r2, [r7, #18]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	f107 0208 	add.w	r2, r7, #8
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe7d 	bl	80028c4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	f107 030c 	add.w	r3, r7, #12
 8002bd2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002bd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	db09      	blt.n	8002bf6 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x136>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002be2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002be6:	f014 fee3 	bl	80179b0 <sqrtf>
 8002bea:	eef0 7a40 	vmov.f32	s15, s0
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002bf4:	e004      	b.n	8002c00 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x140>
    }
    else
    {
      *pOut = 0.0f;
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002bfe:	bf00      	nop

            output_matrix->buffer[row] = std;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	3301      	adds	r3, #1
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c14:	e7c5      	b.n	8002ba2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xe2>
        }

        free(arm_transposed_matrix.pData);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f017 fb93 	bl	801a344 <free>

        return EIDSP_OK;
 8002c1e:	2300      	movs	r3, #0
    }
 8002c20:	4618      	mov	r0, r3
 8002c22:	3730      	adds	r7, #48	; 0x30
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	0801b9dc 	.word	0x0801b9dc
 8002c2c:	fffffc14 	.word	0xfffffc14
 8002c30:	0801b92c 	.word	0x0801b92c
 8002c34:	0801b93c 	.word	0x0801b93c
 8002c38:	0801bf4c 	.word	0x0801bf4c
 8002c3c:	0801b974 	.word	0x0801b974
 8002c40:	0801b918 	.word	0x0801b918
 8002c44:	fffffc16 	.word	0xfffffc16
 8002c48:	0801ba8c 	.word	0x0801ba8c

08002c4c <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     * Converting from frequency to Mel scale
     *
     * @param f The frequency values(or a single frequency) in Hz.
     * @returns The mel scale values(or a single mel).
     */
    static float frequency_to_mel(float f) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08c      	sub	sp, #48	; 0x30
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	ed87 0a01 	vstr	s0, [r7, #4]
        return 1127.0 * numpy::log(1 + f / 700.0f);
 8002c56:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c5a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002d40 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xf4>
 8002c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c6a:	edc7 7a04 	vstr	s15, [r7, #16]
        g = (int32_t) * ((int32_t *)&a);
 8002c6e:	f107 0310 	add.w	r3, r7, #16
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
        e = (g - 0x3f2aaaab) & 0xff800000;
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xf8>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	0ddb      	lsrs	r3, r3, #23
 8002c7e:	05db      	lsls	r3, r3, #23
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        g = g - e;
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	60fb      	str	r3, [r7, #12]
        m = (float) * ((float *)&g);
 8002c8a:	f107 030c 	add.w	r3, r7, #12
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002d48 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xfc>
 8002ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        f = m - 1.0f;
 8002ca8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cb4:	edc7 7a08 	vstr	s15, [r7, #32]
        s = f * f;
 8002cb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cc0:	edc7 7a07 	vstr	s15, [r7, #28]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8002cc4:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8002d4c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x100>
 8002cc8:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ccc:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8002d50 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x104>
 8002cd0:	f014 fcc2 	bl	8017658 <fmaf>
 8002cd4:	ed87 0a06 	vstr	s0, [r7, #24]
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8002cd8:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8002d54 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x108>
 8002cdc:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ce0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002d58 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x10c>
 8002ce4:	f014 fcb8 	bl	8017658 <fmaf>
 8002ce8:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, t);
 8002cec:	ed97 1a05 	vldr	s2, [r7, #20]
 8002cf0:	edd7 0a07 	vldr	s1, [r7, #28]
 8002cf4:	ed97 0a06 	vldr	s0, [r7, #24]
 8002cf8:	f014 fcae 	bl	8017658 <fmaf>
 8002cfc:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(r, s, f);
 8002d00:	ed97 1a08 	vldr	s2, [r7, #32]
 8002d04:	edd7 0a07 	vldr	s1, [r7, #28]
 8002d08:	ed97 0a06 	vldr	s0, [r7, #24]
 8002d0c:	f014 fca4 	bl	8017658 <fmaf>
 8002d10:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8002d14:	ed97 1a06 	vldr	s2, [r7, #24]
 8002d18:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002d5c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x110>
 8002d1c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d20:	f014 fc9a 	bl	8017658 <fmaf>
 8002d24:	ed87 0a06 	vstr	s0, [r7, #24]
        return r;
 8002d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d2c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002d60 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x114>
 8002d30:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002d34:	eeb0 0a67 	vmov.f32	s0, s15
 8002d38:	3730      	adds	r7, #48	; 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	442f0000 	.word	0x442f0000
 8002d44:	c0d55555 	.word	0xc0d55555
 8002d48:	34000000 	.word	0x34000000
 8002d4c:	be8ef46d 	.word	0xbe8ef46d
 8002d50:	3e6c6078 	.word	0x3e6c6078
 8002d54:	beff712d 	.word	0xbeff712d
 8002d58:	3ea9e51a 	.word	0x3ea9e51a
 8002d5c:	3f317218 	.word	0x3f317218
 8002d60:	448ce000 	.word	0x448ce000

08002d64 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	ed87 0a01 	vstr	s0, [r7, #4]
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 8002d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d72:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002da0 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x3c>
 8002d76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d7e:	f7fe fa42 	bl	8001206 <_ZSt3expf>
 8002d82:	eef0 7a40 	vmov.f32	s15, s0
 8002d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d8e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002da4 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x40>
 8002d92:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002d96:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	448ce000 	.word	0x448ce000
 8002da4:	442f0000 	.word	0x442f0000

08002da8 <_ZN2ei8speechpy9functions13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size) {
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d215      	bcs.n	8002dea <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x42>
            if (input[ix] == 0) {
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d106      	bne.n	8002de2 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x3a>
                input[ix] = FLT_EPSILON;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f04f 5250 	mov.w	r2, #872415232	; 0x34000000
 8002de0:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3301      	adds	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e7e5      	b.n	8002db6 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0xe>
            }
        }
    }
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>:
     * This function handle the issue with zero values if the are exposed
     * to become an argument for any log function.
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input) {
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
        zero_handling(input->buffer, input->rows * input->cols);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6892      	ldr	r2, [r2, #8]
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f7ff ffca 	bl	8002da8 <_ZN2ei8speechpy9functions13zero_handlingEPfj>
    }
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_ZN2ei8speechpy9functions8triangleEPfjiii>:
     * @param x_size Size of the linspace output
     * @param left
     * @param middle
     * @param right
     */
    static void triangle(float *x, size_t x_size, int left, int middle, int right) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
        EI_DSP_MATRIX(out, 1, x_size);
 8002e2a:	f107 0014 	add.w	r0, r7, #20
 8002e2e:	2300      	movs	r3, #0
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	2101      	movs	r1, #1
 8002e34:	f7fe f94e 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x38>
 8002e3e:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x15c>)
 8002e40:	494e      	ldr	r1, [pc, #312]	; (8002f7c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x160>)
 8002e42:	484f      	ldr	r0, [pc, #316]	; (8002f80 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x164>)
 8002e44:	f017 fe5e 	bl	801ab04 <iprintf>
 8002e48:	4b4e      	ldr	r3, [pc, #312]	; (8002f84 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x168>)
 8002e4a:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x16c>)
 8002e4c:	215a      	movs	r1, #90	; 0x5a
 8002e4e:	484f      	ldr	r0, [pc, #316]	; (8002f8c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x170>)
 8002e50:	f017 f982 	bl	801a158 <__assert_func>

        for (size_t ix = 0; ix < x_size; ix++) {
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d27b      	bcs.n	8002f58 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x13c>
            if (x[ix] > left && x[ix] <= middle) {
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	ed93 7a00 	vldr	s14, [r3]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	dd2b      	ble.n	8002ed8 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xbc>
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	d81b      	bhi.n	8002ed8 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xbc>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	ed93 7a00 	vldr	s14, [r3]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed4:	edc3 7a00 	vstr	s15, [r3]
            }

            if (x[ix] < right && middle <= x[ix]) {
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	ed93 7a00 	vldr	s14, [r3]
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef6:	d52b      	bpl.n	8002f50 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x134>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f16:	d81b      	bhi.n	8002f50 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x134>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4c:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	3301      	adds	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	e77f      	b.n	8002e58 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x3c>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 8002f58:	6979      	ldr	r1, [r7, #20]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f017 f9f7 	bl	801a354 <memcpy>
        EI_DSP_MATRIX(out, 1, x_size);
 8002f66:	f107 0314 	add.w	r3, r7, #20
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe f8de 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
    }
 8002f70:	bf00      	nop
 8002f72:	3728      	adds	r7, #40	; 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	0801b918 	.word	0x0801b918
 8002f7c:	fffffc16 	.word	0xfffffc16
 8002f80:	0801b92c 	.word	0x0801b92c
 8002f84:	0801b93c 	.word	0x0801b93c
 8002f88:	0801c308 	.word	0x0801c308
 8002f8c:	0801c358 	.word	0x0801c358

08002f90 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
    signal_t *signal;
    std::vector<uint32_t> *frame_ixs;
    int frame_length;

    // start_ixs is owned by us
    ~ei_stack_frames_info() {
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
        if (frame_ixs) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x26>
            delete frame_ixs;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685c      	ldr	r4, [r3, #4]
 8002fa4:	2c00      	cmp	r4, #0
 8002fa6:	d006      	beq.n	8002fb6 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x26>
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f003 f871 	bl	8006090 <_ZNSt6vectorImSaImEED1Ev>
 8002fae:	210c      	movs	r1, #12
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f014 f801 	bl	8016fb8 <_ZdlPvj>
        }
    }
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd90      	pop	{r4, r7, pc}

08002fc0 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>:
     * @param shift (int): The shift step.
     * @param cof (float): The preemphasising coefficient. 0 equals to no filtering.
     */
    class preemphasis {
public:
        preemphasis(ei_signal_t *signal, int shift = 1, float cof = 0.98f)
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	ed87 0a00 	vstr	s0, [r7]
            : _signal(signal), _shift(shift), _cof(cof)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	609a      	str	r2, [r3, #8]
        {
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f017 f8d9 	bl	801a1a0 <calloc>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	60da      	str	r2, [r3, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f017 f8cf 	bl	801a1a0 <calloc>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	611a      	str	r2, [r3, #16]
            _next_offset_should_be = 0;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	615a      	str	r2, [r3, #20]

            if (shift < 0) {
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	da06      	bge.n	8003024 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x64>
                _shift = signal->total_length + shift;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
            }

            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00e      	beq.n	800304a <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8a>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8a>

            // we need to get the shift bytes from the end of the buffer...
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 8003034:	68b8      	ldr	r0, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	1ad1      	subs	r1, r2, r3
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f002 fff6 	bl	8006034 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8003048:	e000      	b.n	800304c <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8c>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 800304a:	bf00      	nop
        }
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
         * Get preemphasized data from the underlying audio buffer...
         * This retrieves data from the signal then preemphasizes it.
         * @param offset Offset in the audio signal
         * @param length Length of the audio signal
         */
        int get_data(size_t offset, size_t length, float *out_buffer) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
            if (!_prev_buffer || !_end_of_signal_buffer) {
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1e>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x34>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003076:	4a5d      	ldr	r2, [pc, #372]	; (80031ec <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x194>)
 8003078:	495d      	ldr	r1, [pc, #372]	; (80031f0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x198>)
 800307a:	485e      	ldr	r0, [pc, #376]	; (80031f4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 800307c:	f017 fd42 	bl	801ab04 <iprintf>
 8003080:	4b5d      	ldr	r3, [pc, #372]	; (80031f8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8003082:	4a5e      	ldr	r2, [pc, #376]	; (80031fc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8003084:	214f      	movs	r1, #79	; 0x4f
 8003086:	485e      	ldr	r0, [pc, #376]	; (8003200 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8003088:	f017 f866 	bl	801a158 <__assert_func>
            }
            if (offset + length > _signal->total_length) {
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	441a      	add	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	429a      	cmp	r2, r3
 800309a:	d90a      	bls.n	80030b2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x5a>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 800309c:	4a59      	ldr	r2, [pc, #356]	; (8003204 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ac>)
 800309e:	495a      	ldr	r1, [pc, #360]	; (8003208 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b0>)
 80030a0:	4854      	ldr	r0, [pc, #336]	; (80031f4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 80030a2:	f017 fd2f 	bl	801ab04 <iprintf>
 80030a6:	4b54      	ldr	r3, [pc, #336]	; (80031f8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 80030aa:	2152      	movs	r1, #82	; 0x52
 80030ac:	4854      	ldr	r0, [pc, #336]	; (8003200 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 80030ae:	f017 f853 	bl	801a158 <__assert_func>
            }

            int ret;
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db1d      	blt.n	80030fa <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa2>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1a99      	subs	r1, r3, r2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f002 ffac 	bl	8006034 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80030dc:	61b8      	str	r0, [r7, #24]
                if (ret != 0) {
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa2>
                    EIDSP_ERR(ret);
 80030e4:	4a49      	ldr	r2, [pc, #292]	; (800320c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b4>)
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	4842      	ldr	r0, [pc, #264]	; (80031f4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 80030ea:	f017 fd0b 	bl	801ab04 <iprintf>
 80030ee:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 80030f0:	4a42      	ldr	r2, [pc, #264]	; (80031fc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 80030f2:	2159      	movs	r1, #89	; 0x59
 80030f4:	4842      	ldr	r0, [pc, #264]	; (8003200 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 80030f6:	f017 f82f 	bl	801a158 <__assert_func>
                }
            }
            // else we'll use the end_of_signal_buffer; so no need to check

            ret = _signal->get_data(offset, length, out_buffer);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	f002 ff95 	bl	8006034 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 800310a:	61b8      	str	r0, [r7, #24]
            if (ret != 0) {
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd0>
                EIDSP_ERR(ret);
 8003112:	4a3e      	ldr	r2, [pc, #248]	; (800320c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b4>)
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	4837      	ldr	r0, [pc, #220]	; (80031f4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8003118:	f017 fcf4 	bl	801ab04 <iprintf>
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 800311e:	4a37      	ldr	r2, [pc, #220]	; (80031fc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8003120:	2160      	movs	r1, #96	; 0x60
 8003122:	4837      	ldr	r0, [pc, #220]	; (8003200 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8003124:	f017 f818 	bl	801a158 <__assert_func>
            }

            // now we have the signal and we can preemphasize
            for (size_t ix = 0; ix < length; ix++) {
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d250      	bcs.n	80031d6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x17e>
                float now = out_buffer[ix];
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	4413      	add	r3, r2
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]

                // under shift? read from end
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	6852      	ldr	r2, [r2, #4]
 800314a:	4293      	cmp	r3, r2
 800314c:	d218      	bcs.n	8003180 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x128>
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	ed93 7a02 	vldr	s14, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	440b      	add	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4413      	add	r3, r2
 8003172:	ed97 7a05 	vldr	s14, [r7, #20]
 8003176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317a:	edc3 7a00 	vstr	s15, [r3]
 800317e:	e012      	b.n	80031a6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x14e>
                }
                // otherwise read from history buffer
                else {
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	ed93 7a02 	vldr	s14, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	4413      	add	r3, r2
 800319a:	ed97 7a05 	vldr	s14, [r7, #20]
 800319e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a2:	edc3 7a00 	vstr	s15, [r3]
                }

                // roll through and overwrite last element
                numpy::roll(_prev_buffer, _shift, -1);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68d8      	ldr	r0, [r3, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f04f 32ff 	mov.w	r2, #4294967295
 80031b2:	4619      	mov	r1, r3
 80031b4:	f7fe f868 	bl	8001288 <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031c4:	3b01      	subs	r3, #1
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < length; ix++) {
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3301      	adds	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	e7aa      	b.n	800312c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd4>
            }

            _next_offset_should_be += length;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	441a      	add	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	615a      	str	r2, [r3, #20]

            return EIDSP_OK;
 80031e2:	2300      	movs	r3, #0
        }
 80031e4:	4618      	mov	r0, r3
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	0801b918 	.word	0x0801b918
 80031f0:	fffffc16 	.word	0xfffffc16
 80031f4:	0801b92c 	.word	0x0801b92c
 80031f8:	0801b93c 	.word	0x0801b93c
 80031fc:	0801c3cc 	.word	0x0801c3cc
 8003200:	0801c418 	.word	0x0801c418
 8003204:	0801c490 	.word	0x0801c490
 8003208:	fffffc0e 	.word	0xfffffc0e
 800320c:	0801ba8c 	.word	0x0801ba8c

08003210 <_ZN2ei8speechpy10processing11preemphasisD1Ev>:

        ~preemphasis() {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
            if (_prev_buffer) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x1a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4618      	mov	r0, r3
 8003226:	f017 f88d 	bl	801a344 <free>
            }
            if (_end_of_signal_buffer) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x2c>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	4618      	mov	r0, r3
 8003238:	f017 f884 	bl	801a344 <free>
            }
        }
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f002 ff59 	bl	8006106 <_ZNSaImED1Ev>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	f002 ff3c 	bl	80060e6 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ffeb 	bl	800325e <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb>:
    static int stack_frames(stack_frames_info_t *info,
                            uint32_t sampling_frequency,
                            float frame_length,
                            float frame_stride,
                            bool zero_padding)
    {
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b08f      	sub	sp, #60	; 0x3c
 8003298:	af00      	add	r7, sp, #0
 800329a:	6178      	str	r0, [r7, #20]
 800329c:	6139      	str	r1, [r7, #16]
 800329e:	ed87 0a03 	vstr	s0, [r7, #12]
 80032a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00f      	beq.n	80032d2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x3e>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 ff05 	bl	80060c6 <_ZNKSt8functionIFijjPfEEcvbEv>
 80032bc:	4603      	mov	r3, r0
 80032be:	f083 0301 	eor.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x3e>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x42>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x44>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x5e>
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 80032dc:	4a6b      	ldr	r2, [pc, #428]	; (800348c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1f8>)
 80032de:	496c      	ldr	r1, [pc, #432]	; (8003490 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1fc>)
 80032e0:	486c      	ldr	r0, [pc, #432]	; (8003494 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x200>)
 80032e2:	f017 fc0f 	bl	801ab04 <iprintf>
 80032e6:	4b6c      	ldr	r3, [pc, #432]	; (8003498 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x204>)
 80032e8:	4a6c      	ldr	r2, [pc, #432]	; (800349c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x208>)
 80032ea:	21c9      	movs	r1, #201	; 0xc9
 80032ec:	486c      	ldr	r0, [pc, #432]	; (80034a0 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x20c>)
 80032ee:	f016 ff33 	bl	801a158 <__assert_func>
        }

        size_t length_signal = info->signal->total_length;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        int frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	ee07 3a90 	vmov	s15, r3
 8003300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003304:	edd7 7a03 	vldr	s15, [r7, #12]
 8003308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	f7fd ffa9 	bl	8001266 <_ZSt5roundf>
 8003314:	eef0 7a40 	vmov.f32	s15, s0
 8003318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331c:	ee17 3a90 	vmov	r3, s15
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
        frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800332c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003334:	eeb0 0a67 	vmov.f32	s0, s15
 8003338:	f7fd ff95 	bl	8001266 <_ZSt5roundf>
 800333c:	ed87 0a02 	vstr	s0, [r7, #8]

        volatile int numframes;
        volatile int len_sig;

        if (zero_padding) {
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02a      	beq.n	800339c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x108>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003354:	edd7 7a02 	vldr	s15, [r7, #8]
 8003358:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800335c:	eeb0 0a66 	vmov.f32	s0, s13
 8003360:	f7fd ff41 	bl	80011e6 <_ZSt4ceilf>
 8003364:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336c:	ee17 3a90 	vmov	r3, s15
 8003370:	61fb      	str	r3, [r7, #28]

            // Zero padding
            len_sig = static_cast<int>(static_cast<float>(numframes) * frame_stride) + frame_sample_length;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003388:	ee17 2a90 	vmov	r2, s15
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	4413      	add	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]

            info->signal->total_length = static_cast<size_t>(len_sig);
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	e02f      	b.n	80033fc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x168>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033b2:	eeb0 0a66 	vmov.f32	s0, s13
 80033b6:	f7fd ff36 	bl	8001226 <_ZSt5floorf>
 80033ba:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80033be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033c2:	ee17 3a90 	vmov	r3, s15
 80033c6:	61fb      	str	r3, [r7, #28]
            len_sig = static_cast<int>(
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e6:	ee77 7a27 	vadd.f32	s15, s14, s15
            len_sig = static_cast<int>(
 80033ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ee:	ee17 3a90 	vmov	r3, s15
 80033f2:	61bb      	str	r3, [r7, #24]

            info->signal->total_length = static_cast<size_t>(len_sig);
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]
        }

        // alloc the vector on the heap, will be owned by the info struct
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
 80033fc:	200c      	movs	r0, #12
 80033fe:	f013 fdee 	bl	8016fde <_Znwj>
 8003402:	4603      	mov	r3, r0
 8003404:	461c      	mov	r4, r3
 8003406:	2300      	movs	r3, #0
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	6063      	str	r3, [r4, #4]
 800340e:	2300      	movs	r3, #0
 8003410:	60a3      	str	r3, [r4, #8]
 8003412:	4620      	mov	r0, r4
 8003414:	f7ff ff30 	bl	8003278 <_ZNSt6vectorImSaImEEC1Ev>
 8003418:	627c      	str	r4, [r7, #36]	; 0x24

        int frame_count = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	637b      	str	r3, [r7, #52]	; 0x34

        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 800341e:	2300      	movs	r3, #0
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	461a      	mov	r2, r3
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	4293      	cmp	r3, r2
 800342a:	bf34      	ite	cc
 800342c:	2301      	movcc	r3, #1
 800342e:	2300      	movcs	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01e      	beq.n	8003474 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1e0>
            if (++frame_count > numframes) break;
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	3301      	adds	r3, #1
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003440:	429a      	cmp	r2, r3
 8003442:	bfcc      	ite	gt
 8003444:	2301      	movgt	r3, #1
 8003446:	2300      	movle	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d111      	bne.n	8003472 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1de>

            frame_indices->push_back(ix);
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	f107 0320 	add.w	r3, r7, #32
 8003456:	4619      	mov	r1, r3
 8003458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800345a:	f002 fe79 	bl	8006150 <_ZNSt6vectorImSaImEE9push_backEOm>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 800345e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003466:	ee17 2a90 	vmov	r2, s15
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	4413      	add	r3, r2
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
 8003470:	e7d7      	b.n	8003422 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x18e>
            if (++frame_count > numframes) break;
 8003472:	bf00      	nop
        }

        info->frame_ixs = frame_indices;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	605a      	str	r2, [r3, #4]
        info->frame_length = frame_sample_length;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800347e:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 8003480:	2300      	movs	r3, #0
    }
 8003482:	4618      	mov	r0, r3
 8003484:	373c      	adds	r7, #60	; 0x3c
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}
 800348a:	bf00      	nop
 800348c:	0801c4a4 	.word	0x0801c4a4
 8003490:	fffffc15 	.word	0xfffffc15
 8003494:	0801b92c 	.word	0x0801b92c
 8003498:	0801b93c 	.word	0x0801b93c
 800349c:	0801c4c0 	.word	0x0801c4c0
 80034a0:	0801c418 	.word	0x0801c418

080034a4 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>:
        size_t signal_size,
        uint32_t sampling_frequency,
        float frame_length,
        float frame_stride,
        bool zero_padding)
    {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6178      	str	r0, [r7, #20]
 80034ac:	6139      	str	r1, [r7, #16]
 80034ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80034b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
        size_t length_signal = signal_size;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	623b      	str	r3, [r7, #32]
        int frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	ee07 3a90 	vmov	s15, r3
 80034c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80034cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d0:	eeb0 0a67 	vmov.f32	s0, s15
 80034d4:	f7fd fec7 	bl	8001266 <_ZSt5roundf>
 80034d8:	eef0 7a40 	vmov.f32	s15, s0
 80034dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e0:	ee17 3a90 	vmov	r3, s15
 80034e4:	61fb      	str	r3, [r7, #28]
        frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f8:	eeb0 0a67 	vmov.f32	s0, s15
 80034fc:	f7fd feb3 	bl	8001266 <_ZSt5roundf>
 8003500:	ed87 0a02 	vstr	s0, [r7, #8]

        int numframes;

        if (zero_padding) {
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb+0x94>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003518:	edd7 7a02 	vldr	s15, [r7, #8]
 800351c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003520:	eeb0 0a66 	vmov.f32	s0, s13
 8003524:	f7fd fe5f 	bl	80011e6 <_ZSt4ceilf>
 8003528:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 800352c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003530:	ee17 3a90 	vmov	r3, s15
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	e015      	b.n	8003564 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb+0xc0>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003546:	edd7 7a02 	vldr	s15, [r7, #8]
 800354a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800354e:	eeb0 0a66 	vmov.f32	s0, s13
 8003552:	f7fd fe68 	bl	8001226 <_ZSt5floorf>
 8003556:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 800355a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800355e:	ee17 3a90 	vmov	r3, s15
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
        }

        return numframes;
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003566:	4618      	mov	r0, r3
 8003568:	3728      	adds	r7, #40	; 0x28
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>:
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(float *frame, size_t frame_size, float *out_buffer, size_t out_buffer_size, uint16_t fft_points)
    {
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800357e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	b29b      	uxth	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	461a      	mov	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x36>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800358e:	4a30      	ldr	r2, [pc, #192]	; (8003650 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe0>)
 8003590:	4930      	ldr	r1, [pc, #192]	; (8003654 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe4>)
 8003592:	4831      	ldr	r0, [pc, #196]	; (8003658 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe8>)
 8003594:	f017 fab6 	bl	801ab04 <iprintf>
 8003598:	4b30      	ldr	r3, [pc, #192]	; (800365c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xec>)
 800359a:	4a31      	ldr	r2, [pc, #196]	; (8003660 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf0>)
 800359c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80035a0:	4830      	ldr	r0, [pc, #192]	; (8003664 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf4>)
 80035a2:	f016 fdd9 	bl	801a158 <__assert_func>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 80035a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7fe fc6f 	bl	8001e94 <_ZN2ei5numpy4rfftEPKfjPfjj>
 80035b6:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x52>
            return r;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	e042      	b.n	8003648 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xd8>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d23b      	bcs.n	8003646 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xd6>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80035ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d8:	ee17 0a90 	vmov	r0, s15
 80035dc:	f7fc ffd4 	bl	8000588 <__aeabi_f2d>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	f04f 0000 	mov.w	r0, #0
 80035e8:	491f      	ldr	r1, [pc, #124]	; (8003668 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf8>)
 80035ea:	f7fd f94f 	bl	800088c <__aeabi_ddiv>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4614      	mov	r4, r2
 80035f4:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	ed93 7a00 	vldr	s14, [r3]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	ee17 0a90 	vmov	r0, s15
 8003616:	f7fc ffb7 	bl	8000588 <__aeabi_f2d>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800361e:	4620      	mov	r0, r4
 8003620:	4629      	mov	r1, r5
 8003622:	f7fd f809 	bl	8000638 <__aeabi_dmul>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	18d4      	adds	r4, r2, r3
 8003636:	f7fd faf7 	bl	8000c28 <__aeabi_d2f>
 800363a:	4603      	mov	r3, r0
 800363c:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e7bf      	b.n	80035c6 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x56>
        }

        return EIDSP_OK;
 8003646:	2300      	movs	r3, #0
    }
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bdb0      	pop	{r4, r5, r7, pc}
 8003650:	0801b9dc 	.word	0x0801b9dc
 8003654:	fffffc14 	.word	0xfffffc14
 8003658:	0801b92c 	.word	0x0801b92c
 800365c:	0801b93c 	.word	0x0801b93c
 8003660:	0801c530 	.word	0x0801c530
 8003664:	0801c418 	.word	0x0801c418
 8003668:	3ff00000 	.word	0x3ff00000

0800366c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
     * @param scale Scale output to 0..1
     * @returns 0 if OK
     */
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
        bool scale = false)
    {
 800366c:	b5b0      	push	{r4, r5, r7, lr}
 800366e:	b098      	sub	sp, #96	; 0x60
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	807b      	strh	r3, [r7, #2]
 800367e:	460b      	mov	r3, r1
 8003680:	707b      	strb	r3, [r7, #1]
 8003682:	4613      	mov	r3, r2
 8003684:	703b      	strb	r3, [r7, #0]
        uint16_t pad_size = (win_size - 1) / 2;
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	3b01      	subs	r3, #1
 800368a:	0fda      	lsrs	r2, r3, #31
 800368c:	4413      	add	r3, r2
 800368e:	105b      	asrs	r3, r3, #1
 8003690:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        int ret;
        float *features_buffer_ptr;

        // mean & variance normalization
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800369c:	0052      	lsls	r2, r2, #1
 800369e:	1899      	adds	r1, r3, r2
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80036a8:	2300      	movs	r3, #0
 80036aa:	f7fd fd13 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x60>
 80036b4:	4ab1      	ldr	r2, [pc, #708]	; (800397c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x310>)
 80036b6:	49b2      	ldr	r1, [pc, #712]	; (8003980 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x314>)
 80036b8:	48b2      	ldr	r0, [pc, #712]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 80036ba:	f017 fa23 	bl	801ab04 <iprintf>
 80036be:	4bb2      	ldr	r3, [pc, #712]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 80036c0:	4ab2      	ldr	r2, [pc, #712]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 80036c2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80036c6:	48b2      	ldr	r0, [pc, #712]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 80036c8:	f016 fd46 	bl	801a158 <__assert_func>
        if (!vec_pad.buffer) {
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80036d2:	4aaa      	ldr	r2, [pc, #680]	; (800397c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x310>)
 80036d4:	49aa      	ldr	r1, [pc, #680]	; (8003980 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x314>)
 80036d6:	48ab      	ldr	r0, [pc, #684]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 80036d8:	f017 fa14 	bl	801ab04 <iprintf>
 80036dc:	4baa      	ldr	r3, [pc, #680]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 80036de:	4aab      	ldr	r2, [pc, #684]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 80036e0:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80036e4:	48aa      	ldr	r0, [pc, #680]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 80036e6:	f016 fd37 	bl	801a158 <__assert_func>
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 80036ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80036f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe f8fe 	bl	80018f8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 80036fc:	64b8      	str	r0, [r7, #72]	; 0x48
        if (ret != EIDSP_OK) {
 80036fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xb0>
            EIDSP_ERR(ret);
 8003704:	4aa3      	ldr	r2, [pc, #652]	; (8003994 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x328>)
 8003706:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003708:	489e      	ldr	r0, [pc, #632]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 800370a:	f017 f9fb 	bl	801ab04 <iprintf>
 800370e:	4b9e      	ldr	r3, [pc, #632]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 8003710:	4a9e      	ldr	r2, [pc, #632]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 8003712:	f240 1157 	movw	r1, #343	; 0x157
 8003716:	489e      	ldr	r0, [pc, #632]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 8003718:	f016 fd1e 	bl	801a158 <__assert_func>
        }

        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 800371c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800371e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003722:	2300      	movs	r3, #0
 8003724:	2201      	movs	r2, #1
 8003726:	f7fd fcd5 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xdc>
 8003730:	4a92      	ldr	r2, [pc, #584]	; (800397c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x310>)
 8003732:	4993      	ldr	r1, [pc, #588]	; (8003980 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x314>)
 8003734:	4893      	ldr	r0, [pc, #588]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 8003736:	f017 f9e5 	bl	801ab04 <iprintf>
 800373a:	4b93      	ldr	r3, [pc, #588]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 800373c:	4a93      	ldr	r2, [pc, #588]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 800373e:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003742:	4893      	ldr	r0, [pc, #588]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 8003744:	f016 fd08 	bl	801a158 <__assert_func>
        if (!mean_matrix.buffer) {
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xfa>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800374e:	4a8b      	ldr	r2, [pc, #556]	; (800397c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x310>)
 8003750:	498b      	ldr	r1, [pc, #556]	; (8003980 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x314>)
 8003752:	488c      	ldr	r0, [pc, #560]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 8003754:	f017 f9d6 	bl	801ab04 <iprintf>
 8003758:	4b8b      	ldr	r3, [pc, #556]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 800375a:	4a8c      	ldr	r2, [pc, #560]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 800375c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003760:	488b      	ldr	r0, [pc, #556]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 8003762:	f016 fcf9 	bl	801a158 <__assert_func>
        }

        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 8003766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003768:	f107 0018 	add.w	r0, r7, #24
 800376c:	2300      	movs	r3, #0
 800376e:	2201      	movs	r2, #1
 8003770:	f7fd fcb0 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
 800377a:	4a80      	ldr	r2, [pc, #512]	; (800397c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x310>)
 800377c:	4980      	ldr	r1, [pc, #512]	; (8003980 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x314>)
 800377e:	4881      	ldr	r0, [pc, #516]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 8003780:	f017 f9c0 	bl	801ab04 <iprintf>
 8003784:	4b80      	ldr	r3, [pc, #512]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 8003786:	4a81      	ldr	r2, [pc, #516]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 8003788:	f240 115f 	movw	r1, #351	; 0x15f
 800378c:	4880      	ldr	r0, [pc, #512]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 800378e:	f016 fce3 	bl	801a158 <__assert_func>
        if (!window_variance.buffer) {
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x130>
            return EIDSP_OUT_OF_MEM;
 8003798:	4c79      	ldr	r4, [pc, #484]	; (8003980 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x314>)
 800379a:	e0db      	b.n	8003954 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2e8>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 800379c:	2300      	movs	r3, #0
 800379e:	65bb      	str	r3, [r7, #88]	; 0x58
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f080 80bd 	bcs.w	8003926 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ba>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 80037ac:	887c      	ldrh	r4, [r7, #2]
 80037ae:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80037b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	f107 0008 	add.w	r0, r7, #8
 80037c2:	462a      	mov	r2, r5
 80037c4:	4621      	mov	r1, r4
 80037c6:	f7fd fc85 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x17c>
 80037d0:	4a6a      	ldr	r2, [pc, #424]	; (800397c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x310>)
 80037d2:	496b      	ldr	r1, [pc, #428]	; (8003980 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x314>)
 80037d4:	486b      	ldr	r0, [pc, #428]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 80037d6:	f017 f995 	bl	801ab04 <iprintf>
 80037da:	4b6b      	ldr	r3, [pc, #428]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 80037dc:	4a6b      	ldr	r2, [pc, #428]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 80037de:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80037e2:	486b      	ldr	r0, [pc, #428]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 80037e4:	f016 fcb8 	bl	801a158 <__assert_func>
            if (!window.buffer) {
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80037ee:	4a63      	ldr	r2, [pc, #396]	; (800397c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x310>)
 80037f0:	4963      	ldr	r1, [pc, #396]	; (8003980 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x314>)
 80037f2:	4864      	ldr	r0, [pc, #400]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 80037f4:	f017 f986 	bl	801ab04 <iprintf>
 80037f8:	4b63      	ldr	r3, [pc, #396]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 80037fa:	4a64      	ldr	r2, [pc, #400]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 80037fc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003800:	4863      	ldr	r0, [pc, #396]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 8003802:	f016 fca9 	bl	801a158 <__assert_func>
            }

            ret = numpy::mean_axis0(&window, &mean_matrix);
 8003806:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800380a:	f107 0308 	add.w	r3, r7, #8
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe f9f7 	bl	8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>
 8003816:	64b8      	str	r0, [r7, #72]	; 0x48
            if (ret != EIDSP_OK) {
 8003818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1ca>
                EIDSP_ERR(ret);
 800381e:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x328>)
 8003820:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003822:	4858      	ldr	r0, [pc, #352]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 8003824:	f017 f96e 	bl	801ab04 <iprintf>
 8003828:	4b57      	ldr	r3, [pc, #348]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 800382a:	4a58      	ldr	r2, [pc, #352]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 800382c:	f240 116d 	movw	r1, #365	; 0x16d
 8003830:	4857      	ldr	r0, [pc, #348]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 8003832:	f016 fc91 	bl	801a158 <__assert_func>
            }

            if (variance_normalization == true) {
 8003836:	787b      	ldrb	r3, [r7, #1]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d147      	bne.n	80038cc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x260>
                ret = numpy::std_axis0(&window, &window_variance);
 800383c:	f107 0218 	add.w	r2, r7, #24
 8003840:	f107 0308 	add.w	r3, r7, #8
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fa5e 	bl	8001d08 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>
 800384c:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != EIDSP_OK) {
 800384e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x200>
                    EIDSP_ERR(ret);
 8003854:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x328>)
 8003856:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003858:	484a      	ldr	r0, [pc, #296]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 800385a:	f017 f953 	bl	801ab04 <iprintf>
 800385e:	4b4a      	ldr	r3, [pc, #296]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 8003860:	4a4a      	ldr	r2, [pc, #296]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 8003862:	f240 1173 	movw	r1, #371	; 0x173
 8003866:	484a      	ldr	r0, [pc, #296]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 8003868:	f016 fc76 	bl	801a158 <__assert_func>
                }

                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 800387e:	2300      	movs	r3, #0
 8003880:	657b      	str	r3, [r7, #84]	; 0x54
 8003882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003886:	429a      	cmp	r2, r3
 8003888:	d244      	bcs.n	8003914 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2a8>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)-mean_matrix.buffer[col]) /
 800388a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388c:	ed93 7a00 	vldr	s14, [r3]
 8003890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	edd3 7a00 	vldr	s15, [r3]
 800389c:	ee77 6a67 	vsub.f32	s13, s14, s15
                                             (window_variance.buffer[col] + FLT_EPSILON);
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	edd3 7a00 	vldr	s15, [r3]
 80038ac:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003998 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x32c>
 80038b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                    *(features_buffer_ptr) = (*(features_buffer_ptr)-mean_matrix.buffer[col]) /
 80038b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ba:	edc3 7a00 	vstr	s15, [r3]
                    features_buffer_ptr++;
 80038be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c0:	3304      	adds	r3, #4
 80038c2:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80038c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c6:	3301      	adds	r3, #1
 80038c8:	657b      	str	r3, [r7, #84]	; 0x54
 80038ca:	e7da      	b.n	8003882 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x216>
                }
            }
            else {
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80038de:	2300      	movs	r3, #0
 80038e0:	653b      	str	r3, [r7, #80]	; 0x50
 80038e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d214      	bcs.n	8003914 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2a8>
                    *(features_buffer_ptr) = *(features_buffer_ptr)-mean_matrix.buffer[col];
 80038ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ec:	ed93 7a00 	vldr	s14, [r3]
 80038f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003902:	edc3 7a00 	vstr	s15, [r3]
                    features_buffer_ptr++;
 8003906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003908:	3304      	adds	r3, #4
 800390a:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 800390c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390e:	3301      	adds	r3, #1
 8003910:	653b      	str	r3, [r7, #80]	; 0x50
 8003912:	e7e6      	b.n	80038e2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x276>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 8003914:	f107 0308 	add.w	r3, r7, #8
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fc07 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 800391e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003920:	3301      	adds	r3, #1
 8003922:	65bb      	str	r3, [r7, #88]	; 0x58
 8003924:	e73c      	b.n	80037a0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x134>
                }
            }
        }

        if (scale) {
 8003926:	783b      	ldrb	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d012      	beq.n	8003952 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2e6>
            ret = numpy::normalize(features_matrix);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fe fe2d 	bl	800258c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 8003932:	64b8      	str	r0, [r7, #72]	; 0x48
            if (ret != EIDSP_OK) {
 8003934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2e6>
                EIDSP_ERR(ret);
 800393a:	4a16      	ldr	r2, [pc, #88]	; (8003994 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x328>)
 800393c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800393e:	4811      	ldr	r0, [pc, #68]	; (8003984 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x318>)
 8003940:	f017 f8e0 	bl	801ab04 <iprintf>
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x31c>)
 8003946:	4a11      	ldr	r2, [pc, #68]	; (800398c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x320>)
 8003948:	f240 1189 	movw	r1, #393	; 0x189
 800394c:	4810      	ldr	r0, [pc, #64]	; (8003990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x324>)
 800394e:	f016 fc03 	bl	801a158 <__assert_func>
            }
        }

        return EIDSP_OK;
 8003952:	2400      	movs	r4, #0
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 8003954:	f107 0318 	add.w	r3, r7, #24
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd fbe7 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 800395e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd fbe2 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 8003968:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd fbdd 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 8003972:	4623      	mov	r3, r4
    }
 8003974:	4618      	mov	r0, r3
 8003976:	3760      	adds	r7, #96	; 0x60
 8003978:	46bd      	mov	sp, r7
 800397a:	bdb0      	pop	{r4, r5, r7, pc}
 800397c:	0801b918 	.word	0x0801b918
 8003980:	fffffc16 	.word	0xfffffc16
 8003984:	0801b92c 	.word	0x0801b92c
 8003988:	0801b93c 	.word	0x0801b93c
 800398c:	0801c588 	.word	0x0801c588
 8003990:	0801c418 	.word	0x0801c418
 8003994:	0801ba8c 	.word	0x0801ba8c
 8003998:	34000000 	.word	0x34000000
 800399c:	00000000 	.word	0x00000000

080039a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	ed2d 8b02 	vpush	{d8}
 80039a6:	b099      	sub	sp, #100	; 0x64
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	460b      	mov	r3, r1
 80039b2:	817b      	strh	r3, [r7, #10]
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 80039b4:	897b      	ldrh	r3, [r7, #10]
 80039b6:	3302      	adds	r3, #2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
 80039bc:	897b      	ldrh	r3, [r7, #10]
 80039be:	3302      	adds	r3, #2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);
 80039c4:	897b      	ldrh	r3, [r7, #10]
 80039c6:	3302      	adds	r3, #2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 80039cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80039ce:	f016 fcb1 	bl	801a334 <malloc>
 80039d2:	4603      	mov	r3, r0
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
        if (!mels) {
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x52>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80039dc:	4abc      	ldr	r2, [pc, #752]	; (8003cd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 80039de:	49bd      	ldr	r1, [pc, #756]	; (8003cd4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 80039e0:	48bd      	ldr	r0, [pc, #756]	; (8003cd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 80039e2:	f017 f88f 	bl	801ab04 <iprintf>
 80039e6:	4bbd      	ldr	r3, [pc, #756]	; (8003cdc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 80039e8:	4abd      	ldr	r2, [pc, #756]	; (8003ce0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 80039ea:	2149      	movs	r1, #73	; 0x49
 80039ec:	48bd      	ldr	r0, [pc, #756]	; (8003ce4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 80039ee:	f016 fbb3 	bl	801a158 <__assert_func>
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d104      	bne.n	8003a06 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x66>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d00a      	beq.n	8003a1c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x7c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a06:	4ab8      	ldr	r2, [pc, #736]	; (8003ce8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>)
 8003a08:	49b8      	ldr	r1, [pc, #736]	; (8003cec <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x34c>)
 8003a0a:	48b3      	ldr	r0, [pc, #716]	; (8003cd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003a0c:	f017 f87a 	bl	801ab04 <iprintf>
 8003a10:	4bb2      	ldr	r3, [pc, #712]	; (8003cdc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003a12:	4ab3      	ldr	r2, [pc, #716]	; (8003ce0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003a14:	214d      	movs	r1, #77	; 0x4d
 8003a16:	48b3      	ldr	r0, [pc, #716]	; (8003ce4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003a18:	f016 fb9e 	bl	801a158 <__assert_func>
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	6892      	ldr	r2, [r2, #8]
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f016 fcb8 	bl	801a3a4 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 8003a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a42:	f7ff f903 	bl	8002c4c <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003a46:	eeb0 8a40 	vmov.f32	s16, s0
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4c:	ee07 3a90 	vmov	s15, r3
 8003a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a54:	eeb0 0a67 	vmov.f32	s0, s15
 8003a58:	f7ff f8f8 	bl	8002c4c <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003a5c:	eef0 7a40 	vmov.f32	s15, s0
            functions::frequency_to_mel(static_cast<float>(low_freq)),
            functions::frequency_to_mel(static_cast<float>(high_freq)),
            num_filter + 2,
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	3302      	adds	r3, #2
        numpy::linspace(
 8003a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a66:	4618      	mov	r0, r3
 8003a68:	eef0 0a67 	vmov.f32	s1, s15
 8003a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a70:	f7fe fc7e 	bl	8002370 <_ZN2ei5numpy8linspaceEffmPf>
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 8003a74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a76:	f016 fc5d 	bl	801a334 <malloc>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
        if (!hertz) {
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x100>
            ei_dsp_free(mels, mels_mem_size);
 8003a84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a86:	f016 fc5d 	bl	801a344 <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003a8a:	4a91      	ldr	r2, [pc, #580]	; (8003cd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 8003a8c:	4991      	ldr	r1, [pc, #580]	; (8003cd4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 8003a8e:	4892      	ldr	r0, [pc, #584]	; (8003cd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003a90:	f017 f838 	bl	801ab04 <iprintf>
 8003a94:	4b91      	ldr	r3, [pc, #580]	; (8003cdc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003a96:	4a92      	ldr	r2, [pc, #584]	; (8003ce0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003a98:	2165      	movs	r1, #101	; 0x65
 8003a9a:	4892      	ldr	r0, [pc, #584]	; (8003ce4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003a9c:	f016 fb5c 	bl	801a158 <__assert_func>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003aa6:	897b      	ldrh	r3, [r7, #10]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	db74      	blt.n	8003b9c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1fc>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 8003ab2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aba:	4413      	add	r3, r2
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac8:	18d4      	adds	r4, r2, r3
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	f7ff f949 	bl	8002d64 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 8003ad2:	eef0 7a40 	vmov.f32	s15, s0
 8003ad6:	edc4 7a00 	vstr	s15, [r4]
            if (hertz[ix] < low_freq) {
 8003ada:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ae2:	4413      	add	r3, r2
 8003ae4:	ed93 7a00 	vldr	s14, [r3]
 8003ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afa:	d50b      	bpl.n	8003b14 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x174>
                hertz[ix] = low_freq;
 8003afc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b04:	4413      	add	r3, r2
 8003b06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b08:	ee07 2a90 	vmov	s15, r2
 8003b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b10:	edc3 7a00 	vstr	s15, [r3]
            }
            if (hertz[ix] > high_freq) {
 8003b14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b1c:	4413      	add	r3, r2
 8003b1e:	ed93 7a00 	vldr	s14, [r3]
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b34:	dd0b      	ble.n	8003b4e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1ae>
                hertz[ix] = high_freq;
 8003b36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b3e:	4413      	add	r3, r2
 8003b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b42:	ee07 2a90 	vmov	s15, r2
 8003b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4a:	edc3 7a00 	vstr	s15, [r3]

            // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
            // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
            // thus calculating the bucket to 64, not 65.
            // we're adjusting this here a tiny bit to ensure we have the same result
            if (ix == num_filter + 2 - 1) {
 8003b4e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	3301      	adds	r3, #1
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d11a      	bne.n	8003b90 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1f0>
                hertz[ix] -= 0.001;
 8003b5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b62:	4413      	add	r3, r2
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fd0e 	bl	8000588 <__aeabi_f2d>
 8003b6c:	a356      	add	r3, pc, #344	; (adr r3, 8003cc8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x328>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc fba9 	bl	80002c8 <__aeabi_dsub>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b86:	18d4      	adds	r4, r2, r3
 8003b88:	f7fd f84e 	bl	8000c28 <__aeabi_d2f>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	6023      	str	r3, [r4, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003b90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b94:	3301      	adds	r3, #1
 8003b96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003b9a:	e784      	b.n	8003aa6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x106>
            }
        }
        ei_dsp_free(mels, mels_mem_size);
 8003b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b9e:	f016 fbd1 	bl	801a344 <free>

        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 8003ba2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ba4:	f016 fbc6 	bl	801a334 <malloc>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
        if (!freq_index) {
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x22e>
            ei_dsp_free(hertz, hertz_mem_size);
 8003bb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bb4:	f016 fbc6 	bl	801a344 <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003bb8:	4a45      	ldr	r2, [pc, #276]	; (8003cd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 8003bba:	4946      	ldr	r1, [pc, #280]	; (8003cd4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 8003bbc:	4846      	ldr	r0, [pc, #280]	; (8003cd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003bbe:	f016 ffa1 	bl	801ab04 <iprintf>
 8003bc2:	4b46      	ldr	r3, [pc, #280]	; (8003cdc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003bc4:	4a46      	ldr	r2, [pc, #280]	; (8003ce0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	4846      	ldr	r0, [pc, #280]	; (8003ce4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003bca:	f016 fac5 	bl	801a158 <__assert_func>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003bd4:	897b      	ldrh	r3, [r7, #10]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	db2b      	blt.n	8003c38 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x298>
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3301      	adds	r3, #1
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf4:	4413      	add	r3, r2
 8003bf6:	edd3 7a00 	vldr	s15, [r3]
 8003bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	ee07 3a90 	vmov	s15, r3
 8003c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c0c:	eeb0 0a66 	vmov.f32	s0, s13
 8003c10:	f7fd fb09 	bl	8001226 <_ZSt5floorf>
 8003c14:	eef0 7a40 	vmov.f32	s15, s0
 8003c18:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c20:	4413      	add	r3, r2
 8003c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c26:	ee17 2a90 	vmov	r2, s15
 8003c2a:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003c2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c30:	3301      	adds	r3, #1
 8003c32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003c36:	e7cd      	b.n	8003bd4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x234>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 8003c38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c3a:	f016 fb83 	bl	801a344 <free>

        for (size_t i = 0; i < num_filter; i++) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	653b      	str	r3, [r7, #80]	; 0x50
 8003c42:	897b      	ldrh	r3, [r7, #10]
 8003c44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c46:	429a      	cmp	r2, r3
 8003c48:	f080 80b4 	bcs.w	8003db4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x414>
            int left = freq_index[i];
 8003c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c52:	4413      	add	r3, r2
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
            int middle = freq_index[i + 1];
 8003c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c60:	4413      	add	r3, r2
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
            int right = freq_index[i + 2];
 8003c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c68:	3302      	adds	r3, #2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6e:	4413      	add	r3, r2
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 8003c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f107 0010 	add.w	r0, r7, #16
 8003c82:	2300      	movs	r3, #0
 8003c84:	2101      	movs	r1, #1
 8003c86:	f7fd fa25 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x306>
 8003c90:	4a0f      	ldr	r2, [pc, #60]	; (8003cd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 8003c92:	4910      	ldr	r1, [pc, #64]	; (8003cd4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 8003c94:	4810      	ldr	r0, [pc, #64]	; (8003cd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003c96:	f016 ff35 	bl	801ab04 <iprintf>
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003c9e:	218c      	movs	r1, #140	; 0x8c
 8003ca0:	4810      	ldr	r0, [pc, #64]	; (8003ce4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003ca2:	f016 fa59 	bl	801a158 <__assert_func>
            if (!z.buffer) {
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d121      	bne.n	8003cf0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x350>
                ei_dsp_free(freq_index, freq_index_mem_size);
 8003cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cae:	f016 fb49 	bl	801a344 <free>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003cb2:	4a07      	ldr	r2, [pc, #28]	; (8003cd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 8003cb4:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 8003cb6:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003cb8:	f016 ff24 	bl	801ab04 <iprintf>
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003cc0:	218f      	movs	r1, #143	; 0x8f
 8003cc2:	4808      	ldr	r0, [pc, #32]	; (8003ce4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003cc4:	f016 fa48 	bl	801a158 <__assert_func>
 8003cc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ccc:	3f50624d 	.word	0x3f50624d
 8003cd0:	0801b918 	.word	0x0801b918
 8003cd4:	fffffc16 	.word	0xfffffc16
 8003cd8:	0801b92c 	.word	0x0801b92c
 8003cdc:	0801b93c 	.word	0x0801b93c
 8003ce0:	0801c5d4 	.word	0x0801c5d4
 8003ce4:	0801c650 	.word	0x0801c650
 8003ce8:	0801b9dc 	.word	0x0801b9dc
 8003cec:	fffffc14 	.word	0xfffffc14
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	ee07 3a10 	vmov	s14, r3
 8003d00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	eef0 0a47 	vmov.f32	s1, s14
 8003d18:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1c:	f7fe fb28 	bl	8002370 <_ZN2ei5numpy8linspaceEffmPf>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 8003d20:	6938      	ldr	r0, [r7, #16]
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d34:	f7ff f872 	bl	8002e1c <_ZN2ei8speechpy9functions8triangleEPfjiii>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003d38:	2300      	movs	r3, #0
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	dc2c      	bgt.n	8003da2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x402>
                size_t index = (i * filterbanks->cols) + (left + zx);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d56:	440a      	add	r2, r1
 8003d58:	4413      	add	r3, r2
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48

                if (output_transposed) {
 8003d5c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3da>
                    index = ((left + zx) * filterbanks->rows) + i;
 8003d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	4413      	add	r3, r2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	fb03 f302 	mul.w	r3, r3, r2
 8003d74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d76:	4413      	add	r3, r2
 8003d78:	64bb      	str	r3, [r7, #72]	; 0x48
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8c:	18d4      	adds	r4, r2, r3
 8003d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d92:	f7fd fced 	bl	8001770 <_ZN2ei5numpy17quantize_zero_oneEf>
 8003d96:	4603      	mov	r3, r0
 8003d98:	7023      	strb	r3, [r4, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da0:	e7cc      	b.n	8003d3c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x39c>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 8003da2:	f107 0310 	add.w	r3, r7, #16
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd f9c0 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
 8003dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dae:	3301      	adds	r3, #1
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
 8003db2:	e746      	b.n	8003c42 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2a2>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 8003db4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d009      	beq.n	8003dd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x430>
            uint16_t r = filterbanks->rows;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	847b      	strh	r3, [r7, #34]	; 0x22
            filterbanks->rows = filterbanks->cols;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	605a      	str	r2, [r3, #4]
            filterbanks->cols = r;
 8003dca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	609a      	str	r2, [r3, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 8003dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dd2:	f016 fab7 	bl	801a344 <free>

        return EIDSP_OK;
 8003dd6:	2300      	movs	r3, #0
    }
 8003dd8:	4618      	mov	r0, r3
 8003dda:	375c      	adds	r7, #92	; 0x5c
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	ecbd 8b02 	vpop	{d8}
 8003de2:	bd90      	pop	{r4, r7, pc}

08003de4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b0a3      	sub	sp, #140	; 0x8c
 8003de8:	af04      	add	r7, sp, #16
 8003dea:	6178      	str	r0, [r7, #20]
 8003dec:	6139      	str	r1, [r7, #16]
 8003dee:	60fa      	str	r2, [r7, #12]
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003df6:	edc7 0a00 	vstr	s1, [r7]
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_filters = 40,
        uint16_t fft_length = 512, uint32_t low_frequency = 300, uint32_t high_frequency = 0
        )
    {
        int ret = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	667b      	str	r3, [r7, #100]	; 0x64

        if (high_frequency == 0) {
 8003dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2a>
            high_frequency = sampling_frequency / 2;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        stack_frames_info_t stack_frame_info = { 0 };
 8003e0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
        stack_frame_info.signal = signal;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
        ret = processing::stack_frames(
 8003e1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e22:	2200      	movs	r2, #0
 8003e24:	edd7 0a00 	vldr	s1, [r7]
 8003e28:	ed97 0a01 	vldr	s0, [r7, #4]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fa30 	bl	8003294 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb>
 8003e34:	6678      	str	r0, [r7, #100]	; 0x64
            sampling_frequency,
            frame_length,
            frame_stride,
            false
        );
        if (ret != 0) {
 8003e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x6e>
            EIDSP_ERR(ret);
 8003e3c:	4aa8      	ldr	r2, [pc, #672]	; (80040e0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2fc>)
 8003e3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003e40:	48a8      	ldr	r0, [pc, #672]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8003e42:	f016 fe5f 	bl	801ab04 <iprintf>
 8003e46:	4ba8      	ldr	r3, [pc, #672]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8003e48:	4aa8      	ldr	r2, [pc, #672]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8003e4a:	21da      	movs	r1, #218	; 0xda
 8003e4c:	48a8      	ldr	r0, [pc, #672]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8003e4e:	f016 f983 	bl	801a158 <__assert_func>
        }
        if (stack_frame_info.frame_ixs->size() != out_features->rows) {
 8003e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e54:	4618      	mov	r0, r3
 8003e56:	f002 f98c 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xa0>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003e6e:	4aa1      	ldr	r2, [pc, #644]	; (80040f4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x310>)
 8003e70:	49a1      	ldr	r1, [pc, #644]	; (80040f8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x314>)
 8003e72:	489c      	ldr	r0, [pc, #624]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8003e74:	f016 fe46 	bl	801ab04 <iprintf>
 8003e78:	4b9b      	ldr	r3, [pc, #620]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8003e7a:	4a9c      	ldr	r2, [pc, #624]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8003e7c:	21dd      	movs	r1, #221	; 0xdd
 8003e7e:	489c      	ldr	r0, [pc, #624]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8003e80:	f016 f96a 	bl	801a158 <__assert_func>
        }
        if (num_filters != out_features->cols) {
 8003e84:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d00a      	beq.n	8003ea6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xc2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003e90:	4a98      	ldr	r2, [pc, #608]	; (80040f4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x310>)
 8003e92:	4999      	ldr	r1, [pc, #612]	; (80040f8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x314>)
 8003e94:	4893      	ldr	r0, [pc, #588]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8003e96:	f016 fe35 	bl	801ab04 <iprintf>
 8003e9a:	4b93      	ldr	r3, [pc, #588]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8003e9c:	4a93      	ldr	r2, [pc, #588]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8003e9e:	21e0      	movs	r1, #224	; 0xe0
 8003ea0:	4893      	ldr	r0, [pc, #588]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8003ea2:	f016 f959 	bl	801a158 <__assert_func>
        }
        if (stack_frame_info.frame_ixs->size() != out_energies->rows || out_energies->cols != 1) {
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 f962 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d103      	bne.n	8003ec0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xdc>
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d001      	beq.n	8003ec4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xe0>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xe2>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003eca:	4a8a      	ldr	r2, [pc, #552]	; (80040f4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x310>)
 8003ecc:	498a      	ldr	r1, [pc, #552]	; (80040f8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x314>)
 8003ece:	4885      	ldr	r0, [pc, #532]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8003ed0:	f016 fe18 	bl	801ab04 <iprintf>
 8003ed4:	4b84      	ldr	r3, [pc, #528]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8003ed6:	4a85      	ldr	r2, [pc, #532]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8003ed8:	21e3      	movs	r1, #227	; 0xe3
 8003eda:	4885      	ldr	r0, [pc, #532]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8003edc:	f016 f93c 	bl	801a158 <__assert_func>
        }
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	6892      	ldr	r2, [r2, #8]
 8003eec:	fb02 f303 	mul.w	r3, r2, r3
 8003ef0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d20b      	bcs.n	8003f0e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x12a>
            *(out_features->buffer + i) = 0;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f08:	3301      	adds	r3, #1
 8003f0a:	677b      	str	r3, [r7, #116]	; 0x74
 8003f0c:	e7ea      	b.n	8003ee4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x100>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 8003f0e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003f1c:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003f20:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003f24:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	4b73      	ldr	r3, [pc, #460]	; (80040fc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x318>)
 8003f2e:	f7fd f913 	bl	8001158 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x16a>
 8003f38:	4a71      	ldr	r2, [pc, #452]	; (8004100 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x31c>)
 8003f3a:	4972      	ldr	r1, [pc, #456]	; (8004104 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x320>)
 8003f3c:	4869      	ldr	r0, [pc, #420]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8003f3e:	f016 fde1 	bl	801ab04 <iprintf>
 8003f42:	4b69      	ldr	r3, [pc, #420]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8003f44:	4a69      	ldr	r2, [pc, #420]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8003f46:	21ee      	movs	r1, #238	; 0xee
 8003f48:	4869      	ldr	r0, [pc, #420]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8003f4a:	f016 f905 	bl	801a158 <__assert_func>
#else
        EI_DSP_MATRIX(filterbanks, num_filters, coefficients);
#endif
        if (!filterbanks.buffer) {
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x186>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f54:	4a6a      	ldr	r2, [pc, #424]	; (8004100 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x31c>)
 8003f56:	496b      	ldr	r1, [pc, #428]	; (8004104 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x320>)
 8003f58:	4862      	ldr	r0, [pc, #392]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8003f5a:	f016 fdd3 	bl	801ab04 <iprintf>
 8003f5e:	4b62      	ldr	r3, [pc, #392]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8003f60:	4a62      	ldr	r2, [pc, #392]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8003f62:	21f3      	movs	r1, #243	; 0xf3
 8003f64:	4862      	ldr	r0, [pc, #392]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8003f66:	f016 f8f7 	bl	801a158 <__assert_func>
        }
        ret = feature::filterbanks(
 8003f6a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003f6e:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003f72:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003f76:	2301      	movs	r3, #1
 8003f78:	9302      	str	r3, [sp, #8]
 8003f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f7ff fd0a 	bl	80039a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
 8003f8c:	6678      	str	r0, [r7, #100]	; 0x64
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 8003f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x1c6>
            EIDSP_ERR(ret);
 8003f94:	4a52      	ldr	r2, [pc, #328]	; (80040e0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2fc>)
 8003f96:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003f98:	4852      	ldr	r0, [pc, #328]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8003f9a:	f016 fdb3 	bl	801ab04 <iprintf>
 8003f9e:	4b52      	ldr	r3, [pc, #328]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8003fa0:	4a52      	ldr	r2, [pc, #328]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8003fa2:	21f8      	movs	r1, #248	; 0xf8
 8003fa4:	4852      	ldr	r0, [pc, #328]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8003fa6:	f016 f8d7 	bl	801a158 <__assert_func>
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
 8003faa:	2300      	movs	r3, #0
 8003fac:	673b      	str	r3, [r7, #112]	; 0x70
 8003fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f002 f8de 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	bf34      	ite	cc
 8003fbe:	2301      	movcc	r3, #1
 8003fc0:	2300      	movcs	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80df 	beq.w	8004188 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3a4>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 8003fca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8003fd6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fde:	2101      	movs	r1, #1
 8003fe0:	f7fd f878 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x21c>
 8003fea:	4a45      	ldr	r2, [pc, #276]	; (8004100 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x31c>)
 8003fec:	4945      	ldr	r1, [pc, #276]	; (8004104 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x320>)
 8003fee:	483d      	ldr	r0, [pc, #244]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8003ff0:	f016 fd88 	bl	801ab04 <iprintf>
 8003ff4:	4b3c      	ldr	r3, [pc, #240]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8003ff6:	4a3d      	ldr	r2, [pc, #244]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8003ff8:	21fc      	movs	r1, #252	; 0xfc
 8003ffa:	483d      	ldr	r0, [pc, #244]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8003ffc:	f016 f8ac 	bl	801a158 <__assert_func>
            if (!power_spectrum_frame.buffer) {
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x238>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004006:	4a3e      	ldr	r2, [pc, #248]	; (8004100 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x31c>)
 8004008:	493e      	ldr	r1, [pc, #248]	; (8004104 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x320>)
 800400a:	4836      	ldr	r0, [pc, #216]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 800400c:	f016 fd7a 	bl	801ab04 <iprintf>
 8004010:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 8004012:	4a36      	ldr	r2, [pc, #216]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8004014:	21fe      	movs	r1, #254	; 0xfe
 8004016:	4836      	ldr	r0, [pc, #216]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8004018:	f016 f89e 	bl	801a158 <__assert_func>
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 800401c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401e:	461a      	mov	r2, r3
 8004020:	f107 0018 	add.w	r0, r7, #24
 8004024:	2300      	movs	r3, #0
 8004026:	2101      	movs	r1, #1
 8004028:	f7fd f854 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x266>
 8004032:	4a33      	ldr	r2, [pc, #204]	; (8004100 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x31c>)
 8004034:	4933      	ldr	r1, [pc, #204]	; (8004104 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x320>)
 8004036:	482b      	ldr	r0, [pc, #172]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 8004038:	f016 fd64 	bl	801ab04 <iprintf>
 800403c:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 800403e:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 8004040:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004044:	482a      	ldr	r0, [pc, #168]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 8004046:	f016 f887 	bl	801a158 <__assert_func>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
 800404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800404e:	4618      	mov	r0, r3
 8004050:	f002 f89f 	bl	8006192 <_ZNSt6vectorImSaImEE2atEj>
 8004054:	4603      	mov	r3, r0
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	65bb      	str	r3, [r7, #88]	; 0x58
            size_t signal_length = stack_frame_info.frame_length;
 800405a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405c:	66fb      	str	r3, [r7, #108]	; 0x6c
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 800405e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	441a      	add	r2, r3
 8004064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d908      	bls.n	800407e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x29a>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 800406c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004070:	441a      	add	r2, r3
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800407a:	4413      	add	r3, r2
 800407c:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            ret = stack_frame_info.signal->get_data(
 800407e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004080:	4618      	mov	r0, r3
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004088:	f001 ffd4 	bl	8006034 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 800408c:	6678      	str	r0, [r7, #100]	; 0x64
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 800408e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2c8>
                EIDSP_ERR(ret);
 8004094:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2fc>)
 8004096:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004098:	4812      	ldr	r0, [pc, #72]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 800409a:	f016 fd33 	bl	801ab04 <iprintf>
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 80040a0:	4a12      	ldr	r2, [pc, #72]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 80040a2:	f44f 7189 	mov.w	r1, #274	; 0x112
 80040a6:	4812      	ldr	r0, [pc, #72]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 80040a8:	f016 f856 	bl	801a158 <__assert_func>
            }

            ret = processing::power_spectrum(
 80040ac:	69b8      	ldr	r0, [r7, #24]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
            ret = processing::power_spectrum(
 80040b0:	4619      	mov	r1, r3
 80040b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	f7ff fa58 	bl	8003570 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>
 80040c0:	6678      	str	r0, [r7, #100]	; 0x64
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 80040c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01f      	beq.n	8004108 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x324>
                EIDSP_ERR(ret);
 80040c8:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2fc>)
 80040ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80040cc:	4805      	ldr	r0, [pc, #20]	; (80040e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x300>)
 80040ce:	f016 fd19 	bl	801ab04 <iprintf>
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x304>)
 80040d4:	4a05      	ldr	r2, [pc, #20]	; (80040ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x308>)
 80040d6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80040da:	4805      	ldr	r0, [pc, #20]	; (80040f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x30c>)
 80040dc:	f016 f83c 	bl	801a158 <__assert_func>
 80040e0:	0801ba8c 	.word	0x0801ba8c
 80040e4:	0801b92c 	.word	0x0801b92c
 80040e8:	0801b93c 	.word	0x0801b93c
 80040ec:	0801c6c4 	.word	0x0801c6c4
 80040f0:	0801c650 	.word	0x0801c650
 80040f4:	0801b9dc 	.word	0x0801b9dc
 80040f8:	fffffc14 	.word	0xfffffc14
 80040fc:	080018c5 	.word	0x080018c5
 8004100:	0801b918 	.word	0x0801b918
 8004104:	fffffc16 	.word	0xfffffc16
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800410c:	4618      	mov	r0, r3
 800410e:	f7fd f919 	bl	8001344 <_ZN2ei5numpy3sumEPfj>
 8004112:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
            if (energy == 0) {
 8004116:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800411a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004122:	d102      	bne.n	800412a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x346>
                energy = FLT_EPSILON;
 8004124:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8004128:	66bb      	str	r3, [r7, #104]	; 0x68
            }

            out_energies->buffer[ix] = energy;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004136:	601a      	str	r2, [r3, #0]

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 8004138:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800413a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004148:	f7fd f924 	bl	8001394 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>
 800414c:	6678      	str	r0, [r7, #100]	; 0x64
                power_spectrum_frame_size,
                &filterbanks,
                out_features
            );

            if (ret != 0) {
 800414e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00b      	beq.n	800416c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x388>
                EIDSP_ERR(ret);
 8004154:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3cc>)
 8004156:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004158:	4816      	ldr	r0, [pc, #88]	; (80041b4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d0>)
 800415a:	f016 fcd3 	bl	801ab04 <iprintf>
 800415e:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d4>)
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d8>)
 8004162:	f44f 7199 	mov.w	r1, #306	; 0x132
 8004166:	4816      	ldr	r0, [pc, #88]	; (80041c0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3dc>)
 8004168:	f015 fff6 	bl	801a158 <__assert_func>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 800416c:	f107 0318 	add.w	r3, r7, #24
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc ffdb 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8004176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc ffd6 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
 8004180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004182:	3301      	adds	r3, #1
 8004184:	673b      	str	r3, [r7, #112]	; 0x70
 8004186:	e712      	b.n	8003fae <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x1ca>
            }
        }

        functions::zero_handling(out_features);
 8004188:	6978      	ldr	r0, [r7, #20]
 800418a:	f7fe fe34 	bl	8002df6 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 800418e:	2400      	movs	r4, #0
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8004190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004194:	4618      	mov	r0, r3
 8004196:	f7fd f80d 	bl	80011b4 <_ZN2ei19ei_quantized_matrixD1Ev>
        stack_frames_info_t stack_frame_info = { 0 };
 800419a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fef6 	bl	8002f90 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
        return EIDSP_OK;
 80041a4:	4623      	mov	r3, r4
    }
 80041a6:	4618      	mov	r0, r3
 80041a8:	377c      	adds	r7, #124	; 0x7c
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	0801ba8c 	.word	0x0801ba8c
 80041b4:	0801b92c 	.word	0x0801b92c
 80041b8:	0801b93c 	.word	0x0801b93c
 80041bc:	0801c6c4 	.word	0x0801c6c4
 80041c0:	0801c650 	.word	0x0801c650

080041c4 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfft>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_filters
     */
    static matrix_size_t calculate_mfe_buffer_size(
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6178      	str	r0, [r7, #20]
 80041cc:	6139      	str	r1, [r7, #16]
 80041ce:	60fa      	str	r2, [r7, #12]
 80041d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80041d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80041d8:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_filters = 40)
    {
        uint16_t rows = processing::calculate_no_of_stack_frames(
 80041da:	2200      	movs	r2, #0
 80041dc:	edd7 0a01 	vldr	s1, [r7, #4]
 80041e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	6938      	ldr	r0, [r7, #16]
 80041e8:	f7ff f95c 	bl	80034a4 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>
 80041ec:	4603      	mov	r3, r0
            signal_length,
            sampling_frequency,
            frame_length,
            frame_stride,
            false);
 80041ee:	83fb      	strh	r3, [r7, #30]
        uint16_t cols = num_filters;
 80041f0:	887b      	ldrh	r3, [r7, #2]
 80041f2:	83bb      	strh	r3, [r7, #28]

        matrix_size_t size_matrix;
        size_matrix.rows = rows;
 80041f4:	8bfa      	ldrh	r2, [r7, #30]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	601a      	str	r2, [r3, #0]
        size_matrix.cols = cols;
 80041fa:	8bba      	ldrh	r2, [r7, #28]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	605a      	str	r2, [r3, #4]
        return size_matrix;
 8004200:	bf00      	nop
    }
 8004202:	6978      	ldr	r0, [r7, #20]
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>:
     *     In Hz, default is samplerate/2
     * @param dc_elimination Whether the first dc component should
     *     be eliminated or not.
     * @returns 0 if OK
     */
    static int mfcc(matrix_t *out_features, signal_t *signal,
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b0a3      	sub	sp, #140	; 0x8c
 8004210:	af04      	add	r7, sp, #16
 8004212:	6178      	str	r0, [r7, #20]
 8004214:	6139      	str	r1, [r7, #16]
 8004216:	60fa      	str	r2, [r7, #12]
 8004218:	ed87 0a02 	vstr	s0, [r7, #8]
 800421c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004220:	70fb      	strb	r3, [r7, #3]
        uint32_t sampling_frequency, float frame_length = 0.02f, float frame_stride = 0.01f,
        uint8_t num_cepstral = 13, uint16_t num_filters = 40, uint16_t fft_length = 512,
        uint32_t low_frequency = 0, uint32_t high_frequency = 0, bool dc_elimination = true)
    {
        if (out_features->cols != num_cepstral) {
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	429a      	cmp	r2, r3
 800422a:	d00b      	beq.n	8004244 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x38>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800422c:	4ab5      	ldr	r2, [pc, #724]	; (8004504 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f8>)
 800422e:	49b6      	ldr	r1, [pc, #728]	; (8004508 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2fc>)
 8004230:	48b6      	ldr	r0, [pc, #728]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8004232:	f016 fc67 	bl	801ab04 <iprintf>
 8004236:	4bb6      	ldr	r3, [pc, #728]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8004238:	4ab6      	ldr	r2, [pc, #728]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 800423a:	f240 1173 	movw	r1, #371	; 0x173
 800423e:	48b6      	ldr	r0, [pc, #728]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8004240:	f015 ff8a 	bl	801a158 <__assert_func>
            calculate_mfe_buffer_size(
                signal->total_length,
                sampling_frequency,
                frame_length,
                frame_stride,
                num_filters);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6919      	ldr	r1, [r3, #16]
 8004248:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800424c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004250:	edd7 0a01 	vldr	s1, [r7, #4]
 8004254:	ed97 0a02 	vldr	s0, [r7, #8]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	f7ff ffb3 	bl	80041c4 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfft>

        if (out_features->rows != mfe_matrix_size.rows) {
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004264:	429a      	cmp	r2, r3
 8004266:	d00b      	beq.n	8004280 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x74>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004268:	4aa6      	ldr	r2, [pc, #664]	; (8004504 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f8>)
 800426a:	49a7      	ldr	r1, [pc, #668]	; (8004508 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2fc>)
 800426c:	48a7      	ldr	r0, [pc, #668]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 800426e:	f016 fc49 	bl	801ab04 <iprintf>
 8004272:	4ba7      	ldr	r3, [pc, #668]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8004274:	4aa7      	ldr	r2, [pc, #668]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8004276:	f240 117f 	movw	r1, #383	; 0x17f
 800427a:	48a7      	ldr	r0, [pc, #668]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 800427c:	f015 ff6c 	bl	801a158 <__assert_func>
        }

        int ret = EIDSP_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	66bb      	str	r3, [r7, #104]	; 0x68

        // allocate some memory for the MFE result
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 8004284:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004288:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800428c:	2300      	movs	r3, #0
 800428e:	f7fc ff21 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8004292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xa4>
 8004298:	4aa0      	ldr	r2, [pc, #640]	; (800451c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 800429a:	49a1      	ldr	r1, [pc, #644]	; (8004520 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 800429c:	489b      	ldr	r0, [pc, #620]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 800429e:	f016 fc31 	bl	801ab04 <iprintf>
 80042a2:	4b9b      	ldr	r3, [pc, #620]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 80042a4:	4a9b      	ldr	r2, [pc, #620]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 80042a6:	f240 1185 	movw	r1, #389	; 0x185
 80042aa:	489b      	ldr	r0, [pc, #620]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 80042ac:	f015 ff54 	bl	801a158 <__assert_func>
        if (!features_matrix.buffer) {
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xc2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80042b6:	4a99      	ldr	r2, [pc, #612]	; (800451c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 80042b8:	4999      	ldr	r1, [pc, #612]	; (8004520 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 80042ba:	4894      	ldr	r0, [pc, #592]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 80042bc:	f016 fc22 	bl	801ab04 <iprintf>
 80042c0:	4b93      	ldr	r3, [pc, #588]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 80042c2:	4a94      	ldr	r2, [pc, #592]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 80042c4:	f240 1187 	movw	r1, #391	; 0x187
 80042c8:	4893      	ldr	r0, [pc, #588]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 80042ca:	f015 ff45 	bl	801a158 <__assert_func>
        }

        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 80042ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042d0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042d4:	2300      	movs	r3, #0
 80042d6:	2201      	movs	r2, #1
 80042d8:	f7fc fefc 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xee>
 80042e2:	4a8e      	ldr	r2, [pc, #568]	; (800451c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 80042e4:	498e      	ldr	r1, [pc, #568]	; (8004520 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 80042e6:	4889      	ldr	r0, [pc, #548]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 80042e8:	f016 fc0c 	bl	801ab04 <iprintf>
 80042ec:	4b88      	ldr	r3, [pc, #544]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 80042ee:	4a89      	ldr	r2, [pc, #548]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 80042f0:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80042f4:	4888      	ldr	r0, [pc, #544]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 80042f6:	f015 ff2f 	bl	801a158 <__assert_func>
        if (!energy_matrix.buffer) {
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x10c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004300:	4a86      	ldr	r2, [pc, #536]	; (800451c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8004302:	4987      	ldr	r1, [pc, #540]	; (8004520 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8004304:	4881      	ldr	r0, [pc, #516]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8004306:	f016 fbfd 	bl	801ab04 <iprintf>
 800430a:	4b81      	ldr	r3, [pc, #516]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 800430c:	4a81      	ldr	r2, [pc, #516]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 800430e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004312:	4881      	ldr	r0, [pc, #516]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8004314:	f015 ff20 	bl	801a158 <__assert_func>
        }

        ret = mfe(&features_matrix, &energy_matrix, signal,
 8004318:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800431c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004320:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004324:	9303      	str	r3, [sp, #12]
 8004326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800432a:	9302      	str	r3, [sp, #8]
 800432c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	edd7 0a01 	vldr	s1, [r7, #4]
 800433c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	f7ff fd4e 	bl	8003de4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm>
 8004348:	66b8      	str	r0, [r7, #104]	; 0x68
            sampling_frequency, frame_length, frame_stride, num_filters, fft_length,
            low_frequency, high_frequency);
        if (ret != EIDSP_OK) {
 800434a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00b      	beq.n	8004368 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x15c>
            EIDSP_ERR(ret);
 8004350:	4a74      	ldr	r2, [pc, #464]	; (8004524 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 8004352:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004354:	486d      	ldr	r0, [pc, #436]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8004356:	f016 fbd5 	bl	801ab04 <iprintf>
 800435a:	4b6d      	ldr	r3, [pc, #436]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 800435c:	4a6d      	ldr	r2, [pc, #436]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 800435e:	f240 1193 	movw	r1, #403	; 0x193
 8004362:	486d      	ldr	r0, [pc, #436]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8004364:	f015 fef8 	bl	801a158 <__assert_func>
        }

        // ok... now we need to calculate the MFCC from this...
        // first do log() over all features...
        ret = numpy::log(&features_matrix);
 8004368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe f87b 	bl	8002468 <_ZN2ei5numpy3logEPNS_9ei_matrixE>
 8004372:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8004374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x186>
            EIDSP_ERR(ret);
 800437a:	4a6a      	ldr	r2, [pc, #424]	; (8004524 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 800437c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800437e:	4863      	ldr	r0, [pc, #396]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8004380:	f016 fbc0 	bl	801ab04 <iprintf>
 8004384:	4b62      	ldr	r3, [pc, #392]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8004386:	4a63      	ldr	r2, [pc, #396]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8004388:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800438c:	4862      	ldr	r0, [pc, #392]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 800438e:	f015 fee3 	bl	801a158 <__assert_func>
        }

        // now do DST type 2
        ret = numpy::dct2(&features_matrix, DCT_NORMALIZATION_ORTHO);
 8004392:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004396:	2101      	movs	r1, #1
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd f9bd 	bl	8001718 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>
 800439e:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 80043a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x1b2>
            EIDSP_ERR(ret);
 80043a6:	4a5f      	ldr	r2, [pc, #380]	; (8004524 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 80043a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043aa:	4858      	ldr	r0, [pc, #352]	; (800450c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 80043ac:	f016 fbaa 	bl	801ab04 <iprintf>
 80043b0:	4b57      	ldr	r3, [pc, #348]	; (8004510 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 80043b2:	4a58      	ldr	r2, [pc, #352]	; (8004514 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 80043b4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80043b8:	4857      	ldr	r0, [pc, #348]	; (8004518 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 80043ba:	f015 fecd 	bl	801a158 <__assert_func>
        }

        // replace first cepstral coefficient with log of frame energy for DC elimination
        if (dc_elimination) {
 80043be:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d075      	beq.n	80044b2 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2a6>
            for (size_t row = 0; row < features_matrix.rows; row++) {
 80043c6:	2300      	movs	r3, #0
 80043c8:	677b      	str	r3, [r7, #116]	; 0x74
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d26f      	bcs.n	80044b2 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2a6>
                features_matrix.buffer[row * features_matrix.cols] = numpy::log(energy_matrix.buffer[row]);
 80043d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043e0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80043e2:	fb00 f202 	mul.w	r2, r0, r2
 80043e6:	0092      	lsls	r2, r2, #2
 80043e8:	188c      	adds	r4, r1, r2
 80043ea:	623b      	str	r3, [r7, #32]
        g = (int32_t) * ((int32_t *)&a);
 80043ec:	f107 0320 	add.w	r3, r7, #32
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61fb      	str	r3, [r7, #28]
        e = (g - 0x3f2aaaab) & 0xff800000;
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	4b4c      	ldr	r3, [pc, #304]	; (8004528 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x31c>)
 80043f8:	4413      	add	r3, r2
 80043fa:	0ddb      	lsrs	r3, r3, #23
 80043fc:	05db      	lsls	r3, r3, #23
 80043fe:	667b      	str	r3, [r7, #100]	; 0x64
        g = g - e;
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	61fb      	str	r3, [r7, #28]
        m = (float) * ((float *)&g);
 8004408:	f107 031c 	add.w	r3, r7, #28
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	663b      	str	r3, [r7, #96]	; 0x60
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 8004410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800452c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x320>
 800441e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004422:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        f = m - 1.0f;
 8004426:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800442a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800442e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004432:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        s = f * f;
 8004436:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800443a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800443e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8004442:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8004530 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x324>
 8004446:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 800444a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8004534 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x328>
 800444e:	f013 f903 	bl	8017658 <fmaf>
 8004452:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8004456:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8004538 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x32c>
 800445a:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 800445e:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800453c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x330>
 8004462:	f013 f8f9 	bl	8017658 <fmaf>
 8004466:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
        r = fmaf(r, s, t);
 800446a:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 800446e:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8004472:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004476:	f013 f8ef 	bl	8017658 <fmaf>
 800447a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(r, s, f);
 800447e:	ed97 1a16 	vldr	s2, [r7, #88]	; 0x58
 8004482:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8004486:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800448a:	f013 f8e5 	bl	8017658 <fmaf>
 800448e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8004492:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8004496:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8004540 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x334>
 800449a:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800449e:	f013 f8db 	bl	8017658 <fmaf>
 80044a2:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        return r;
 80044a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a8:	6023      	str	r3, [r4, #0]
            for (size_t row = 0; row < features_matrix.rows; row++) {
 80044aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ac:	3301      	adds	r3, #1
 80044ae:	677b      	str	r3, [r7, #116]	; 0x74
 80044b0:	e78b      	b.n	80043ca <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x1be>
            }
        }

        // copy to the output...
        for (size_t row = 0; row < features_matrix.rows; row++) {
 80044b2:	2300      	movs	r3, #0
 80044b4:	673b      	str	r3, [r7, #112]	; 0x70
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d242      	bcs.n	8004544 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x338>
            for(int i = 0; i < num_cepstral; i++) {
 80044be:	2300      	movs	r3, #0
 80044c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044c6:	429a      	cmp	r2, r3
 80044c8:	da18      	bge.n	80044fc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f0>
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
 80044ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80044d0:	fb01 f103 	mul.w	r1, r1, r3
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	440b      	add	r3, r1
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80044e4:	fb00 f003 	mul.w	r0, r0, r3
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	4403      	add	r3, r0
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	601a      	str	r2, [r3, #0]
            for(int i = 0; i < num_cepstral; i++) {
 80044f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f6:	3301      	adds	r3, #1
 80044f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044fa:	e7e2      	b.n	80044c2 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2b6>
        for (size_t row = 0; row < features_matrix.rows; row++) {
 80044fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044fe:	3301      	adds	r3, #1
 8004500:	673b      	str	r3, [r7, #112]	; 0x70
 8004502:	e7d8      	b.n	80044b6 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2aa>
 8004504:	0801b9dc 	.word	0x0801b9dc
 8004508:	fffffc14 	.word	0xfffffc14
 800450c:	0801b92c 	.word	0x0801b92c
 8004510:	0801b93c 	.word	0x0801b93c
 8004514:	0801c758 	.word	0x0801c758
 8004518:	0801c650 	.word	0x0801c650
 800451c:	0801b918 	.word	0x0801b918
 8004520:	fffffc16 	.word	0xfffffc16
 8004524:	0801ba8c 	.word	0x0801ba8c
 8004528:	c0d55555 	.word	0xc0d55555
 800452c:	34000000 	.word	0x34000000
 8004530:	be8ef46d 	.word	0xbe8ef46d
 8004534:	3e6c6078 	.word	0x3e6c6078
 8004538:	beff712d 	.word	0xbeff712d
 800453c:	3ea9e51a 	.word	0x3ea9e51a
 8004540:	3f317218 	.word	0x3f317218
            }
        }

        return EIDSP_OK;
 8004544:	2400      	movs	r4, #0
        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 8004546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc fdee 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 8004550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc fde9 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 800455a:	4623      	mov	r3, r4
    }
 800455c:	4618      	mov	r0, r3
 800455e:	377c      	adds	r7, #124	; 0x7c
 8004560:	46bd      	mov	sp, r7
 8004562:	bd90      	pop	{r4, r7, pc}

08004564 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_cepstral
     */
    static matrix_size_t calculate_mfcc_buffer_size(
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6178      	str	r0, [r7, #20]
 800456c:	6139      	str	r1, [r7, #16]
 800456e:	60fa      	str	r2, [r7, #12]
 8004570:	ed87 0a02 	vstr	s0, [r7, #8]
 8004574:	edc7 0a01 	vstr	s1, [r7, #4]
 8004578:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_cepstral = 13)
    {
        uint16_t rows = processing::calculate_no_of_stack_frames(
 800457a:	2200      	movs	r2, #0
 800457c:	edd7 0a01 	vldr	s1, [r7, #4]
 8004580:	ed97 0a02 	vldr	s0, [r7, #8]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	6938      	ldr	r0, [r7, #16]
 8004588:	f7fe ff8c 	bl	80034a4 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>
 800458c:	4603      	mov	r3, r0
            signal_length,
            sampling_frequency,
            frame_length,
            frame_stride,
            false);
 800458e:	83fb      	strh	r3, [r7, #30]
        uint16_t cols = num_cepstral;
 8004590:	887b      	ldrh	r3, [r7, #2]
 8004592:	83bb      	strh	r3, [r7, #28]

        matrix_size_t size_matrix;
        size_matrix.rows = rows;
 8004594:	8bfa      	ldrh	r2, [r7, #30]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	601a      	str	r2, [r3, #0]
        size_matrix.cols = cols;
 800459a:	8bba      	ldrh	r2, [r7, #28]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	605a      	str	r2, [r3, #4]
        return size_matrix;
 80045a0:	bf00      	nop
    }
 80045a2:	6978      	ldr	r0, [r7, #20]
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
    return preemphasis->get_data(offset, length, out_ptr);
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x24>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	f7fe fd49 	bl	8003058 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
 80045c6:	4603      	mov	r3, r0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	200003b4 	.word	0x200003b4

080045d4 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fc fd54 	bl	800108c <_ZNSt14_Function_baseD1Ev>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 fddc 	bl	80061b6 <_ZNSt8functionIFijjPfEEC1Ev>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <_ZN2ei11ei_signal_tD1Ev>:
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff ffde 	bl	80045d4 <_ZNSt8functionIFijjPfEED1Ev>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv>:

__attribute__((unused)) int extract_mfcc_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr) {
 8004624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004626:	b0a7      	sub	sp, #156	; 0x9c
 8004628:	af06      	add	r7, sp, #24
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8004636:	461d      	mov	r5, r3
 8004638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800463a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800463c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800463e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004640:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (config.axes != 1) {
 8004648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464a:	2b01      	cmp	r3, #1
 800464c:	d00b      	beq.n	8004666 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x42>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800464e:	4a6b      	ldr	r2, [pc, #428]	; (80047fc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004650:	496b      	ldr	r1, [pc, #428]	; (8004800 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004652:	486c      	ldr	r0, [pc, #432]	; (8004804 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004654:	f016 fa56 	bl	801ab04 <iprintf>
 8004658:	4b6b      	ldr	r3, [pc, #428]	; (8004808 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 800465a:	4a6c      	ldr	r2, [pc, #432]	; (800480c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 800465c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004660:	486b      	ldr	r0, [pc, #428]	; (8004810 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004662:	f015 fd79 	bl	801a158 <__assert_func>
    }

    // @todo: move this to config
    const uint32_t frequency = static_cast<uint32_t>(EI_CLASSIFIER_FREQUENCY);
 8004666:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800466a:	67fb      	str	r3, [r7, #124]	; 0x7c

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 800466c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800466e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004676:	eeb0 0a67 	vmov.f32	s0, s15
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe fc9f 	bl	8002fc0 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>
    preemphasis = &pre;
 8004682:	4a64      	ldr	r2, [pc, #400]	; (8004814 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 8004684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004688:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 800468a:	f107 0318 	add.w	r3, r7, #24
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ffad 	bl	80045ee <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 800469a:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f4>)
 800469c:	677b      	str	r3, [r7, #116]	; 0x74
 800469e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80046a2:	f107 0318 	add.w	r3, r7, #24
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fd91 	bl	80061d0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFCC matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_cepstral);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6919      	ldr	r1, [r3, #16]
 80046b2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80046b6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80046ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f107 0010 	add.w	r0, r7, #16
 80046c2:	eef0 0a47 	vmov.f32	s1, s14
 80046c6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ca:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80046ce:	f7ff ff49 	bl	8004564 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	fb02 f203 	mul.w	r2, r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	6889      	ldr	r1, [r1, #8]
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d919      	bls.n	800471e <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0xfa>
        ei_printf("out_matrix = %hux%hu\n", output_matrix->rows, output_matrix->cols);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6859      	ldr	r1, [r3, #4]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	461a      	mov	r2, r3
 80046f4:	4849      	ldr	r0, [pc, #292]	; (800481c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f8>)
 80046f6:	f001 fc25 	bl	8005f44 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hux%hu\n", out_matrix_size.rows, out_matrix_size.cols);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4619      	mov	r1, r3
 8004700:	4847      	ldr	r0, [pc, #284]	; (8004820 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1fc>)
 8004702:	f001 fc1f 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004708:	493d      	ldr	r1, [pc, #244]	; (8004800 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 800470a:	483e      	ldr	r0, [pc, #248]	; (8004804 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 800470c:	f016 f9fa 	bl	801ab04 <iprintf>
 8004710:	4b3d      	ldr	r3, [pc, #244]	; (8004808 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004712:	4a3e      	ldr	r2, [pc, #248]	; (800480c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004714:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004718:	483d      	ldr	r0, [pc, #244]	; (8004810 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 800471a:	f015 fd1d 	bl	801a158 <__assert_func>
    }

    output_matrix->rows = out_matrix_size.rows;
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	609a      	str	r2, [r3, #8]

    // and run the MFCC extraction (using 32 rather than 40 filters here to optimize speed on embedded)
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800472a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800472e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004734:	b2d8      	uxtb	r0, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004738:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800473a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800473c:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency);
 800473e:	6e79      	ldr	r1, [r7, #100]	; 0x64
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004740:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency);
 8004742:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004744:	460e      	mov	r6, r1
 8004746:	f107 0118 	add.w	r1, r7, #24
 800474a:	2401      	movs	r4, #1
 800474c:	9404      	str	r4, [sp, #16]
 800474e:	9603      	str	r6, [sp, #12]
 8004750:	9502      	str	r5, [sp, #8]
 8004752:	9201      	str	r2, [sp, #4]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	4603      	mov	r3, r0
 8004758:	eef0 0a47 	vmov.f32	s1, s14
 800475c:	eeb0 0a67 	vmov.f32	s0, s15
 8004760:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004764:	68b8      	ldr	r0, [r7, #8]
 8004766:	f7ff fd51 	bl	800420c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>
 800476a:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 800476c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00f      	beq.n	8004792 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x16e>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 8004772:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004774:	482b      	ldr	r0, [pc, #172]	; (8004824 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x200>)
 8004776:	f001 fbe5 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800477a:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x204>)
 800477c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800477e:	4821      	ldr	r0, [pc, #132]	; (8004804 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004780:	f016 f9c0 	bl	801ab04 <iprintf>
 8004784:	4b20      	ldr	r3, [pc, #128]	; (8004808 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004786:	4a21      	ldr	r2, [pc, #132]	; (800480c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004788:	f44f 7193 	mov.w	r1, #294	; 0x126
 800478c:	4820      	ldr	r0, [pc, #128]	; (8004810 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 800478e:	f015 fce3 	bl	801a158 <__assert_func>
    }

    // cepstral mean and variance normalization
    ret = speechpy::processing::cmvnw(output_matrix, config.win_size, true);
 8004792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004794:	b299      	uxth	r1, r3
 8004796:	2300      	movs	r3, #0
 8004798:	2201      	movs	r2, #1
 800479a:	68b8      	ldr	r0, [r7, #8]
 800479c:	f7fe ff66 	bl	800366c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 80047a0:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 80047a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00f      	beq.n	80047c8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1a4>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 80047a8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80047aa:	4820      	ldr	r0, [pc, #128]	; (800482c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x208>)
 80047ac:	f001 fbca 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x204>)
 80047b2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80047b4:	4813      	ldr	r0, [pc, #76]	; (8004804 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 80047b6:	f016 f9a5 	bl	801ab04 <iprintf>
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 80047bc:	4a13      	ldr	r2, [pc, #76]	; (800480c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 80047be:	f240 112d 	movw	r1, #301	; 0x12d
 80047c2:	4813      	ldr	r0, [pc, #76]	; (8004810 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 80047c4:	f015 fcc8 	bl	801a158 <__assert_func>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	fb02 f203 	mul.w	r2, r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2201      	movs	r2, #1
 80047d8:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80047da:	2400      	movs	r4, #0
    signal_t preemphasized_audio_signal;
 80047dc:	f107 0318 	add.w	r3, r7, #24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff11 	bl	8004608 <_ZN2ei11ei_signal_tD1Ev>
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 80047e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe fd10 	bl	8003210 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    return EIDSP_OK;
 80047f0:	4623      	mov	r3, r4
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3784      	adds	r7, #132	; 0x84
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047fa:	bf00      	nop
 80047fc:	0801b9dc 	.word	0x0801b9dc
 8004800:	fffffc14 	.word	0xfffffc14
 8004804:	0801b92c 	.word	0x0801b92c
 8004808:	0801b93c 	.word	0x0801b93c
 800480c:	0801c9e4 	.word	0x0801c9e4
 8004810:	0801c848 	.word	0x0801c848
 8004814:	200003b4 	.word	0x200003b4
 8004818:	080045ad 	.word	0x080045ad
 800481c:	0801ca30 	.word	0x0801ca30
 8004820:	0801ca48 	.word	0x0801ca48
 8004824:	0801ca64 	.word	0x0801ca64
 8004828:	0801ba8c 	.word	0x0801ba8c
 800482c:	0801ca7c 	.word	0x0801ca7c

08004830 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv>:

__attribute__((unused)) int extract_mfcc_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr) {
 8004830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004832:	b0a7      	sub	sp, #156	; 0x9c
 8004834:	af06      	add	r7, sp, #24
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8004842:	461d      	mov	r5, r3
 8004844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800484a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800484c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    static bool first_run = false;

    if (config.axes != 1) {
 8004854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004856:	2b01      	cmp	r3, #1
 8004858:	d00b      	beq.n	8004872 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x42>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800485a:	4a68      	ldr	r2, [pc, #416]	; (80049fc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 800485c:	4968      	ldr	r1, [pc, #416]	; (8004a00 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 800485e:	4869      	ldr	r0, [pc, #420]	; (8004a04 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004860:	f016 f950 	bl	801ab04 <iprintf>
 8004864:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004866:	4a69      	ldr	r2, [pc, #420]	; (8004a0c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004868:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800486c:	4868      	ldr	r0, [pc, #416]	; (8004a10 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 800486e:	f015 fc73 	bl	801a158 <__assert_func>
    }

    /* Fake an extra frame_length for stack frames calculations. There, 1 frame_length is always
    subtracted and there for never used. But skip the first slice to fit the feature_matrix
    buffer */
    if (first_run == true) {
 8004872:	4b68      	ldr	r3, [pc, #416]	; (8004a14 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10e      	bne.n	8004898 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x68>
        signal->total_length += (size_t)(config.frame_length * (float)EI_CLASSIFIER_FREQUENCY);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004882:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8004a18 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>
 8004886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800488a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488e:	ee17 2a90 	vmov	r2, s15
 8004892:	441a      	add	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	611a      	str	r2, [r3, #16]
    }

    first_run = true;
 8004898:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 800489a:	2201      	movs	r2, #1
 800489c:	701a      	strb	r2, [r3, #0]

    // @todo: move this to config
    const uint32_t frequency = static_cast<uint32_t>(EI_CLASSIFIER_FREQUENCY);
 800489e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80048a2:	67fb      	str	r3, [r7, #124]	; 0x7c

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 80048a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80048a6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80048aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048ae:	eeb0 0a67 	vmov.f32	s0, s15
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fb83 	bl	8002fc0 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>
    preemphasis = &pre;
 80048ba:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 80048bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c0:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 80048c2:	f107 0318 	add.w	r3, r7, #24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fe91 	bl	80045ee <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 80048d2:	4b53      	ldr	r3, [pc, #332]	; (8004a20 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 80048d4:	677b      	str	r3, [r7, #116]	; 0x74
 80048d6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80048da:	f107 0318 	add.w	r3, r7, #24
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fc75 	bl	80061d0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFCC matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_cepstral);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80048ee:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f107 0010 	add.w	r0, r7, #16
 80048fa:	eef0 0a47 	vmov.f32	s1, s14
 80048fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004902:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004906:	f7ff fe2d 	bl	8004564 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	fb02 f203 	mul.w	r2, r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	6889      	ldr	r1, [r1, #8]
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	429a      	cmp	r2, r3
 8004920:	d919      	bls.n	8004956 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x126>
        ei_printf("out_matrix = %hux%hu\n", output_matrix->rows, output_matrix->cols);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	461a      	mov	r2, r3
 800492c:	483d      	ldr	r0, [pc, #244]	; (8004a24 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f4>)
 800492e:	f001 fb09 	bl	8005f44 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hux%hu\n", out_matrix_size.rows, out_matrix_size.cols);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4619      	mov	r1, r3
 8004938:	483b      	ldr	r0, [pc, #236]	; (8004a28 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f8>)
 800493a:	f001 fb03 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800493e:	4a2f      	ldr	r2, [pc, #188]	; (80049fc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004940:	492f      	ldr	r1, [pc, #188]	; (8004a00 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 8004942:	4830      	ldr	r0, [pc, #192]	; (8004a04 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004944:	f016 f8de 	bl	801ab04 <iprintf>
 8004948:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 800494a:	4a30      	ldr	r2, [pc, #192]	; (8004a0c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 800494c:	f240 115b 	movw	r1, #347	; 0x15b
 8004950:	482f      	ldr	r0, [pc, #188]	; (8004a10 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004952:	f015 fc01 	bl	801a158 <__assert_func>
    }

    output_matrix->rows = out_matrix_size.rows;
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	609a      	str	r2, [r3, #8]

    // and run the MFCC extraction (using 32 rather than 40 filters here to optimize speed on embedded)
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004962:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004966:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800496a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800496c:	b2d8      	uxtb	r0, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800496e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004970:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004972:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004974:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency);
 8004976:	6e79      	ldr	r1, [r7, #100]	; 0x64
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004978:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency);
 800497a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800497c:	460e      	mov	r6, r1
 800497e:	f107 0118 	add.w	r1, r7, #24
 8004982:	2401      	movs	r4, #1
 8004984:	9404      	str	r4, [sp, #16]
 8004986:	9603      	str	r6, [sp, #12]
 8004988:	9502      	str	r5, [sp, #8]
 800498a:	9201      	str	r2, [sp, #4]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	4603      	mov	r3, r0
 8004990:	eef0 0a47 	vmov.f32	s1, s14
 8004994:	eeb0 0a67 	vmov.f32	s0, s15
 8004998:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800499c:	68b8      	ldr	r0, [r7, #8]
 800499e:	f7ff fc35 	bl	800420c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>
 80049a2:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 80049a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00f      	beq.n	80049ca <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x19a>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 80049aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80049ac:	481f      	ldr	r0, [pc, #124]	; (8004a2c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1fc>)
 80049ae:	f001 fac9 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x200>)
 80049b4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80049b6:	4813      	ldr	r0, [pc, #76]	; (8004a04 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 80049b8:	f016 f8a4 	bl	801ab04 <iprintf>
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 80049c0:	f240 1167 	movw	r1, #359	; 0x167
 80049c4:	4812      	ldr	r0, [pc, #72]	; (8004a10 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 80049c6:	f015 fbc7 	bl	801a158 <__assert_func>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	fb02 f203 	mul.w	r2, r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2201      	movs	r2, #1
 80049da:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80049dc:	2400      	movs	r4, #0
    signal_t preemphasized_audio_signal;
 80049de:	f107 0318 	add.w	r3, r7, #24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fe10 	bl	8004608 <_ZN2ei11ei_signal_tD1Ev>
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 80049e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fc0f 	bl	8003210 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    return EIDSP_OK;
 80049f2:	4623      	mov	r3, r4
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3784      	adds	r7, #132	; 0x84
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fc:	0801b9dc 	.word	0x0801b9dc
 8004a00:	fffffc14 	.word	0xfffffc14
 8004a04:	0801b92c 	.word	0x0801b92c
 8004a08:	0801b93c 	.word	0x0801b93c
 8004a0c:	0801ca94 	.word	0x0801ca94
 8004a10:	0801c848 	.word	0x0801c848
 8004a14:	200003b8 	.word	0x200003b8
 8004a18:	467a0000 	.word	0x467a0000
 8004a1c:	200003b4 	.word	0x200003b4
 8004a20:	080045ad 	.word	0x080045ad
 8004a24:	0801ca30 	.word	0x0801ca30
 8004a28:	0801ca48 	.word	0x0801ca48
 8004a2c:	0801ca64 	.word	0x0801ca64
 8004a30:	0801ba8c 	.word	0x0801ba8c

08004a34 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv>:


__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr) {
 8004a34:	b5b0      	push	{r4, r5, r7, lr}
 8004a36:	b09a      	sub	sp, #104	; 0x68
 8004a38:	af04      	add	r7, sp, #16
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004a46:	461d      	mov	r5, r3
 8004a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	6023      	str	r3, [r4, #0]

    if (config.axes != 1) {
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d00b      	beq.n	8004a72 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x3e>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004a5a:	4a69      	ldr	r2, [pc, #420]	; (8004c00 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004a5c:	4969      	ldr	r1, [pc, #420]	; (8004c04 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 8004a5e:	486a      	ldr	r0, [pc, #424]	; (8004c08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004a60:	f016 f850 	bl	801ab04 <iprintf>
 8004a64:	4b69      	ldr	r3, [pc, #420]	; (8004c0c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004a66:	4a6a      	ldr	r2, [pc, #424]	; (8004c10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004a68:	f240 1175 	movw	r1, #373	; 0x175
 8004a6c:	4869      	ldr	r0, [pc, #420]	; (8004c14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004a6e:	f015 fb73 	bl	801a158 <__assert_func>
    }

    // @todo: move this to config
    const uint32_t frequency = static_cast<uint32_t>(EI_CLASSIFIER_FREQUENCY);
 8004a72:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004a76:	657b      	str	r3, [r7, #84]	; 0x54

    // calculate the size of the MFE matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfe_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_filters);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6919      	ldr	r1, [r3, #16]
 8004a7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004a80:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a8c:	eef0 0a47 	vmov.f32	s1, s14
 8004a90:	eeb0 0a67 	vmov.f32	s0, s15
 8004a94:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004a98:	f7ff fb94 	bl	80041c4 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfft>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa0:	fb02 f203 	mul.w	r2, r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6889      	ldr	r1, [r1, #8]
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d919      	bls.n	8004ae8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0xb4>
        ei_printf("out_matrix = %hux%hu\n", output_matrix->rows, output_matrix->cols);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	461a      	mov	r2, r3
 8004abe:	4856      	ldr	r0, [pc, #344]	; (8004c18 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004ac0:	f001 fa40 	bl	8005f44 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hux%hu\n", out_matrix_size.rows, out_matrix_size.cols);
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4854      	ldr	r0, [pc, #336]	; (8004c1c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004acc:	f001 fa3a 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004ad0:	4a4b      	ldr	r2, [pc, #300]	; (8004c00 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004ad2:	494c      	ldr	r1, [pc, #304]	; (8004c04 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 8004ad4:	484c      	ldr	r0, [pc, #304]	; (8004c08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004ad6:	f016 f815 	bl	801ab04 <iprintf>
 8004ada:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004adc:	4a4c      	ldr	r2, [pc, #304]	; (8004c10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004ade:	f240 1183 	movw	r1, #387	; 0x183
 8004ae2:	484c      	ldr	r0, [pc, #304]	; (8004c14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004ae4:	f015 fb38 	bl	801a158 <__assert_func>
    }

    output_matrix->rows = out_matrix_size.rows;
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8004aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]

    // and run the MFE extraction
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	f107 0014 	add.w	r0, r7, #20
 8004afc:	2300      	movs	r3, #0
 8004afe:	2201      	movs	r2, #1
 8004b00:	f7fc fae8 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0xee>
 8004b0a:	4a45      	ldr	r2, [pc, #276]	; (8004c20 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004b0c:	4945      	ldr	r1, [pc, #276]	; (8004c24 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 8004b0e:	483e      	ldr	r0, [pc, #248]	; (8004c08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004b10:	f015 fff8 	bl	801ab04 <iprintf>
 8004b14:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004b16:	4a3e      	ldr	r2, [pc, #248]	; (8004c10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004b18:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004b1c:	483d      	ldr	r0, [pc, #244]	; (8004c14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004b1e:	f015 fb1b 	bl	801a158 <__assert_func>
    if (!energy_matrix.buffer) {
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x10c>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004b28:	4a3d      	ldr	r2, [pc, #244]	; (8004c20 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004b2a:	493e      	ldr	r1, [pc, #248]	; (8004c24 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 8004b2c:	4836      	ldr	r0, [pc, #216]	; (8004c08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004b2e:	f015 ffe9 	bl	801ab04 <iprintf>
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004b34:	4a36      	ldr	r2, [pc, #216]	; (8004c10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004b36:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004b3a:	4836      	ldr	r0, [pc, #216]	; (8004c14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004b3c:	f015 fb0c 	bl	801a158 <__assert_func>
    }

    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004b40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004b44:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
        frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004b4a:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 8004b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004b4e:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency);
 8004b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004b52:	4608      	mov	r0, r1
        config.low_frequency, config.high_frequency);
 8004b54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004b56:	460c      	mov	r4, r1
 8004b58:	f107 0114 	add.w	r1, r7, #20
 8004b5c:	9403      	str	r4, [sp, #12]
 8004b5e:	9002      	str	r0, [sp, #8]
 8004b60:	9201      	str	r2, [sp, #4]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	eef0 0a47 	vmov.f32	s1, s14
 8004b68:	eeb0 0a67 	vmov.f32	s0, s15
 8004b6c:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	68b8      	ldr	r0, [r7, #8]
 8004b74:	f7ff f936 	bl	8003de4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm>
 8004b78:	6538      	str	r0, [r7, #80]	; 0x50
    if (ret != EIDSP_OK) {
 8004b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00f      	beq.n	8004ba0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x16c>
        ei_printf("ERR: MFE failed (%d)\n", ret);
 8004b80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b82:	4829      	ldr	r0, [pc, #164]	; (8004c28 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f4>)
 8004b84:	f001 f9de 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8004b88:	4a28      	ldr	r2, [pc, #160]	; (8004c2c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f8>)
 8004b8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b8c:	481e      	ldr	r0, [pc, #120]	; (8004c08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004b8e:	f015 ffb9 	bl	801ab04 <iprintf>
 8004b92:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004b94:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004b96:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004b9a:	481e      	ldr	r0, [pc, #120]	; (8004c14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004b9c:	f015 fadc 	bl	801a158 <__assert_func>
    }

    // cepstral mean and variance normalization
    ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	b299      	uxth	r1, r3
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	68b8      	ldr	r0, [r7, #8]
 8004baa:	f7fe fd5f 	bl	800366c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 8004bae:	6538      	str	r0, [r7, #80]	; 0x50
    if (ret != EIDSP_OK) {
 8004bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00f      	beq.n	8004bd6 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1a2>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8004bb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bb8:	481d      	ldr	r0, [pc, #116]	; (8004c30 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1fc>)
 8004bba:	f001 f9c3 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f8>)
 8004bc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bc2:	4811      	ldr	r0, [pc, #68]	; (8004c08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004bc4:	f015 ff9e 	bl	801ab04 <iprintf>
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004bca:	4a11      	ldr	r2, [pc, #68]	; (8004c10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004bcc:	f240 119b 	movw	r1, #411	; 0x19b
 8004bd0:	4810      	ldr	r0, [pc, #64]	; (8004c14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004bd2:	f015 fac1 	bl	801a158 <__assert_func>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bda:	fb02 f203 	mul.w	r2, r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2201      	movs	r2, #1
 8004be6:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 8004be8:	2400      	movs	r4, #0
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fc fa9c 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
    return EIDSP_OK;
 8004bf4:	4623      	mov	r3, r4
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3758      	adds	r7, #88	; 0x58
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	0801b9dc 	.word	0x0801b9dc
 8004c04:	fffffc14 	.word	0xfffffc14
 8004c08:	0801b92c 	.word	0x0801b92c
 8004c0c:	0801b93c 	.word	0x0801b93c
 8004c10:	0801caec 	.word	0x0801caec
 8004c14:	0801c848 	.word	0x0801c848
 8004c18:	0801ca30 	.word	0x0801ca30
 8004c1c:	0801ca48 	.word	0x0801ca48
 8004c20:	0801b918 	.word	0x0801b918
 8004c24:	fffffc16 	.word	0xfffffc16
 8004c28:	0801cb38 	.word	0x0801cb38
 8004c2c:	0801ba8c 	.word	0x0801ba8c
 8004c30:	0801ca7c 	.word	0x0801ca7c

08004c34 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv>:

__attribute__((unused)) int extract_mfe_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr) {
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b09a      	sub	sp, #104	; 0x68
 8004c38:	af04      	add	r7, sp, #16
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004c46:	461d      	mov	r5, r3
 8004c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	6023      	str	r3, [r4, #0]

    static bool first_run = false;

    if (config.axes != 1) {
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d00b      	beq.n	8004c72 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x3e>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004c5a:	4a66      	ldr	r2, [pc, #408]	; (8004df4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c0>)
 8004c5c:	4966      	ldr	r1, [pc, #408]	; (8004df8 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c4>)
 8004c5e:	4867      	ldr	r0, [pc, #412]	; (8004dfc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c8>)
 8004c60:	f015 ff50 	bl	801ab04 <iprintf>
 8004c64:	4b66      	ldr	r3, [pc, #408]	; (8004e00 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004c66:	4a67      	ldr	r2, [pc, #412]	; (8004e04 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 8004c68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c6c:	4866      	ldr	r0, [pc, #408]	; (8004e08 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004c6e:	f015 fa73 	bl	801a158 <__assert_func>
    }

    /* Fake an extra frame_length for stack frames calculations. There, 1 frame_length is always
    subtracted and there for never used. But skip the first slice to fit the feature_matrix
    buffer */
    if (first_run == true) {
 8004c72:	4b66      	ldr	r3, [pc, #408]	; (8004e0c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d10e      	bne.n	8004c98 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x64>
        signal->total_length += (size_t)(config.frame_length * (float)EI_CLASSIFIER_FREQUENCY);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004c82:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004e10 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>
 8004c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8e:	ee17 2a90 	vmov	r2, s15
 8004c92:	441a      	add	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	611a      	str	r2, [r3, #16]
    }

    first_run = true;
 8004c98:	4b5c      	ldr	r3, [pc, #368]	; (8004e0c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]

    // @todo: move this to config
    const uint32_t frequency = static_cast<uint32_t>(EI_CLASSIFIER_FREQUENCY);
 8004c9e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004ca2:	657b      	str	r3, [r7, #84]	; 0x54

    // calculate the size of the MFE matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfe_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_filters);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6919      	ldr	r1, [r3, #16]
 8004ca8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004cac:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cb8:	eef0 0a47 	vmov.f32	s1, s14
 8004cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004cc4:	f7ff fa7e 	bl	80041c4 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfft>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ccc:	fb02 f203 	mul.w	r2, r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	6889      	ldr	r1, [r1, #8]
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d919      	bls.n	8004d14 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0xe0>
        ei_printf("out_matrix = %hux%hu\n", output_matrix->rows, output_matrix->cols);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	484a      	ldr	r0, [pc, #296]	; (8004e14 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004cec:	f001 f92a 	bl	8005f44 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hux%hu\n", out_matrix_size.rows, out_matrix_size.cols);
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4848      	ldr	r0, [pc, #288]	; (8004e18 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004cf8:	f001 f924 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004cfc:	4a3d      	ldr	r2, [pc, #244]	; (8004df4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c0>)
 8004cfe:	493e      	ldr	r1, [pc, #248]	; (8004df8 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c4>)
 8004d00:	483e      	ldr	r0, [pc, #248]	; (8004dfc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c8>)
 8004d02:	f015 feff 	bl	801ab04 <iprintf>
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004d08:	4a3e      	ldr	r2, [pc, #248]	; (8004e04 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 8004d0a:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004d0e:	483e      	ldr	r0, [pc, #248]	; (8004e08 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004d10:	f015 fa22 	bl	801a158 <__assert_func>
    }

    output_matrix->rows = out_matrix_size.rows;
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8004d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]

    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	f107 0014 	add.w	r0, r7, #20
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f7fc f9d2 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x11a>
 8004d36:	4a39      	ldr	r2, [pc, #228]	; (8004e1c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004d38:	4939      	ldr	r1, [pc, #228]	; (8004e20 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004d3a:	4830      	ldr	r0, [pc, #192]	; (8004dfc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c8>)
 8004d3c:	f015 fee2 	bl	801ab04 <iprintf>
 8004d40:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004d42:	4a30      	ldr	r2, [pc, #192]	; (8004e04 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 8004d44:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004d48:	482f      	ldr	r0, [pc, #188]	; (8004e08 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004d4a:	f015 fa05 	bl	801a158 <__assert_func>
    if (!energy_matrix.buffer) {
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x138>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004d54:	4a31      	ldr	r2, [pc, #196]	; (8004e1c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004d56:	4932      	ldr	r1, [pc, #200]	; (8004e20 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004d58:	4828      	ldr	r0, [pc, #160]	; (8004dfc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c8>)
 8004d5a:	f015 fed3 	bl	801ab04 <iprintf>
 8004d5e:	4b28      	ldr	r3, [pc, #160]	; (8004e00 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004d60:	4a28      	ldr	r2, [pc, #160]	; (8004e04 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 8004d62:	f240 11c9 	movw	r1, #457	; 0x1c9
 8004d66:	4828      	ldr	r0, [pc, #160]	; (8004e08 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004d68:	f015 f9f6 	bl	801a158 <__assert_func>
    }

    // and run the MFE extraction
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004d6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004d70:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
        frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 8004d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004d76:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 8004d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004d7a:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency);
 8004d7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004d7e:	4608      	mov	r0, r1
        config.low_frequency, config.high_frequency);
 8004d80:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, signal,
 8004d82:	460c      	mov	r4, r1
 8004d84:	f107 0114 	add.w	r1, r7, #20
 8004d88:	9403      	str	r4, [sp, #12]
 8004d8a:	9002      	str	r0, [sp, #8]
 8004d8c:	9201      	str	r2, [sp, #4]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	eef0 0a47 	vmov.f32	s1, s14
 8004d94:	eeb0 0a67 	vmov.f32	s0, s15
 8004d98:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	68b8      	ldr	r0, [r7, #8]
 8004da0:	f7ff f820 	bl	8003de4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm>
 8004da4:	6538      	str	r0, [r7, #80]	; 0x50
    if (ret != EIDSP_OK) {
 8004da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00f      	beq.n	8004dcc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x198>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 8004dac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004dae:	481d      	ldr	r0, [pc, #116]	; (8004e24 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 8004db0:	f001 f8c8 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8004db4:	4a1c      	ldr	r2, [pc, #112]	; (8004e28 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f4>)
 8004db6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004db8:	4810      	ldr	r0, [pc, #64]	; (8004dfc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1c8>)
 8004dba:	f015 fea3 	bl	801ab04 <iprintf>
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004dc0:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 8004dc2:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8004dc6:	4810      	ldr	r0, [pc, #64]	; (8004e08 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004dc8:	f015 f9c6 	bl	801a158 <__assert_func>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd0:	fb02 f203 	mul.w	r2, r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 8004dde:	2400      	movs	r4, #0
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fc f9a1 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
    return EIDSP_OK;
 8004dea:	4623      	mov	r3, r4
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3758      	adds	r7, #88	; 0x58
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bdb0      	pop	{r4, r5, r7, pc}
 8004df4:	0801b9dc 	.word	0x0801b9dc
 8004df8:	fffffc14 	.word	0xfffffc14
 8004dfc:	0801b92c 	.word	0x0801b92c
 8004e00:	0801b93c 	.word	0x0801b93c
 8004e04:	0801cb50 	.word	0x0801cb50
 8004e08:	0801c848 	.word	0x0801c848
 8004e0c:	200003b9 	.word	0x200003b9
 8004e10:	467a0000 	.word	0x467a0000
 8004e14:	0801ca30 	.word	0x0801ca30
 8004e18:	0801ca48 	.word	0x0801ca48
 8004e1c:	0801b918 	.word	0x0801b918
 8004e20:	fffffc16 	.word	0xfffffc16
 8004e24:	0801ca64 	.word	0x0801ca64
 8004e28:	0801ba8c 	.word	0x0801ba8c

08004e2c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
void * ei_aligned_malloc(size_t align, size_t size)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x26>
 8004e46:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x78>)
 8004e48:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x7c>)
 8004e4a:	2139      	movs	r1, #57	; 0x39
 8004e4c:	4817      	ldr	r0, [pc, #92]	; (8004eac <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x80>)
 8004e4e:	f015 f983 	bl	801a158 <__assert_func>

	if(align && size)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01f      	beq.n	8004e98 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01c      	beq.n	8004e98 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3301      	adds	r3, #1
 8004e62:	613b      	str	r3, [r7, #16]
		void * p = malloc(size + hdr_size);
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f015 fa62 	bl	801a334 <malloc>
 8004e70:	4603      	mov	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]

		if(p)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00e      	beq.n	8004e98 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	425b      	negs	r3, r3
 8004e86:	4013      	ands	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3b02      	subs	r3, #2
 8004e94:	b292      	uxth	r2, r2
 8004e96:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8004e98:	697b      	ldr	r3, [r7, #20]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	0801cc3c 	.word	0x0801cc3c
 8004ea8:	0801cc58 	.word	0x0801cc58
 8004eac:	0801cc90 	.word	0x0801cc90

08004eb0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
void ei_aligned_free(void * ptr)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d105      	bne.n	8004eca <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8004ec0:	4a0b      	ldr	r2, [pc, #44]	; (8004ef0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8004ec2:	215c      	movs	r1, #92	; 0x5c
 8004ec4:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8004ec6:	f015 f947 	bl	801a158 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8004ed0:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8004ed2:	89fb      	ldrh	r3, [r7, #14]
 8004ed4:	425b      	negs	r3, r3
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]
	free(p);
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	f015 fa31 	bl	801a344 <free>
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	0801cd08 	.word	0x0801cd08
 8004ef0:	0801cd0c 	.word	0x0801cd0c
 8004ef4:	0801cc90 	.word	0x0801cc90

08004ef8 <run_moving_average_filter>:
 * @param[in]  classification  Classification output on current slice
 *
 * @return     Averaged classification value
 */
extern "C" float run_moving_average_filter(ei_impulse_maf *maf, float classification)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	ed87 0a00 	vstr	s0, [r7]
    maf->running_sum -= maf->maf_buffer[maf->buf_idx];
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	3302      	adds	r3, #2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	edd3 7a00 	vldr	s15, [r3]
 8004f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	edc3 7a01 	vstr	s15, [r3, #4]
    maf->running_sum += classification;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f2a:	edd7 7a00 	vldr	s15, [r7]
 8004f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	edc3 7a01 	vstr	s15, [r3, #4]
    maf->maf_buffer[maf->buf_idx] = classification;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	3302      	adds	r3, #2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	601a      	str	r2, [r3, #0]

    if (++maf->buf_idx >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1)) {
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	bf8c      	ite	hi
 8004f5a:	2301      	movhi	r3, #1
 8004f5c:	2300      	movls	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <run_moving_average_filter+0x72>
        maf->buf_idx = 0;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
    }

    return maf->running_sum / (float)(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004f74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f78:	eef0 7a66 	vmov.f32	s15, s13
}
 8004f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <__tcf_0>:
 * @return     The ei impulse error.
 */
extern "C" EI_IMPULSE_ERROR run_classifier_continuous(signal_t *signal, ei_impulse_result_t *result,
                                                      bool debug = false)
{
    static ei::matrix_t static_features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__tcf_0+0xc>)
 8004f92:	f7fc f8cb 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000424 	.word	0x20000424

08004f9c <run_classifier_continuous>:
{
 8004f9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fa0:	b09c      	sub	sp, #112	; 0x70
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
 8004fac:	2400      	movs	r4, #0
    static ei::matrix_t static_features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004fae:	4b98      	ldr	r3, [pc, #608]	; (8005210 <run_classifier_continuous+0x274>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	f3bf 8f5b 	dmb	ish
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d017      	beq.n	8004ffa <run_classifier_continuous+0x5e>
 8004fca:	4891      	ldr	r0, [pc, #580]	; (8005210 <run_classifier_continuous+0x274>)
 8004fcc:	f011 fff8 	bl	8016fc0 <__cxa_guard_acquire>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bf14      	ite	ne
 8004fd6:	2301      	movne	r3, #1
 8004fd8:	2300      	moveq	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <run_classifier_continuous+0x5e>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f240 228a 	movw	r2, #650	; 0x28a
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	488a      	ldr	r0, [pc, #552]	; (8005214 <run_classifier_continuous+0x278>)
 8004fea:	f7fc f873 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>
 8004fee:	4888      	ldr	r0, [pc, #544]	; (8005210 <run_classifier_continuous+0x274>)
 8004ff0:	f011 fff2 	bl	8016fd8 <__cxa_guard_release>
 8004ff4:	4888      	ldr	r0, [pc, #544]	; (8005218 <run_classifier_continuous+0x27c>)
 8004ff6:	f015 f8cd 	bl	801a194 <atexit>
    if (!static_features_matrix.buffer) {
 8004ffa:	4b86      	ldr	r3, [pc, #536]	; (8005214 <run_classifier_continuous+0x278>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <run_classifier_continuous+0x6c>
        return EI_IMPULSE_ALLOC_FAILED;
 8005002:	f06f 0407 	mvn.w	r4, #7
 8005006:	e18b      	b.n	8005320 <run_classifier_continuous+0x384>
    }

    EI_IMPULSE_ERROR ei_impulse_error = EI_IMPULSE_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    uint64_t dsp_start_ms = ei_read_timer_ms();
 800500e:	f009 ff77 	bl	800ef00 <_Z16ei_read_timer_msv>
 8005012:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

    size_t out_features_index = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	66bb      	str	r3, [r7, #104]	; 0x68
    size_t feature_size;
    bool is_mfe = false;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8005020:	2300      	movs	r3, #0
 8005022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d16e      	bne.n	8005108 <run_classifier_continuous+0x16c>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 800502a:	497c      	ldr	r1, [pc, #496]	; (800521c <run_classifier_continuous+0x280>)
 800502c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800502e:	4613      	mov	r3, r2
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	18ca      	adds	r2, r1, r3
 8005038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800503c:	ca07      	ldmia	r2, {r0, r1, r2}
 800503e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 8005042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005046:	4413      	add	r3, r2
 8005048:	f240 228a 	movw	r2, #650	; 0x28a
 800504c:	4293      	cmp	r3, r2
 800504e:	d905      	bls.n	800505c <run_classifier_continuous+0xc0>
            ei_printf("ERR: Would write outside feature buffer\n");
 8005050:	4873      	ldr	r0, [pc, #460]	; (8005220 <run_classifier_continuous+0x284>)
 8005052:	f000 ff77 	bl	8005f44 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005056:	f06f 0404 	mvn.w	r4, #4
 800505a:	e160      	b.n	800531e <run_classifier_continuous+0x382>
        }

        ei::matrix_t fm(1, block.n_output_features,
 800505c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
                        static_features_matrix.buffer + out_features_index + slice_offset);
 800505e:	4b6d      	ldr	r3, [pc, #436]	; (8005214 <run_classifier_continuous+0x278>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b70      	ldr	r3, [pc, #448]	; (8005224 <run_classifier_continuous+0x288>)
 8005064:	6819      	ldr	r1, [r3, #0]
 8005066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005068:	440b      	add	r3, r1
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	f107 0020 	add.w	r0, r7, #32
 8005072:	462a      	mov	r2, r5
 8005074:	2101      	movs	r1, #1
 8005076:	f7fc f82d 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>

        /* Switch to the slice version of the mfcc feature extract function */
        if (block.extract_fn == extract_mfcc_features) {
 800507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507c:	4a6a      	ldr	r2, [pc, #424]	; (8005228 <run_classifier_continuous+0x28c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d102      	bne.n	8005088 <run_classifier_continuous+0xec>
            block.extract_fn = &extract_mfcc_per_slice_features;
 8005082:	4b6a      	ldr	r3, [pc, #424]	; (800522c <run_classifier_continuous+0x290>)
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
 8005086:	e008      	b.n	800509a <run_classifier_continuous+0xfe>
        }
        else if (block.extract_fn == extract_mfe_features) {
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	4a69      	ldr	r2, [pc, #420]	; (8005230 <run_classifier_continuous+0x294>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d104      	bne.n	800509a <run_classifier_continuous+0xfe>
            block.extract_fn = &extract_mfe_per_slice_features;
 8005090:	4b68      	ldr	r3, [pc, #416]	; (8005234 <run_classifier_continuous+0x298>)
 8005092:	637b      	str	r3, [r7, #52]	; 0x34
            is_mfe = true;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        }

        int ret = block.extract_fn(signal, &fm, block.config);
 800509a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800509e:	f107 0120 	add.w	r1, r7, #32
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	4798      	blx	r3
 80050a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (ret != EIDSP_OK) {
 80050a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <run_classifier_continuous+0x122>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 80050ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050b0:	4861      	ldr	r0, [pc, #388]	; (8005238 <run_classifier_continuous+0x29c>)
 80050b2:	f000 ff47 	bl	8005f44 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 80050b6:	f06f 0404 	mvn.w	r4, #4
 80050ba:	2500      	movs	r5, #0
 80050bc:	e018      	b.n	80050f0 <run_classifier_continuous+0x154>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80050be:	f009 ff17 	bl	800eef0 <_Z29ei_run_impulse_check_canceledv>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f113 0f02 	cmn.w	r3, #2
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <run_classifier_continuous+0x140>
            return EI_IMPULSE_CANCELED;
 80050d4:	f06f 0401 	mvn.w	r4, #1
 80050d8:	2500      	movs	r5, #0
 80050da:	e009      	b.n	80050f0 <run_classifier_continuous+0x154>
        }

        out_features_index += block.n_output_features;
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050e0:	4413      	add	r3, r2
 80050e2:	66bb      	str	r3, [r7, #104]	; 0x68

        feature_size = (fm.rows * fm.cols);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	667b      	str	r3, [r7, #100]	; 0x64
                        static_features_matrix.buffer + out_features_index + slice_offset);
 80050ee:	2501      	movs	r5, #1
 80050f0:	f107 0320 	add.w	r3, r7, #32
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fc f819 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
 80050fa:	2d01      	cmp	r5, #1
 80050fc:	f040 810f 	bne.w	800531e <run_classifier_continuous+0x382>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8005100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005102:	3301      	adds	r3, #1
 8005104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005106:	e78d      	b.n	8005024 <run_classifier_continuous+0x88>
    }

    /* For as long as the feature buffer isn't completely full, keep moving the slice offset */
    if (feature_buffer_full == false) {
 8005108:	4b4c      	ldr	r3, [pc, #304]	; (800523c <run_classifier_continuous+0x2a0>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d116      	bne.n	800513e <run_classifier_continuous+0x1a2>
        slice_offset += feature_size;
 8005110:	4b44      	ldr	r3, [pc, #272]	; (8005224 <run_classifier_continuous+0x288>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005116:	4413      	add	r3, r2
 8005118:	4a42      	ldr	r2, [pc, #264]	; (8005224 <run_classifier_continuous+0x288>)
 800511a:	6013      	str	r3, [r2, #0]

        if (slice_offset > (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size)) {
 800511c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800511e:	f5c3 7322 	rsb	r3, r3, #648	; 0x288
 8005122:	3302      	adds	r3, #2
 8005124:	4a3f      	ldr	r2, [pc, #252]	; (8005224 <run_classifier_continuous+0x288>)
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	4293      	cmp	r3, r2
 800512a:	d208      	bcs.n	800513e <run_classifier_continuous+0x1a2>
            feature_buffer_full = true;
 800512c:	4b43      	ldr	r3, [pc, #268]	; (800523c <run_classifier_continuous+0x2a0>)
 800512e:	2201      	movs	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]
            slice_offset -= feature_size;
 8005132:	4b3c      	ldr	r3, [pc, #240]	; (8005224 <run_classifier_continuous+0x288>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	4a3a      	ldr	r2, [pc, #232]	; (8005224 <run_classifier_continuous+0x288>)
 800513c:	6013      	str	r3, [r2, #0]
        }
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 800513e:	f009 fedf 	bl	800ef00 <_Z16ei_read_timer_msv>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	461a      	mov	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38

    if (debug) {
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d021      	beq.n	800519a <run_classifier_continuous+0x1fe>
        ei_printf("\r\nFeatures (%d ms.): ", result->timing.dsp);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	4619      	mov	r1, r3
 800515c:	4838      	ldr	r0, [pc, #224]	; (8005240 <run_classifier_continuous+0x2a4>)
 800515e:	f000 fef1 	bl	8005f44 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
 8005162:	2300      	movs	r3, #0
 8005164:	65bb      	str	r3, [r7, #88]	; 0x58
 8005166:	4b2b      	ldr	r3, [pc, #172]	; (8005214 <run_classifier_continuous+0x278>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800516c:	429a      	cmp	r2, r3
 800516e:	d211      	bcs.n	8005194 <run_classifier_continuous+0x1f8>
            ei_printf_float(static_features_matrix.buffer[ix]);
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <run_classifier_continuous+0x278>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	edd3 7a00 	vldr	s15, [r3]
 800517e:	eeb0 0a67 	vmov.f32	s0, s15
 8005182:	f009 fec9 	bl	800ef18 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005186:	482f      	ldr	r0, [pc, #188]	; (8005244 <run_classifier_continuous+0x2a8>)
 8005188:	f000 fedc 	bl	8005f44 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
 800518c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800518e:	3301      	adds	r3, #1
 8005190:	65bb      	str	r3, [r7, #88]	; 0x58
 8005192:	e7e8      	b.n	8005166 <run_classifier_continuous+0x1ca>
        }
        ei_printf("\n");
 8005194:	482c      	ldr	r0, [pc, #176]	; (8005248 <run_classifier_continuous+0x2ac>)
 8005196:	f000 fed5 	bl	8005f44 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <run_classifier_continuous+0x20a>
        ei_printf("Running neural network...\n");
 80051a0:	482a      	ldr	r0, [pc, #168]	; (800524c <run_classifier_continuous+0x2b0>)
 80051a2:	f000 fecf 	bl	8005f44 <_Z9ei_printfPKcz>
    }
#endif

    if (feature_buffer_full == true) {
 80051a6:	4b25      	ldr	r3, [pc, #148]	; (800523c <run_classifier_continuous+0x2a0>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	f040 80b4 	bne.w	8005318 <run_classifier_continuous+0x37c>
        dsp_start_ms = ei_read_timer_ms();
 80051b0:	f009 fea6 	bl	800ef00 <_Z16ei_read_timer_msv>
 80051b4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
        ei::matrix_t classify_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 80051b8:	f107 0010 	add.w	r0, r7, #16
 80051bc:	2300      	movs	r3, #0
 80051be:	f240 228a 	movw	r2, #650	; 0x28a
 80051c2:	2101      	movs	r1, #1
 80051c4:	f7fb ff86 	bl	80010d4 <_ZN2ei9ei_matrixC1EmmPf>

        /* Create a copy of the matrix for normalization */
        for (size_t m_ix = 0; m_ix < EI_CLASSIFIER_NN_INPUT_FRAME_SIZE; m_ix++) {
 80051c8:	2300      	movs	r3, #0
 80051ca:	657b      	str	r3, [r7, #84]	; 0x54
 80051cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ce:	f240 2289 	movw	r2, #649	; 0x289
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d80e      	bhi.n	80051f4 <run_classifier_continuous+0x258>
            classify_matrix.buffer[m_ix] = static_features_matrix.buffer[m_ix];
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <run_classifier_continuous+0x278>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	6939      	ldr	r1, [r7, #16]
 80051e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	601a      	str	r2, [r3, #0]
        for (size_t m_ix = 0; m_ix < EI_CLASSIFIER_NN_INPUT_FRAME_SIZE; m_ix++) {
 80051ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ee:	3301      	adds	r3, #1
 80051f0:	657b      	str	r3, [r7, #84]	; 0x54
 80051f2:	e7eb      	b.n	80051cc <run_classifier_continuous+0x230>
        }

        if (is_mfe) {
 80051f4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d029      	beq.n	8005250 <run_classifier_continuous+0x2b4>
            calc_cepstral_mean_and_var_normalization_mfe(&classify_matrix, ei_dsp_blocks[0].config);
 80051fc:	4b07      	ldr	r3, [pc, #28]	; (800521c <run_classifier_continuous+0x280>)
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	f107 0310 	add.w	r3, r7, #16
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fa56 	bl	80056b8 <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv>
 800520c:	e028      	b.n	8005260 <run_classifier_continuous+0x2c4>
 800520e:	bf00      	nop
 8005210:	20000434 	.word	0x20000434
 8005214:	20000424 	.word	0x20000424
 8005218:	08004f8d 	.word	0x08004f8d
 800521c:	20000048 	.word	0x20000048
 8005220:	0801cd38 	.word	0x0801cd38
 8005224:	2000041c 	.word	0x2000041c
 8005228:	08004625 	.word	0x08004625
 800522c:	08004831 	.word	0x08004831
 8005230:	08004a35 	.word	0x08004a35
 8005234:	08004c35 	.word	0x08004c35
 8005238:	0801cd64 	.word	0x0801cd64
 800523c:	20000420 	.word	0x20000420
 8005240:	0801cd8c 	.word	0x0801cd8c
 8005244:	0801cda4 	.word	0x0801cda4
 8005248:	0801cda8 	.word	0x0801cda8
 800524c:	0801cdac 	.word	0x0801cdac
        }
        else {
            calc_cepstral_mean_and_var_normalization_mfcc(&classify_matrix, ei_dsp_blocks[0].config);
 8005250:	4b36      	ldr	r3, [pc, #216]	; (800532c <run_classifier_continuous+0x390>)
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	f107 0310 	add.w	r3, r7, #16
 8005258:	4611      	mov	r1, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f000 f9e4 	bl	8005628 <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv>
        }
        result->timing.dsp += ei_read_timer_ms() - dsp_start_ms;
 8005260:	f009 fe4e 	bl	800ef00 <_Z16ei_read_timer_msv>
 8005264:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005268:	ebb0 0802 	subs.w	r8, r0, r2
 800526c:	eb61 0903 	sbc.w	r9, r1, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	461a      	mov	r2, r3
 8005276:	4643      	mov	r3, r8
 8005278:	4413      	add	r3, r2
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	639a      	str	r2, [r3, #56]	; 0x38

        ei_impulse_error = run_inference(&classify_matrix, result, debug);
 8005280:	79fa      	ldrb	r2, [r7, #7]
 8005282:	f107 0310 	add.w	r3, r7, #16
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 f855 	bl	8005338 <run_inference>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005294:	2300      	movs	r3, #0
 8005296:	653b      	str	r3, [r7, #80]	; 0x50
 8005298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529a:	2b05      	cmp	r3, #5
 800529c:	d81c      	bhi.n	80052d8 <run_classifier_continuous+0x33c>
            result->classification[ix].value =
                run_moving_average_filter(&classifier_maf[ix], result->classification[ix].value);
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	4a23      	ldr	r2, [pc, #140]	; (8005330 <run_classifier_continuous+0x394>)
 80052a4:	1899      	adds	r1, r3, r2
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	3304      	adds	r3, #4
 80052b0:	edd3 7a00 	vldr	s15, [r3]
 80052b4:	eeb0 0a67 	vmov.f32	s0, s15
 80052b8:	4608      	mov	r0, r1
 80052ba:	f7ff fe1d 	bl	8004ef8 <run_moving_average_filter>
 80052be:	eef0 7a40 	vmov.f32	s15, s0
            result->classification[ix].value =
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	3304      	adds	r3, #4
 80052cc:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80052d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d2:	3301      	adds	r3, #1
 80052d4:	653b      	str	r3, [r7, #80]	; 0x50
 80052d6:	e7df      	b.n	8005298 <run_classifier_continuous+0x2fc>
        }

        /* Shift the feature buffer for new data */
        for (size_t i = 0; i < (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size); i++) {
 80052d8:	2300      	movs	r3, #0
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052de:	f5c3 7322 	rsb	r3, r3, #648	; 0x288
 80052e2:	3302      	adds	r3, #2
 80052e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d211      	bcs.n	800530e <run_classifier_continuous+0x372>
            static_features_matrix.buffer[i] = static_features_matrix.buffer[i + feature_size];
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <run_classifier_continuous+0x398>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052f2:	440b      	add	r3, r1
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <run_classifier_continuous+0x398>)
 80052fa:	6819      	ldr	r1, [r3, #0]
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size); i++) {
 8005306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005308:	3301      	adds	r3, #1
 800530a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800530c:	e7e6      	b.n	80052dc <run_classifier_continuous+0x340>
        ei::matrix_t classify_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 800530e:	f107 0310 	add.w	r3, r7, #16
 8005312:	4618      	mov	r0, r3
 8005314:	f7fb ff0a 	bl	800112c <_ZN2ei9ei_matrixD1Ev>
        }
    }
    return ei_impulse_error;
 8005318:	f997 406f 	ldrsb.w	r4, [r7, #111]	; 0x6f
 800531c:	e000      	b.n	8005320 <run_classifier_continuous+0x384>
            return EI_IMPULSE_DSP_ERROR;
 800531e:	bf00      	nop
 8005320:	4623      	mov	r3, r4
}
 8005322:	4618      	mov	r0, r3
 8005324:	3770      	adds	r7, #112	; 0x70
 8005326:	46bd      	mov	sp, r7
 8005328:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800532c:	20000048 	.word	0x20000048
 8005330:	200003bc 	.word	0x200003bc
 8005334:	20000424 	.word	0x20000424

08005338 <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b092      	sub	sp, #72	; 0x48
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	71fb      	strb	r3, [r7, #7]
        if (tensor_arena == NULL) {
            ei_printf("Failed to allocate TFLite arena (%d bytes)\n", EI_CLASSIFIER_TFLITE_ARENA_SIZE);
            return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
        }
#else
        TfLiteStatus init_status = trained_model_init(ei_aligned_malloc);
 8005346:	48a6      	ldr	r0, [pc, #664]	; (80055e0 <run_inference+0x2a8>)
 8005348:	f010 f90e 	bl	8015568 <_Z18trained_model_initPFPvjjE>
 800534c:	4603      	mov	r3, r0
 800534e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (init_status != kTfLiteOk) {
 8005352:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <run_inference+0x34>
            ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 800535a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800535e:	4619      	mov	r1, r3
 8005360:	48a0      	ldr	r0, [pc, #640]	; (80055e4 <run_inference+0x2ac>)
 8005362:	f000 fdef 	bl	8005f44 <_Z9ei_printfPKcz>
            return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8005366:	f06f 0305 	mvn.w	r3, #5
 800536a:	e135      	b.n	80055d8 <run_inference+0x2a0>
        }
#endif
        uint64_t ctx_start_ms = ei_read_timer_ms();
 800536c:	f009 fdc8 	bl	800ef00 <_Z16ei_read_timer_msv>
 8005370:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
        // Obtain pointers to the model's input and output tensors.
        TfLiteTensor* input = interpreter.input(0);
        TfLiteTensor* output = interpreter.output(0);

#else
        TfLiteTensor* input = trained_model_input(0);
 8005374:	2000      	movs	r0, #0
 8005376:	f010 fb0d 	bl	8015994 <_Z19trained_model_inputi>
 800537a:	62f8      	str	r0, [r7, #44]	; 0x2c
        TfLiteTensor* output = trained_model_output(0);
 800537c:	2000      	movs	r0, #0
 800537e:	f010 fb1b 	bl	80159b8 <_Z20trained_model_outputi>
 8005382:	62b8      	str	r0, [r7, #40]	; 0x28
#endif
        // Assert that our quantization parameters match the model
        if (tflite_first_run) {
 8005384:	4b98      	ldr	r3, [pc, #608]	; (80055e8 <run_inference+0x2b0>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d052      	beq.n	8005432 <run_inference+0xfa>
            assert(input->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b09      	cmp	r3, #9
 8005392:	d006      	beq.n	80053a2 <run_inference+0x6a>
 8005394:	4b95      	ldr	r3, [pc, #596]	; (80055ec <run_inference+0x2b4>)
 8005396:	4a96      	ldr	r2, [pc, #600]	; (80055f0 <run_inference+0x2b8>)
 8005398:	f240 11ad 	movw	r1, #429	; 0x1ad
 800539c:	4895      	ldr	r0, [pc, #596]	; (80055f4 <run_inference+0x2bc>)
 800539e:	f014 fedb 	bl	801a158 <__assert_func>
            if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
                assert(input->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80053a8:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80055f8 <run_inference+0x2c0>
 80053ac:	eef4 7a47 	vcmp.f32	s15, s14
 80053b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b4:	d006      	beq.n	80053c4 <run_inference+0x8c>
 80053b6:	4b91      	ldr	r3, [pc, #580]	; (80055fc <run_inference+0x2c4>)
 80053b8:	4a8d      	ldr	r2, [pc, #564]	; (80055f0 <run_inference+0x2b8>)
 80053ba:	f240 11af 	movw	r1, #431	; 0x1af
 80053be:	488d      	ldr	r0, [pc, #564]	; (80055f4 <run_inference+0x2bc>)
 80053c0:	f014 feca 	bl	801a158 <__assert_func>
                assert(input->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f113 0f0f 	cmn.w	r3, #15
 80053cc:	d006      	beq.n	80053dc <run_inference+0xa4>
 80053ce:	4b8c      	ldr	r3, [pc, #560]	; (8005600 <run_inference+0x2c8>)
 80053d0:	4a87      	ldr	r2, [pc, #540]	; (80055f0 <run_inference+0x2b8>)
 80053d2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80053d6:	4887      	ldr	r0, [pc, #540]	; (80055f4 <run_inference+0x2bc>)
 80053d8:	f014 febe 	bl	801a158 <__assert_func>
            }
            assert(output->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b09      	cmp	r3, #9
 80053e2:	d006      	beq.n	80053f2 <run_inference+0xba>
 80053e4:	4b87      	ldr	r3, [pc, #540]	; (8005604 <run_inference+0x2cc>)
 80053e6:	4a82      	ldr	r2, [pc, #520]	; (80055f0 <run_inference+0x2b8>)
 80053e8:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 80053ec:	4881      	ldr	r0, [pc, #516]	; (80055f4 <run_inference+0x2bc>)
 80053ee:	f014 feb3 	bl	801a158 <__assert_func>
            if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
                assert(output->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80053f8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8005608 <run_inference+0x2d0>
 80053fc:	eef4 7a47 	vcmp.f32	s15, s14
 8005400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005404:	d006      	beq.n	8005414 <run_inference+0xdc>
 8005406:	4b81      	ldr	r3, [pc, #516]	; (800560c <run_inference+0x2d4>)
 8005408:	4a79      	ldr	r2, [pc, #484]	; (80055f0 <run_inference+0x2b8>)
 800540a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800540e:	4879      	ldr	r0, [pc, #484]	; (80055f4 <run_inference+0x2bc>)
 8005410:	f014 fea2 	bl	801a158 <__assert_func>
                assert(output->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800541c:	d006      	beq.n	800542c <run_inference+0xf4>
 800541e:	4b7c      	ldr	r3, [pc, #496]	; (8005610 <run_inference+0x2d8>)
 8005420:	4a73      	ldr	r2, [pc, #460]	; (80055f0 <run_inference+0x2b8>)
 8005422:	f240 11b5 	movw	r1, #437	; 0x1b5
 8005426:	4873      	ldr	r0, [pc, #460]	; (80055f4 <run_inference+0x2bc>)
 8005428:	f014 fe96 	bl	801a158 <__assert_func>
            }
            tflite_first_run = false;
 800542c:	4b6e      	ldr	r3, [pc, #440]	; (80055e8 <run_inference+0x2b0>)
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
        // =====
        // Initialization code done
        // =====

        // Place our calculated x value in the model's input tensor
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b09      	cmp	r3, #9
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005442:	2300      	movs	r3, #0
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005454:	429a      	cmp	r2, r3
 8005456:	d239      	bcs.n	80054cc <run_inference+0x194>
            // Quantize the input if it is int8
            if (int8_input) {
 8005458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800545c:	2b00      	cmp	r3, #0
 800545e:	d025      	beq.n	80054ac <run_inference+0x174>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	ed93 7a00 	vldr	s14, [r3]
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	edd3 7a03 	vldr	s15, [r3, #12]
 8005474:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005478:	eeb0 0a66 	vmov.f32	s0, s13
 800547c:	f7fb fef3 	bl	8001266 <_ZSt5roundf>
 8005480:	eeb0 7a40 	vmov.f32	s14, s0
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	ee07 3a90 	vmov	s15, r3
 800548c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549a:	4413      	add	r3, r2
 800549c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a0:	edc7 7a00 	vstr	s15, [r7]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	b252      	sxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e00b      	b.n	80054c4 <run_inference+0x18c>
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	6859      	ldr	r1, [r3, #4]
 80054ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80054c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c6:	3301      	adds	r3, #1
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ca:	e7bc      	b.n	8005446 <run_inference+0x10e>
            error_reporter->Report("Invoke failed (%d)\n", invoke_status);
            ei_aligned_free(tensor_arena);
            return EI_IMPULSE_TFLITE_ERROR;
        }
#else
        trained_model_invoke();
 80054cc:	f010 fa86 	bl	80159dc <_Z20trained_model_invokev>
#endif

        uint64_t ctx_end_ms = ei_read_timer_ms();
 80054d0:	f009 fd16 	bl	800ef00 <_Z16ei_read_timer_msv>
 80054d4:	e9c7 0106 	strd	r0, r1, [r7, #24]

        result->timing.classification = ctx_end_ms - ctx_start_ms;
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	63da      	str	r2, [r3, #60]	; 0x3c

        // Read the predicted y value from the model's output tensor
        if (debug) {
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <run_inference+0x1be>
            ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	4619      	mov	r1, r3
 80054f0:	4848      	ldr	r0, [pc, #288]	; (8005614 <run_inference+0x2dc>)
 80054f2:	f000 fd27 	bl	8005f44 <_Z9ei_printfPKcz>
        }
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	75fb      	strb	r3, [r7, #23]
        for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005504:	2300      	movs	r3, #0
 8005506:	643b      	str	r3, [r7, #64]	; 0x40
 8005508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550a:	2b05      	cmp	r3, #5
 800550c:	d844      	bhi.n	8005598 <run_inference+0x260>
            float value;
            // Dequantize the output if it is int8
            if (int8_output) {
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d015      	beq.n	8005540 <run_inference+0x208>
                value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	4413      	add	r3, r2
 800551c:	f993 3000 	ldrsb.w	r3, [r3]
 8005520:	461a      	mov	r2, r3
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	ee07 3a90 	vmov	s15, r3
 800552c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	edd3 7a03 	vldr	s15, [r3, #12]
 8005536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800553e:	e006      	b.n	800554e <run_inference+0x216>
            } else {
                value = output->data.f[ix];
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if (debug) {
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00e      	beq.n	8005572 <run_inference+0x23a>
                ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8005554:	4a30      	ldr	r2, [pc, #192]	; (8005618 <run_inference+0x2e0>)
 8005556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555c:	4619      	mov	r1, r3
 800555e:	482f      	ldr	r0, [pc, #188]	; (800561c <run_inference+0x2e4>)
 8005560:	f000 fcf0 	bl	8005f44 <_Z9ei_printfPKcz>
                ei_printf_float(value);
 8005564:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8005568:	f009 fcd6 	bl	800ef18 <_Z15ei_printf_floatf>
                ei_printf("\n");
 800556c:	482c      	ldr	r0, [pc, #176]	; (8005620 <run_inference+0x2e8>)
 800556e:	f000 fce9 	bl	8005f44 <_Z9ei_printfPKcz>
            }
            result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8005572:	4a29      	ldr	r2, [pc, #164]	; (8005618 <run_inference+0x2e0>)
 8005574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005576:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800557e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            result->classification[ix].value = value;
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	3304      	adds	r3, #4
 800558c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800558e:	601a      	str	r2, [r3, #0]
        for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005592:	3301      	adds	r3, #1
 8005594:	643b      	str	r3, [r7, #64]	; 0x40
 8005596:	e7b7      	b.n	8005508 <run_inference+0x1d0>
        }

#if (EI_CLASSIFIER_COMPILED != 1)
        ei_aligned_free(tensor_arena);
#else
        trained_model_reset(ei_aligned_free);
 8005598:	4822      	ldr	r0, [pc, #136]	; (8005624 <run_inference+0x2ec>)
 800559a:	f010 fa55 	bl	8015a48 <_Z19trained_model_resetPFvPvE>
#endif

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800559e:	f009 fca7 	bl	800eef0 <_Z29ei_run_impulse_check_canceledv>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f113 0f02 	cmn.w	r3, #2
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <run_inference+0x282>
            return EI_IMPULSE_CANCELED;
 80055b4:	f06f 0301 	mvn.w	r3, #1
 80055b8:	e00e      	b.n	80055d8 <run_inference+0x2a0>
        result->anomaly = anomaly;
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80055ba:	f009 fc99 	bl	800eef0 <_Z29ei_run_impulse_check_canceledv>
 80055be:	4603      	mov	r3, r0
 80055c0:	f113 0f02 	cmn.w	r3, #2
 80055c4:	bf0c      	ite	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	2300      	movne	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <run_inference+0x29e>
        return EI_IMPULSE_CANCELED;
 80055d0:	f06f 0301 	mvn.w	r3, #1
 80055d4:	e000      	b.n	80055d8 <run_inference+0x2a0>
    }

    return EI_IMPULSE_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3748      	adds	r7, #72	; 0x48
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	08004e2d 	.word	0x08004e2d
 80055e4:	0801cdc8 	.word	0x0801cdc8
 80055e8:	20000054 	.word	0x20000054
 80055ec:	0801cdfc 	.word	0x0801cdfc
 80055f0:	0801ce30 	.word	0x0801ce30
 80055f4:	0801ce88 	.word	0x0801ce88
 80055f8:	3d33c341 	.word	0x3d33c341
 80055fc:	0801cf00 	.word	0x0801cf00
 8005600:	0801cf38 	.word	0x0801cf38
 8005604:	0801cf7c 	.word	0x0801cf7c
 8005608:	3b800000 	.word	0x3b800000
 800560c:	0801cfb4 	.word	0x0801cfb4
 8005610:	0801cff0 	.word	0x0801cff0
 8005614:	0801d034 	.word	0x0801d034
 8005618:	20000000 	.word	0x20000000
 800561c:	0801d054 	.word	0x0801d054
 8005620:	0801cda8 	.word	0x0801cda8
 8005624:	08004eb1 	.word	0x08004eb1

08005628 <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv>:
 *
 * @param      matrix      Source and destination matrix
 * @param      config_ptr  ei_dsp_config_mfcc_t struct pointer
 */
static void calc_cepstral_mean_and_var_normalization_mfcc(ei_matrix *matrix, void *config_ptr)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
    ei_dsp_config_mfcc_t *config = (ei_dsp_config_mfcc_t *)config_ptr;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	60fb      	str	r3, [r7, #12]

    /* Modify rows and colums ration for matrix normalization */
    matrix->rows = EI_CLASSIFIER_NN_INPUT_FRAME_SIZE / config->num_cepstral;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f240 228a 	movw	r2, #650	; 0x28a
 800563e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005642:	461a      	mov	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]
    matrix->cols = config->num_cepstral;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	461a      	mov	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]

    // cepstral mean and variance normalization
    int ret = speechpy::processing::cmvnw(matrix, config->win_size, true, false);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	b299      	uxth	r1, r3
 8005658:	2300      	movs	r3, #0
 800565a:	2201      	movs	r2, #1
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fe f805 	bl	800366c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 8005662:	60b8      	str	r0, [r7, #8]
    if (ret != EIDSP_OK) {
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00f      	beq.n	800568a <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x62>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	480c      	ldr	r0, [pc, #48]	; (80056a0 <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x78>)
 800566e:	f000 fc69 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8005672:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x7c>)
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	480c      	ldr	r0, [pc, #48]	; (80056a8 <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x80>)
 8005678:	f015 fa44 	bl	801ab04 <iprintf>
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x84>)
 800567e:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x88>)
 8005680:	f240 21e9 	movw	r1, #745	; 0x2e9
 8005684:	480b      	ldr	r0, [pc, #44]	; (80056b4 <_ZN12_GLOBAL__N_1L45calc_cepstral_mean_and_var_normalization_mfccEPN2ei9ei_matrixEPv+0x8c>)
 8005686:	f014 fd67 	bl	801a158 <__assert_func>
    }

    /* Reset rows and columns ratio */
    matrix->rows = 1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	605a      	str	r2, [r3, #4]
    matrix->cols = EI_CLASSIFIER_NN_INPUT_FRAME_SIZE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f240 228a 	movw	r2, #650	; 0x28a
 8005696:	609a      	str	r2, [r3, #8]
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	0801ca7c 	.word	0x0801ca7c
 80056a4:	0801ba8c 	.word	0x0801ba8c
 80056a8:	0801b92c 	.word	0x0801b92c
 80056ac:	0801b93c 	.word	0x0801b93c
 80056b0:	0801d070 	.word	0x0801d070
 80056b4:	0801ce88 	.word	0x0801ce88

080056b8 <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv>:
 *
 * @param      matrix      Source and destination matrix
 * @param      config_ptr  ei_dsp_config_mfe_t struct pointer
 */
static void calc_cepstral_mean_and_var_normalization_mfe(ei_matrix *matrix, void *config_ptr)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
    ei_dsp_config_mfe_t *config = (ei_dsp_config_mfe_t *)config_ptr;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	60fb      	str	r3, [r7, #12]

    /* Modify rows and colums ration for matrix normalization */
    matrix->rows = EI_CLASSIFIER_NN_INPUT_FRAME_SIZE / config->num_filters;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f240 228a 	movw	r2, #650	; 0x28a
 80056ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	605a      	str	r2, [r3, #4]
    matrix->cols = config->num_filters;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	609a      	str	r2, [r3, #8]

    // cepstral mean and variance normalization
    int ret = speechpy::processing::cmvnw(matrix, config->win_size, false, true);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	b299      	uxth	r1, r3
 80056e8:	2301      	movs	r3, #1
 80056ea:	2200      	movs	r2, #0
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fd ffbd 	bl	800366c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 80056f2:	60b8      	str	r0, [r7, #8]
    if (ret != EIDSP_OK) {
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00f      	beq.n	800571a <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x62>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	480c      	ldr	r0, [pc, #48]	; (8005730 <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x78>)
 80056fe:	f000 fc21 	bl	8005f44 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8005702:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x7c>)
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	480c      	ldr	r0, [pc, #48]	; (8005738 <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x80>)
 8005708:	f015 f9fc 	bl	801ab04 <iprintf>
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x84>)
 800570e:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x88>)
 8005710:	f240 3103 	movw	r1, #771	; 0x303
 8005714:	480b      	ldr	r0, [pc, #44]	; (8005744 <_ZN12_GLOBAL__N_1L44calc_cepstral_mean_and_var_normalization_mfeEPN2ei9ei_matrixEPv+0x8c>)
 8005716:	f014 fd1f 	bl	801a158 <__assert_func>
    }

    /* Reset rows and columns ratio */
    matrix->rows = 1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	605a      	str	r2, [r3, #4]
    matrix->cols = EI_CLASSIFIER_NN_INPUT_FRAME_SIZE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f240 228a 	movw	r2, #650	; 0x28a
 8005726:	609a      	str	r2, [r3, #8]
}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	0801ca7c 	.word	0x0801ca7c
 8005734:	0801ba8c 	.word	0x0801ba8c
 8005738:	0801b92c 	.word	0x0801b92c
 800573c:	0801b93c 	.word	0x0801b93c
 8005740:	0801d0c8 	.word	0x0801d0c8
 8005744:	0801ce88 	.word	0x0801ce88

08005748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005748:	b590      	push	{r4, r7, lr}
 800574a:	b09d      	sub	sp, #116	; 0x74
 800574c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  HAL_StatusTypeDef hal_res;
	  int print_results = -(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW);
 800574e:	f06f 0303 	mvn.w	r3, #3
 8005752:	66fb      	str	r3, [r7, #108]	; 0x6c
	  uint32_t timestamp = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005758:	f001 fe62 	bl	8007420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800575c:	f000 f93a 	bl	80059d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005760:	f000 fa82 	bl	8005c68 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8005764:	f000 fa60 	bl	8005c28 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8005768:	f000 fa30 	bl	8005bcc <_ZL19MX_USART2_UART_Initv>
  MX_SAI1_Init();
 800576c:	f000 f9ee 	bl	8005b4c <_ZL12MX_SAI1_Initv>
  MX_CRC_Init();
 8005770:	f000 f9d4 	bl	8005b1c <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  // Say some stuff
  ei_printf("Inferencing settings:\r\n");
 8005774:	487f      	ldr	r0, [pc, #508]	; (8005974 <main+0x22c>)
 8005776:	f000 fbe5 	bl	8005f44 <_Z9ei_printfPKcz>
  ei_printf("\tInterval: %.2f ms.\r\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	4b7e      	ldr	r3, [pc, #504]	; (8005978 <main+0x230>)
 8005780:	487e      	ldr	r0, [pc, #504]	; (800597c <main+0x234>)
 8005782:	f000 fbdf 	bl	8005f44 <_Z9ei_printfPKcz>
  ei_printf("\tFrame size: %d\r\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 8005786:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800578a:	487d      	ldr	r0, [pc, #500]	; (8005980 <main+0x238>)
 800578c:	f000 fbda 	bl	8005f44 <_Z9ei_printfPKcz>
  ei_printf("\tSample length: %d ms.\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 8005790:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005794:	487b      	ldr	r0, [pc, #492]	; (8005984 <main+0x23c>)
 8005796:	f000 fbd5 	bl	8005f44 <_Z9ei_printfPKcz>
  ei_printf("\tNo. of classes: %d\r\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 800579a:	2106      	movs	r1, #6
 800579c:	487a      	ldr	r0, [pc, #488]	; (8005988 <main+0x240>)
 800579e:	f000 fbd1 	bl	8005f44 <_Z9ei_printfPKcz>

  // Create double buffer
  inference.buffers[0] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 80057a2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80057a6:	f014 fdc5 	bl	801a334 <malloc>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	4b77      	ldr	r3, [pc, #476]	; (800598c <main+0x244>)
 80057b0:	601a      	str	r2, [r3, #0]
  if(inference.buffers[0] == NULL)
 80057b2:	4b76      	ldr	r3, [pc, #472]	; (800598c <main+0x244>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <main+0x78>
  {
    ei_printf("ERROR: Could not create buffer 1. Likely ran out of heap memory.\r\n");
 80057ba:	4875      	ldr	r0, [pc, #468]	; (8005990 <main+0x248>)
 80057bc:	f000 fbc2 	bl	8005f44 <_Z9ei_printfPKcz>
  }
  inference.buffers[1] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 80057c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80057c4:	f014 fdb6 	bl	801a334 <malloc>
 80057c8:	4603      	mov	r3, r0
 80057ca:	461a      	mov	r2, r3
 80057cc:	4b6f      	ldr	r3, [pc, #444]	; (800598c <main+0x244>)
 80057ce:	605a      	str	r2, [r3, #4]
  if(inference.buffers[1] == NULL)
 80057d0:	4b6e      	ldr	r3, [pc, #440]	; (800598c <main+0x244>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <main+0x96>
  {
    ei_printf("ERROR: Could not create buffer 2. Likely ran out of heap memory.\r\n");
 80057d8:	486e      	ldr	r0, [pc, #440]	; (8005994 <main+0x24c>)
 80057da:	f000 fbb3 	bl	8005f44 <_Z9ei_printfPKcz>
  }
  // Set inference parameters
  inference.buf_select = 0;
 80057de:	4b6b      	ldr	r3, [pc, #428]	; (800598c <main+0x244>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	721a      	strb	r2, [r3, #8]
  inference.buf_count  = 0;
 80057e4:	4b69      	ldr	r3, [pc, #420]	; (800598c <main+0x244>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	60da      	str	r2, [r3, #12]
  inference.n_samples  = EI_CLASSIFIER_SLICE_SIZE;
 80057ea:	4b68      	ldr	r3, [pc, #416]	; (800598c <main+0x244>)
 80057ec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80057f0:	611a      	str	r2, [r3, #16]
  inference.buf_ready  = 0;
 80057f2:	4b66      	ldr	r3, [pc, #408]	; (800598c <main+0x244>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	725a      	strb	r2, [r3, #9]

  // Start receiving I2S audio data
  hal_res =  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)i2s_buf, I2S_BUF_LEN);
 80057f8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80057fc:	4966      	ldr	r1, [pc, #408]	; (8005998 <main+0x250>)
 80057fe:	4867      	ldr	r0, [pc, #412]	; (800599c <main+0x254>)
 8005800:	f004 f9e8 	bl	8009bd4 <HAL_SAI_Receive_DMA>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  if (hal_res != HAL_OK)
 800580a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <main+0xd0>
  {
    ei_printf("ERROR: Could not initialize I2S microphone.\r\n");
 8005812:	4863      	ldr	r0, [pc, #396]	; (80059a0 <main+0x258>)
 8005814:	f000 fb96 	bl	8005f44 <_Z9ei_printfPKcz>
  }

  // Start doing inference
  record_ready = true;
 8005818:	4b62      	ldr	r3, [pc, #392]	; (80059a4 <main+0x25c>)
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ei_printf("Point A\n");
 800581e:	4862      	ldr	r0, [pc, #392]	; (80059a8 <main+0x260>)
 8005820:	f000 fb90 	bl	8005f44 <_Z9ei_printfPKcz>
    // Wait until buffer is full
    bool m = ei_microphone_inference_record();
 8005824:	f000 fabc 	bl	8005da0 <_Z30ei_microphone_inference_recordv>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
    if (!m)
 800582e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8005832:	f083 0301 	eor.w	r3, r3, #1
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <main+0xfc>
    {
      ei_printf("ERROR: Audio buffer overrun\r\n");
 800583c:	485b      	ldr	r0, [pc, #364]	; (80059ac <main+0x264>)
 800583e:	f000 fb81 	bl	8005f44 <_Z9ei_printfPKcz>
      break;
 8005842:	e090      	b.n	8005966 <main+0x21e>
    }
    // Do classification (i.e. the inference part)
    signal_t signal;
 8005844:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe fed0 	bl	80045ee <_ZN2ei11ei_signal_tC1Ev>
    signal.total_length = EI_CLASSIFIER_SLICE_SIZE;
 800584e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005852:	65bb      	str	r3, [r7, #88]	; 0x58
    signal.get_data = &get_audio_signal_data;
 8005854:	4b56      	ldr	r3, [pc, #344]	; (80059b0 <main+0x268>)
 8005856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005858:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800585c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fcb4 	bl	80061d0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
    ei_impulse_result_t result = { 0 };
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	2244      	movs	r2, #68	; 0x44
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f014 fd98 	bl	801a3a4 <memset>
    EI_IMPULSE_ERROR r = run_classifier_continuous(&signal, &result, debug_nn);
 8005874:	4b4f      	ldr	r3, [pc, #316]	; (80059b4 <main+0x26c>)
 8005876:	781a      	ldrb	r2, [r3, #0]
 8005878:	1d39      	adds	r1, r7, #4
 800587a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fb8c 	bl	8004f9c <run_classifier_continuous>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
    if (r != EI_IMPULSE_OK)
 800588a:	f997 3061 	ldrsb.w	r3, [r7, #97]	; 0x61
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <main+0x15a>
    {
        ei_printf("ERROR: Failed to run classifier (%d)\r\n", r);
 8005892:	f997 3061 	ldrsb.w	r3, [r7, #97]	; 0x61
 8005896:	4619      	mov	r1, r3
 8005898:	4847      	ldr	r0, [pc, #284]	; (80059b8 <main+0x270>)
 800589a:	f000 fb53 	bl	8005f44 <_Z9ei_printfPKcz>
 800589e:	2400      	movs	r4, #0
        break;
 80058a0:	e059      	b.n	8005956 <main+0x20e>
    }

    // Print output predictions (once every 4 predictions)
    ei_printf("in for\n");
 80058a2:	4846      	ldr	r0, [pc, #280]	; (80059bc <main+0x274>)
 80058a4:	f000 fb4e 	bl	8005f44 <_Z9ei_printfPKcz>
    if(++print_results >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1))
 80058a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058aa:	3301      	adds	r3, #1
 80058ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	bfcc      	ite	gt
 80058b4:	2301      	movgt	r3, #1
 80058b6:	2300      	movle	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d027      	beq.n	800590e <main+0x1c6>
    {
      // Comment this section out if you don't want to see the raw scores
      ei_printf("Predictions (DSP: %d ms, NN: %d ms)\r\n", result.timing.dsp, result.timing.classification);
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c2:	4619      	mov	r1, r3
 80058c4:	483e      	ldr	r0, [pc, #248]	; (80059c0 <main+0x278>)
 80058c6:	f000 fb3d 	bl	8005f44 <_Z9ei_printfPKcz>
      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d0:	2b05      	cmp	r3, #5
 80058d2:	d81a      	bhi.n	800590a <main+0x1c2>
      {
          ei_printf("    %s: %.5f\r\n", result.classification[ix].label, result.classification[ix].value);
 80058d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80058dc:	4413      	add	r3, r2
 80058de:	f853 4c6c 	ldr.w	r4, [r3, #-108]
 80058e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80058ea:	4413      	add	r3, r2
 80058ec:	3b68      	subs	r3, #104	; 0x68
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fa fe49 	bl	8000588 <__aeabi_f2d>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4621      	mov	r1, r4
 80058fc:	4831      	ldr	r0, [pc, #196]	; (80059c4 <main+0x27c>)
 80058fe:	f000 fb21 	bl	8005f44 <_Z9ei_printfPKcz>
      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 8005902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005904:	3301      	adds	r3, #1
 8005906:	66bb      	str	r3, [r7, #104]	; 0x68
 8005908:	e7e1      	b.n	80058ce <main+0x186>
      }
      print_results = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    ei_printf("No\n");
 800590e:	482e      	ldr	r0, [pc, #184]	; (80059c8 <main+0x280>)
 8005910:	f000 fb18 	bl	8005f44 <_Z9ei_printfPKcz>

    // Your code goes here
    // Note: see model_metadata.h for labels and indices

    // Example: print if "yes" is above 0.5 threshold
    if (result.classification[3].value > 0.5)
 8005914:	edd7 7a08 	vldr	s15, [r7, #32]
 8005918:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800591c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005924:	dd02      	ble.n	800592c <main+0x1e4>
    {
      ei_printf("YES!\r\n");
 8005926:	4829      	ldr	r0, [pc, #164]	; (80059cc <main+0x284>)
 8005928:	f000 fb0c 	bl	8005f44 <_Z9ei_printfPKcz>
    }

    // Example: flash LED if "no" is above 0.5 threshold
    if (result.classification[0].value > 0.5)
 800592c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005930:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593c:	dd05      	ble.n	800594a <main+0x202>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800593e:	2201      	movs	r2, #1
 8005940:	2120      	movs	r1, #32
 8005942:	4823      	ldr	r0, [pc, #140]	; (80059d0 <main+0x288>)
 8005944:	f002 fc80 	bl	8008248 <HAL_GPIO_WritePin>
 8005948:	e004      	b.n	8005954 <main+0x20c>
    }
    else
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800594a:	2200      	movs	r2, #0
 800594c:	2120      	movs	r1, #32
 800594e:	4820      	ldr	r0, [pc, #128]	; (80059d0 <main+0x288>)
 8005950:	f002 fc7a 	bl	8008248 <HAL_GPIO_WritePin>
    signal_t signal;
 8005954:	2401      	movs	r4, #1
 8005956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fe54 	bl	8004608 <_ZN2ei11ei_signal_tD1Ev>
 8005960:	2c01      	cmp	r4, #1
 8005962:	d100      	bne.n	8005966 <main+0x21e>
    // ***END OF EXAMPLES***

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8005964:	e75b      	b.n	800581e <main+0xd6>

  ei_microphone_inference_end();
 8005966:	f000 fa47 	bl	8005df8 <_Z27ei_microphone_inference_endv>
  /* USER CODE END 3 */
}
 800596a:	2300      	movs	r3, #0
 800596c:	4618      	mov	r0, r3
 800596e:	3774      	adds	r7, #116	; 0x74
 8005970:	46bd      	mov	sp, r7
 8005972:	bd90      	pop	{r4, r7, pc}
 8005974:	0801d148 	.word	0x0801d148
 8005978:	3fb00000 	.word	0x3fb00000
 800597c:	0801d160 	.word	0x0801d160
 8005980:	0801d178 	.word	0x0801d178
 8005984:	0801d18c 	.word	0x0801d18c
 8005988:	0801d1a8 	.word	0x0801d1a8
 800598c:	20006970 	.word	0x20006970
 8005990:	0801d1c0 	.word	0x0801d1c0
 8005994:	0801d204 	.word	0x0801d204
 8005998:	20000570 	.word	0x20000570
 800599c:	20000440 	.word	0x20000440
 80059a0:	0801d248 	.word	0x0801d248
 80059a4:	20006984 	.word	0x20006984
 80059a8:	0801d278 	.word	0x0801d278
 80059ac:	0801d284 	.word	0x0801d284
 80059b0:	08005eb9 	.word	0x08005eb9
 80059b4:	2000056c 	.word	0x2000056c
 80059b8:	0801d2a4 	.word	0x0801d2a4
 80059bc:	0801d2cc 	.word	0x0801d2cc
 80059c0:	0801d2d4 	.word	0x0801d2d4
 80059c4:	0801d2fc 	.word	0x0801d2fc
 80059c8:	0801d30c 	.word	0x0801d30c
 80059cc:	0801d310 	.word	0x0801d310
 80059d0:	40020000 	.word	0x40020000

080059d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b0ac      	sub	sp, #176	; 0xb0
 80059d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80059de:	2234      	movs	r2, #52	; 0x34
 80059e0:	2100      	movs	r1, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f014 fcde 	bl	801a3a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80059f8:	f107 030c 	add.w	r3, r7, #12
 80059fc:	225c      	movs	r2, #92	; 0x5c
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f014 fccf 	bl	801a3a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a06:	2300      	movs	r3, #0
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	4b42      	ldr	r3, [pc, #264]	; (8005b14 <_Z18SystemClock_Configv+0x140>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	4a41      	ldr	r2, [pc, #260]	; (8005b14 <_Z18SystemClock_Configv+0x140>)
 8005a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a14:	6413      	str	r3, [r2, #64]	; 0x40
 8005a16:	4b3f      	ldr	r3, [pc, #252]	; (8005b14 <_Z18SystemClock_Configv+0x140>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
 8005a26:	4b3c      	ldr	r3, [pc, #240]	; (8005b18 <_Z18SystemClock_Configv+0x144>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005a2e:	4a3a      	ldr	r2, [pc, #232]	; (8005b18 <_Z18SystemClock_Configv+0x144>)
 8005a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <_Z18SystemClock_Configv+0x144>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a42:	2302      	movs	r3, #2
 8005a44:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a4c:	2310      	movs	r3, #16
 8005a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a52:	2302      	movs	r3, #2
 8005a54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005a5e:	2308      	movs	r3, #8
 8005a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8005a64:	2354      	movs	r3, #84	; 0x54
 8005a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005a70:	2302      	movs	r3, #2
 8005a72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005a76:	2302      	movs	r3, #2
 8005a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005a80:	4618      	mov	r0, r3
 8005a82:	f003 fc39 	bl	80092f8 <HAL_RCC_OscConfig>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8005a96:	f000 fa8f 	bl	8005fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a9a:	230f      	movs	r3, #15
 8005a9c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aaa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005aac:	2300      	movs	r3, #0
 8005aae:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005ab0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f002 fbe0 	bl	800827c <HAL_RCC_ClockConfig>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bf14      	ite	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	2300      	moveq	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8005acc:	f000 fa74 	bl	8005fb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005ad8:	23c0      	movs	r3, #192	; 0xc0
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8005adc:	2302      	movs	r3, #2
 8005ade:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005aec:	f107 030c 	add.w	r3, r7, #12
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 fcdd 	bl	80084b0 <HAL_RCCEx_PeriphCLKConfig>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
 8005b06:	f000 fa57 	bl	8005fb8 <Error_Handler>
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	37b0      	adds	r7, #176	; 0xb0
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40007000 	.word	0x40007000

08005b1c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <_ZL11MX_CRC_Initv+0x28>)
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <_ZL11MX_CRC_Initv+0x2c>)
 8005b24:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005b26:	4807      	ldr	r0, [pc, #28]	; (8005b44 <_ZL11MX_CRC_Initv+0x28>)
 8005b28:	f001 fdfd 	bl	8007726 <HAL_CRC_Init>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bf14      	ite	ne
 8005b32:	2301      	movne	r3, #1
 8005b34:	2300      	moveq	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8005b3c:	f000 fa3c 	bl	8005fb8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000438 	.word	0x20000438
 8005b48:	40023000 	.word	0x40023000

08005b4c <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8005b50:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b52:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <_ZL12MX_SAI1_Initv+0x78>)
 8005b54:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8005b56:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8005b5c:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005b62:	4b17      	ldr	r3, [pc, #92]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8005b6e:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8005b74:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b76:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005b7a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b7e:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <_ZL12MX_SAI1_Initv+0x7c>)
 8005b80:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8005b88:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4807      	ldr	r0, [pc, #28]	; (8005bc0 <_ZL12MX_SAI1_Initv+0x74>)
 8005ba2:	f003 fe47 	bl	8009834 <HAL_SAI_InitProtocol>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <_ZL12MX_SAI1_Initv+0x6e>
  {
    Error_Handler();
 8005bb6:	f000 f9ff 	bl	8005fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000440 	.word	0x20000440
 8005bc4:	40015824 	.word	0x40015824
 8005bc8:	0002ee00 	.word	0x0002ee00

08005bcc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bd2:	4a14      	ldr	r2, [pc, #80]	; (8005c24 <_ZL19MX_USART2_UART_Initv+0x58>)
 8005bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005bd6:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005bde:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005be4:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bf2:	220c      	movs	r2, #12
 8005bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bfc:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c02:	4807      	ldr	r0, [pc, #28]	; (8005c20 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005c04:	f004 faf2 	bl	800a1ec <HAL_UART_Init>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8005c18:	f000 f9ce 	bl	8005fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c1c:	bf00      	nop
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000528 	.word	0x20000528
 8005c24:	40004400 	.word	0x40004400

08005c28 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <_ZL11MX_DMA_Initv+0x3c>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <_ZL11MX_DMA_Initv+0x3c>)
 8005c38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <_ZL11MX_DMA_Initv+0x3c>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c46:	607b      	str	r3, [r7, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	203c      	movs	r0, #60	; 0x3c
 8005c50:	f001 fd33 	bl	80076ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8005c54:	203c      	movs	r0, #60	; 0x3c
 8005c56:	f001 fd4c 	bl	80076f2 <HAL_NVIC_EnableIRQ>

}
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40023800 	.word	0x40023800

08005c68 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	609a      	str	r2, [r3, #8]
 8005c7a:	60da      	str	r2, [r3, #12]
 8005c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	4b42      	ldr	r3, [pc, #264]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	4a41      	ldr	r2, [pc, #260]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c8e:	4b3f      	ldr	r3, [pc, #252]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	4b3b      	ldr	r3, [pc, #236]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	4a3a      	ldr	r2, [pc, #232]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8005caa:	4b38      	ldr	r3, [pc, #224]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	4a33      	ldr	r2, [pc, #204]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc6:	4b31      	ldr	r3, [pc, #196]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	60bb      	str	r3, [r7, #8]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	4b2d      	ldr	r3, [pc, #180]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce2:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <_ZL12MX_GPIO_Initv+0x124>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RR_Pin, GPIO_PIN_RESET);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005cf4:	4826      	ldr	r0, [pc, #152]	; (8005d90 <_ZL12MX_GPIO_Initv+0x128>)
 8005cf6:	f002 faa7 	bl	8008248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_Pin|LF_Pin, GPIO_PIN_RESET);
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005d00:	4824      	ldr	r0, [pc, #144]	; (8005d94 <_ZL12MX_GPIO_Initv+0x12c>)
 8005d02:	f002 faa1 	bl	8008248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LR_GPIO_Port, LR_Pin, GPIO_PIN_RESET);
 8005d06:	2200      	movs	r2, #0
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	4823      	ldr	r0, [pc, #140]	; (8005d98 <_ZL12MX_GPIO_Initv+0x130>)
 8005d0c:	f002 fa9c 	bl	8008248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005d16:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <_ZL12MX_GPIO_Initv+0x134>)
 8005d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005d1e:	f107 0314 	add.w	r3, r7, #20
 8005d22:	4619      	mov	r1, r3
 8005d24:	481c      	ldr	r0, [pc, #112]	; (8005d98 <_ZL12MX_GPIO_Initv+0x130>)
 8005d26:	f002 f8fb 	bl	8007f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RR_Pin;
 8005d2a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8005d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d30:	2301      	movs	r3, #1
 8005d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d3c:	f107 0314 	add.w	r3, r7, #20
 8005d40:	4619      	mov	r1, r3
 8005d42:	4813      	ldr	r0, [pc, #76]	; (8005d90 <_ZL12MX_GPIO_Initv+0x128>)
 8005d44:	f002 f8ec 	bl	8007f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_Pin LF_Pin */
  GPIO_InitStruct.Pin = RF_Pin|LF_Pin;
 8005d48:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8005d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d56:	2300      	movs	r3, #0
 8005d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d5a:	f107 0314 	add.w	r3, r7, #20
 8005d5e:	4619      	mov	r1, r3
 8005d60:	480c      	ldr	r0, [pc, #48]	; (8005d94 <_ZL12MX_GPIO_Initv+0x12c>)
 8005d62:	f002 f8dd 	bl	8007f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_Pin */
  GPIO_InitStruct.Pin = LR_Pin;
 8005d66:	2380      	movs	r3, #128	; 0x80
 8005d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d72:	2300      	movs	r3, #0
 8005d74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_GPIO_Port, &GPIO_InitStruct);
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4806      	ldr	r0, [pc, #24]	; (8005d98 <_ZL12MX_GPIO_Initv+0x130>)
 8005d7e:	f002 f8cf 	bl	8007f20 <HAL_GPIO_Init>

}
 8005d82:	bf00      	nop
 8005d84:	3728      	adds	r7, #40	; 0x28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	40020000 	.word	0x40020000
 8005d94:	40020400 	.word	0x40020400
 8005d98:	40020800 	.word	0x40020800
 8005d9c:	10210000 	.word	0x10210000

08005da0 <_Z30ei_microphone_inference_recordv>:
 * @brief      Wait for a full buffer
 *
 * @return     In case of an buffer overrun return false
 */
bool ei_microphone_inference_record(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
  bool ret = true;
 8005da6:	2301      	movs	r3, #1
 8005da8:	71fb      	strb	r3, [r7, #7]

  // Check to see if the buffer has overrun
  if (inference.buf_ready == 1) {
 8005daa:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <_Z30ei_microphone_inference_recordv+0x50>)
 8005dac:	7a5b      	ldrb	r3, [r3, #9]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	bf0c      	ite	eq
 8005db4:	2301      	moveq	r3, #1
 8005db6:	2300      	movne	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <_Z30ei_microphone_inference_recordv+0x22>
      ret = false;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	71fb      	strb	r3, [r7, #7]
  }

  // %%%TODO: make this non-blocking
  while (inference.buf_ready == 0)
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <_Z30ei_microphone_inference_recordv+0x50>)
 8005dc4:	7a5b      	ldrb	r3, [r3, #9]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <_Z30ei_microphone_inference_recordv+0x40>
  {
	  ei_printf("Waiting buffer");
 8005dd6:	4807      	ldr	r0, [pc, #28]	; (8005df4 <_Z30ei_microphone_inference_recordv+0x54>)
 8005dd8:	f000 f8b4 	bl	8005f44 <_Z9ei_printfPKcz>
    continue;
 8005ddc:	bf00      	nop
  while (inference.buf_ready == 0)
 8005dde:	e7f0      	b.n	8005dc2 <_Z30ei_microphone_inference_recordv+0x22>
  }

  inference.buf_ready = 0;
 8005de0:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <_Z30ei_microphone_inference_recordv+0x50>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	725a      	strb	r2, [r3, #9]

  return ret;
 8005de6:	79fb      	ldrb	r3, [r7, #7]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20006970 	.word	0x20006970
 8005df4:	0801d318 	.word	0x0801d318

08005df8 <_Z27ei_microphone_inference_endv>:
 * @brief      Stop audio sampling, release sampling buffers
 *
 * @return     false on error
 */
bool ei_microphone_inference_end(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  // Stop I2S
  HAL_SAI_DMAStop(&hsai_BlockB1);
 8005dfc:	4809      	ldr	r0, [pc, #36]	; (8005e24 <_Z27ei_microphone_inference_endv+0x2c>)
 8005dfe:	f003 fe75 	bl	8009aec <HAL_SAI_DMAStop>

  // Free up double buffer
  record_ready = false;
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <_Z27ei_microphone_inference_endv+0x30>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
  free(inference.buffers[0]);
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <_Z27ei_microphone_inference_endv+0x34>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f014 fa99 	bl	801a344 <free>
  free(inference.buffers[1]);
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <_Z27ei_microphone_inference_endv+0x34>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f014 fa94 	bl	801a344 <free>

  return true;
 8005e1c:	2301      	movs	r3, #1
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000440 	.word	0x20000440
 8005e28:	20006984 	.word	0x20006984
 8005e2c:	20006970 	.word	0x20006970

08005e30 <_ZL31audio_buffer_inference_callbackmm>:
 *
 * @param[in]  n_bytes  Number of bytes to copy
 * @param[in]  offset   offset in sampleBuffer
 */
static void audio_buffer_inference_callback(uint32_t n_bytes, uint32_t offset)
{
 8005e30:	b490      	push	{r4, r7}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  // Copy samples from I2S buffer to inference buffer. Convert 24-bit, 32kHz
  // samples to 16-bit, 16kHz
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d22d      	bcs.n	8005ea4 <_ZL31audio_buffer_inference_callbackmm+0x74>
    inference.buffers[inference.buf_select][inference.buf_count++] =
        (int16_t)(i2s_buf[offset + (I2S_BUF_SKIP * i)] >> 8);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	009a      	lsls	r2, r3, #2
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4413      	add	r3, r2
 8005e50:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <_ZL31audio_buffer_inference_callbackmm+0x80>)
 8005e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e56:	0a1c      	lsrs	r4, r3, #8
    inference.buffers[inference.buf_select][inference.buf_count++] =
 8005e58:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e5a:	7a1b      	ldrb	r3, [r3, #8]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e64:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	1c59      	adds	r1, r3, #1
 8005e6a:	4812      	ldr	r0, [pc, #72]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e6c:	60c1      	str	r1, [r0, #12]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	b222      	sxth	r2, r4
 8005e74:	801a      	strh	r2, [r3, #0]

    if (inference.buf_count >= inference.n_samples) {
 8005e76:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d30c      	bcc.n	8005e9c <_ZL31audio_buffer_inference_callbackmm+0x6c>
      inference.buf_select ^= 1;
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e84:	7a1b      	ldrb	r3, [r3, #8]
 8005e86:	f083 0301 	eor.w	r3, r3, #1
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e8e:	721a      	strb	r2, [r3, #8]
      inference.buf_count = 0;
 8005e90:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	60da      	str	r2, [r3, #12]
      inference.buf_ready = 1;
 8005e96:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	725a      	strb	r2, [r3, #9]
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	e7cc      	b.n	8005e3e <_ZL31audio_buffer_inference_callbackmm+0xe>
    }
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc90      	pop	{r4, r7}
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	20000570 	.word	0x20000570
 8005eb4:	20006970 	.word	0x20006970

08005eb8 <_ZL21get_audio_signal_datajjPf>:

/**
 * Get raw audio signal data
 */
static int get_audio_signal_data(size_t offset, size_t length, float *out_ptr)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  numpy::int16_to_float(&inference.buffers[inference.buf_select ^ 1][offset], out_ptr, length);
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <_ZL21get_audio_signal_datajjPf+0x38>)
 8005ec6:	7a1b      	ldrb	r3, [r3, #8]
 8005ec8:	f083 0301 	eor.w	r3, r3, #1
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <_ZL21get_audio_signal_datajjPf+0x38>)
 8005ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4413      	add	r3, r2
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fc fab1 	bl	8002448 <_ZN2ei5numpy14int16_to_floatEPKsPfj>

  return 0;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20006970 	.word	0x20006970

08005ef4 <_Z6vprintPKcSt9__va_list>:

/**
 * Low-level print function that uses UART to print status messages.
 */
void vprint(const char *fmt, va_list argp)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b0b4      	sub	sp, #208	; 0xd0
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  char string[200];
  if(0 < vsprintf(string, fmt, argp)) // build string
 8005efe:	f107 0308 	add.w	r3, r7, #8
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f014 fef4 	bl	801acf4 <vsiprintf>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfcc      	ite	gt
 8005f12:	2301      	movgt	r3, #1
 8005f14:	2300      	movle	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <_Z6vprintPKcSt9__va_list+0x44>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff);
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fa f975 	bl	8000210 <strlen>
 8005f26:	4603      	mov	r3, r0
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	f107 0108 	add.w	r1, r7, #8
 8005f2e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005f32:	4803      	ldr	r0, [pc, #12]	; (8005f40 <_Z6vprintPKcSt9__va_list+0x4c>)
 8005f34:	f004 f9a7 	bl	800a286 <HAL_UART_Transmit>
  }
}
 8005f38:	bf00      	nop
 8005f3a:	37d0      	adds	r7, #208	; 0xd0
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000528 	.word	0x20000528

08005f44 <_Z9ei_printfPKcz>:

/**
 * Wrapper for vprint. Use this like you would printf to print messages to the serial console.
 */
void ei_printf(const char *format, ...)
{
 8005f44:	b40f      	push	{r0, r1, r2, r3}
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
  va_list myargs;
  va_start(myargs, format);
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	607b      	str	r3, [r7, #4]
  vprint(format, myargs);
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	6938      	ldr	r0, [r7, #16]
 8005f56:	f7ff ffcd 	bl	8005ef4 <_Z6vprintPKcSt9__va_list>
  va_end(myargs);
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f64:	b004      	add	sp, #16
 8005f66:	4770      	bx	lr

08005f68 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Called when the first half of the receive buffer is full
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  if (record_ready == true)
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <HAL_SAI_RxHalfCpltCallback+0x24>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d104      	bne.n	8005f82 <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, 0);
 8005f78:	2100      	movs	r1, #0
 8005f7a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005f7e:	f7ff ff57 	bl	8005e30 <_ZL31audio_buffer_inference_callbackmm>
  }
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20006984 	.word	0x20006984

08005f90 <HAL_SAI_RxCpltCallback>:

/**
 * Called when the second half of the receive buffer is full
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  if (record_ready == true)
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <HAL_SAI_RxCpltCallback+0x24>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d105      	bne.n	8005fac <HAL_SAI_RxCpltCallback+0x1c>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, I2S_BUF_LEN >> 1);
 8005fa0:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8005fa4:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005fa8:	f7ff ff42 	bl	8005e30 <_ZL31audio_buffer_inference_callbackmm>
  }
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20006984 	.word	0x20006984

08005fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005fbc:	b672      	cpsid	i
}
 8005fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005fc0:	e7fe      	b.n	8005fc0 <Error_Handler+0x8>

08005fc2 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fa faca 	bl	8000564 <__aeabi_i2d>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	ec43 2b10 	vmov	d0, r2, r3
 8005fd8:	f011 fc78 	bl	80178cc <sqrt>
 8005fdc:	eeb0 7a40 	vmov.f32	s14, s0
 8005fe0:	eef0 7a60 	vmov.f32	s15, s1
 8005fe4:	eeb0 0a47 	vmov.f32	s0, s14
 8005fe8:	eef0 0a67 	vmov.f32	s1, s15
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005ff2:	b5b0      	push	{r4, r5, r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	ed87 0a01 	vstr	s0, [r7, #4]
 8005ffc:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fa fac2 	bl	8000588 <__aeabi_f2d>
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	6838      	ldr	r0, [r7, #0]
 800600a:	f7fa faab 	bl	8000564 <__aeabi_i2d>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	ec43 2b11 	vmov	d1, r2, r3
 8006016:	ec45 4b10 	vmov	d0, r4, r5
 800601a:	f011 fba9 	bl	8017770 <pow>
 800601e:	eeb0 7a40 	vmov.f32	s14, s0
 8006022:	eef0 7a60 	vmov.f32	s15, s1
    }
 8006026:	eeb0 0a47 	vmov.f32	s0, s14
 800602a:	eef0 0a67 	vmov.f32	s1, s15
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bdb0      	pop	{r4, r5, r7, pc}

08006034 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8006034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4618      	mov	r0, r3
 8006048:	f7fb f833 	bl	80010b2 <_ZNKSt14_Function_base8_M_emptyEv>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8006052:	f7fb f8c5 	bl	80011e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68dc      	ldr	r4, [r3, #12]
 800605a:	68fd      	ldr	r5, [r7, #12]
 800605c:	f107 0308 	add.w	r3, r7, #8
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f8f6 	bl	8006252 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006066:	4606      	mov	r6, r0
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f8f1 	bl	8006252 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006070:	4680      	mov	r8, r0
 8006072:	463b      	mov	r3, r7
 8006074:	4618      	mov	r0, r3
 8006076:	f000 f8f7 	bl	8006268 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800607a:	4603      	mov	r3, r0
 800607c:	4642      	mov	r2, r8
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47a0      	blx	r4
 8006084:	4603      	mov	r3, r0
    }
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006090 <_ZNSt6vectorImSaImEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8006090:	b5b0      	push	{r4, r5, r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681c      	ldr	r4, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f8eb 	bl	800627e <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80060a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80060aa:	461a      	mov	r2, r3
 80060ac:	4629      	mov	r1, r5
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 f8f0 	bl	8006294 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 f831 	bl	800611e <_ZNSt12_Vector_baseImSaImEED1Ev>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bdb0      	pop	{r4, r5, r7, pc}

080060c6 <_ZNKSt8functionIFijjPfEEcvbEv>:
      explicit operator bool() const noexcept
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fa ffee 	bl	80010b2 <_ZNKSt14_Function_base8_M_emptyEv>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f083 0301 	eor.w	r3, r3, #1
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f8de 	bl	80062b0 <_ZNSaImEC1Ev>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f8e6 	bl	80062c8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <_ZNSaImED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f8ee 	bl	80062f0 <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8006136:	461a      	mov	r2, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f8e4 	bl	8006306 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4618      	mov	r0, r3
 8006142:	f7fd f880 	bl	8003246 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <_ZNSt6vectorImSaImEE9push_backEOm>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800615a:	6838      	ldr	r0, [r7, #0]
 800615c:	f000 f8e6 	bl	800632c <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8006160:	4603      	mov	r3, r0
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8ec 	bl	8006342 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	109b      	asrs	r3, r3, #2
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <_ZNSt6vectorImSaImEE2atEj>:
      at(size_type __n)
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8fe 	bl	80063a0 <_ZNKSt6vectorImSaImEE14_M_range_checkEj>
	return (*this)[__n];
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f91a 	bl	80063e0 <_ZNSt6vectorImSaImEEixEj>
 80061ac:	4603      	mov	r3, r0
      }
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fa ff55 	bl	8001070 <_ZNSt14_Function_baseC1Ev>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80061da:	6838      	ldr	r0, [r7, #0]
 80061dc:	f000 f910 	bl	8006400 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 80061e0:	4603      	mov	r3, r0
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	f107 0308 	add.w	r3, r7, #8
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f914 	bl	8006418 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 80061f0:	f107 0308 	add.w	r3, r7, #8
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f80a 	bl	8006210 <_ZNSt8functionIFijjPfEE4swapERS2_>
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe f9e7 	bl	80045d4 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8006206:	687b      	ldr	r3, [r7, #4]
	}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f92e 	bl	8006482 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f103 0208 	add.w	r2, r3, #8
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	3308      	adds	r3, #8
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f000 f957 	bl	80064e6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f103 020c 	add.w	r2, r3, #12
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f000 f978 	bl	800653a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f968 	bl	8006578 <_ZSt8_DestroyIPmEvT_S1_>
    }
 80062a8:	bf00      	nop
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f96a 	bl	8006592 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	605a      	str	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	609a      	str	r2, [r3, #8]
	{ }
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <_ZN9__gnu_cxx13new_allocatorImED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
	if (__p)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f942 	bl	80065a8 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8006342:	b5b0      	push	{r4, r5, r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	d011      	beq.n	800637c <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006358:	687c      	ldr	r4, [r7, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685d      	ldr	r5, [r3, #4]
 800635e:	6838      	ldr	r0, [r7, #0]
 8006360:	f000 f931 	bl	80065c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8006364:	4603      	mov	r3, r0
 8006366:	461a      	mov	r2, r3
 8006368:	4629      	mov	r1, r5
 800636a:	4620      	mov	r0, r4
 800636c:	f000 f936 	bl	80065dc <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800637a:	e00c      	b.n	8006396 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f940 	bl	8006602 <_ZNSt6vectorImSaImEE3endEv>
 8006382:	4604      	mov	r4, r0
 8006384:	6838      	ldr	r0, [r7, #0]
 8006386:	f000 f91e 	bl	80065c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	4621      	mov	r1, r4
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f95d 	bl	8006650 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080063a0 <_ZNKSt6vectorImSaImEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff fee1 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 80063b0:	4602      	mov	r2, r0
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bf2c      	ite	cs
 80063b8:	2301      	movcs	r3, #1
 80063ba:	2300      	movcc	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff fed5 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461a      	mov	r2, r3
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	4803      	ldr	r0, [pc, #12]	; (80063dc <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x3c>)
 80063d0:	f010 fe21 	bl	8017016 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 80063d4:	bf00      	nop
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	0801d344 	.word	0x0801d344

080063e0 <_ZNSt6vectorImSaImEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
      }
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4618      	mov	r0, r3
 8006426:	f7fa fe23 	bl	8001070 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f9cb 	bl	80067c8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00f      	beq.n	8006458 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006438:	687c      	ldr	r4, [r7, #4]
 800643a:	463b      	mov	r3, r7
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f9d3 	bl	80067e8 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006442:	4603      	mov	r3, r0
 8006444:	4619      	mov	r1, r3
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f9d9 	bl	80067fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a05      	ldr	r2, [pc, #20]	; (8006464 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8006450:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a04      	ldr	r2, [pc, #16]	; (8006468 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8006456:	609a      	str	r2, [r3, #8]
      }
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	bd90      	pop	{r4, r7, pc}
 8006462:	bf00      	nop
 8006464:	08006823 	.word	0x08006823
 8006468:	0800686b 	.word	0x0800686b

0800646c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ffed 	bl	800646c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006492:	4602      	mov	r2, r0
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800649c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80064a0:	6838      	ldr	r0, [r7, #0]
 80064a2:	f7ff ffe3 	bl	800646c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064ae:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff ffd8 	bl	800646c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80064bc:	4602      	mov	r2, r0
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064c4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ffed 	bl	80064d0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80064f6:	4603      	mov	r3, r0
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80064fc:	6838      	ldr	r0, [r7, #0]
 80064fe:	f7ff ffe7 	bl	80064d0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006502:	4603      	mov	r3, r0
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800650a:	f107 030c 	add.w	r3, r7, #12
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff ffde 	bl	80064d0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006514:	4603      	mov	r3, r0
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	601a      	str	r2, [r3, #0]
    }
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ffed 	bl	8006524 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800654a:	4603      	mov	r3, r0
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006550:	6838      	ldr	r0, [r7, #0]
 8006552:	f7ff ffe7 	bl	8006524 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006556:	4603      	mov	r3, r0
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800655e:	f107 030c 	add.w	r3, r7, #12
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff ffde 	bl	8006524 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006568:	4603      	mov	r3, r0
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	601a      	str	r2, [r3, #0]
    }
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <_ZSt8_DestroyIPmEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f9af 	bl	80068e8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f9a0 	bl	80068fe <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ffec 	bl	80065c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f98f 	bl	8006918 <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	1d1a      	adds	r2, r3, #4
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f000 f995 	bl	8006944 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>:
      _S_use_relocate()
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f805 	bl	800663a <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8006630:	4603      	mov	r3, r0
      }
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8006642:	2301      	movs	r3, #1
      }
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006650:	b5b0      	push	{r4, r5, r7, lr}
 8006652:	b08c      	sub	sp, #48	; 0x30
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800665c:	4a59      	ldr	r2, [pc, #356]	; (80067c4 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x174>)
 800665e:	2101      	movs	r1, #1
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f97f 	bl	8006964 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8006666:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f9bc 	bl	80069f2 <_ZNSt6vectorImSaImEE5beginEv>
 800667a:	4603      	mov	r3, r0
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	f107 0214 	add.w	r2, r7, #20
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	4611      	mov	r1, r2
 8006688:	4618      	mov	r0, r3
 800668a:	f000 f9c2 	bl	8006a12 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800668e:	4603      	mov	r3, r0
 8006690:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f9d0 	bl	8006a3c <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 800669c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80066a2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	18d5      	adds	r5, r2, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff ff8a 	bl	80065c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	4629      	mov	r1, r5
 80066b8:	4620      	mov	r0, r4
 80066ba:	f7ff ff8f 	bl	80065dc <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80066be:	2300      	movs	r3, #0
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80066c2:	f7ff ffaf 	bl	8006624 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d027      	beq.n	800671c <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80066cc:	f107 0308 	add.w	r3, r7, #8
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f9db 	bl	8006a8c <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80066d6:	4603      	mov	r3, r0
 80066d8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fdce 	bl	800627e <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80066e2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	4621      	mov	r1, r4
 80066e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ea:	f000 f9bb 	bl	8006a64 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 80066ee:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	3304      	adds	r3, #4
 80066f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80066f6:	f107 0308 	add.w	r3, r7, #8
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f9c6 	bl	8006a8c <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006700:	4603      	mov	r3, r0
 8006702:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fdb9 	bl	800627e <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800670c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800670e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006710:	6a39      	ldr	r1, [r7, #32]
 8006712:	4620      	mov	r0, r4
 8006714:	f000 f9a6 	bl	8006a64 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8006718:	62f8      	str	r0, [r7, #44]	; 0x2c
 800671a:	e026      	b.n	800676a <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f9b3 	bl	8006a8c <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006726:	4603      	mov	r3, r0
 8006728:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff fda6 	bl	800627e <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006732:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	4621      	mov	r1, r4
 8006738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800673a:	f000 f9b2 	bl	8006aa2 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 800673e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	3304      	adds	r3, #4
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f99e 	bl	8006a8c <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006750:	4603      	mov	r3, r0
 8006752:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff fd91 	bl	800627e <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800675c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800675e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006760:	6a39      	ldr	r1, [r7, #32]
 8006762:	4620      	mov	r0, r4
 8006764:	f000 f99d 	bl	8006aa2 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006768:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800676a:	f7ff ff5b 	bl	8006624 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 800676e:	4603      	mov	r3, r0
 8006770:	f083 0301 	eor.w	r3, r3, #1
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fd7e 	bl	800627e <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006782:	4603      	mov	r3, r0
 8006784:	461a      	mov	r2, r3
 8006786:	6a39      	ldr	r1, [r7, #32]
 8006788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800678a:	f7ff fd83 	bl	8006294 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800678e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800679a:	461a      	mov	r2, r3
 800679c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800679e:	f7ff fdb2 	bl	8006306 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ac:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	609a      	str	r2, [r3, #8]
    }
 80067ba:	bf00      	nop
 80067bc:	3730      	adds	r7, #48	; 0x30
 80067be:	46bd      	mov	sp, r7
 80067c0:	bdb0      	pop	{r4, r5, r7, pc}
 80067c2:	bf00      	nop
 80067c4:	0801d328 	.word	0x0801d328

080067c8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bf14      	ite	ne
 80067d6:	2301      	movne	r3, #1
 80067d8:	2300      	moveq	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80067fe:	b590      	push	{r4, r7, lr}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8006808:	6838      	ldr	r0, [r7, #0]
 800680a:	f7ff ffed 	bl	80067e8 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800680e:	4603      	mov	r3, r0
 8006810:	4622      	mov	r2, r4
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f95d 	bl	8006ad4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bd90      	pop	{r4, r7, pc}

08006822 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 f968 	bl	8006b06 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8006836:	4603      	mov	r3, r0
 8006838:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	f7ff fd09 	bl	8006252 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006840:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8006842:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff fd04 	bl	8006252 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800684a:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800684c:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800684e:	6838      	ldr	r0, [r7, #0]
 8006850:	f7ff fd0a 	bl	8006268 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006854:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47a0      	blx	r4
 8006860:	4603      	mov	r3, r0
      }
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800686a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800686a:	b5b0      	push	{r4, r5, r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	4613      	mov	r3, r2
 8006876:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d016      	beq.n	80068ac <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 800687e:	2b03      	cmp	r3, #3
 8006880:	dc19      	bgt.n	80068b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8006882:	2b01      	cmp	r3, #1
 8006884:	d002      	beq.n	800688c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8006886:	2b02      	cmp	r3, #2
 8006888:	d00a      	beq.n	80068a0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 800688a:	e014      	b.n	80068b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f94b 	bl	8006b28 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8006892:	4604      	mov	r4, r0
 8006894:	68b8      	ldr	r0, [r7, #8]
 8006896:	f000 f936 	bl	8006b06 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800689a:	4603      	mov	r3, r0
 800689c:	6023      	str	r3, [r4, #0]
	      break;
 800689e:	e00a      	b.n	80068b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80068a0:	462a      	mov	r2, r5
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f94b 	bl	8006b40 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80068aa:	e004      	b.n	80068b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80068ac:	4621      	mov	r1, r4
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f95f 	bl	8006b72 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80068b4:	bf00      	nop
	  return false;
 80068b6:	2300      	movs	r3, #0
	}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bdb0      	pop	{r4, r5, r7, pc}

080068c0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d201      	bcs.n	80068da <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	e000      	b.n	80068dc <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80068da:	687b      	ldr	r3, [r7, #4]
    }
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	f010 fb52 	bl	8016fb4 <_ZdlPv>
      }
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006918:	b590      	push	{r4, r7, lr}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fe4e 	bl	80065c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800692a:	4603      	mov	r3, r0
 800692c:	681c      	ldr	r4, [r3, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4619      	mov	r1, r3
 8006932:	2004      	movs	r0, #4
 8006934:	f7fa fb7a 	bl	800102c <_ZnwjPv>
 8006938:	4603      	mov	r3, r0
 800693a:	601c      	str	r4, [r3, #0]
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	bd90      	pop	{r4, r7, pc}

08006944 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f90a 	bl	8006b8a <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006976:	4604      	mov	r4, r0
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff fbfa 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 800697e:	4603      	mov	r3, r0
 8006980:	1ae2      	subs	r2, r4, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	bf34      	ite	cc
 8006988:	2301      	movcc	r3, #1
 800698a:	2300      	movcs	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f010 fb3c 	bl	8017010 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fbea 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 800699e:	4604      	mov	r4, r0
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7ff fbe6 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 80069a6:	4603      	mov	r3, r0
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	f107 0208 	add.w	r2, r7, #8
 80069ae:	f107 0310 	add.w	r3, r7, #16
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff ff83 	bl	80068c0 <_ZSt3maxIjERKT_S2_S2_>
 80069ba:	4603      	mov	r3, r0
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4423      	add	r3, r4
 80069c0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fbd5 	bl	8006172 <_ZNKSt6vectorImSaImEE4sizeEv>
 80069c8:	4602      	mov	r2, r0
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d306      	bcc.n	80069de <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f8da 	bl	8006b8a <_ZNKSt6vectorImSaImEE8max_sizeEv>
 80069d6:	4602      	mov	r2, r0
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	4293      	cmp	r3, r2
 80069dc:	d904      	bls.n	80069e8 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f8d3 	bl	8006b8a <_ZNKSt6vectorImSaImEE8max_sizeEv>
 80069e4:	4603      	mov	r3, r0
 80069e6:	e000      	b.n	80069ea <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 80069e8:	697b      	ldr	r3, [r7, #20]
      }
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd90      	pop	{r4, r7, pc}

080069f2 <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	f107 030c 	add.w	r3, r7, #12
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff ff9e 	bl	8006944 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006a12:	b590      	push	{r4, r7, lr}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f835 	bl	8006a8c <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006a22:	4603      	mov	r3, r0
 8006a24:	681c      	ldr	r4, [r3, #0]
 8006a26:	6838      	ldr	r0, [r7, #0]
 8006a28:	f000 f830 	bl	8006a8c <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	1ae3      	subs	r3, r4, r3
 8006a32:	109b      	asrs	r3, r3, #2
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd90      	pop	{r4, r7, pc}

08006a3c <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d006      	beq.n	8006a5a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 f8ab 	bl	8006bac <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8006a56:	4603      	mov	r3, r0
 8006a58:	e000      	b.n	8006a5c <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8006a5a:	2300      	movs	r3, #0
      }
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b089      	sub	sp, #36	; 0x24
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006a72:	f88d 4000 	strb.w	r4, [sp]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f8a4 	bl	8006bca <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 8006a82:	4603      	mov	r3, r0
      }
 8006a84:	4618      	mov	r0, r3
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd90      	pop	{r4, r7, pc}

08006a8c <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006aa2:	b590      	push	{r4, r7, lr}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f89c 	bl	8006bee <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	68b8      	ldr	r0, [r7, #8]
 8006aba:	f000 f898 	bl	8006bee <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006abe:	4601      	mov	r1, r0
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 f8a1 	bl	8006c0c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>
 8006aca:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd90      	pop	{r4, r7, pc}

08006ad4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006ad4:	b590      	push	{r4, r7, lr}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006ae0:	68b8      	ldr	r0, [r7, #8]
 8006ae2:	f7ff fe81 	bl	80067e8 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	681c      	ldr	r4, [r3, #0]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7fa faaa 	bl	8001044 <_ZNSt9_Any_data9_M_accessEv>
 8006af0:	4603      	mov	r3, r0
 8006af2:	4619      	mov	r1, r3
 8006af4:	2004      	movs	r0, #4
 8006af6:	f7fa fa99 	bl	800102c <_ZnwjPv>
 8006afa:	4603      	mov	r3, r0
 8006afc:	601c      	str	r4, [r3, #0]
 8006afe:	bf00      	nop
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd90      	pop	{r4, r7, pc}

08006b06 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f88d 	bl	8006c2e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006b14:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 f895 	bl	8006c46 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	bf00      	nop
	}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fa fa87 	bl	8001044 <_ZNSt9_Any_data9_M_accessEv>
 8006b36:	4603      	mov	r3, r0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006b40:	b590      	push	{r4, r7, lr}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006b4c:	68b8      	ldr	r0, [r7, #8]
 8006b4e:	f000 f86e 	bl	8006c2e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006b52:	4603      	mov	r3, r0
 8006b54:	681c      	ldr	r4, [r3, #0]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f7fa fa74 	bl	8001044 <_ZNSt9_Any_data9_M_accessEv>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	4619      	mov	r1, r3
 8006b60:	2004      	movs	r0, #4
 8006b62:	f7fa fa63 	bl	800102c <_ZnwjPv>
 8006b66:	4603      	mov	r3, r0
 8006b68:	601c      	str	r4, [r3, #0]
	}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd90      	pop	{r4, r7, pc}

08006b72 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f86d 	bl	8006c5c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 f89b 	bl	8006cd0 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f87d 	bl	8006c9c <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f893 	bl	8006ce6 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
 8006bd6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 f89f 	bl	8006d22 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006be4:	4603      	mov	r3, r0
      }
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006bf6:	f107 030c 	add.w	r3, r7, #12
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 f8ad 	bl	8006d5c <_ZNSt13move_iteratorIPmEC1ES0_>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f8ab 	bl	8006d7a <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8006c24:	4603      	mov	r3, r0
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fa fa0f 	bl	800105a <_ZNKSt9_Any_data9_M_accessEv>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fa f9ed 	bl	8001044 <_ZNSt9_Any_data9_M_accessEv>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d201      	bcs.n	8006c8e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	e000      	b.n	8006c90 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006c8e:	687b      	ldr	r3, [r7, #4]
    }
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006ca4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006ca8:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f877 	bl	8006d9e <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006cb4:	f107 0208 	add.w	r2, r7, #8
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff ffd8 	bl	8006c74 <_ZSt3minIjERKT_S2_S2_>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	681b      	ldr	r3, [r3, #0]
      }
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 f85f 	bl	8006db6 <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	bf8c      	ite	hi
 8006d00:	2301      	movhi	r3, #1
 8006d02:	2300      	movls	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006d0a:	f010 f97b 	bl	8017004 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f010 f963 	bl	8016fde <_Znwj>
 8006d18:	4603      	mov	r3, r0
      }
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006d22:	b5b0      	push	{r4, r5, r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 f84c 	bl	8006dce <_ZSt12__niter_baseIPmET_S1_>
 8006d36:	4604      	mov	r4, r0
 8006d38:	68b8      	ldr	r0, [r7, #8]
 8006d3a:	f000 f848 	bl	8006dce <_ZSt12__niter_baseIPmET_S1_>
 8006d3e:	4605      	mov	r5, r0
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f844 	bl	8006dce <_ZSt12__niter_baseIPmET_S1_>
 8006d46:	4602      	mov	r2, r0
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 f849 	bl	8006de4 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006d52:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bdb0      	pop	{r4, r5, r7, pc}

08006d5c <_ZNSt13move_iteratorIPmEC1ES0_>:
      move_iterator(iterator_type __i)
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b086      	sub	sp, #24
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f846 	bl	8006e20 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>
 8006d94:	4603      	mov	r3, r0
    }
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f805 	bl	8006db6 <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 8006dac:	4603      	mov	r3, r0
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006dbe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <_ZSt12__niter_baseIPmET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	109b      	asrs	r3, r3, #2
 8006dfa:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dd06      	ble.n	8006e10 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	461a      	mov	r2, r3
 8006e08:	68f9      	ldr	r1, [r7, #12]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f013 fab0 	bl	801a370 <memmove>
      return __result + __count;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	4413      	add	r3, r2
    }
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 f805 	bl	8006e40 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f80f 	bl	8006e70 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006e52:	4604      	mov	r4, r0
 8006e54:	68b8      	ldr	r0, [r7, #8]
 8006e56:	f000 f80b 	bl	8006e70 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 f816 	bl	8006e92 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>
 8006e66:	4603      	mov	r3, r0
    }
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd90      	pop	{r4, r7, pc}

08006e70 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006e78:	1d3b      	adds	r3, r7, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f82c 	bl	8006ed8 <_ZNKSt13move_iteratorIPmE4baseEv>
 8006e80:	4603      	mov	r3, r0
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 f834 	bl	8006ef0 <_ZSt12__miter_baseIPmET_S1_>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006e92:	b5b0      	push	{r4, r5, r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff ff95 	bl	8006dce <_ZSt12__niter_baseIPmET_S1_>
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	68b8      	ldr	r0, [r7, #8]
 8006ea8:	f7ff ff91 	bl	8006dce <_ZSt12__niter_baseIPmET_S1_>
 8006eac:	4605      	mov	r5, r0
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff ff8c 	bl	8006dce <_ZSt12__niter_baseIPmET_S1_>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 f822 	bl	8006f06 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	1d3b      	adds	r3, r7, #4
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 f82e 	bl	8006f2a <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 8006ece:	4603      	mov	r3, r0
    }
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bdb0      	pop	{r4, r5, r7, pc}

08006ed8 <_ZNKSt13move_iteratorIPmE4baseEv>:
      base() const
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <_ZSt12__miter_baseIPmET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b086      	sub	sp, #24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 f811 	bl	8006f42 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8006f20:	4603      	mov	r3, r0
    }
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	109b      	asrs	r3, r3, #2
 8006f56:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d006      	beq.n	8006f6c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	461a      	mov	r2, r3
 8006f64:	68f9      	ldr	r1, [r7, #12]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f013 fa02 	bl	801a370 <memmove>
	  return __result + _Num;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4413      	add	r3, r2
	}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8a:	4a0f      	ldr	r2, [pc, #60]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f90:	6453      	str	r3, [r2, #68]	; 0x44
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fac:	6413      	str	r3, [r2, #64]	; 0x40
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <HAL_MspInit+0x4c>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006fba:	2007      	movs	r0, #7
 8006fbc:	f000 fb72 	bl	80076a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40023800 	.word	0x40023800

08006fcc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a0b      	ldr	r2, [pc, #44]	; (8007008 <HAL_CRC_MspInit+0x3c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d10d      	bne.n	8006ffa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	; (800700c <HAL_CRC_MspInit+0x40>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <HAL_CRC_MspInit+0x40>)
 8006fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fec:	6313      	str	r3, [r2, #48]	; 0x30
 8006fee:	4b07      	ldr	r3, [pc, #28]	; (800700c <HAL_CRC_MspInit+0x40>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40023000 	.word	0x40023000
 800700c:	40023800 	.word	0x40023800

08007010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08a      	sub	sp, #40	; 0x28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	605a      	str	r2, [r3, #4]
 8007022:	609a      	str	r2, [r3, #8]
 8007024:	60da      	str	r2, [r3, #12]
 8007026:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a19      	ldr	r2, [pc, #100]	; (8007094 <HAL_UART_MspInit+0x84>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d12b      	bne.n	800708a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	4b18      	ldr	r3, [pc, #96]	; (8007098 <HAL_UART_MspInit+0x88>)
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <HAL_UART_MspInit+0x88>)
 800703c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007040:	6413      	str	r3, [r2, #64]	; 0x40
 8007042:	4b15      	ldr	r3, [pc, #84]	; (8007098 <HAL_UART_MspInit+0x88>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	4b11      	ldr	r3, [pc, #68]	; (8007098 <HAL_UART_MspInit+0x88>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	4a10      	ldr	r2, [pc, #64]	; (8007098 <HAL_UART_MspInit+0x88>)
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	6313      	str	r3, [r2, #48]	; 0x30
 800705e:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <HAL_UART_MspInit+0x88>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800706a:	230c      	movs	r3, #12
 800706c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800706e:	2302      	movs	r3, #2
 8007070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007076:	2303      	movs	r3, #3
 8007078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800707a:	2307      	movs	r3, #7
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800707e:	f107 0314 	add.w	r3, r7, #20
 8007082:	4619      	mov	r1, r3
 8007084:	4805      	ldr	r0, [pc, #20]	; (800709c <HAL_UART_MspInit+0x8c>)
 8007086:	f000 ff4b 	bl	8007f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800708a:	bf00      	nop
 800708c:	3728      	adds	r7, #40	; 0x28
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40004400 	.word	0x40004400
 8007098:	40023800 	.word	0x40023800
 800709c:	40020000 	.word	0x40020000

080070a0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a3a      	ldr	r2, [pc, #232]	; (8007198 <HAL_SAI_MspInit+0xf8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d16d      	bne.n	800718e <HAL_SAI_MspInit+0xee>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80070b2:	4b3a      	ldr	r3, [pc, #232]	; (800719c <HAL_SAI_MspInit+0xfc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10d      	bne.n	80070d6 <HAL_SAI_MspInit+0x36>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80070ba:	2300      	movs	r3, #0
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	4b38      	ldr	r3, [pc, #224]	; (80071a0 <HAL_SAI_MspInit+0x100>)
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	4a37      	ldr	r2, [pc, #220]	; (80071a0 <HAL_SAI_MspInit+0x100>)
 80070c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070c8:	6453      	str	r3, [r2, #68]	; 0x44
 80070ca:	4b35      	ldr	r3, [pc, #212]	; (80071a0 <HAL_SAI_MspInit+0x100>)
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 80070d6:	4b31      	ldr	r3, [pc, #196]	; (800719c <HAL_SAI_MspInit+0xfc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a2f      	ldr	r2, [pc, #188]	; (800719c <HAL_SAI_MspInit+0xfc>)
 80070de:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 80070e0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80070e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e6:	2302      	movs	r3, #2
 80070e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80070f2:	2306      	movs	r3, #6
 80070f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070f6:	f107 030c 	add.w	r3, r7, #12
 80070fa:	4619      	mov	r1, r3
 80070fc:	4829      	ldr	r0, [pc, #164]	; (80071a4 <HAL_SAI_MspInit+0x104>)
 80070fe:	f000 ff0f 	bl	8007f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007108:	2302      	movs	r3, #2
 800710a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007114:	2306      	movs	r3, #6
 8007116:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007118:	f107 030c 	add.w	r3, r7, #12
 800711c:	4619      	mov	r1, r3
 800711e:	4822      	ldr	r0, [pc, #136]	; (80071a8 <HAL_SAI_MspInit+0x108>)
 8007120:	f000 fefe 	bl	8007f20 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream5;
 8007124:	4b21      	ldr	r3, [pc, #132]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 8007126:	4a22      	ldr	r2, [pc, #136]	; (80071b0 <HAL_SAI_MspInit+0x110>)
 8007128:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_0;
 800712a:	4b20      	ldr	r3, [pc, #128]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007130:	4b1e      	ldr	r3, [pc, #120]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 8007132:	2240      	movs	r2, #64	; 0x40
 8007134:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007136:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 8007138:	2200      	movs	r2, #0
 800713a:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800713c:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 800713e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007142:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007144:	4b19      	ldr	r3, [pc, #100]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 8007146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800714a:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800714c:	4b17      	ldr	r3, [pc, #92]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 800714e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007152:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 8007154:	4b15      	ldr	r3, [pc, #84]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 8007156:	2200      	movs	r2, #0
 8007158:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 800715a:	4b14      	ldr	r3, [pc, #80]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 800715c:	2200      	movs	r2, #0
 800715e:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007160:	4b12      	ldr	r3, [pc, #72]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 8007162:	2200      	movs	r2, #0
 8007164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8007166:	4811      	ldr	r0, [pc, #68]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 8007168:	f000 fafa 	bl	8007760 <HAL_DMA_Init>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_SAI_MspInit+0xd6>
    {
      Error_Handler();
 8007172:	f7fe ff21 	bl	8005fb8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a0c      	ldr	r2, [pc, #48]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 800717a:	675a      	str	r2, [r3, #116]	; 0x74
 800717c:	4a0b      	ldr	r2, [pc, #44]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a09      	ldr	r2, [pc, #36]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 8007186:	671a      	str	r2, [r3, #112]	; 0x70
 8007188:	4a08      	ldr	r2, [pc, #32]	; (80071ac <HAL_SAI_MspInit+0x10c>)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800718e:	bf00      	nop
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40015824 	.word	0x40015824
 800719c:	20006988 	.word	0x20006988
 80071a0:	40023800 	.word	0x40023800
 80071a4:	40020400 	.word	0x40020400
 80071a8:	40020000 	.word	0x40020000
 80071ac:	200004c8 	.word	0x200004c8
 80071b0:	40026488 	.word	0x40026488

080071b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80071b8:	e7fe      	b.n	80071b8 <NMI_Handler+0x4>

080071ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071ba:	b480      	push	{r7}
 80071bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071be:	e7fe      	b.n	80071be <HardFault_Handler+0x4>

080071c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071c4:	e7fe      	b.n	80071c4 <MemManage_Handler+0x4>

080071c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071c6:	b480      	push	{r7}
 80071c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071ca:	e7fe      	b.n	80071ca <BusFault_Handler+0x4>

080071cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071d0:	e7fe      	b.n	80071d0 <UsageFault_Handler+0x4>

080071d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80071d2:	b480      	push	{r7}
 80071d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80071d6:	bf00      	nop
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80071ee:	b480      	push	{r7}
 80071f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80071f2:	bf00      	nop
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007200:	f000 f960 	bl	80074c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007204:	bf00      	nop
 8007206:	bd80      	pop	{r7, pc}

08007208 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800720c:	4802      	ldr	r0, [pc, #8]	; (8007218 <DMA2_Stream5_IRQHandler+0x10>)
 800720e:	f000 fc1d 	bl	8007a4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	200004c8 	.word	0x200004c8

0800721c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
	return 1;
 8007220:	2301      	movs	r3, #1
}
 8007222:	4618      	mov	r0, r3
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <_kill>:

int _kill(int pid, int sig)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007236:	f012 ffbb 	bl	801a1b0 <__errno>
 800723a:	4603      	mov	r3, r0
 800723c:	2216      	movs	r2, #22
 800723e:	601a      	str	r2, [r3, #0]
	return -1;
 8007240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <_exit>:

void _exit (int status)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007254:	f04f 31ff 	mov.w	r1, #4294967295
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ffe7 	bl	800722c <_kill>
	while (1) {}		/* Make sure we hang here */
 800725e:	e7fe      	b.n	800725e <_exit+0x12>

08007260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e00a      	b.n	8007288 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007272:	f3af 8000 	nop.w
 8007276:	4601      	mov	r1, r0
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	60ba      	str	r2, [r7, #8]
 800727e:	b2ca      	uxtb	r2, r1
 8007280:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3301      	adds	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	dbf0      	blt.n	8007272 <_read+0x12>
	}

return len;
 8007290:	687b      	ldr	r3, [r7, #4]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e009      	b.n	80072c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	60ba      	str	r2, [r7, #8]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3301      	adds	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	dbf1      	blt.n	80072ac <_write+0x12>
	}
	return len;
 80072c8:	687b      	ldr	r3, [r7, #4]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <_close>:

int _close(int file)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
	return -1;
 80072da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072fa:	605a      	str	r2, [r3, #4]
	return 0;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <_isatty>:

int _isatty(int file)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
	return 1;
 8007312:	2301      	movs	r3, #1
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
	return 0;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
	...

0800733c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007344:	4a14      	ldr	r2, [pc, #80]	; (8007398 <_sbrk+0x5c>)
 8007346:	4b15      	ldr	r3, [pc, #84]	; (800739c <_sbrk+0x60>)
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007350:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <_sbrk+0x64>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007358:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <_sbrk+0x64>)
 800735a:	4a12      	ldr	r2, [pc, #72]	; (80073a4 <_sbrk+0x68>)
 800735c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800735e:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <_sbrk+0x64>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	429a      	cmp	r2, r3
 800736a:	d207      	bcs.n	800737c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800736c:	f012 ff20 	bl	801a1b0 <__errno>
 8007370:	4603      	mov	r3, r0
 8007372:	220c      	movs	r2, #12
 8007374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007376:	f04f 33ff 	mov.w	r3, #4294967295
 800737a:	e009      	b.n	8007390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <_sbrk+0x64>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <_sbrk+0x64>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	4a05      	ldr	r2, [pc, #20]	; (80073a0 <_sbrk+0x64>)
 800738c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20020000 	.word	0x20020000
 800739c:	00000400 	.word	0x00000400
 80073a0:	2000698c 	.word	0x2000698c
 80073a4:	200072a0 	.word	0x200072a0

080073a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <SystemInit+0x20>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	4a05      	ldr	r2, [pc, #20]	; (80073c8 <SystemInit+0x20>)
 80073b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	e000ed00 	.word	0xe000ed00

080073cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80073cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80073d0:	480d      	ldr	r0, [pc, #52]	; (8007408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80073d2:	490e      	ldr	r1, [pc, #56]	; (800740c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80073d4:	4a0e      	ldr	r2, [pc, #56]	; (8007410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80073d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80073d8:	e002      	b.n	80073e0 <LoopCopyDataInit>

080073da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80073da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073de:	3304      	adds	r3, #4

080073e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80073e4:	d3f9      	bcc.n	80073da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80073e6:	4a0b      	ldr	r2, [pc, #44]	; (8007414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80073e8:	4c0b      	ldr	r4, [pc, #44]	; (8007418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80073ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80073ec:	e001      	b.n	80073f2 <LoopFillZerobss>

080073ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80073ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073f0:	3204      	adds	r2, #4

080073f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073f4:	d3fb      	bcc.n	80073ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80073f6:	f7ff ffd7 	bl	80073a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80073fa:	f012 ff73 	bl	801a2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80073fe:	f7fe f9a3 	bl	8005748 <main>
  bx  lr    
 8007402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800740c:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 8007410:	0803d20c 	.word	0x0803d20c
  ldr r2, =_sbss
 8007414:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 8007418:	200072a0 	.word	0x200072a0

0800741c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800741c:	e7fe      	b.n	800741c <ADC_IRQHandler>
	...

08007420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007424:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <HAL_Init+0x40>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a0d      	ldr	r2, [pc, #52]	; (8007460 <HAL_Init+0x40>)
 800742a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800742e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <HAL_Init+0x40>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a0a      	ldr	r2, [pc, #40]	; (8007460 <HAL_Init+0x40>)
 8007436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800743a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800743c:	4b08      	ldr	r3, [pc, #32]	; (8007460 <HAL_Init+0x40>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a07      	ldr	r2, [pc, #28]	; (8007460 <HAL_Init+0x40>)
 8007442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007448:	2003      	movs	r0, #3
 800744a:	f000 f92b 	bl	80076a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800744e:	2000      	movs	r0, #0
 8007450:	f000 f808 	bl	8007464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007454:	f7ff fd92 	bl	8006f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40023c00 	.word	0x40023c00

08007464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800746c:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <HAL_InitTick+0x54>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	4b12      	ldr	r3, [pc, #72]	; (80074bc <HAL_InitTick+0x58>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	4619      	mov	r1, r3
 8007476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800747a:	fbb3 f3f1 	udiv	r3, r3, r1
 800747e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f943 	bl	800770e <HAL_SYSTICK_Config>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e00e      	b.n	80074b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b0f      	cmp	r3, #15
 8007496:	d80a      	bhi.n	80074ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007498:	2200      	movs	r2, #0
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	f000 f90b 	bl	80076ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80074a4:	4a06      	ldr	r2, [pc, #24]	; (80074c0 <HAL_InitTick+0x5c>)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e000      	b.n	80074b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20000058 	.word	0x20000058
 80074bc:	20000060 	.word	0x20000060
 80074c0:	2000005c 	.word	0x2000005c

080074c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <HAL_IncTick+0x20>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <HAL_IncTick+0x24>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4413      	add	r3, r2
 80074d4:	4a04      	ldr	r2, [pc, #16]	; (80074e8 <HAL_IncTick+0x24>)
 80074d6:	6013      	str	r3, [r2, #0]
}
 80074d8:	bf00      	nop
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000060 	.word	0x20000060
 80074e8:	2000728c 	.word	0x2000728c

080074ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  return uwTick;
 80074f0:	4b03      	ldr	r3, [pc, #12]	; (8007500 <HAL_GetTick+0x14>)
 80074f2:	681b      	ldr	r3, [r3, #0]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	2000728c 	.word	0x2000728c

08007504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007514:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <__NVIC_SetPriorityGrouping+0x44>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007520:	4013      	ands	r3, r2
 8007522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800752c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007536:	4a04      	ldr	r2, [pc, #16]	; (8007548 <__NVIC_SetPriorityGrouping+0x44>)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	60d3      	str	r3, [r2, #12]
}
 800753c:	bf00      	nop
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	e000ed00 	.word	0xe000ed00

0800754c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007550:	4b04      	ldr	r3, [pc, #16]	; (8007564 <__NVIC_GetPriorityGrouping+0x18>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	0a1b      	lsrs	r3, r3, #8
 8007556:	f003 0307 	and.w	r3, r3, #7
}
 800755a:	4618      	mov	r0, r3
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	e000ed00 	.word	0xe000ed00

08007568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007576:	2b00      	cmp	r3, #0
 8007578:	db0b      	blt.n	8007592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	f003 021f 	and.w	r2, r3, #31
 8007580:	4907      	ldr	r1, [pc, #28]	; (80075a0 <__NVIC_EnableIRQ+0x38>)
 8007582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	2001      	movs	r0, #1
 800758a:	fa00 f202 	lsl.w	r2, r0, r2
 800758e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	e000e100 	.word	0xe000e100

080075a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	6039      	str	r1, [r7, #0]
 80075ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db0a      	blt.n	80075ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	490c      	ldr	r1, [pc, #48]	; (80075f0 <__NVIC_SetPriority+0x4c>)
 80075be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c2:	0112      	lsls	r2, r2, #4
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	440b      	add	r3, r1
 80075c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075cc:	e00a      	b.n	80075e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	4908      	ldr	r1, [pc, #32]	; (80075f4 <__NVIC_SetPriority+0x50>)
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	f003 030f 	and.w	r3, r3, #15
 80075da:	3b04      	subs	r3, #4
 80075dc:	0112      	lsls	r2, r2, #4
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	440b      	add	r3, r1
 80075e2:	761a      	strb	r2, [r3, #24]
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	e000e100 	.word	0xe000e100
 80075f4:	e000ed00 	.word	0xe000ed00

080075f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b089      	sub	sp, #36	; 0x24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	f1c3 0307 	rsb	r3, r3, #7
 8007612:	2b04      	cmp	r3, #4
 8007614:	bf28      	it	cs
 8007616:	2304      	movcs	r3, #4
 8007618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3304      	adds	r3, #4
 800761e:	2b06      	cmp	r3, #6
 8007620:	d902      	bls.n	8007628 <NVIC_EncodePriority+0x30>
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	3b03      	subs	r3, #3
 8007626:	e000      	b.n	800762a <NVIC_EncodePriority+0x32>
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	43da      	mvns	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	401a      	ands	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007640:	f04f 31ff 	mov.w	r1, #4294967295
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	43d9      	mvns	r1, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007650:	4313      	orrs	r3, r2
         );
}
 8007652:	4618      	mov	r0, r3
 8007654:	3724      	adds	r7, #36	; 0x24
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3b01      	subs	r3, #1
 800766c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007670:	d301      	bcc.n	8007676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007672:	2301      	movs	r3, #1
 8007674:	e00f      	b.n	8007696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007676:	4a0a      	ldr	r2, [pc, #40]	; (80076a0 <SysTick_Config+0x40>)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3b01      	subs	r3, #1
 800767c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800767e:	210f      	movs	r1, #15
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	f7ff ff8e 	bl	80075a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <SysTick_Config+0x40>)
 800768a:	2200      	movs	r2, #0
 800768c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800768e:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <SysTick_Config+0x40>)
 8007690:	2207      	movs	r2, #7
 8007692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	e000e010 	.word	0xe000e010

080076a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff ff29 	bl	8007504 <__NVIC_SetPriorityGrouping>
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	4603      	mov	r3, r0
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80076cc:	f7ff ff3e 	bl	800754c <__NVIC_GetPriorityGrouping>
 80076d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	6978      	ldr	r0, [r7, #20]
 80076d8:	f7ff ff8e 	bl	80075f8 <NVIC_EncodePriority>
 80076dc:	4602      	mov	r2, r0
 80076de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff ff5d 	bl	80075a4 <__NVIC_SetPriority>
}
 80076ea:	bf00      	nop
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	4603      	mov	r3, r0
 80076fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff ff31 	bl	8007568 <__NVIC_EnableIRQ>
}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff ffa2 	bl	8007660 <SysTick_Config>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e00e      	b.n	8007756 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	795b      	ldrb	r3, [r3, #5]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d105      	bne.n	800774e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff fc3f 	bl	8006fcc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800776c:	f7ff febe 	bl	80074ec <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e099      	b.n	80078b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0201 	bic.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800779c:	e00f      	b.n	80077be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800779e:	f7ff fea5 	bl	80074ec <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b05      	cmp	r3, #5
 80077aa:	d908      	bls.n	80077be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2203      	movs	r2, #3
 80077b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e078      	b.n	80078b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e8      	bne.n	800779e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4b38      	ldr	r3, [pc, #224]	; (80078b8 <HAL_DMA_Init+0x158>)
 80077d8:	4013      	ands	r3, r2
 80077da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	2b04      	cmp	r3, #4
 8007816:	d107      	bne.n	8007828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	4313      	orrs	r3, r2
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 0307 	bic.w	r3, r3, #7
 800783e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b04      	cmp	r3, #4
 8007850:	d117      	bne.n	8007882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00e      	beq.n	8007882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fadf 	bl	8007e28 <DMA_CheckFifoParam>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d008      	beq.n	8007882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2240      	movs	r2, #64	; 0x40
 8007874:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800787e:	2301      	movs	r3, #1
 8007880:	e016      	b.n	80078b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa96 	bl	8007dbc <DMA_CalcBaseAndBitshift>
 8007890:	4603      	mov	r3, r0
 8007892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007898:	223f      	movs	r2, #63	; 0x3f
 800789a:	409a      	lsls	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	f010803f 	.word	0xf010803f

080078bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_DMA_Start_IT+0x26>
 80078de:	2302      	movs	r3, #2
 80078e0:	e040      	b.n	8007964 <HAL_DMA_Start_IT+0xa8>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d12f      	bne.n	8007956 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fa28 	bl	8007d60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007914:	223f      	movs	r2, #63	; 0x3f
 8007916:	409a      	lsls	r2, r3
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0216 	orr.w	r2, r2, #22
 800792a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0208 	orr.w	r2, r2, #8
 8007942:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e005      	b.n	8007962 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800795e:	2302      	movs	r3, #2
 8007960:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800797a:	f7ff fdb7 	bl	80074ec <HAL_GetTick>
 800797e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d008      	beq.n	800799e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2280      	movs	r2, #128	; 0x80
 8007990:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e052      	b.n	8007a44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0216 	bic.w	r2, r2, #22
 80079ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695a      	ldr	r2, [r3, #20]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <HAL_DMA_Abort+0x62>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0208 	bic.w	r2, r2, #8
 80079dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079ee:	e013      	b.n	8007a18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80079f0:	f7ff fd7c 	bl	80074ec <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b05      	cmp	r3, #5
 80079fc:	d90c      	bls.n	8007a18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e015      	b.n	8007a44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e4      	bne.n	80079f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2a:	223f      	movs	r2, #63	; 0x3f
 8007a2c:	409a      	lsls	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007a58:	4b92      	ldr	r3, [pc, #584]	; (8007ca4 <HAL_DMA_IRQHandler+0x258>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a92      	ldr	r2, [pc, #584]	; (8007ca8 <HAL_DMA_IRQHandler+0x25c>)
 8007a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a62:	0a9b      	lsrs	r3, r3, #10
 8007a64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a76:	2208      	movs	r2, #8
 8007a78:	409a      	lsls	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01a      	beq.n	8007ab8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d013      	beq.n	8007ab8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0204 	bic.w	r2, r2, #4
 8007a9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	409a      	lsls	r2, r3
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab0:	f043 0201 	orr.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abc:	2201      	movs	r2, #1
 8007abe:	409a      	lsls	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d012      	beq.n	8007aee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ada:	2201      	movs	r2, #1
 8007adc:	409a      	lsls	r2, r3
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae6:	f043 0202 	orr.w	r2, r3, #2
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af2:	2204      	movs	r2, #4
 8007af4:	409a      	lsls	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d012      	beq.n	8007b24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b10:	2204      	movs	r2, #4
 8007b12:	409a      	lsls	r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1c:	f043 0204 	orr.w	r2, r3, #4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b28:	2210      	movs	r2, #16
 8007b2a:	409a      	lsls	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d043      	beq.n	8007bbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d03c      	beq.n	8007bbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b46:	2210      	movs	r2, #16
 8007b48:	409a      	lsls	r2, r3
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d018      	beq.n	8007b8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d108      	bne.n	8007b7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d024      	beq.n	8007bbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	e01f      	b.n	8007bbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01b      	beq.n	8007bbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
 8007b8c:	e016      	b.n	8007bbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d107      	bne.n	8007bac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0208 	bic.w	r2, r2, #8
 8007baa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	409a      	lsls	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 808e 	beq.w	8007cea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8086 	beq.w	8007cea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be2:	2220      	movs	r2, #32
 8007be4:	409a      	lsls	r2, r3
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	d136      	bne.n	8007c64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0216 	bic.w	r2, r2, #22
 8007c04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695a      	ldr	r2, [r3, #20]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d103      	bne.n	8007c26 <HAL_DMA_IRQHandler+0x1da>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d007      	beq.n	8007c36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0208 	bic.w	r2, r2, #8
 8007c34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3a:	223f      	movs	r2, #63	; 0x3f
 8007c3c:	409a      	lsls	r2, r3
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d07d      	beq.n	8007d56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
        }
        return;
 8007c62:	e078      	b.n	8007d56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01c      	beq.n	8007cac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d108      	bne.n	8007c92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d030      	beq.n	8007cea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
 8007c90:	e02b      	b.n	8007cea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d027      	beq.n	8007cea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	e022      	b.n	8007cea <HAL_DMA_IRQHandler+0x29e>
 8007ca4:	20000058 	.word	0x20000058
 8007ca8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10f      	bne.n	8007cda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0210 	bic.w	r2, r2, #16
 8007cc8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d032      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d022      	beq.n	8007d44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2205      	movs	r2, #5
 8007d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0201 	bic.w	r2, r2, #1
 8007d14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60bb      	str	r3, [r7, #8]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d307      	bcc.n	8007d32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1f2      	bne.n	8007d16 <HAL_DMA_IRQHandler+0x2ca>
 8007d30:	e000      	b.n	8007d34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007d32:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
 8007d54:	e000      	b.n	8007d58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007d56:	bf00      	nop
    }
  }
}
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop

08007d60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	d108      	bne.n	8007da0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007d9e:	e007      	b.n	8007db0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	60da      	str	r2, [r3, #12]
}
 8007db0:	bf00      	nop
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	3b10      	subs	r3, #16
 8007dcc:	4a14      	ldr	r2, [pc, #80]	; (8007e20 <DMA_CalcBaseAndBitshift+0x64>)
 8007dce:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd2:	091b      	lsrs	r3, r3, #4
 8007dd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007dd6:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <DMA_CalcBaseAndBitshift+0x68>)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d909      	bls.n	8007dfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007df2:	f023 0303 	bic.w	r3, r3, #3
 8007df6:	1d1a      	adds	r2, r3, #4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8007dfc:	e007      	b.n	8007e0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	aaaaaaab 	.word	0xaaaaaaab
 8007e24:	0801e670 	.word	0x0801e670

08007e28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11f      	bne.n	8007e82 <DMA_CheckFifoParam+0x5a>
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d856      	bhi.n	8007ef6 <DMA_CheckFifoParam+0xce>
 8007e48:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <DMA_CheckFifoParam+0x28>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e73 	.word	0x08007e73
 8007e58:	08007e61 	.word	0x08007e61
 8007e5c:	08007ef7 	.word	0x08007ef7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d046      	beq.n	8007efa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e70:	e043      	b.n	8007efa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e7a:	d140      	bne.n	8007efe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e80:	e03d      	b.n	8007efe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8a:	d121      	bne.n	8007ed0 <DMA_CheckFifoParam+0xa8>
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d837      	bhi.n	8007f02 <DMA_CheckFifoParam+0xda>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <DMA_CheckFifoParam+0x70>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ea9 	.word	0x08007ea9
 8007e9c:	08007eaf 	.word	0x08007eaf
 8007ea0:	08007ea9 	.word	0x08007ea9
 8007ea4:	08007ec1 	.word	0x08007ec1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007eac:	e030      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d025      	beq.n	8007f06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ebe:	e022      	b.n	8007f06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ec8:	d11f      	bne.n	8007f0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ece:	e01c      	b.n	8007f0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d903      	bls.n	8007ede <DMA_CheckFifoParam+0xb6>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d003      	beq.n	8007ee4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007edc:	e018      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee2:	e015      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00e      	beq.n	8007f0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef4:	e00b      	b.n	8007f0e <DMA_CheckFifoParam+0xe6>
      break;
 8007ef6:	bf00      	nop
 8007ef8:	e00a      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
      break;
 8007efa:	bf00      	nop
 8007efc:	e008      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
      break;
 8007efe:	bf00      	nop
 8007f00:	e006      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
      break;
 8007f02:	bf00      	nop
 8007f04:	e004      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
      break;
 8007f06:	bf00      	nop
 8007f08:	e002      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
      break;   
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <DMA_CheckFifoParam+0xe8>
      break;
 8007f0e:	bf00      	nop
    }
  } 
  
  return status; 
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop

08007f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b089      	sub	sp, #36	; 0x24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	61fb      	str	r3, [r7, #28]
 8007f3a:	e165      	b.n	8008208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	f040 8154 	bne.w	8008202 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d005      	beq.n	8007f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d130      	bne.n	8007fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	43db      	mvns	r3, r3
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	4013      	ands	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	fa02 f303 	lsl.w	r3, r2, r3
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007fa8:	2201      	movs	r2, #1
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	091b      	lsrs	r3, r3, #4
 8007fbe:	f003 0201 	and.w	r2, r3, #1
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f003 0303 	and.w	r3, r3, #3
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d017      	beq.n	8008010 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	2203      	movs	r2, #3
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	4313      	orrs	r3, r2
 8008008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d123      	bne.n	8008064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	08da      	lsrs	r2, r3, #3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3208      	adds	r2, #8
 8008024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	220f      	movs	r2, #15
 8008034:	fa02 f303 	lsl.w	r3, r2, r3
 8008038:	43db      	mvns	r3, r3
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	4013      	ands	r3, r2
 800803e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	4313      	orrs	r3, r2
 8008054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	08da      	lsrs	r2, r3, #3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3208      	adds	r2, #8
 800805e:	69b9      	ldr	r1, [r7, #24]
 8008060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	2203      	movs	r2, #3
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	43db      	mvns	r3, r3
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	4013      	ands	r3, r2
 800807a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f003 0203 	and.w	r2, r3, #3
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	4313      	orrs	r3, r2
 8008090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80ae 	beq.w	8008202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	4b5d      	ldr	r3, [pc, #372]	; (8008220 <HAL_GPIO_Init+0x300>)
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	4a5c      	ldr	r2, [pc, #368]	; (8008220 <HAL_GPIO_Init+0x300>)
 80080b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080b4:	6453      	str	r3, [r2, #68]	; 0x44
 80080b6:	4b5a      	ldr	r3, [pc, #360]	; (8008220 <HAL_GPIO_Init+0x300>)
 80080b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080c2:	4a58      	ldr	r2, [pc, #352]	; (8008224 <HAL_GPIO_Init+0x304>)
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	089b      	lsrs	r3, r3, #2
 80080c8:	3302      	adds	r3, #2
 80080ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	220f      	movs	r2, #15
 80080da:	fa02 f303 	lsl.w	r3, r2, r3
 80080de:	43db      	mvns	r3, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	4013      	ands	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a4f      	ldr	r2, [pc, #316]	; (8008228 <HAL_GPIO_Init+0x308>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d025      	beq.n	800813a <HAL_GPIO_Init+0x21a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a4e      	ldr	r2, [pc, #312]	; (800822c <HAL_GPIO_Init+0x30c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d01f      	beq.n	8008136 <HAL_GPIO_Init+0x216>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a4d      	ldr	r2, [pc, #308]	; (8008230 <HAL_GPIO_Init+0x310>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d019      	beq.n	8008132 <HAL_GPIO_Init+0x212>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a4c      	ldr	r2, [pc, #304]	; (8008234 <HAL_GPIO_Init+0x314>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <HAL_GPIO_Init+0x20e>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a4b      	ldr	r2, [pc, #300]	; (8008238 <HAL_GPIO_Init+0x318>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00d      	beq.n	800812a <HAL_GPIO_Init+0x20a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a4a      	ldr	r2, [pc, #296]	; (800823c <HAL_GPIO_Init+0x31c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d007      	beq.n	8008126 <HAL_GPIO_Init+0x206>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a49      	ldr	r2, [pc, #292]	; (8008240 <HAL_GPIO_Init+0x320>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d101      	bne.n	8008122 <HAL_GPIO_Init+0x202>
 800811e:	2306      	movs	r3, #6
 8008120:	e00c      	b.n	800813c <HAL_GPIO_Init+0x21c>
 8008122:	2307      	movs	r3, #7
 8008124:	e00a      	b.n	800813c <HAL_GPIO_Init+0x21c>
 8008126:	2305      	movs	r3, #5
 8008128:	e008      	b.n	800813c <HAL_GPIO_Init+0x21c>
 800812a:	2304      	movs	r3, #4
 800812c:	e006      	b.n	800813c <HAL_GPIO_Init+0x21c>
 800812e:	2303      	movs	r3, #3
 8008130:	e004      	b.n	800813c <HAL_GPIO_Init+0x21c>
 8008132:	2302      	movs	r3, #2
 8008134:	e002      	b.n	800813c <HAL_GPIO_Init+0x21c>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <HAL_GPIO_Init+0x21c>
 800813a:	2300      	movs	r3, #0
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	f002 0203 	and.w	r2, r2, #3
 8008142:	0092      	lsls	r2, r2, #2
 8008144:	4093      	lsls	r3, r2
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	4313      	orrs	r3, r2
 800814a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800814c:	4935      	ldr	r1, [pc, #212]	; (8008224 <HAL_GPIO_Init+0x304>)
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	089b      	lsrs	r3, r3, #2
 8008152:	3302      	adds	r3, #2
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800815a:	4b3a      	ldr	r3, [pc, #232]	; (8008244 <HAL_GPIO_Init+0x324>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	43db      	mvns	r3, r3
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	4013      	ands	r3, r2
 8008168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	4313      	orrs	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800817e:	4a31      	ldr	r2, [pc, #196]	; (8008244 <HAL_GPIO_Init+0x324>)
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008184:	4b2f      	ldr	r3, [pc, #188]	; (8008244 <HAL_GPIO_Init+0x324>)
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	43db      	mvns	r3, r3
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	4013      	ands	r3, r2
 8008192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081a8:	4a26      	ldr	r2, [pc, #152]	; (8008244 <HAL_GPIO_Init+0x324>)
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80081ae:	4b25      	ldr	r3, [pc, #148]	; (8008244 <HAL_GPIO_Init+0x324>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	43db      	mvns	r3, r3
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	4013      	ands	r3, r2
 80081bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80081d2:	4a1c      	ldr	r2, [pc, #112]	; (8008244 <HAL_GPIO_Init+0x324>)
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80081d8:	4b1a      	ldr	r3, [pc, #104]	; (8008244 <HAL_GPIO_Init+0x324>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	43db      	mvns	r3, r3
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	4013      	ands	r3, r2
 80081e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80081fc:	4a11      	ldr	r2, [pc, #68]	; (8008244 <HAL_GPIO_Init+0x324>)
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	3301      	adds	r3, #1
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	2b0f      	cmp	r3, #15
 800820c:	f67f ae96 	bls.w	8007f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	3724      	adds	r7, #36	; 0x24
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	40023800 	.word	0x40023800
 8008224:	40013800 	.word	0x40013800
 8008228:	40020000 	.word	0x40020000
 800822c:	40020400 	.word	0x40020400
 8008230:	40020800 	.word	0x40020800
 8008234:	40020c00 	.word	0x40020c00
 8008238:	40021000 	.word	0x40021000
 800823c:	40021400 	.word	0x40021400
 8008240:	40021800 	.word	0x40021800
 8008244:	40013c00 	.word	0x40013c00

08008248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	807b      	strh	r3, [r7, #2]
 8008254:	4613      	mov	r3, r2
 8008256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008258:	787b      	ldrb	r3, [r7, #1]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800825e:	887a      	ldrh	r2, [r7, #2]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008264:	e003      	b.n	800826e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008266:	887b      	ldrh	r3, [r7, #2]
 8008268:	041a      	lsls	r2, r3, #16
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	619a      	str	r2, [r3, #24]
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
	...

0800827c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e0cc      	b.n	800842a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008290:	4b68      	ldr	r3, [pc, #416]	; (8008434 <HAL_RCC_ClockConfig+0x1b8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d90c      	bls.n	80082b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800829e:	4b65      	ldr	r3, [pc, #404]	; (8008434 <HAL_RCC_ClockConfig+0x1b8>)
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082a6:	4b63      	ldr	r3, [pc, #396]	; (8008434 <HAL_RCC_ClockConfig+0x1b8>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d001      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e0b8      	b.n	800842a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d020      	beq.n	8008306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082d0:	4b59      	ldr	r3, [pc, #356]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	4a58      	ldr	r2, [pc, #352]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80082d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082e8:	4b53      	ldr	r3, [pc, #332]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	4a52      	ldr	r2, [pc, #328]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082f4:	4b50      	ldr	r3, [pc, #320]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	494d      	ldr	r1, [pc, #308]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 8008302:	4313      	orrs	r3, r2
 8008304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d044      	beq.n	800839c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d107      	bne.n	800832a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800831a:	4b47      	ldr	r3, [pc, #284]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d119      	bne.n	800835a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e07f      	b.n	800842a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d003      	beq.n	800833a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008336:	2b03      	cmp	r3, #3
 8008338:	d107      	bne.n	800834a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800833a:	4b3f      	ldr	r3, [pc, #252]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e06f      	b.n	800842a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800834a:	4b3b      	ldr	r3, [pc, #236]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e067      	b.n	800842a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800835a:	4b37      	ldr	r3, [pc, #220]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f023 0203 	bic.w	r2, r3, #3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	4934      	ldr	r1, [pc, #208]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 8008368:	4313      	orrs	r3, r2
 800836a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800836c:	f7ff f8be 	bl	80074ec <HAL_GetTick>
 8008370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008372:	e00a      	b.n	800838a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008374:	f7ff f8ba 	bl	80074ec <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008382:	4293      	cmp	r3, r2
 8008384:	d901      	bls.n	800838a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e04f      	b.n	800842a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800838a:	4b2b      	ldr	r3, [pc, #172]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 020c 	and.w	r2, r3, #12
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	429a      	cmp	r2, r3
 800839a:	d1eb      	bne.n	8008374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800839c:	4b25      	ldr	r3, [pc, #148]	; (8008434 <HAL_RCC_ClockConfig+0x1b8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d20c      	bcs.n	80083c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083aa:	4b22      	ldr	r3, [pc, #136]	; (8008434 <HAL_RCC_ClockConfig+0x1b8>)
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083b2:	4b20      	ldr	r3, [pc, #128]	; (8008434 <HAL_RCC_ClockConfig+0x1b8>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d001      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e032      	b.n	800842a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d008      	beq.n	80083e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083d0:	4b19      	ldr	r3, [pc, #100]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	4916      	ldr	r1, [pc, #88]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d009      	beq.n	8008402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083ee:	4b12      	ldr	r3, [pc, #72]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	490e      	ldr	r1, [pc, #56]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008402:	f000 fdc7 	bl	8008f94 <HAL_RCC_GetSysClockFreq>
 8008406:	4602      	mov	r2, r0
 8008408:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <HAL_RCC_ClockConfig+0x1bc>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	091b      	lsrs	r3, r3, #4
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	490a      	ldr	r1, [pc, #40]	; (800843c <HAL_RCC_ClockConfig+0x1c0>)
 8008414:	5ccb      	ldrb	r3, [r1, r3]
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	4a09      	ldr	r2, [pc, #36]	; (8008440 <HAL_RCC_ClockConfig+0x1c4>)
 800841c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800841e:	4b09      	ldr	r3, [pc, #36]	; (8008444 <HAL_RCC_ClockConfig+0x1c8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff f81e 	bl	8007464 <HAL_InitTick>

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	40023c00 	.word	0x40023c00
 8008438:	40023800 	.word	0x40023800
 800843c:	0801e658 	.word	0x0801e658
 8008440:	20000058 	.word	0x20000058
 8008444:	2000005c 	.word	0x2000005c

08008448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800844c:	4b03      	ldr	r3, [pc, #12]	; (800845c <HAL_RCC_GetHCLKFreq+0x14>)
 800844e:	681b      	ldr	r3, [r3, #0]
}
 8008450:	4618      	mov	r0, r3
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	20000058 	.word	0x20000058

08008460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008464:	f7ff fff0 	bl	8008448 <HAL_RCC_GetHCLKFreq>
 8008468:	4602      	mov	r2, r0
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	0a9b      	lsrs	r3, r3, #10
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	4903      	ldr	r1, [pc, #12]	; (8008484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008476:	5ccb      	ldrb	r3, [r1, r3]
 8008478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800847c:	4618      	mov	r0, r3
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40023800 	.word	0x40023800
 8008484:	0801e668 	.word	0x0801e668

08008488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800848c:	f7ff ffdc 	bl	8008448 <HAL_RCC_GetHCLKFreq>
 8008490:	4602      	mov	r2, r0
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	0b5b      	lsrs	r3, r3, #13
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	4903      	ldr	r1, [pc, #12]	; (80084ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800849e:	5ccb      	ldrb	r3, [r1, r3]
 80084a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40023800 	.word	0x40023800
 80084ac:	0801e668 	.word	0x0801e668

080084b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08c      	sub	sp, #48	; 0x30
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d010      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80084e8:	4b6f      	ldr	r3, [pc, #444]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80084ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ee:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f6:	496c      	ldr	r1, [pc, #432]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008506:	2301      	movs	r3, #1
 8008508:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d010      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008516:	4b64      	ldr	r3, [pc, #400]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800851c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008524:	4960      	ldr	r1, [pc, #384]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008534:	2301      	movs	r3, #1
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d017      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008544:	4b58      	ldr	r3, [pc, #352]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800854a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	4955      	ldr	r1, [pc, #340]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008554:	4313      	orrs	r3, r2
 8008556:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008562:	d101      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008564:	2301      	movs	r3, #1
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008570:	2301      	movs	r3, #1
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b00      	cmp	r3, #0
 800857e:	d017      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008580:	4b49      	ldr	r3, [pc, #292]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008586:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	4946      	ldr	r1, [pc, #280]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800859e:	d101      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80085a0:	2301      	movs	r3, #1
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80085ac:	2301      	movs	r3, #1
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0320 	and.w	r3, r3, #32
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 808a 	beq.w	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80085be:	2300      	movs	r3, #0
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	4a38      	ldr	r2, [pc, #224]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80085c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085cc:	6413      	str	r3, [r2, #64]	; 0x40
 80085ce:	4b36      	ldr	r3, [pc, #216]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d6:	60bb      	str	r3, [r7, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80085da:	4b34      	ldr	r3, [pc, #208]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a33      	ldr	r2, [pc, #204]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80085e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80085e6:	f7fe ff81 	bl	80074ec <HAL_GetTick>
 80085ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085ec:	e008      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80085ee:	f7fe ff7d 	bl	80074ec <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e278      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008600:	4b2a      	ldr	r3, [pc, #168]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0f0      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800860c:	4b26      	ldr	r3, [pc, #152]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800860e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008614:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d02f      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008624:	6a3a      	ldr	r2, [r7, #32]
 8008626:	429a      	cmp	r2, r3
 8008628:	d028      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800862a:	4b1f      	ldr	r3, [pc, #124]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800862c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008632:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008634:	4b1e      	ldr	r3, [pc, #120]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800863a:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008640:	4a19      	ldr	r2, [pc, #100]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008646:	4b18      	ldr	r3, [pc, #96]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b01      	cmp	r3, #1
 8008650:	d114      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008652:	f7fe ff4b 	bl	80074ec <HAL_GetTick>
 8008656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008658:	e00a      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800865a:	f7fe ff47 	bl	80074ec <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	f241 3288 	movw	r2, #5000	; 0x1388
 8008668:	4293      	cmp	r3, r2
 800866a:	d901      	bls.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e240      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008670:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0ee      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008688:	d114      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800868a:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800869a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869e:	4902      	ldr	r1, [pc, #8]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	608b      	str	r3, [r1, #8]
 80086a4:	e00c      	b.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80086a6:	bf00      	nop
 80086a8:	40023800 	.word	0x40023800
 80086ac:	40007000 	.word	0x40007000
 80086b0:	42470e40 	.word	0x42470e40
 80086b4:	4b4a      	ldr	r3, [pc, #296]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	4a49      	ldr	r2, [pc, #292]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80086be:	6093      	str	r3, [r2, #8]
 80086c0:	4b47      	ldr	r3, [pc, #284]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086cc:	4944      	ldr	r1, [pc, #272]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d004      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80086e4:	4b3f      	ldr	r3, [pc, #252]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80086e6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80086f4:	4b3a      	ldr	r3, [pc, #232]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80086f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008702:	4937      	ldr	r1, [pc, #220]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008704:	4313      	orrs	r3, r2
 8008706:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008716:	4b32      	ldr	r3, [pc, #200]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800871c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008724:	492e      	ldr	r1, [pc, #184]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008734:	2b00      	cmp	r3, #0
 8008736:	d011      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008738:	4b29      	ldr	r3, [pc, #164]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800873a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800873e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008746:	4926      	ldr	r1, [pc, #152]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008748:	4313      	orrs	r3, r2
 800874a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008756:	d101      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008758:	2301      	movs	r3, #1
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008768:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800876a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800876e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008776:	491a      	ldr	r1, [pc, #104]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008786:	2b00      	cmp	r3, #0
 8008788:	d011      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800878a:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800878c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008790:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008798:	4911      	ldr	r1, [pc, #68]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a8:	d101      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80087aa:	2301      	movs	r3, #1
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d005      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087bc:	f040 80ff 	bne.w	80089be <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087c0:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087c6:	f7fe fe91 	bl	80074ec <HAL_GetTick>
 80087ca:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087cc:	e00e      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80087ce:	f7fe fe8d 	bl	80074ec <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d907      	bls.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e188      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80087e0:	40023800 	.word	0x40023800
 80087e4:	424711e0 	.word	0x424711e0
 80087e8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087ec:	4b7e      	ldr	r3, [pc, #504]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1ea      	bne.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	2b00      	cmp	r3, #0
 800880a:	d009      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008814:	2b00      	cmp	r3, #0
 8008816:	d028      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d124      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008820:	4b71      	ldr	r3, [pc, #452]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008826:	0c1b      	lsrs	r3, r3, #16
 8008828:	f003 0303 	and.w	r3, r3, #3
 800882c:	3301      	adds	r3, #1
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008832:	4b6d      	ldr	r3, [pc, #436]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008838:	0e1b      	lsrs	r3, r3, #24
 800883a:	f003 030f 	and.w	r3, r3, #15
 800883e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	019b      	lsls	r3, r3, #6
 800884a:	431a      	orrs	r2, r3
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	3b01      	subs	r3, #1
 8008852:	041b      	lsls	r3, r3, #16
 8008854:	431a      	orrs	r2, r3
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	061b      	lsls	r3, r3, #24
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	071b      	lsls	r3, r3, #28
 8008862:	4961      	ldr	r1, [pc, #388]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008864:	4313      	orrs	r3, r2
 8008866:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800887e:	d00a      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008888:	2b00      	cmp	r3, #0
 800888a:	d035      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008894:	d130      	bne.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008896:	4b54      	ldr	r3, [pc, #336]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889c:	0c1b      	lsrs	r3, r3, #16
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	3301      	adds	r3, #1
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088a8:	4b4f      	ldr	r3, [pc, #316]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80088aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	f003 0307 	and.w	r3, r3, #7
 80088b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	019b      	lsls	r3, r3, #6
 80088c0:	431a      	orrs	r2, r3
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	085b      	lsrs	r3, r3, #1
 80088c6:	3b01      	subs	r3, #1
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	061b      	lsls	r3, r3, #24
 80088d2:	431a      	orrs	r2, r3
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	071b      	lsls	r3, r3, #28
 80088d8:	4943      	ldr	r1, [pc, #268]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80088e0:	4b41      	ldr	r3, [pc, #260]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80088e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e6:	f023 021f 	bic.w	r2, r3, #31
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	3b01      	subs	r3, #1
 80088f0:	493d      	ldr	r1, [pc, #244]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008900:	2b00      	cmp	r3, #0
 8008902:	d029      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800890c:	d124      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800890e:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008914:	0c1b      	lsrs	r3, r3, #16
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	3301      	adds	r3, #1
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008920:	4b31      	ldr	r3, [pc, #196]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008926:	0f1b      	lsrs	r3, r3, #28
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	019b      	lsls	r3, r3, #6
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	085b      	lsrs	r3, r3, #1
 8008940:	3b01      	subs	r3, #1
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	431a      	orrs	r2, r3
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	061b      	lsls	r3, r3, #24
 800894a:	431a      	orrs	r2, r3
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	071b      	lsls	r3, r3, #28
 8008950:	4925      	ldr	r1, [pc, #148]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008960:	2b00      	cmp	r3, #0
 8008962:	d016      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	019b      	lsls	r3, r3, #6
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	085b      	lsrs	r3, r3, #1
 8008976:	3b01      	subs	r3, #1
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	061b      	lsls	r3, r3, #24
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	071b      	lsls	r3, r3, #28
 800898a:	4917      	ldr	r1, [pc, #92]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800898c:	4313      	orrs	r3, r2
 800898e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008992:	4b16      	ldr	r3, [pc, #88]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008994:	2201      	movs	r2, #1
 8008996:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008998:	f7fe fda8 	bl	80074ec <HAL_GetTick>
 800899c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800899e:	e008      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80089a0:	f7fe fda4 	bl	80074ec <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e09f      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089b2:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0f0      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	f040 8095 	bne.w	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089c6:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089cc:	f7fe fd8e 	bl	80074ec <HAL_GetTick>
 80089d0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089d2:	e00f      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80089d4:	f7fe fd8a 	bl	80074ec <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d908      	bls.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e085      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80089e6:	bf00      	nop
 80089e8:	40023800 	.word	0x40023800
 80089ec:	42470068 	.word	0x42470068
 80089f0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089f4:	4b41      	ldr	r3, [pc, #260]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a00:	d0e8      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0304 	and.w	r3, r3, #4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d009      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d02b      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d127      	bne.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008a2a:	4b34      	ldr	r3, [pc, #208]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a30:	0c1b      	lsrs	r3, r3, #16
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	3301      	adds	r3, #1
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	699a      	ldr	r2, [r3, #24]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	019b      	lsls	r3, r3, #6
 8008a46:	431a      	orrs	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	041b      	lsls	r3, r3, #16
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	061b      	lsls	r3, r3, #24
 8008a58:	4928      	ldr	r1, [pc, #160]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a60:	4b26      	ldr	r3, [pc, #152]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	4922      	ldr	r1, [pc, #136]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01d      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a8e:	d118      	bne.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a90:	4b1a      	ldr	r3, [pc, #104]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a96:	0e1b      	lsrs	r3, r3, #24
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	019b      	lsls	r3, r3, #6
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	041b      	lsls	r3, r3, #16
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	061b      	lsls	r3, r3, #24
 8008aba:	4910      	ldr	r1, [pc, #64]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ac2:	4b0f      	ldr	r3, [pc, #60]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ac8:	f7fe fd10 	bl	80074ec <HAL_GetTick>
 8008acc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008ad0:	f7fe fd0c 	bl	80074ec <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e007      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ae2:	4b06      	ldr	r3, [pc, #24]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aee:	d1ef      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3730      	adds	r7, #48	; 0x30
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	40023800 	.word	0x40023800
 8008b00:	42470070 	.word	0x42470070

08008b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b089      	sub	sp, #36	; 0x24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60bb      	str	r3, [r7, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	2b07      	cmp	r3, #7
 8008b2a:	f200 8224 	bhi.w	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008d37 	.word	0x08008d37
 8008b38:	08008e61 	.word	0x08008e61
 8008b3c:	08008f77 	.word	0x08008f77
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008f77 	.word	0x08008f77
 8008b48:	08008f77 	.word	0x08008f77
 8008b4c:	08008f77 	.word	0x08008f77
 8008b50:	08008b55 	.word	0x08008b55
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8008b54:	4ba8      	ldr	r3, [pc, #672]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b5a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8008b62:	613b      	str	r3, [r7, #16]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b6a:	f000 80d6 	beq.w	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b74:	f200 80dd 	bhi.w	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b7e:	f000 809f 	beq.w	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b88:	f200 80d3 	bhi.w	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b92:	d05b      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b9a:	f200 80ca 	bhi.w	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ba4:	f000 80b6 	beq.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bae:	f200 80c0 	bhi.w	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bb8:	f000 8082 	beq.w	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bc2:	f200 80b6 	bhi.w	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bd2:	d03b      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8008bd4:	e0ad      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008bd6:	4b88      	ldr	r3, [pc, #544]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8008be2:	4b85      	ldr	r3, [pc, #532]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bec:	4a83      	ldr	r2, [pc, #524]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf2:	61bb      	str	r3, [r7, #24]
 8008bf4:	e008      	b.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8008bf6:	4b80      	ldr	r3, [pc, #512]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c00:	4a7f      	ldr	r2, [pc, #508]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c06:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8008c08:	4b7b      	ldr	r3, [pc, #492]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0e:	0e1b      	lsrs	r3, r3, #24
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8008c16:	4b78      	ldr	r3, [pc, #480]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1c:	099b      	lsrs	r3, r3, #6
 8008c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	fb02 f203 	mul.w	r2, r2, r3
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8008c30:	4b71      	ldr	r3, [pc, #452]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c36:	0a1b      	lsrs	r3, r3, #8
 8008c38:	f003 031f 	and.w	r3, r3, #31
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c48:	61fb      	str	r3, [r7, #28]
          break;
 8008c4a:	e073      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008c4c:	4b6a      	ldr	r3, [pc, #424]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d109      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008c58:	4b67      	ldr	r3, [pc, #412]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c62:	4a66      	ldr	r2, [pc, #408]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	e008      	b.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8008c6c:	4b62      	ldr	r3, [pc, #392]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c76:	4a62      	ldr	r2, [pc, #392]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8008c7e:	4b5e      	ldr	r3, [pc, #376]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c84:	0e1b      	lsrs	r3, r3, #24
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8008c8c:	4b5a      	ldr	r3, [pc, #360]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c92:	099b      	lsrs	r3, r3, #6
 8008c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	fb02 f203 	mul.w	r2, r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8008ca6:	4b54      	ldr	r3, [pc, #336]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbc:	61fb      	str	r3, [r7, #28]
          break;
 8008cbe:	e039      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008cc0:	4b4d      	ldr	r3, [pc, #308]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d108      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ccc:	4b4a      	ldr	r3, [pc, #296]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cd4:	4a49      	ldr	r2, [pc, #292]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cda:	61bb      	str	r3, [r7, #24]
 8008cdc:	e007      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008cde:	4b46      	ldr	r3, [pc, #280]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ce6:	4a46      	ldr	r2, [pc, #280]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cec:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8008cee:	4b42      	ldr	r3, [pc, #264]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	0f1b      	lsrs	r3, r3, #28
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8008cfa:	4b3f      	ldr	r3, [pc, #252]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	099b      	lsrs	r3, r3, #6
 8008d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	fb02 f203 	mul.w	r2, r2, r3
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d10:	61fb      	str	r3, [r7, #28]
          break;
 8008d12:	e00f      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d14:	4b3b      	ldr	r3, [pc, #236]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8008d16:	61fb      	str	r3, [r7, #28]
          break;
 8008d18:	e00c      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008d1a:	4b37      	ldr	r3, [pc, #220]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d102      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8008d26:	4b35      	ldr	r3, [pc, #212]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008d28:	61fb      	str	r3, [r7, #28]
          break;
 8008d2a:	e003      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8008d2c:	4b34      	ldr	r3, [pc, #208]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008d2e:	61fb      	str	r3, [r7, #28]
          break;
 8008d30:	e000      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8008d32:	bf00      	nop
        }
      }
      break;
 8008d34:	e11f      	b.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8008d36:	4b30      	ldr	r3, [pc, #192]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d3c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008d48:	d079      	beq.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008d50:	f200 8082 	bhi.w	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d5a:	d03c      	beq.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d62:	d879      	bhi.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d006      	beq.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d70:	d172      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d72:	4b24      	ldr	r3, [pc, #144]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8008d74:	61fb      	str	r3, [r7, #28]
          break;
 8008d76:	e072      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008d78:	4b1f      	ldr	r3, [pc, #124]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d84:	d109      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008d86:	4b1c      	ldr	r3, [pc, #112]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d90:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d96:	61bb      	str	r3, [r7, #24]
 8008d98:	e008      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008d9a:	4b17      	ldr	r3, [pc, #92]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da4:	4a15      	ldr	r2, [pc, #84]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008daa:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008dac:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db2:	099b      	lsrs	r3, r3, #6
 8008db4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	fb02 f303 	mul.w	r3, r2, r3
 8008dbe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008dc0:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc6:	0f1b      	lsrs	r3, r3, #28
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd2:	61fb      	str	r3, [r7, #28]
          break;
 8008dd4:	e043      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008dd6:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008de2:	d111      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008de4:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dec:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df2:	61bb      	str	r3, [r7, #24]
 8008df4:	e010      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8008df6:	bf00      	nop
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	00f42400 	.word	0x00f42400
 8008e00:	007a1200 	.word	0x007a1200
 8008e04:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008e08:	4b5e      	ldr	r3, [pc, #376]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e10:	4a5d      	ldr	r2, [pc, #372]	; (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e16:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008e18:	4b5a      	ldr	r3, [pc, #360]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	099b      	lsrs	r3, r3, #6
 8008e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	fb02 f303 	mul.w	r3, r2, r3
 8008e28:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008e2a:	4b56      	ldr	r3, [pc, #344]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	0f1b      	lsrs	r3, r3, #28
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3a:	61fb      	str	r3, [r7, #28]
          break;
 8008e3c:	e00f      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008e3e:	4b51      	ldr	r3, [pc, #324]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e4a:	d102      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8008e4c:	4b4f      	ldr	r3, [pc, #316]	; (8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8008e4e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008e50:	e005      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8008e52:	4b4d      	ldr	r3, [pc, #308]	; (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008e54:	61fb      	str	r3, [r7, #28]
          break;
 8008e56:	e002      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61fb      	str	r3, [r7, #28]
          break;
 8008e5c:	bf00      	nop
        }
      }
      break;
 8008e5e:	e08a      	b.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8008e60:	4b48      	ldr	r3, [pc, #288]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e66:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008e72:	d06f      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008e7a:	d878      	bhi.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e82:	d03c      	beq.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e8a:	d870      	bhi.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d006      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e98:	d169      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e9a:	4b3d      	ldr	r3, [pc, #244]	; (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8008e9c:	61fb      	str	r3, [r7, #28]
          break;
 8008e9e:	e069      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008ea0:	4b38      	ldr	r3, [pc, #224]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eac:	d109      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008eae:	4b35      	ldr	r3, [pc, #212]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008eb8:	4a34      	ldr	r2, [pc, #208]	; (8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8008eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ebe:	61bb      	str	r3, [r7, #24]
 8008ec0:	e008      	b.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008ec2:	4b30      	ldr	r3, [pc, #192]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ecc:	4a2e      	ldr	r2, [pc, #184]	; (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008ed4:	4b2b      	ldr	r3, [pc, #172]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eda:	099b      	lsrs	r3, r3, #6
 8008edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	fb02 f303 	mul.w	r3, r2, r3
 8008ee6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008ee8:	4b26      	ldr	r3, [pc, #152]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eee:	0f1b      	lsrs	r3, r3, #28
 8008ef0:	f003 0307 	and.w	r3, r3, #7
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efa:	61fb      	str	r3, [r7, #28]
          break;
 8008efc:	e03a      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008efe:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f0a:	d108      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008f0c:	4b1d      	ldr	r3, [pc, #116]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f14:	4a1d      	ldr	r2, [pc, #116]	; (8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8008f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1a:	61bb      	str	r3, [r7, #24]
 8008f1c:	e007      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008f1e:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f26:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008f2e:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	099b      	lsrs	r3, r3, #6
 8008f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	fb02 f303 	mul.w	r3, r2, r3
 8008f3e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008f40:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	0f1b      	lsrs	r3, r3, #28
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f50:	61fb      	str	r3, [r7, #28]
          break;
 8008f52:	e00f      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008f54:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f60:	d102      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8008f62:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8008f64:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008f66:	e005      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8008f68:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008f6a:	61fb      	str	r3, [r7, #28]
          break;
 8008f6c:	e002      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
          break;
 8008f72:	bf00      	nop
        }
      }
      break;
 8008f74:	bf00      	nop
    }
  }
  return frequency;
 8008f76:	69fb      	ldr	r3, [r7, #28]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3724      	adds	r7, #36	; 0x24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	40023800 	.word	0x40023800
 8008f88:	00f42400 	.word	0x00f42400
 8008f8c:	007a1200 	.word	0x007a1200
 8008f90:	00bb8000 	.word	0x00bb8000

08008f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f98:	b088      	sub	sp, #32
 8008f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fb0:	4bce      	ldr	r3, [pc, #824]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f003 030c 	and.w	r3, r3, #12
 8008fb8:	2b0c      	cmp	r3, #12
 8008fba:	f200 818d 	bhi.w	80092d8 <HAL_RCC_GetSysClockFreq+0x344>
 8008fbe:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <HAL_RCC_GetSysClockFreq+0x30>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08008ff9 	.word	0x08008ff9
 8008fc8:	080092d9 	.word	0x080092d9
 8008fcc:	080092d9 	.word	0x080092d9
 8008fd0:	080092d9 	.word	0x080092d9
 8008fd4:	08008fff 	.word	0x08008fff
 8008fd8:	080092d9 	.word	0x080092d9
 8008fdc:	080092d9 	.word	0x080092d9
 8008fe0:	080092d9 	.word	0x080092d9
 8008fe4:	08009005 	.word	0x08009005
 8008fe8:	080092d9 	.word	0x080092d9
 8008fec:	080092d9 	.word	0x080092d9
 8008ff0:	080092d9 	.word	0x080092d9
 8008ff4:	08009179 	.word	0x08009179
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ff8:	4bbd      	ldr	r3, [pc, #756]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008ffa:	61bb      	str	r3, [r7, #24]
       break;
 8008ffc:	e16f      	b.n	80092de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ffe:	4bbd      	ldr	r3, [pc, #756]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x360>)
 8009000:	61bb      	str	r3, [r7, #24]
      break;
 8009002:	e16c      	b.n	80092de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009004:	4bb9      	ldr	r3, [pc, #740]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800900c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800900e:	4bb7      	ldr	r3, [pc, #732]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d053      	beq.n	80090c2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800901a:	4bb4      	ldr	r3, [pc, #720]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	099b      	lsrs	r3, r3, #6
 8009020:	461a      	mov	r2, r3
 8009022:	f04f 0300 	mov.w	r3, #0
 8009026:	f240 10ff 	movw	r0, #511	; 0x1ff
 800902a:	f04f 0100 	mov.w	r1, #0
 800902e:	ea02 0400 	and.w	r4, r2, r0
 8009032:	603c      	str	r4, [r7, #0]
 8009034:	400b      	ands	r3, r1
 8009036:	607b      	str	r3, [r7, #4]
 8009038:	e9d7 4500 	ldrd	r4, r5, [r7]
 800903c:	4620      	mov	r0, r4
 800903e:	4629      	mov	r1, r5
 8009040:	f04f 0200 	mov.w	r2, #0
 8009044:	f04f 0300 	mov.w	r3, #0
 8009048:	014b      	lsls	r3, r1, #5
 800904a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800904e:	0142      	lsls	r2, r0, #5
 8009050:	4610      	mov	r0, r2
 8009052:	4619      	mov	r1, r3
 8009054:	4623      	mov	r3, r4
 8009056:	1ac0      	subs	r0, r0, r3
 8009058:	462b      	mov	r3, r5
 800905a:	eb61 0103 	sbc.w	r1, r1, r3
 800905e:	f04f 0200 	mov.w	r2, #0
 8009062:	f04f 0300 	mov.w	r3, #0
 8009066:	018b      	lsls	r3, r1, #6
 8009068:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800906c:	0182      	lsls	r2, r0, #6
 800906e:	1a12      	subs	r2, r2, r0
 8009070:	eb63 0301 	sbc.w	r3, r3, r1
 8009074:	f04f 0000 	mov.w	r0, #0
 8009078:	f04f 0100 	mov.w	r1, #0
 800907c:	00d9      	lsls	r1, r3, #3
 800907e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009082:	00d0      	lsls	r0, r2, #3
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4621      	mov	r1, r4
 800908a:	1852      	adds	r2, r2, r1
 800908c:	4629      	mov	r1, r5
 800908e:	eb43 0101 	adc.w	r1, r3, r1
 8009092:	460b      	mov	r3, r1
 8009094:	f04f 0000 	mov.w	r0, #0
 8009098:	f04f 0100 	mov.w	r1, #0
 800909c:	0259      	lsls	r1, r3, #9
 800909e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80090a2:	0250      	lsls	r0, r2, #9
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	f7f7 fe08 	bl	8000cc8 <__aeabi_uldivmod>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4613      	mov	r3, r2
 80090be:	61fb      	str	r3, [r7, #28]
 80090c0:	e04c      	b.n	800915c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090c2:	4b8a      	ldr	r3, [pc, #552]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	099b      	lsrs	r3, r3, #6
 80090c8:	461a      	mov	r2, r3
 80090ca:	f04f 0300 	mov.w	r3, #0
 80090ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80090d2:	f04f 0100 	mov.w	r1, #0
 80090d6:	ea02 0a00 	and.w	sl, r2, r0
 80090da:	ea03 0b01 	and.w	fp, r3, r1
 80090de:	4650      	mov	r0, sl
 80090e0:	4659      	mov	r1, fp
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	014b      	lsls	r3, r1, #5
 80090ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80090f0:	0142      	lsls	r2, r0, #5
 80090f2:	4610      	mov	r0, r2
 80090f4:	4619      	mov	r1, r3
 80090f6:	ebb0 000a 	subs.w	r0, r0, sl
 80090fa:	eb61 010b 	sbc.w	r1, r1, fp
 80090fe:	f04f 0200 	mov.w	r2, #0
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	018b      	lsls	r3, r1, #6
 8009108:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800910c:	0182      	lsls	r2, r0, #6
 800910e:	1a12      	subs	r2, r2, r0
 8009110:	eb63 0301 	sbc.w	r3, r3, r1
 8009114:	f04f 0000 	mov.w	r0, #0
 8009118:	f04f 0100 	mov.w	r1, #0
 800911c:	00d9      	lsls	r1, r3, #3
 800911e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009122:	00d0      	lsls	r0, r2, #3
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	eb12 020a 	adds.w	r2, r2, sl
 800912c:	eb43 030b 	adc.w	r3, r3, fp
 8009130:	f04f 0000 	mov.w	r0, #0
 8009134:	f04f 0100 	mov.w	r1, #0
 8009138:	0299      	lsls	r1, r3, #10
 800913a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800913e:	0290      	lsls	r0, r2, #10
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4610      	mov	r0, r2
 8009146:	4619      	mov	r1, r3
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	461a      	mov	r2, r3
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	f7f7 fdba 	bl	8000cc8 <__aeabi_uldivmod>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4613      	mov	r3, r2
 800915a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800915c:	4b63      	ldr	r3, [pc, #396]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	0c1b      	lsrs	r3, r3, #16
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	3301      	adds	r3, #1
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800916c:	69fa      	ldr	r2, [r7, #28]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	fbb2 f3f3 	udiv	r3, r2, r3
 8009174:	61bb      	str	r3, [r7, #24]
      break;
 8009176:	e0b2      	b.n	80092de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009178:	4b5c      	ldr	r3, [pc, #368]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009180:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009182:	4b5a      	ldr	r3, [pc, #360]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d04d      	beq.n	800922a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800918e:	4b57      	ldr	r3, [pc, #348]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	099b      	lsrs	r3, r3, #6
 8009194:	461a      	mov	r2, r3
 8009196:	f04f 0300 	mov.w	r3, #0
 800919a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800919e:	f04f 0100 	mov.w	r1, #0
 80091a2:	ea02 0800 	and.w	r8, r2, r0
 80091a6:	ea03 0901 	and.w	r9, r3, r1
 80091aa:	4640      	mov	r0, r8
 80091ac:	4649      	mov	r1, r9
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	014b      	lsls	r3, r1, #5
 80091b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80091bc:	0142      	lsls	r2, r0, #5
 80091be:	4610      	mov	r0, r2
 80091c0:	4619      	mov	r1, r3
 80091c2:	ebb0 0008 	subs.w	r0, r0, r8
 80091c6:	eb61 0109 	sbc.w	r1, r1, r9
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	018b      	lsls	r3, r1, #6
 80091d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80091d8:	0182      	lsls	r2, r0, #6
 80091da:	1a12      	subs	r2, r2, r0
 80091dc:	eb63 0301 	sbc.w	r3, r3, r1
 80091e0:	f04f 0000 	mov.w	r0, #0
 80091e4:	f04f 0100 	mov.w	r1, #0
 80091e8:	00d9      	lsls	r1, r3, #3
 80091ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091ee:	00d0      	lsls	r0, r2, #3
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	eb12 0208 	adds.w	r2, r2, r8
 80091f8:	eb43 0309 	adc.w	r3, r3, r9
 80091fc:	f04f 0000 	mov.w	r0, #0
 8009200:	f04f 0100 	mov.w	r1, #0
 8009204:	0259      	lsls	r1, r3, #9
 8009206:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800920a:	0250      	lsls	r0, r2, #9
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4610      	mov	r0, r2
 8009212:	4619      	mov	r1, r3
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	461a      	mov	r2, r3
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	f7f7 fd54 	bl	8000cc8 <__aeabi_uldivmod>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4613      	mov	r3, r2
 8009226:	61fb      	str	r3, [r7, #28]
 8009228:	e04a      	b.n	80092c0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800922a:	4b30      	ldr	r3, [pc, #192]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	099b      	lsrs	r3, r3, #6
 8009230:	461a      	mov	r2, r3
 8009232:	f04f 0300 	mov.w	r3, #0
 8009236:	f240 10ff 	movw	r0, #511	; 0x1ff
 800923a:	f04f 0100 	mov.w	r1, #0
 800923e:	ea02 0400 	and.w	r4, r2, r0
 8009242:	ea03 0501 	and.w	r5, r3, r1
 8009246:	4620      	mov	r0, r4
 8009248:	4629      	mov	r1, r5
 800924a:	f04f 0200 	mov.w	r2, #0
 800924e:	f04f 0300 	mov.w	r3, #0
 8009252:	014b      	lsls	r3, r1, #5
 8009254:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009258:	0142      	lsls	r2, r0, #5
 800925a:	4610      	mov	r0, r2
 800925c:	4619      	mov	r1, r3
 800925e:	1b00      	subs	r0, r0, r4
 8009260:	eb61 0105 	sbc.w	r1, r1, r5
 8009264:	f04f 0200 	mov.w	r2, #0
 8009268:	f04f 0300 	mov.w	r3, #0
 800926c:	018b      	lsls	r3, r1, #6
 800926e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009272:	0182      	lsls	r2, r0, #6
 8009274:	1a12      	subs	r2, r2, r0
 8009276:	eb63 0301 	sbc.w	r3, r3, r1
 800927a:	f04f 0000 	mov.w	r0, #0
 800927e:	f04f 0100 	mov.w	r1, #0
 8009282:	00d9      	lsls	r1, r3, #3
 8009284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009288:	00d0      	lsls	r0, r2, #3
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	1912      	adds	r2, r2, r4
 8009290:	eb45 0303 	adc.w	r3, r5, r3
 8009294:	f04f 0000 	mov.w	r0, #0
 8009298:	f04f 0100 	mov.w	r1, #0
 800929c:	0299      	lsls	r1, r3, #10
 800929e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80092a2:	0290      	lsls	r0, r2, #10
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4610      	mov	r0, r2
 80092aa:	4619      	mov	r1, r3
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	f7f7 fd08 	bl	8000cc8 <__aeabi_uldivmod>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4613      	mov	r3, r2
 80092be:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <HAL_RCC_GetSysClockFreq+0x358>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	0f1b      	lsrs	r3, r3, #28
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80092cc:	69fa      	ldr	r2, [r7, #28]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092d4:	61bb      	str	r3, [r7, #24]
      break;
 80092d6:	e002      	b.n	80092de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80092da:	61bb      	str	r3, [r7, #24]
      break;
 80092dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80092de:	69bb      	ldr	r3, [r7, #24]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ea:	bf00      	nop
 80092ec:	40023800 	.word	0x40023800
 80092f0:	00f42400 	.word	0x00f42400
 80092f4:	007a1200 	.word	0x007a1200

080092f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e28d      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 8083 	beq.w	800941e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009318:	4b94      	ldr	r3, [pc, #592]	; (800956c <HAL_RCC_OscConfig+0x274>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 030c 	and.w	r3, r3, #12
 8009320:	2b04      	cmp	r3, #4
 8009322:	d019      	beq.n	8009358 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009324:	4b91      	ldr	r3, [pc, #580]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800932c:	2b08      	cmp	r3, #8
 800932e:	d106      	bne.n	800933e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009330:	4b8e      	ldr	r3, [pc, #568]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800933c:	d00c      	beq.n	8009358 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800933e:	4b8b      	ldr	r3, [pc, #556]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009346:	2b0c      	cmp	r3, #12
 8009348:	d112      	bne.n	8009370 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800934a:	4b88      	ldr	r3, [pc, #544]	; (800956c <HAL_RCC_OscConfig+0x274>)
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009356:	d10b      	bne.n	8009370 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009358:	4b84      	ldr	r3, [pc, #528]	; (800956c <HAL_RCC_OscConfig+0x274>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d05b      	beq.n	800941c <HAL_RCC_OscConfig+0x124>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d157      	bne.n	800941c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e25a      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009378:	d106      	bne.n	8009388 <HAL_RCC_OscConfig+0x90>
 800937a:	4b7c      	ldr	r3, [pc, #496]	; (800956c <HAL_RCC_OscConfig+0x274>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a7b      	ldr	r2, [pc, #492]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	e01d      	b.n	80093c4 <HAL_RCC_OscConfig+0xcc>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009390:	d10c      	bne.n	80093ac <HAL_RCC_OscConfig+0xb4>
 8009392:	4b76      	ldr	r3, [pc, #472]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a75      	ldr	r2, [pc, #468]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	4b73      	ldr	r3, [pc, #460]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a72      	ldr	r2, [pc, #456]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80093a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	e00b      	b.n	80093c4 <HAL_RCC_OscConfig+0xcc>
 80093ac:	4b6f      	ldr	r3, [pc, #444]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a6e      	ldr	r2, [pc, #440]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80093b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	4b6c      	ldr	r3, [pc, #432]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a6b      	ldr	r2, [pc, #428]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80093be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d013      	beq.n	80093f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093cc:	f7fe f88e 	bl	80074ec <HAL_GetTick>
 80093d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093d2:	e008      	b.n	80093e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093d4:	f7fe f88a 	bl	80074ec <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b64      	cmp	r3, #100	; 0x64
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e21f      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093e6:	4b61      	ldr	r3, [pc, #388]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f0      	beq.n	80093d4 <HAL_RCC_OscConfig+0xdc>
 80093f2:	e014      	b.n	800941e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f4:	f7fe f87a 	bl	80074ec <HAL_GetTick>
 80093f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093fa:	e008      	b.n	800940e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093fc:	f7fe f876 	bl	80074ec <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b64      	cmp	r3, #100	; 0x64
 8009408:	d901      	bls.n	800940e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e20b      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800940e:	4b57      	ldr	r3, [pc, #348]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1f0      	bne.n	80093fc <HAL_RCC_OscConfig+0x104>
 800941a:	e000      	b.n	800941e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800941c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d06f      	beq.n	800950a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800942a:	4b50      	ldr	r3, [pc, #320]	; (800956c <HAL_RCC_OscConfig+0x274>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f003 030c 	and.w	r3, r3, #12
 8009432:	2b00      	cmp	r3, #0
 8009434:	d017      	beq.n	8009466 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009436:	4b4d      	ldr	r3, [pc, #308]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800943e:	2b08      	cmp	r3, #8
 8009440:	d105      	bne.n	800944e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009442:	4b4a      	ldr	r3, [pc, #296]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800944e:	4b47      	ldr	r3, [pc, #284]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009456:	2b0c      	cmp	r3, #12
 8009458:	d11c      	bne.n	8009494 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800945a:	4b44      	ldr	r3, [pc, #272]	; (800956c <HAL_RCC_OscConfig+0x274>)
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d116      	bne.n	8009494 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009466:	4b41      	ldr	r3, [pc, #260]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d005      	beq.n	800947e <HAL_RCC_OscConfig+0x186>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d001      	beq.n	800947e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e1d3      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800947e:	4b3b      	ldr	r3, [pc, #236]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4937      	ldr	r1, [pc, #220]	; (800956c <HAL_RCC_OscConfig+0x274>)
 800948e:	4313      	orrs	r3, r2
 8009490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009492:	e03a      	b.n	800950a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d020      	beq.n	80094de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800949c:	4b34      	ldr	r3, [pc, #208]	; (8009570 <HAL_RCC_OscConfig+0x278>)
 800949e:	2201      	movs	r2, #1
 80094a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a2:	f7fe f823 	bl	80074ec <HAL_GetTick>
 80094a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094a8:	e008      	b.n	80094bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094aa:	f7fe f81f 	bl	80074ec <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d901      	bls.n	80094bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e1b4      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094bc:	4b2b      	ldr	r3, [pc, #172]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0302 	and.w	r3, r3, #2
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0f0      	beq.n	80094aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094c8:	4b28      	ldr	r3, [pc, #160]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	00db      	lsls	r3, r3, #3
 80094d6:	4925      	ldr	r1, [pc, #148]	; (800956c <HAL_RCC_OscConfig+0x274>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	600b      	str	r3, [r1, #0]
 80094dc:	e015      	b.n	800950a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094de:	4b24      	ldr	r3, [pc, #144]	; (8009570 <HAL_RCC_OscConfig+0x278>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e4:	f7fe f802 	bl	80074ec <HAL_GetTick>
 80094e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094ea:	e008      	b.n	80094fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094ec:	f7fd fffe 	bl	80074ec <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e193      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094fe:	4b1b      	ldr	r3, [pc, #108]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1f0      	bne.n	80094ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0308 	and.w	r3, r3, #8
 8009512:	2b00      	cmp	r3, #0
 8009514:	d036      	beq.n	8009584 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d016      	beq.n	800954c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800951e:	4b15      	ldr	r3, [pc, #84]	; (8009574 <HAL_RCC_OscConfig+0x27c>)
 8009520:	2201      	movs	r2, #1
 8009522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009524:	f7fd ffe2 	bl	80074ec <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800952c:	f7fd ffde 	bl	80074ec <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e173      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800953e:	4b0b      	ldr	r3, [pc, #44]	; (800956c <HAL_RCC_OscConfig+0x274>)
 8009540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <HAL_RCC_OscConfig+0x234>
 800954a:	e01b      	b.n	8009584 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <HAL_RCC_OscConfig+0x27c>)
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009552:	f7fd ffcb 	bl	80074ec <HAL_GetTick>
 8009556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009558:	e00e      	b.n	8009578 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800955a:	f7fd ffc7 	bl	80074ec <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d907      	bls.n	8009578 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e15c      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
 800956c:	40023800 	.word	0x40023800
 8009570:	42470000 	.word	0x42470000
 8009574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009578:	4b8a      	ldr	r3, [pc, #552]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800957a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1ea      	bne.n	800955a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 8097 	beq.w	80096c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009596:	4b83      	ldr	r3, [pc, #524]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 8009598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10f      	bne.n	80095c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095a2:	2300      	movs	r3, #0
 80095a4:	60bb      	str	r3, [r7, #8]
 80095a6:	4b7f      	ldr	r3, [pc, #508]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	4a7e      	ldr	r2, [pc, #504]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 80095ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b0:	6413      	str	r3, [r2, #64]	; 0x40
 80095b2:	4b7c      	ldr	r3, [pc, #496]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ba:	60bb      	str	r3, [r7, #8]
 80095bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095be:	2301      	movs	r3, #1
 80095c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095c2:	4b79      	ldr	r3, [pc, #484]	; (80097a8 <HAL_RCC_OscConfig+0x4b0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d118      	bne.n	8009600 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095ce:	4b76      	ldr	r3, [pc, #472]	; (80097a8 <HAL_RCC_OscConfig+0x4b0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a75      	ldr	r2, [pc, #468]	; (80097a8 <HAL_RCC_OscConfig+0x4b0>)
 80095d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095da:	f7fd ff87 	bl	80074ec <HAL_GetTick>
 80095de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095e0:	e008      	b.n	80095f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095e2:	f7fd ff83 	bl	80074ec <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e118      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095f4:	4b6c      	ldr	r3, [pc, #432]	; (80097a8 <HAL_RCC_OscConfig+0x4b0>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0f0      	beq.n	80095e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d106      	bne.n	8009616 <HAL_RCC_OscConfig+0x31e>
 8009608:	4b66      	ldr	r3, [pc, #408]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800960a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960c:	4a65      	ldr	r2, [pc, #404]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	6713      	str	r3, [r2, #112]	; 0x70
 8009614:	e01c      	b.n	8009650 <HAL_RCC_OscConfig+0x358>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	2b05      	cmp	r3, #5
 800961c:	d10c      	bne.n	8009638 <HAL_RCC_OscConfig+0x340>
 800961e:	4b61      	ldr	r3, [pc, #388]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	4a60      	ldr	r2, [pc, #384]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 8009624:	f043 0304 	orr.w	r3, r3, #4
 8009628:	6713      	str	r3, [r2, #112]	; 0x70
 800962a:	4b5e      	ldr	r3, [pc, #376]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800962c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800962e:	4a5d      	ldr	r2, [pc, #372]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	6713      	str	r3, [r2, #112]	; 0x70
 8009636:	e00b      	b.n	8009650 <HAL_RCC_OscConfig+0x358>
 8009638:	4b5a      	ldr	r3, [pc, #360]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800963a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963c:	4a59      	ldr	r2, [pc, #356]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800963e:	f023 0301 	bic.w	r3, r3, #1
 8009642:	6713      	str	r3, [r2, #112]	; 0x70
 8009644:	4b57      	ldr	r3, [pc, #348]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 8009646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009648:	4a56      	ldr	r2, [pc, #344]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800964a:	f023 0304 	bic.w	r3, r3, #4
 800964e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d015      	beq.n	8009684 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009658:	f7fd ff48 	bl	80074ec <HAL_GetTick>
 800965c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800965e:	e00a      	b.n	8009676 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009660:	f7fd ff44 	bl	80074ec <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	f241 3288 	movw	r2, #5000	; 0x1388
 800966e:	4293      	cmp	r3, r2
 8009670:	d901      	bls.n	8009676 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e0d7      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009676:	4b4b      	ldr	r3, [pc, #300]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 8009678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0ee      	beq.n	8009660 <HAL_RCC_OscConfig+0x368>
 8009682:	e014      	b.n	80096ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009684:	f7fd ff32 	bl	80074ec <HAL_GetTick>
 8009688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800968a:	e00a      	b.n	80096a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800968c:	f7fd ff2e 	bl	80074ec <HAL_GetTick>
 8009690:	4602      	mov	r2, r0
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	f241 3288 	movw	r2, #5000	; 0x1388
 800969a:	4293      	cmp	r3, r2
 800969c:	d901      	bls.n	80096a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e0c1      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096a2:	4b40      	ldr	r3, [pc, #256]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 80096a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1ee      	bne.n	800968c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d105      	bne.n	80096c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096b4:	4b3b      	ldr	r3, [pc, #236]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	4a3a      	ldr	r2, [pc, #232]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 80096ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 80ad 	beq.w	8009824 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80096ca:	4b36      	ldr	r3, [pc, #216]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f003 030c 	and.w	r3, r3, #12
 80096d2:	2b08      	cmp	r3, #8
 80096d4:	d060      	beq.n	8009798 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d145      	bne.n	800976a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096de:	4b33      	ldr	r3, [pc, #204]	; (80097ac <HAL_RCC_OscConfig+0x4b4>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e4:	f7fd ff02 	bl	80074ec <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096ec:	f7fd fefe 	bl	80074ec <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e093      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096fe:	4b29      	ldr	r3, [pc, #164]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f0      	bne.n	80096ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69da      	ldr	r2, [r3, #28]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	431a      	orrs	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009718:	019b      	lsls	r3, r3, #6
 800971a:	431a      	orrs	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009720:	085b      	lsrs	r3, r3, #1
 8009722:	3b01      	subs	r3, #1
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	431a      	orrs	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	061b      	lsls	r3, r3, #24
 800972e:	431a      	orrs	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009734:	071b      	lsls	r3, r3, #28
 8009736:	491b      	ldr	r1, [pc, #108]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 8009738:	4313      	orrs	r3, r2
 800973a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <HAL_RCC_OscConfig+0x4b4>)
 800973e:	2201      	movs	r2, #1
 8009740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009742:	f7fd fed3 	bl	80074ec <HAL_GetTick>
 8009746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009748:	e008      	b.n	800975c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800974a:	f7fd fecf 	bl	80074ec <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b02      	cmp	r3, #2
 8009756:	d901      	bls.n	800975c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e064      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800975c:	4b11      	ldr	r3, [pc, #68]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0f0      	beq.n	800974a <HAL_RCC_OscConfig+0x452>
 8009768:	e05c      	b.n	8009824 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <HAL_RCC_OscConfig+0x4b4>)
 800976c:	2200      	movs	r2, #0
 800976e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009770:	f7fd febc 	bl	80074ec <HAL_GetTick>
 8009774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009776:	e008      	b.n	800978a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009778:	f7fd feb8 	bl	80074ec <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	2b02      	cmp	r3, #2
 8009784:	d901      	bls.n	800978a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e04d      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_RCC_OscConfig+0x4ac>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1f0      	bne.n	8009778 <HAL_RCC_OscConfig+0x480>
 8009796:	e045      	b.n	8009824 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d107      	bne.n	80097b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e040      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
 80097a4:	40023800 	.word	0x40023800
 80097a8:	40007000 	.word	0x40007000
 80097ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80097b0:	4b1f      	ldr	r3, [pc, #124]	; (8009830 <HAL_RCC_OscConfig+0x538>)
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d030      	beq.n	8009820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d129      	bne.n	8009820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d122      	bne.n	8009820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80097e0:	4013      	ands	r3, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d119      	bne.n	8009820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	085b      	lsrs	r3, r3, #1
 80097f8:	3b01      	subs	r3, #1
 80097fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d10f      	bne.n	8009820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800980c:	429a      	cmp	r2, r3
 800980e:	d107      	bne.n	8009820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800981c:	429a      	cmp	r2, r3
 800981e:	d001      	beq.n	8009824 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e000      	b.n	8009826 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	40023800 	.word	0x40023800

08009834 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d904      	bls.n	8009856 <HAL_SAI_InitProtocol+0x22>
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	3b03      	subs	r3, #3
 8009850:	2b01      	cmp	r3, #1
 8009852:	d812      	bhi.n	800987a <HAL_SAI_InitProtocol+0x46>
 8009854:	e008      	b.n	8009868 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 fa51 	bl	8009d04 <SAI_InitI2S>
 8009862:	4603      	mov	r3, r0
 8009864:	75fb      	strb	r3, [r7, #23]
      break;
 8009866:	e00b      	b.n	8009880 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 faf6 	bl	8009e60 <SAI_InitPCM>
 8009874:	4603      	mov	r3, r0
 8009876:	75fb      	strb	r3, [r7, #23]
      break;
 8009878:	e002      	b.n	8009880 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
      break;
 800987e:	bf00      	nop
  }

  if (status == HAL_OK)
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d104      	bne.n	8009890 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f808 	bl	800989c <HAL_SAI_Init>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e10c      	b.n	8009ad8 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7fd fbe4 	bl	80070a0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fb73 	bl	8009fcc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fc1a 	bl	800a120 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d030      	beq.n	8009956 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fc57 	bl	800a1a8 <SAI_GetInputClock>
 80098fa:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	005b      	lsls	r3, r3, #1
 8009906:	461a      	mov	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	025b      	lsls	r3, r3, #9
 800990e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009912:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4a72      	ldr	r2, [pc, #456]	; (8009ae0 <HAL_SAI_Init+0x244>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	08da      	lsrs	r2, r3, #3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8009922:	68f9      	ldr	r1, [r7, #12]
 8009924:	4b6e      	ldr	r3, [pc, #440]	; (8009ae0 <HAL_SAI_Init+0x244>)
 8009926:	fba3 2301 	umull	r2, r3, r3, r1
 800992a:	08da      	lsrs	r2, r3, #3
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	1aca      	subs	r2, r1, r3
 8009936:	2a08      	cmp	r2, #8
 8009938:	d904      	bls.n	8009944 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009948:	2b04      	cmp	r3, #4
 800994a:	d104      	bne.n	8009956 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	085a      	lsrs	r2, r3, #1
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <HAL_SAI_Init+0xca>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d109      	bne.n	800997a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <HAL_SAI_Init+0xd6>
 800996e:	2300      	movs	r3, #0
 8009970:	e001      	b.n	8009976 <HAL_SAI_Init+0xda>
 8009972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e008      	b.n	800998c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997e:	2b01      	cmp	r3, #1
 8009980:	d102      	bne.n	8009988 <HAL_SAI_Init+0xec>
 8009982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009986:	e000      	b.n	800998a <HAL_SAI_Init+0xee>
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b03      	cmp	r3, #3
 8009992:	d811      	bhi.n	80099b8 <HAL_SAI_Init+0x11c>
 8009994:	2b02      	cmp	r3, #2
 8009996:	d20b      	bcs.n	80099b0 <HAL_SAI_Init+0x114>
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <HAL_SAI_Init+0x106>
 800999c:	2b01      	cmp	r3, #1
 800999e:	d003      	beq.n	80099a8 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80099a0:	e00a      	b.n	80099b8 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	613b      	str	r3, [r7, #16]
    break;
 80099a6:	e008      	b.n	80099ba <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80099a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ac:	613b      	str	r3, [r7, #16]
    break;
 80099ae:	e004      	b.n	80099ba <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80099b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099b4:	613b      	str	r3, [r7, #16]
    break;
 80099b6:	e000      	b.n	80099ba <HAL_SAI_Init+0x11e>
      break;
 80099b8:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6819      	ldr	r1, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	4b47      	ldr	r3, [pc, #284]	; (8009ae4 <HAL_SAI_Init+0x248>)
 80099c6:	400b      	ands	r3, r1
 80099c8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099de:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e4:	431a      	orrs	r2, r3
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80099f2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80099fe:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	051b      	lsls	r3, r3, #20
 8009a06:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009a1e:	f023 030f 	bic.w	r3, r3, #15
 8009a22:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6859      	ldr	r1, [r3, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	699a      	ldr	r2, [r3, #24]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	431a      	orrs	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6899      	ldr	r1, [r3, #8]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	4b26      	ldr	r3, [pc, #152]	; (8009ae8 <HAL_SAI_Init+0x24c>)
 8009a4e:	400b      	ands	r3, r1
 8009a50:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6899      	ldr	r1, [r3, #8]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009a62:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8009a68:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8009a6e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a74:	3b01      	subs	r3, #1
 8009a76:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009a78:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68d9      	ldr	r1, [r3, #12]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009a90:	400b      	ands	r3, r1
 8009a92:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68d9      	ldr	r1, [r3, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aa8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8009aaa:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	021b      	lsls	r3, r3, #8
 8009ab4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	cccccccd 	.word	0xcccccccd
 8009ae4:	ff05c010 	.word	0xff05c010
 8009ae8:	fff88000 	.word	0xfff88000

08009aec <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d101      	bne.n	8009b06 <HAL_SAI_DMAStop+0x1a>
 8009b02:	2302      	movs	r3, #2
 8009b04:	e061      	b.n	8009bca <HAL_SAI_DMAStop+0xde>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009b1c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01c      	beq.n	8009b60 <HAL_SAI_DMAStop+0x74>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b12      	cmp	r3, #18
 8009b30:	d116      	bne.n	8009b60 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fd ff18 	bl	800796c <HAL_DMA_Abort>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00e      	beq.n	8009b60 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b48:	2b80      	cmp	r3, #128	; 0x80
 8009b4a:	d009      	beq.n	8009b60 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01c      	beq.n	8009ba2 <HAL_SAI_DMAStop+0xb6>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b22      	cmp	r3, #34	; 0x22
 8009b72:	d116      	bne.n	8009ba2 <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fd fef7 	bl	800796c <HAL_DMA_Abort>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00e      	beq.n	8009ba2 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8a:	2b80      	cmp	r3, #128	; 0x80
 8009b8c:	d009      	beq.n	8009ba2 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa12 	bl	8009fcc <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0208 	orr.w	r2, r2, #8
 8009bb6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	4613      	mov	r3, r2
 8009be0:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <HAL_SAI_Receive_DMA+0x1a>
 8009be8:	88fb      	ldrh	r3, [r7, #6]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e074      	b.n	8009cdc <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d16d      	bne.n	8009cda <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d101      	bne.n	8009c0c <HAL_SAI_Receive_DMA+0x38>
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e067      	b.n	8009cdc <HAL_SAI_Receive_DMA+0x108>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	88fa      	ldrh	r2, [r7, #6]
 8009c1e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	88fa      	ldrh	r2, [r7, #6]
 8009c26:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2222      	movs	r2, #34	; 0x22
 8009c36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c3e:	4a29      	ldr	r2, [pc, #164]	; (8009ce4 <HAL_SAI_Receive_DMA+0x110>)
 8009c40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c46:	4a28      	ldr	r2, [pc, #160]	; (8009ce8 <HAL_SAI_Receive_DMA+0x114>)
 8009c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c4e:	4a27      	ldr	r2, [pc, #156]	; (8009cec <HAL_SAI_Receive_DMA+0x118>)
 8009c50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c56:	2200      	movs	r2, #0
 8009c58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	331c      	adds	r3, #28
 8009c64:	4619      	mov	r1, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8009c72:	f7fd fe23 	bl	80078bc <HAL_DMA_Start_IT>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e029      	b.n	8009cdc <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009c88:	2100      	movs	r1, #0
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 f968 	bl	8009f60 <SAI_InterruptFlag>
 8009c90:	4601      	mov	r1, r0
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009cae:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d107      	bne.n	8009cce <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009ccc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e000      	b.n	8009cdc <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8009cda:	2302      	movs	r3, #2
  }
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	0800a09d 	.word	0x0800a09d
 8009ce8:	0800a03d 	.word	0x0800a03d
 8009cec:	0800a0b9 	.word	0x0800a0b9

08009cf0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <SAI_InitI2S+0x2a>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d103      	bne.n	8009d36 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	641a      	str	r2, [r3, #64]	; 0x40
 8009d34:	e002      	b.n	8009d3c <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009d42:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d4a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e076      	b.n	8009e54 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d107      	bne.n	8009d7c <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009d78:	655a      	str	r2, [r3, #84]	; 0x54
 8009d7a:	e006      	b.n	8009d8a <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009d82:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	655a      	str	r2, [r3, #84]	; 0x54
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b03      	cmp	r3, #3
 8009d8e:	d84f      	bhi.n	8009e30 <SAI_InitI2S+0x12c>
 8009d90:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <SAI_InitI2S+0x94>)
 8009d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d96:	bf00      	nop
 8009d98:	08009da9 	.word	0x08009da9
 8009d9c:	08009dcb 	.word	0x08009dcb
 8009da0:	08009ded 	.word	0x08009ded
 8009da4:	08009e0f 	.word	0x08009e0f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2280      	movs	r2, #128	; 0x80
 8009dac:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	085b      	lsrs	r3, r3, #1
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	011a      	lsls	r2, r3, #4
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2240      	movs	r2, #64	; 0x40
 8009dc6:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009dc8:	e034      	b.n	8009e34 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2280      	movs	r2, #128	; 0x80
 8009dce:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	085b      	lsrs	r3, r3, #1
 8009dd4:	019a      	lsls	r2, r3, #6
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	085b      	lsrs	r3, r3, #1
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2280      	movs	r2, #128	; 0x80
 8009de8:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009dea:	e023      	b.n	8009e34 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	22c0      	movs	r2, #192	; 0xc0
 8009df0:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	085b      	lsrs	r3, r3, #1
 8009df6:	019a      	lsls	r2, r3, #6
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	085b      	lsrs	r3, r3, #1
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2280      	movs	r2, #128	; 0x80
 8009e0a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009e0c:	e012      	b.n	8009e34 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	22e0      	movs	r2, #224	; 0xe0
 8009e12:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	085b      	lsrs	r3, r3, #1
 8009e18:	019a      	lsls	r2, r3, #6
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	085b      	lsrs	r3, r3, #1
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2280      	movs	r2, #128	; 0x80
 8009e2c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009e2e:	e001      	b.n	8009e34 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e00f      	b.n	8009e54 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d10b      	bne.n	8009e52 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d102      	bne.n	8009e46 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2210      	movs	r2, #16
 8009e44:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d102      	bne.n	8009e52 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2208      	movs	r2, #8
 8009e50:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <SAI_InitPCM+0x2a>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d103      	bne.n	8009e92 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8009e90:	e002      	b.n	8009e98 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009ea4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009eac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ec0:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d103      	bne.n	8009ed0 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	649a      	str	r2, [r3, #72]	; 0x48
 8009ece:	e002      	b.n	8009ed6 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	220d      	movs	r2, #13
 8009ed4:	649a      	str	r2, [r3, #72]	; 0x48
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b03      	cmp	r3, #3
 8009eda:	d837      	bhi.n	8009f4c <SAI_InitPCM+0xec>
 8009edc:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <SAI_InitPCM+0x84>)
 8009ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee2:	bf00      	nop
 8009ee4:	08009ef5 	.word	0x08009ef5
 8009ee8:	08009f0b 	.word	0x08009f0b
 8009eec:	08009f21 	.word	0x08009f21
 8009ef0:	08009f37 	.word	0x08009f37
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2280      	movs	r2, #128	; 0x80
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	011a      	lsls	r2, r3, #4
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2240      	movs	r2, #64	; 0x40
 8009f06:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f08:	e022      	b.n	8009f50 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2280      	movs	r2, #128	; 0x80
 8009f0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2280      	movs	r2, #128	; 0x80
 8009f1c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f1e:	e017      	b.n	8009f50 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	22c0      	movs	r2, #192	; 0xc0
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2280      	movs	r2, #128	; 0x80
 8009f32:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f34:	e00c      	b.n	8009f50 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	22e0      	movs	r2, #224	; 0xe0
 8009f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2280      	movs	r2, #128	; 0x80
 8009f48:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009f4a:	e001      	b.n	8009f50 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e000      	b.n	8009f52 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop

08009f60 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d103      	bne.n	8009f7c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f043 0308 	orr.w	r3, r3, #8
 8009f7a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d10b      	bne.n	8009f9c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d003      	beq.n	8009f94 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d103      	bne.n	8009f9c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f043 0310 	orr.w	r3, r3, #16
 8009f9a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	d003      	beq.n	8009fac <SAI_InterruptFlag+0x4c>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d104      	bne.n	8009fb6 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e003      	b.n	8009fbe <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f043 0304 	orr.w	r3, r3, #4
 8009fbc:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <SAI_Disable+0x68>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a17      	ldr	r2, [pc, #92]	; (800a038 <SAI_Disable+0x6c>)
 8009fda:	fba2 2303 	umull	r2, r3, r2, r3
 8009fde:	0b1b      	lsrs	r3, r3, #12
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ff6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	1e5a      	subs	r2, r3, #1
 8009ffc:	60fa      	str	r2, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	72fb      	strb	r3, [r7, #11]
      break;
 800a016:	e006      	b.n	800a026 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e8      	bne.n	8009ff8 <SAI_Disable+0x2c>

  return status;
 800a026:	7afb      	ldrb	r3, [r7, #11]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20000058 	.word	0x20000058
 800a038:	95cbec1b 	.word	0x95cbec1b

0800a03c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a048:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a052:	d01c      	beq.n	800a08e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a062:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a06c:	2100      	movs	r1, #0
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7ff ff76 	bl	8009f60 <SAI_InterruptFlag>
 800a074:	4603      	mov	r3, r0
 800a076:	43d9      	mvns	r1, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	691a      	ldr	r2, [r3, #16]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	400a      	ands	r2, r1
 800a084:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7fb ff7e 	bl	8005f90 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a094:	bf00      	nop
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f7fb ff5c 	bl	8005f68 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a0b0:	bf00      	nop
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d004      	beq.n	800a0ea <SAI_DMAError+0x32>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d112      	bne.n	800a110 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a0f8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f7ff ff66 	bl	8009fcc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff fded 	bl	8009cf0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d00c      	beq.n	800a14a <SAI_BlockSynchroConfig+0x2a>
 800a130:	2b02      	cmp	r3, #2
 800a132:	d80d      	bhi.n	800a150 <SAI_BlockSynchroConfig+0x30>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <SAI_BlockSynchroConfig+0x1e>
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d003      	beq.n	800a144 <SAI_BlockSynchroConfig+0x24>
 800a13c:	e008      	b.n	800a150 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
      break;
 800a142:	e008      	b.n	800a156 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a144:	2310      	movs	r3, #16
 800a146:	60fb      	str	r3, [r7, #12]
      break;
 800a148:	e005      	b.n	800a156 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a14a:	2320      	movs	r3, #32
 800a14c:	60fb      	str	r3, [r7, #12]
      break;
 800a14e:	e002      	b.n	800a156 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	60fb      	str	r3, [r7, #12]
      break;
 800a154:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d103      	bne.n	800a166 <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f043 0301 	orr.w	r3, r3, #1
 800a164:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a0b      	ldr	r2, [pc, #44]	; (800a198 <SAI_BlockSynchroConfig+0x78>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d004      	beq.n	800a17a <SAI_BlockSynchroConfig+0x5a>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a09      	ldr	r2, [pc, #36]	; (800a19c <SAI_BlockSynchroConfig+0x7c>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d103      	bne.n	800a182 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 800a17a:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <SAI_BlockSynchroConfig+0x80>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	e003      	b.n	800a18a <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a182:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <SAI_BlockSynchroConfig+0x84>)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800a188:	bf00      	nop
 800a18a:	bf00      	nop
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	40015804 	.word	0x40015804
 800a19c:	40015824 	.word	0x40015824
 800a1a0:	40015800 	.word	0x40015800
 800a1a4:	40015c00 	.word	0x40015c00

0800a1a8 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a0a      	ldr	r2, [pc, #40]	; (800a1e4 <SAI_GetInputClock+0x3c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d004      	beq.n	800a1c8 <SAI_GetInputClock+0x20>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a09      	ldr	r2, [pc, #36]	; (800a1e8 <SAI_GetInputClock+0x40>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d104      	bne.n	800a1d2 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a1c8:	2004      	movs	r0, #4
 800a1ca:	f7fe fc9b 	bl	8008b04 <HAL_RCCEx_GetPeriphCLKFreq>
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	e003      	b.n	800a1da <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a1d2:	2008      	movs	r0, #8
 800a1d4:	f7fe fc96 	bl	8008b04 <HAL_RCCEx_GetPeriphCLKFreq>
 800a1d8:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800a1da:	68fb      	ldr	r3, [r7, #12]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	40015804 	.word	0x40015804
 800a1e8:	40015824 	.word	0x40015824

0800a1ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e03f      	b.n	800a27e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d106      	bne.n	800a218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7fc fefc 	bl	8007010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2224      	movs	r2, #36	; 0x24
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68da      	ldr	r2, [r3, #12]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a22e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f905 	bl	800a440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	695a      	ldr	r2, [r3, #20]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68da      	ldr	r2, [r3, #12]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2220      	movs	r2, #32
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2220      	movs	r2, #32
 800a278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b08a      	sub	sp, #40	; 0x28
 800a28a:	af02      	add	r7, sp, #8
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	603b      	str	r3, [r7, #0]
 800a292:	4613      	mov	r3, r2
 800a294:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	d17c      	bne.n	800a3a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <HAL_UART_Transmit+0x2c>
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e075      	b.n	800a3a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d101      	bne.n	800a2c4 <HAL_UART_Transmit+0x3e>
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e06e      	b.n	800a3a2 <HAL_UART_Transmit+0x11c>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2221      	movs	r2, #33	; 0x21
 800a2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2da:	f7fd f907 	bl	80074ec <HAL_GetTick>
 800a2de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	88fa      	ldrh	r2, [r7, #6]
 800a2e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	88fa      	ldrh	r2, [r7, #6]
 800a2ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f4:	d108      	bne.n	800a308 <HAL_UART_Transmit+0x82>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d104      	bne.n	800a308 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	61bb      	str	r3, [r7, #24]
 800a306:	e003      	b.n	800a310 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a30c:	2300      	movs	r3, #0
 800a30e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a318:	e02a      	b.n	800a370 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2200      	movs	r2, #0
 800a322:	2180      	movs	r1, #128	; 0x80
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f840 	bl	800a3aa <UART_WaitOnFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e036      	b.n	800a3a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10b      	bne.n	800a352 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a348:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	3302      	adds	r3, #2
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	e007      	b.n	800a362 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	781a      	ldrb	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	3301      	adds	r3, #1
 800a360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a366:	b29b      	uxth	r3, r3
 800a368:	3b01      	subs	r3, #1
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a374:	b29b      	uxth	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1cf      	bne.n	800a31a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2200      	movs	r2, #0
 800a382:	2140      	movs	r1, #64	; 0x40
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f810 	bl	800a3aa <UART_WaitOnFlagUntilTimeout>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e006      	b.n	800a3a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2220      	movs	r2, #32
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	e000      	b.n	800a3a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a3a0:	2302      	movs	r3, #2
  }
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3720      	adds	r7, #32
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	603b      	str	r3, [r7, #0]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ba:	e02c      	b.n	800a416 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	d028      	beq.n	800a416 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d007      	beq.n	800a3da <UART_WaitOnFlagUntilTimeout+0x30>
 800a3ca:	f7fd f88f 	bl	80074ec <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	69ba      	ldr	r2, [r7, #24]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d21d      	bcs.n	800a416 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	695a      	ldr	r2, [r3, #20]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f022 0201 	bic.w	r2, r2, #1
 800a3f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2220      	movs	r2, #32
 800a406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	e00f      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4013      	ands	r3, r2
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	429a      	cmp	r2, r3
 800a424:	bf0c      	ite	eq
 800a426:	2301      	moveq	r3, #1
 800a428:	2300      	movne	r3, #0
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	461a      	mov	r2, r3
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	429a      	cmp	r2, r3
 800a432:	d0c3      	beq.n	800a3bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	b09f      	sub	sp, #124	; 0x7c
 800a446:	af00      	add	r7, sp, #0
 800a448:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a44a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a456:	68d9      	ldr	r1, [r3, #12]
 800a458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	ea40 0301 	orr.w	r3, r0, r1
 800a460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	431a      	orrs	r2, r3
 800a46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	431a      	orrs	r2, r3
 800a472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	4313      	orrs	r3, r2
 800a478:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a484:	f021 010c 	bic.w	r1, r1, #12
 800a488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a48e:	430b      	orrs	r3, r1
 800a490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49e:	6999      	ldr	r1, [r3, #24]
 800a4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	ea40 0301 	orr.w	r3, r0, r1
 800a4a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4bc5      	ldr	r3, [pc, #788]	; (800a7c4 <UART_SetConfig+0x384>)
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d004      	beq.n	800a4be <UART_SetConfig+0x7e>
 800a4b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	4bc3      	ldr	r3, [pc, #780]	; (800a7c8 <UART_SetConfig+0x388>)
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d103      	bne.n	800a4c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4be:	f7fd ffe3 	bl	8008488 <HAL_RCC_GetPCLK2Freq>
 800a4c2:	6778      	str	r0, [r7, #116]	; 0x74
 800a4c4:	e002      	b.n	800a4cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4c6:	f7fd ffcb 	bl	8008460 <HAL_RCC_GetPCLK1Freq>
 800a4ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4d4:	f040 80b6 	bne.w	800a644 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4da:	461c      	mov	r4, r3
 800a4dc:	f04f 0500 	mov.w	r5, #0
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	462b      	mov	r3, r5
 800a4e4:	1891      	adds	r1, r2, r2
 800a4e6:	6439      	str	r1, [r7, #64]	; 0x40
 800a4e8:	415b      	adcs	r3, r3
 800a4ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4f0:	1912      	adds	r2, r2, r4
 800a4f2:	eb45 0303 	adc.w	r3, r5, r3
 800a4f6:	f04f 0000 	mov.w	r0, #0
 800a4fa:	f04f 0100 	mov.w	r1, #0
 800a4fe:	00d9      	lsls	r1, r3, #3
 800a500:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a504:	00d0      	lsls	r0, r2, #3
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	1911      	adds	r1, r2, r4
 800a50c:	6639      	str	r1, [r7, #96]	; 0x60
 800a50e:	416b      	adcs	r3, r5
 800a510:	667b      	str	r3, [r7, #100]	; 0x64
 800a512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	461a      	mov	r2, r3
 800a518:	f04f 0300 	mov.w	r3, #0
 800a51c:	1891      	adds	r1, r2, r2
 800a51e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a520:	415b      	adcs	r3, r3
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a528:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a52c:	f7f6 fbcc 	bl	8000cc8 <__aeabi_uldivmod>
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	4ba5      	ldr	r3, [pc, #660]	; (800a7cc <UART_SetConfig+0x38c>)
 800a536:	fba3 2302 	umull	r2, r3, r3, r2
 800a53a:	095b      	lsrs	r3, r3, #5
 800a53c:	011e      	lsls	r6, r3, #4
 800a53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a540:	461c      	mov	r4, r3
 800a542:	f04f 0500 	mov.w	r5, #0
 800a546:	4622      	mov	r2, r4
 800a548:	462b      	mov	r3, r5
 800a54a:	1891      	adds	r1, r2, r2
 800a54c:	6339      	str	r1, [r7, #48]	; 0x30
 800a54e:	415b      	adcs	r3, r3
 800a550:	637b      	str	r3, [r7, #52]	; 0x34
 800a552:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a556:	1912      	adds	r2, r2, r4
 800a558:	eb45 0303 	adc.w	r3, r5, r3
 800a55c:	f04f 0000 	mov.w	r0, #0
 800a560:	f04f 0100 	mov.w	r1, #0
 800a564:	00d9      	lsls	r1, r3, #3
 800a566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a56a:	00d0      	lsls	r0, r2, #3
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	1911      	adds	r1, r2, r4
 800a572:	65b9      	str	r1, [r7, #88]	; 0x58
 800a574:	416b      	adcs	r3, r5
 800a576:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	461a      	mov	r2, r3
 800a57e:	f04f 0300 	mov.w	r3, #0
 800a582:	1891      	adds	r1, r2, r2
 800a584:	62b9      	str	r1, [r7, #40]	; 0x28
 800a586:	415b      	adcs	r3, r3
 800a588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a58a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a58e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a592:	f7f6 fb99 	bl	8000cc8 <__aeabi_uldivmod>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4b8c      	ldr	r3, [pc, #560]	; (800a7cc <UART_SetConfig+0x38c>)
 800a59c:	fba3 1302 	umull	r1, r3, r3, r2
 800a5a0:	095b      	lsrs	r3, r3, #5
 800a5a2:	2164      	movs	r1, #100	; 0x64
 800a5a4:	fb01 f303 	mul.w	r3, r1, r3
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	3332      	adds	r3, #50	; 0x32
 800a5ae:	4a87      	ldr	r2, [pc, #540]	; (800a7cc <UART_SetConfig+0x38c>)
 800a5b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b4:	095b      	lsrs	r3, r3, #5
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a5bc:	441e      	add	r6, r3
 800a5be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f04f 0100 	mov.w	r1, #0
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	1894      	adds	r4, r2, r2
 800a5cc:	623c      	str	r4, [r7, #32]
 800a5ce:	415b      	adcs	r3, r3
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5d6:	1812      	adds	r2, r2, r0
 800a5d8:	eb41 0303 	adc.w	r3, r1, r3
 800a5dc:	f04f 0400 	mov.w	r4, #0
 800a5e0:	f04f 0500 	mov.w	r5, #0
 800a5e4:	00dd      	lsls	r5, r3, #3
 800a5e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5ea:	00d4      	lsls	r4, r2, #3
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	462b      	mov	r3, r5
 800a5f0:	1814      	adds	r4, r2, r0
 800a5f2:	653c      	str	r4, [r7, #80]	; 0x50
 800a5f4:	414b      	adcs	r3, r1
 800a5f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	f04f 0300 	mov.w	r3, #0
 800a602:	1891      	adds	r1, r2, r2
 800a604:	61b9      	str	r1, [r7, #24]
 800a606:	415b      	adcs	r3, r3
 800a608:	61fb      	str	r3, [r7, #28]
 800a60a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a60e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a612:	f7f6 fb59 	bl	8000cc8 <__aeabi_uldivmod>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4b6c      	ldr	r3, [pc, #432]	; (800a7cc <UART_SetConfig+0x38c>)
 800a61c:	fba3 1302 	umull	r1, r3, r3, r2
 800a620:	095b      	lsrs	r3, r3, #5
 800a622:	2164      	movs	r1, #100	; 0x64
 800a624:	fb01 f303 	mul.w	r3, r1, r3
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	3332      	adds	r3, #50	; 0x32
 800a62e:	4a67      	ldr	r2, [pc, #412]	; (800a7cc <UART_SetConfig+0x38c>)
 800a630:	fba2 2303 	umull	r2, r3, r2, r3
 800a634:	095b      	lsrs	r3, r3, #5
 800a636:	f003 0207 	and.w	r2, r3, #7
 800a63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4432      	add	r2, r6
 800a640:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a642:	e0b9      	b.n	800a7b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a646:	461c      	mov	r4, r3
 800a648:	f04f 0500 	mov.w	r5, #0
 800a64c:	4622      	mov	r2, r4
 800a64e:	462b      	mov	r3, r5
 800a650:	1891      	adds	r1, r2, r2
 800a652:	6139      	str	r1, [r7, #16]
 800a654:	415b      	adcs	r3, r3
 800a656:	617b      	str	r3, [r7, #20]
 800a658:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a65c:	1912      	adds	r2, r2, r4
 800a65e:	eb45 0303 	adc.w	r3, r5, r3
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f04f 0100 	mov.w	r1, #0
 800a66a:	00d9      	lsls	r1, r3, #3
 800a66c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a670:	00d0      	lsls	r0, r2, #3
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	eb12 0804 	adds.w	r8, r2, r4
 800a67a:	eb43 0905 	adc.w	r9, r3, r5
 800a67e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	4618      	mov	r0, r3
 800a684:	f04f 0100 	mov.w	r1, #0
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	f04f 0300 	mov.w	r3, #0
 800a690:	008b      	lsls	r3, r1, #2
 800a692:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a696:	0082      	lsls	r2, r0, #2
 800a698:	4640      	mov	r0, r8
 800a69a:	4649      	mov	r1, r9
 800a69c:	f7f6 fb14 	bl	8000cc8 <__aeabi_uldivmod>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4b49      	ldr	r3, [pc, #292]	; (800a7cc <UART_SetConfig+0x38c>)
 800a6a6:	fba3 2302 	umull	r2, r3, r3, r2
 800a6aa:	095b      	lsrs	r3, r3, #5
 800a6ac:	011e      	lsls	r6, r3, #4
 800a6ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f04f 0100 	mov.w	r1, #0
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	1894      	adds	r4, r2, r2
 800a6bc:	60bc      	str	r4, [r7, #8]
 800a6be:	415b      	adcs	r3, r3
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6c6:	1812      	adds	r2, r2, r0
 800a6c8:	eb41 0303 	adc.w	r3, r1, r3
 800a6cc:	f04f 0400 	mov.w	r4, #0
 800a6d0:	f04f 0500 	mov.w	r5, #0
 800a6d4:	00dd      	lsls	r5, r3, #3
 800a6d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6da:	00d4      	lsls	r4, r2, #3
 800a6dc:	4622      	mov	r2, r4
 800a6de:	462b      	mov	r3, r5
 800a6e0:	1814      	adds	r4, r2, r0
 800a6e2:	64bc      	str	r4, [r7, #72]	; 0x48
 800a6e4:	414b      	adcs	r3, r1
 800a6e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f04f 0100 	mov.w	r1, #0
 800a6f2:	f04f 0200 	mov.w	r2, #0
 800a6f6:	f04f 0300 	mov.w	r3, #0
 800a6fa:	008b      	lsls	r3, r1, #2
 800a6fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a700:	0082      	lsls	r2, r0, #2
 800a702:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a706:	f7f6 fadf 	bl	8000cc8 <__aeabi_uldivmod>
 800a70a:	4602      	mov	r2, r0
 800a70c:	460b      	mov	r3, r1
 800a70e:	4b2f      	ldr	r3, [pc, #188]	; (800a7cc <UART_SetConfig+0x38c>)
 800a710:	fba3 1302 	umull	r1, r3, r3, r2
 800a714:	095b      	lsrs	r3, r3, #5
 800a716:	2164      	movs	r1, #100	; 0x64
 800a718:	fb01 f303 	mul.w	r3, r1, r3
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	3332      	adds	r3, #50	; 0x32
 800a722:	4a2a      	ldr	r2, [pc, #168]	; (800a7cc <UART_SetConfig+0x38c>)
 800a724:	fba2 2303 	umull	r2, r3, r2, r3
 800a728:	095b      	lsrs	r3, r3, #5
 800a72a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a72e:	441e      	add	r6, r3
 800a730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a732:	4618      	mov	r0, r3
 800a734:	f04f 0100 	mov.w	r1, #0
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	1894      	adds	r4, r2, r2
 800a73e:	603c      	str	r4, [r7, #0]
 800a740:	415b      	adcs	r3, r3
 800a742:	607b      	str	r3, [r7, #4]
 800a744:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a748:	1812      	adds	r2, r2, r0
 800a74a:	eb41 0303 	adc.w	r3, r1, r3
 800a74e:	f04f 0400 	mov.w	r4, #0
 800a752:	f04f 0500 	mov.w	r5, #0
 800a756:	00dd      	lsls	r5, r3, #3
 800a758:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a75c:	00d4      	lsls	r4, r2, #3
 800a75e:	4622      	mov	r2, r4
 800a760:	462b      	mov	r3, r5
 800a762:	eb12 0a00 	adds.w	sl, r2, r0
 800a766:	eb43 0b01 	adc.w	fp, r3, r1
 800a76a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	4618      	mov	r0, r3
 800a770:	f04f 0100 	mov.w	r1, #0
 800a774:	f04f 0200 	mov.w	r2, #0
 800a778:	f04f 0300 	mov.w	r3, #0
 800a77c:	008b      	lsls	r3, r1, #2
 800a77e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a782:	0082      	lsls	r2, r0, #2
 800a784:	4650      	mov	r0, sl
 800a786:	4659      	mov	r1, fp
 800a788:	f7f6 fa9e 	bl	8000cc8 <__aeabi_uldivmod>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <UART_SetConfig+0x38c>)
 800a792:	fba3 1302 	umull	r1, r3, r3, r2
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	2164      	movs	r1, #100	; 0x64
 800a79a:	fb01 f303 	mul.w	r3, r1, r3
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	011b      	lsls	r3, r3, #4
 800a7a2:	3332      	adds	r3, #50	; 0x32
 800a7a4:	4a09      	ldr	r2, [pc, #36]	; (800a7cc <UART_SetConfig+0x38c>)
 800a7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7aa:	095b      	lsrs	r3, r3, #5
 800a7ac:	f003 020f 	and.w	r2, r3, #15
 800a7b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4432      	add	r2, r6
 800a7b6:	609a      	str	r2, [r3, #8]
}
 800a7b8:	bf00      	nop
 800a7ba:	377c      	adds	r7, #124	; 0x7c
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c2:	bf00      	nop
 800a7c4:	40011000 	.word	0x40011000
 800a7c8:	40011400 	.word	0x40011400
 800a7cc:	51eb851f 	.word	0x51eb851f

0800a7d0 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  const float32_t * pSrcA,
  const float32_t * pSrcB,
        uint32_t blockSize,
        float32_t * result)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
 800a7dc:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary return variable */
 800a7de:	f04f 0300 	mov.w	r3, #0
 800a7e2:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800a7e8:	e014      	b.n	800a814 <arm_dot_prod_f32+0x44>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	1d1a      	adds	r2, r3, #4
 800a7ee:	60fa      	str	r2, [r7, #12]
 800a7f0:	ed93 7a00 	vldr	s14, [r3]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	1d1a      	adds	r2, r3, #4
 800a7f8:	60ba      	str	r2, [r7, #8]
 800a7fa:	edd3 7a00 	vldr	s15, [r3]
 800a7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a802:	ed97 7a04 	vldr	s14, [r7, #16]
 800a806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a80a:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	3b01      	subs	r3, #1
 800a812:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1e7      	bne.n	800a7ea <arm_dot_prod_f32+0x1a>
  }

  /* Store result in destination buffer */
  *result = sum;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	601a      	str	r2, [r3, #0]
}
 800a820:	bf00      	nop
 800a822:	371c      	adds	r7, #28
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b08b      	sub	sp, #44	; 0x2c
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	ed87 0a02 	vstr	s0, [r7, #8]
 800a838:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	885b      	ldrh	r3, [r3, #2]
 800a850:	fb03 f302 	mul.w	r3, r3, r2
 800a854:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800a85a:	e010      	b.n	800a87e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	1d1a      	adds	r2, r3, #4
 800a860:	627a      	str	r2, [r7, #36]	; 0x24
 800a862:	ed93 7a00 	vldr	s14, [r3]
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	1d1a      	adds	r2, r3, #4
 800a86a:	623a      	str	r2, [r7, #32]
 800a86c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a870:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a874:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1eb      	bne.n	800a85c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a884:	2300      	movs	r3, #0
 800a886:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800a888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	372c      	adds	r7, #44	; 0x2c
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800a898:	b480      	push	{r7}
 800a89a:	b08b      	sub	sp, #44	; 0x2c
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	885b      	ldrh	r3, [r3, #2]
 800a8b8:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800a8ba:	89fb      	ldrh	r3, [r7, #14]
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800a8cc:	89bb      	ldrh	r3, [r7, #12]
 800a8ce:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800a8d0:	e00d      	b.n	800a8ee <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	1d1a      	adds	r2, r3, #4
 800a8d6:	627a      	str	r2, [r7, #36]	; 0x24
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800a8de:	89fb      	ldrh	r3, [r7, #14]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	6a3a      	ldr	r2, [r7, #32]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1ee      	bne.n	800a8d2 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1dd      	bne.n	800a8c2 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a906:	2300      	movs	r3, #0
 800a908:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800a90a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	372c      	adds	r7, #44	; 0x2c
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b089      	sub	sp, #36	; 0x24
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	60b9      	str	r1, [r7, #8]
 800a924:	607a      	str	r2, [r7, #4]
 800a926:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800a928:	2300      	movs	r3, #0
 800a92a:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	1d1a      	adds	r2, r3, #4
 800a930:	60fa      	str	r2, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	3b01      	subs	r3, #1
 800a93a:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800a93c:	e016      	b.n	800a96c <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	60fa      	str	r2, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 800a948:	ed97 7a07 	vldr	s14, [r7, #28]
 800a94c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a958:	d505      	bpl.n	800a966 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	3b01      	subs	r3, #1
 800a96a:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1e5      	bne.n	800a93e <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	69fa      	ldr	r2, [r7, #28]
 800a976:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	601a      	str	r2, [r3, #0]
}
 800a97e:	bf00      	nop
 800a980:	3724      	adds	r7, #36	; 0x24
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b087      	sub	sp, #28
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800a996:	f04f 0300 	mov.w	r3, #0
 800a99a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800a9a0:	e00d      	b.n	800a9be <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	1d1a      	adds	r2, r3, #4
 800a9a6:	60fa      	str	r2, [r7, #12]
 800a9a8:	edd3 7a00 	vldr	s15, [r3]
 800a9ac:	ed97 7a04 	vldr	s14, [r7, #16]
 800a9b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9b4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1ee      	bne.n	800a9a2 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a9ce:	edd7 6a04 	vldr	s13, [r7, #16]
 800a9d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	edc3 7a00 	vstr	s15, [r3]
}
 800a9dc:	bf00      	nop
 800a9de:	371c      	adds	r7, #28
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b089      	sub	sp, #36	; 0x24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	1d1a      	adds	r2, r3, #4
 800a9fe:	60fa      	str	r2, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800aa0a:	e016      	b.n	800aa3a <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	1d1a      	adds	r2, r3, #4
 800aa10:	60fa      	str	r2, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 800aa16:	ed97 7a07 	vldr	s14, [r7, #28]
 800aa1a:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aa22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa26:	dd05      	ble.n	800aa34 <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1e5      	bne.n	800aa0c <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	69fa      	ldr	r2, [r7, #28]
 800aa44:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	601a      	str	r2, [r3, #0]
}
 800aa4c:	bf00      	nop
 800aa4e:	3724      	adds	r7, #36	; 0x24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08a      	sub	sp, #40	; 0x28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800aa64:	f04f 0300 	mov.w	r3, #0
 800aa68:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800aa6e:	e011      	b.n	800aa94 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	1d1a      	adds	r2, r3, #4
 800aa74:	60fa      	str	r2, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800aa7a:	edd7 7a07 	vldr	s15, [r7, #28]
 800aa7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aa82:	ed97 7a08 	vldr	s14, [r7, #32]
 800aa86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa8a:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	3b01      	subs	r3, #1
 800aa92:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1ea      	bne.n	800aa70 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	ee07 3a90 	vmov	s15, r3
 800aaa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aaa4:	edd7 6a08 	vldr	s13, [r7, #32]
 800aaa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaac:	edc7 7a06 	vstr	s15, [r7, #24]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800aab4:	edd7 7a06 	vldr	s15, [r7, #24]
 800aab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac0:	db09      	blt.n	800aad6 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800aac2:	ed97 0a06 	vldr	s0, [r7, #24]
 800aac6:	f00c ff73 	bl	80179b0 <sqrtf>
 800aaca:	eef0 7a40 	vmov.f32	s15, s0
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800aad4:	e004      	b.n	800aae0 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800aade:	bf00      	nop
}
 800aae0:	bf00      	nop
 800aae2:	3728      	adds	r7, #40	; 0x28
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <arm_q15_to_float>:
#else
void arm_q15_to_float(
  const q15_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b087      	sub	sp, #28
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const q15_t *pIn = pSrc;                             /* Source pointer */
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800aafc:	e014      	b.n	800ab28 <arm_q15_to_float+0x40>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	1c9a      	adds	r2, r3, #2
 800ab02:	613a      	str	r2, [r7, #16]
 800ab04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab08:	ee07 3a90 	vmov	s15, r3
 800ab0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	1d1a      	adds	r2, r3, #4
 800ab14:	60ba      	str	r2, [r7, #8]
 800ab16:	eddf 6a09 	vldr	s13, [pc, #36]	; 800ab3c <arm_q15_to_float+0x54>
 800ab1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab1e:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e7      	bne.n	800aafe <arm_q15_to_float+0x16>
  }

}
 800ab2e:	bf00      	nop
 800ab30:	bf00      	nop
 800ab32:	371c      	adds	r7, #28
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	47000000 	.word	0x47000000

0800ab40 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b089      	sub	sp, #36	; 0x24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61fb      	str	r3, [r7, #28]
 800ab52:	e043      	b.n	800abdc <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	089b      	lsrs	r3, r3, #2
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	3301      	adds	r3, #1
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	089b      	lsrs	r3, r3, #2
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	441a      	add	r2, r3
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	68f9      	ldr	r1, [r7, #12]
 800ab90:	440b      	add	r3, r1
 800ab92:	6812      	ldr	r2, [r2, #0]
 800ab94:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	3301      	adds	r3, #1
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4413      	add	r3, r2
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	3301      	adds	r3, #1
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	441a      	add	r2, r3
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	3301      	adds	r3, #1
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	68f9      	ldr	r1, [r7, #12]
 800abc2:	440b      	add	r3, r1
 800abc4:	6812      	ldr	r2, [r2, #0]
 800abc6:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	3301      	adds	r3, #1
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	4413      	add	r3, r2
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	601a      	str	r2, [r3, #0]

    i += 2;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	3302      	adds	r3, #2
 800abda:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800abdc:	897b      	ldrh	r3, [r7, #10]
 800abde:	69fa      	ldr	r2, [r7, #28]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d3b7      	bcc.n	800ab54 <arm_bitreversal_32+0x14>
  }
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
 800abe8:	3724      	adds	r7, #36	; 0x24
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b0a0      	sub	sp, #128	; 0x80
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800ac02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	4413      	add	r3, r2
 800ac0a:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 800ac16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac18:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800ac1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac1c:	085b      	lsrs	r3, r3, #1
 800ac1e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800ac20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	4413      	add	r3, r2
 800ac28:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 800ac2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ac30:	4413      	add	r3, r2
 800ac32:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800ac34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac36:	089b      	lsrs	r3, r3, #2
 800ac38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac3a:	e1b6      	b.n	800afaa <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 800ac54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800ac5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800ac60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800ac66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800ac6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800ac72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800ac78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800ac7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800ac84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800ac8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800ac90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800ac96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800ac9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800aca0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	603a      	str	r2, [r7, #0]
 800acaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acae:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800acb2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800acb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	1d1a      	adds	r2, r3, #4
 800acbe:	603a      	str	r2, [r7, #0]
 800acc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acc4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800acc8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800accc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	1d1a      	adds	r2, r3, #4
 800acd4:	603a      	str	r2, [r7, #0]
 800acd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acda:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800acde:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800ace2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	1d1a      	adds	r2, r3, #4
 800acea:	603a      	str	r2, [r7, #0]
 800acec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acf0:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800acf4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800acf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad00:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 800ad04:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ad08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ad0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad10:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 800ad14:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ad1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad20:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800ad24:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800ad28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad30:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 800ad34:	ed97 7a06 	vldr	s14, [r7, #24]
 800ad38:	edd7 7a02 	vldr	s15, [r7, #8]
 800ad3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad3e:	1d1a      	adds	r2, r3, #4
 800ad40:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad46:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800ad4a:	ed97 7a07 	vldr	s14, [r7, #28]
 800ad4e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad54:	1d1a      	adds	r2, r3, #4
 800ad56:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad5c:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800ad60:	ed97 7a08 	vldr	s14, [r7, #32]
 800ad64:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad6a:	1d1a      	adds	r2, r3, #4
 800ad6c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad72:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800ad76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ad7a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ad7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad80:	1d1a      	adds	r2, r3, #4
 800ad82:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad88:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800ad8c:	ed97 7a02 	vldr	s14, [r7, #8]
 800ad90:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad98:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800ad9c:	ed97 7a03 	vldr	s14, [r7, #12]
 800ada0:	edd7 7a07 	vldr	s15, [r7, #28]
 800ada4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ada8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800adac:	ed97 7a04 	vldr	s14, [r7, #16]
 800adb0:	edd7 7a08 	vldr	s15, [r7, #32]
 800adb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adb8:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800adbc:	ed97 7a05 	vldr	s14, [r7, #20]
 800adc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800adc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adc8:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800adcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adce:	1d1a      	adds	r2, r3, #4
 800add0:	673a      	str	r2, [r7, #112]	; 0x70
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800add6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800add8:	1d1a      	adds	r2, r3, #4
 800adda:	673a      	str	r2, [r7, #112]	; 0x70
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800ade0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ade4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ade8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adec:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800adf0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800adf4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800adf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800ae00:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ae04:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ae08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae0c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800ae10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae14:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ae18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae1c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800ae20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae22:	1d1a      	adds	r2, r3, #4
 800ae24:	677a      	str	r2, [r7, #116]	; 0x74
 800ae26:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ae2a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800ae2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae32:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800ae36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae38:	1d1a      	adds	r2, r3, #4
 800ae3a:	677a      	str	r2, [r7, #116]	; 0x74
 800ae3c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ae40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ae44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae48:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800ae4c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ae50:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ae54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae58:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800ae5c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae60:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ae64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae68:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800ae6c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae70:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ae74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae78:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800ae7c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ae80:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ae84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae88:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800ae8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae8e:	1d1a      	adds	r2, r3, #4
 800ae90:	67ba      	str	r2, [r7, #120]	; 0x78
 800ae92:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ae96:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800ae9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae9e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800aea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aea4:	1d1a      	adds	r2, r3, #4
 800aea6:	67ba      	str	r2, [r7, #120]	; 0x78
 800aea8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800aeac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800aeb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aeb4:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800aeb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aeba:	1d1a      	adds	r2, r3, #4
 800aebc:	673a      	str	r2, [r7, #112]	; 0x70
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800aec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aec4:	1d1a      	adds	r2, r3, #4
 800aec6:	673a      	str	r2, [r7, #112]	; 0x70
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800aecc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aed0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800aed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800aedc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aee0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800aee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800aeec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aef0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800aef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800aefc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800af00:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800af04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af08:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 800af0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af0e:	1d1a      	adds	r2, r3, #4
 800af10:	677a      	str	r2, [r7, #116]	; 0x74
 800af12:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800af16:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800af1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af1e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800af22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af24:	1d1a      	adds	r2, r3, #4
 800af26:	677a      	str	r2, [r7, #116]	; 0x74
 800af28:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800af2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800af30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af34:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800af38:	edd7 7a04 	vldr	s15, [r7, #16]
 800af3c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800af40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af44:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 800af48:	edd7 7a05 	vldr	s15, [r7, #20]
 800af4c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800af50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af54:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 800af58:	edd7 7a05 	vldr	s15, [r7, #20]
 800af5c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800af60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af64:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 800af68:	edd7 7a04 	vldr	s15, [r7, #16]
 800af6c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800af70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800af78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af7a:	1d1a      	adds	r2, r3, #4
 800af7c:	67ba      	str	r2, [r7, #120]	; 0x78
 800af7e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800af82:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800af86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af8a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800af8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af90:	1d1a      	adds	r2, r3, #4
 800af92:	67ba      	str	r2, [r7, #120]	; 0x78
 800af94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800af98:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800af9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afa0:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800afa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afa6:	3b01      	subs	r3, #1
 800afa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afac:	2b00      	cmp	r3, #0
 800afae:	f47f ae45 	bne.w	800ac3c <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800afb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afb4:	b299      	uxth	r1, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	2302      	movs	r3, #2
 800afbc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800afbe:	f000 ffc3 	bl	800bf48 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800afc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afc4:	b299      	uxth	r1, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	2302      	movs	r3, #2
 800afcc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800afce:	f000 ffbb 	bl	800bf48 <arm_radix8_butterfly_f32>
}
 800afd2:	bf00      	nop
 800afd4:	3780      	adds	r7, #128	; 0x80
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b0ac      	sub	sp, #176	; 0xb0
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	085b      	lsrs	r3, r3, #1
 800afea:	b29b      	uxth	r3, r3
 800afec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800aff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	4413      	add	r3, r2
 800affa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800affe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b008:	4413      	add	r3, r2
 800b00a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800b00e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b018:	4413      	add	r3, r2
 800b01a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800b022:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b026:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800b028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b02c:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800b02e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b032:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800b034:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b038:	3b04      	subs	r3, #4
 800b03a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800b03e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b042:	3b04      	subs	r3, #4
 800b044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800b048:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b04c:	3b04      	subs	r3, #4
 800b04e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800b052:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b05c:	4413      	add	r3, r2
 800b05e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b06a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b06e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b072:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800b07a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b07e:	085b      	lsrs	r3, r3, #1
 800b080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800b084:	2302      	movs	r3, #2
 800b086:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800b088:	2304      	movs	r3, #4
 800b08a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800b08c:	2306      	movs	r3, #6
 800b08e:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	ed93 7a00 	vldr	s14, [r3]
 800b096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b09a:	edd3 7a00 	vldr	s15, [r3]
 800b09e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0a2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	ed93 7a00 	vldr	s14, [r3]
 800b0ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0b0:	edd3 7a00 	vldr	s15, [r3]
 800b0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0b8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	ed93 7a00 	vldr	s14, [r3]
 800b0c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	edd3 7a00 	vldr	s15, [r3]
 800b0ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0d2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	ed93 7a00 	vldr	s14, [r3]
 800b0de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	edd3 7a00 	vldr	s15, [r3]
 800b0e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0ec:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800b0f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	ed93 7a00 	vldr	s14, [r3]
 800b0fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800b0fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b106:	3304      	adds	r3, #4
 800b108:	edd3 7a00 	vldr	s15, [r3]
 800b10c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b110:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800b114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b118:	edd3 7a00 	vldr	s15, [r3]
 800b11c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800b120:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b128:	edd3 7a00 	vldr	s15, [r3]
 800b12c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b130:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800b134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b138:	edd3 7a00 	vldr	s15, [r3]
 800b13c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b140:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b148:	edd3 7a00 	vldr	s15, [r3]
 800b14c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b150:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800b154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b158:	3304      	adds	r3, #4
 800b15a:	edd3 7a00 	vldr	s15, [r3]
 800b15e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b162:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b16a:	3304      	adds	r3, #4
 800b16c:	edd3 7a00 	vldr	s15, [r3]
 800b170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b174:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800b178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b17c:	3304      	adds	r3, #4
 800b17e:	edd3 7a00 	vldr	s15, [r3]
 800b182:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b186:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b18a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b18e:	3304      	adds	r3, #4
 800b190:	edd3 7a00 	vldr	s15, [r3]
 800b194:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b198:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800b19c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1a0:	ed93 7a00 	vldr	s14, [r3]
 800b1a4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b1a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b1b0:	edd3 7a00 	vldr	s15, [r3]
 800b1b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1b8:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800b1bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1c0:	ed93 7a00 	vldr	s14, [r3]
 800b1c4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800b1c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b1d0:	edd3 7a00 	vldr	s15, [r3]
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	1d1a      	adds	r2, r3, #4
 800b1d8:	603a      	str	r2, [r7, #0]
 800b1da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1de:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800b1e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	ed93 7a00 	vldr	s14, [r3]
 800b1ec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800b1f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	edd3 7a00 	vldr	s15, [r3]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	1d1a      	adds	r2, r3, #4
 800b202:	603a      	str	r2, [r7, #0]
 800b204:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b208:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800b20c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b210:	1d1a      	adds	r2, r3, #4
 800b212:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b218:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800b21a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b21e:	1d1a      	adds	r2, r3, #4
 800b220:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b226:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800b228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b22c:	1d1a      	adds	r2, r3, #4
 800b22e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b232:	69fa      	ldr	r2, [r7, #28]
 800b234:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800b236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b23a:	1d1a      	adds	r2, r3, #4
 800b23c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b240:	6a3a      	ldr	r2, [r7, #32]
 800b242:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800b244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b248:	1d1a      	adds	r2, r3, #4
 800b24a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800b252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b256:	1d1a      	adds	r2, r3, #4
 800b258:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800b260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b268:	4413      	add	r3, r2
 800b26a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800b26e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b276:	4413      	add	r3, r2
 800b278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800b27c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b284:	4413      	add	r3, r2
 800b286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800b28a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b28e:	3b02      	subs	r3, #2
 800b290:	085b      	lsrs	r3, r3, #1
 800b292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b296:	e31a      	b.n	800b8ce <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	ed93 7a00 	vldr	s14, [r3]
 800b29e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2a2:	edd3 7a00 	vldr	s15, [r3]
 800b2a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2aa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	ed93 7a00 	vldr	s14, [r3]
 800b2b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2b8:	edd3 7a00 	vldr	s15, [r3]
 800b2bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2c0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	ed93 7a00 	vldr	s14, [r3]
 800b2cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	edd3 7a00 	vldr	s15, [r3]
 800b2d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	ed93 7a00 	vldr	s14, [r3]
 800b2e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	edd3 7a00 	vldr	s15, [r3]
 800b2f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800b2f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	ed93 7a00 	vldr	s14, [r3]
 800b302:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800b306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b30a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b30e:	3304      	adds	r3, #4
 800b310:	edd3 7a00 	vldr	s15, [r3]
 800b314:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b318:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800b31c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b320:	edd3 7a00 	vldr	s15, [r3]
 800b324:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800b328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b32c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b330:	edd3 7a00 	vldr	s15, [r3]
 800b334:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b338:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800b33c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b340:	edd3 7a00 	vldr	s15, [r3]
 800b344:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b34c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b350:	edd3 7a00 	vldr	s15, [r3]
 800b354:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b358:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800b35c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b360:	3304      	adds	r3, #4
 800b362:	edd3 7a00 	vldr	s15, [r3]
 800b366:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b36a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b36e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b372:	3304      	adds	r3, #4
 800b374:	edd3 7a00 	vldr	s15, [r3]
 800b378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b37c:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800b380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b384:	3304      	adds	r3, #4
 800b386:	edd3 7a00 	vldr	s15, [r3]
 800b38a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b38e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b396:	3304      	adds	r3, #4
 800b398:	edd3 7a00 	vldr	s15, [r3]
 800b39c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3a0:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800b3a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3a8:	ed93 7a00 	vldr	s14, [r3]
 800b3ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b3b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3b8:	edd3 7a00 	vldr	s15, [r3]
 800b3bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3c0:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800b3c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3c8:	ed93 7a00 	vldr	s14, [r3]
 800b3cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800b3d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3d8:	edd3 7a00 	vldr	s15, [r3]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	1d1a      	adds	r2, r3, #4
 800b3e0:	603a      	str	r2, [r7, #0]
 800b3e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3e6:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800b3ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	ed93 7a00 	vldr	s14, [r3]
 800b3f4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800b3f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b400:	3304      	adds	r3, #4
 800b402:	edd3 7a00 	vldr	s15, [r3]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	1d1a      	adds	r2, r3, #4
 800b40a:	603a      	str	r2, [r7, #0]
 800b40c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b410:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800b414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b418:	3b04      	subs	r3, #4
 800b41a:	ed93 7a00 	vldr	s14, [r3]
 800b41e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b422:	3b04      	subs	r3, #4
 800b424:	edd3 7a00 	vldr	s15, [r3]
 800b428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b42c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800b430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b434:	3b04      	subs	r3, #4
 800b436:	ed93 7a00 	vldr	s14, [r3]
 800b43a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b43e:	3b04      	subs	r3, #4
 800b440:	edd3 7a00 	vldr	s15, [r3]
 800b444:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b448:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800b44c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b450:	ed93 7a00 	vldr	s14, [r3]
 800b454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b458:	edd3 7a00 	vldr	s15, [r3]
 800b45c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b460:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800b464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b468:	ed93 7a00 	vldr	s14, [r3]
 800b46c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b470:	edd3 7a00 	vldr	s15, [r3]
 800b474:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b478:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800b47c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b480:	ed93 7a00 	vldr	s14, [r3]
 800b484:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b488:	edd3 7a00 	vldr	s15, [r3]
 800b48c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b490:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b498:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800b49c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4a0:	ed93 7a00 	vldr	s14, [r3]
 800b4a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4a8:	edd3 7a00 	vldr	s15, [r3]
 800b4ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b4b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4b4:	3b04      	subs	r3, #4
 800b4b6:	edd3 7a00 	vldr	s15, [r3]
 800b4ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b4be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4c2:	3b04      	subs	r3, #4
 800b4c4:	edd3 7a00 	vldr	s15, [r3]
 800b4c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800b4d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4d4:	3b04      	subs	r3, #4
 800b4d6:	edd3 7a00 	vldr	s15, [r3]
 800b4da:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b4de:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b4e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4e6:	3b04      	subs	r3, #4
 800b4e8:	edd3 7a00 	vldr	s15, [r3]
 800b4ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800b4f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4f8:	edd3 7a00 	vldr	s15, [r3]
 800b4fc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b500:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b508:	edd3 7a00 	vldr	s15, [r3]
 800b50c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b510:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800b514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b518:	ed93 7a00 	vldr	s14, [r3]
 800b51c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b520:	edd3 7a00 	vldr	s15, [r3]
 800b524:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b528:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b52c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b530:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800b534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b538:	3b04      	subs	r3, #4
 800b53a:	ed93 7a00 	vldr	s14, [r3]
 800b53e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b542:	3b04      	subs	r3, #4
 800b544:	edd3 7a00 	vldr	s15, [r3]
 800b548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b54c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800b550:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b554:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800b558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b55c:	ed93 7a00 	vldr	s14, [r3]
 800b560:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800b564:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b56c:	edd3 7a00 	vldr	s15, [r3]
 800b570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b574:	1f1a      	subs	r2, r3, #4
 800b576:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b57a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b57e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800b582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b586:	3b04      	subs	r3, #4
 800b588:	ed93 7a00 	vldr	s14, [r3]
 800b58c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800b590:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b594:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b598:	3b04      	subs	r3, #4
 800b59a:	edd3 7a00 	vldr	s15, [r3]
 800b59e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5a2:	1f1a      	subs	r2, r3, #4
 800b5a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b5a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5ac:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800b5b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5b4:	1d1a      	adds	r2, r3, #4
 800b5b6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800b5be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5c2:	1d1a      	adds	r2, r3, #4
 800b5c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800b5cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b5d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b5d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800b5dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b5e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800b5ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b5f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b5f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800b5fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b600:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b604:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b608:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800b60c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b610:	1d1a      	adds	r2, r3, #4
 800b612:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b616:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b61a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b61e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b622:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800b626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b62a:	1d1a      	adds	r2, r3, #4
 800b62c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b630:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b634:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b63c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800b640:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b644:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b64c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800b650:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b654:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800b660:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b664:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800b670:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b674:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b67c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800b680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b684:	1f1a      	subs	r2, r3, #4
 800b686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b68a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b68e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b692:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b696:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800b69a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b69e:	1f1a      	subs	r2, r3, #4
 800b6a0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b6a4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b6a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b6ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6b0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800b6b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800b6bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800b6c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800b6d2:	edd7 7a07 	vldr	s15, [r7, #28]
 800b6d6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6de:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800b6e2:	edd7 7a08 	vldr	s15, [r7, #32]
 800b6e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800b6f2:	edd7 7a08 	vldr	s15, [r7, #32]
 800b6f6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800b702:	edd7 7a07 	vldr	s15, [r7, #28]
 800b706:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b70a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b70e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800b712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b71c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b720:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b724:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b728:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800b72c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b730:	1d1a      	adds	r2, r3, #4
 800b732:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b736:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b73a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b73e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b742:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800b746:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b74a:	eef1 7a67 	vneg.f32	s15, s15
 800b74e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b752:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b756:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 800b75a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b75e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b766:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 800b76a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b76e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b776:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 800b77a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b77e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b786:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800b78a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b78e:	1f1a      	subs	r2, r3, #4
 800b790:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b794:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b798:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b79c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7a0:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800b7a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b7a8:	1f1a      	subs	r2, r3, #4
 800b7aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b7ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b7b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800b7b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7ba:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800b7be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800b7c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800b7ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800b7dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b7e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800b7ec:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800b7fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800b800:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b804:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b808:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800b80c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b810:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b814:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b818:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800b81c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b820:	1d1a      	adds	r2, r3, #4
 800b822:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b826:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b82a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b82e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b832:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800b836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b83a:	1d1a      	adds	r2, r3, #4
 800b83c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b840:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b844:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b84c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800b850:	edd7 7a06 	vldr	s15, [r7, #24]
 800b854:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800b860:	edd7 7a05 	vldr	s15, [r7, #20]
 800b864:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b86c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800b870:	edd7 7a05 	vldr	s15, [r7, #20]
 800b874:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800b880:	edd7 7a06 	vldr	s15, [r7, #24]
 800b884:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800b890:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b894:	1f1a      	subs	r2, r3, #4
 800b896:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800b89a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b89e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b8a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8a6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800b8aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8ae:	1f1a      	subs	r2, r3, #4
 800b8b0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800b8b4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b8b8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b8bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8c0:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800b8c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f47f ace0 	bne.w	800b298 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	ed93 7a00 	vldr	s14, [r3]
 800b8de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8e2:	edd3 7a00 	vldr	s15, [r3]
 800b8e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8ea:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	ed93 7a00 	vldr	s14, [r3]
 800b8f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8f8:	edd3 7a00 	vldr	s15, [r3]
 800b8fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b900:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	3304      	adds	r3, #4
 800b908:	ed93 7a00 	vldr	s14, [r3]
 800b90c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b910:	3304      	adds	r3, #4
 800b912:	edd3 7a00 	vldr	s15, [r3]
 800b916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b91a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	3304      	adds	r3, #4
 800b922:	ed93 7a00 	vldr	s14, [r3]
 800b926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b92a:	3304      	adds	r3, #4
 800b92c:	edd3 7a00 	vldr	s15, [r3]
 800b930:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b934:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800b938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b93c:	3304      	adds	r3, #4
 800b93e:	ed93 7a00 	vldr	s14, [r3]
 800b942:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800b946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b94a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b94e:	3304      	adds	r3, #4
 800b950:	edd3 7a00 	vldr	s15, [r3]
 800b954:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b958:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800b95c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b960:	edd3 7a00 	vldr	s15, [r3]
 800b964:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800b968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b96c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b970:	edd3 7a00 	vldr	s15, [r3]
 800b974:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b978:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800b97c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b980:	edd3 7a00 	vldr	s15, [r3]
 800b984:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b98c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b990:	edd3 7a00 	vldr	s15, [r3]
 800b994:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b998:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800b99c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	edd3 7a00 	vldr	s15, [r3]
 800b9a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b9aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	edd3 7a00 	vldr	s15, [r3]
 800b9b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9bc:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800b9c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	edd3 7a00 	vldr	s15, [r3]
 800b9ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b9ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	edd3 7a00 	vldr	s15, [r3]
 800b9dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9e0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800b9e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9e8:	ed93 7a00 	vldr	s14, [r3]
 800b9ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b9f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9f8:	edd3 7a00 	vldr	s15, [r3]
 800b9fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba00:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800ba04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba08:	ed93 7a00 	vldr	s14, [r3]
 800ba0c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800ba10:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba18:	edd3 7a00 	vldr	s15, [r3]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	1d1a      	adds	r2, r3, #4
 800ba20:	603a      	str	r2, [r7, #0]
 800ba22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba26:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800ba2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba2e:	3304      	adds	r3, #4
 800ba30:	ed93 7a00 	vldr	s14, [r3]
 800ba34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800ba38:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba40:	3304      	adds	r3, #4
 800ba42:	edd3 7a00 	vldr	s15, [r3]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	1d1a      	adds	r2, r3, #4
 800ba4a:	603a      	str	r2, [r7, #0]
 800ba4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba50:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800ba54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800ba5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800ba64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ba68:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ba6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba70:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800ba74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ba78:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ba7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba80:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800ba84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ba88:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ba8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba90:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800ba94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ba98:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ba9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baa0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800baa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800baa8:	1d1a      	adds	r2, r3, #4
 800baaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800baae:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800bab2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baba:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800babe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bac2:	1d1a      	adds	r2, r3, #4
 800bac4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bac8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800bacc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800bad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bad4:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800bad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800bae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800bae8:	edd7 7a07 	vldr	s15, [r7, #28]
 800baec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800baf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800baf8:	edd7 7a08 	vldr	s15, [r7, #32]
 800bafc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bb00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800bb08:	edd7 7a08 	vldr	s15, [r7, #32]
 800bb0c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800bb10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb14:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800bb18:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bb20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800bb28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb32:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800bb36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bb3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb3e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800bb42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb46:	1d1a      	adds	r2, r3, #4
 800bb48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb4c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800bb50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800bb54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb58:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800bb5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800bb64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800bb6c:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800bb74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb78:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800bb7c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb80:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bb84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800bb8c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800bb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800bb9c:	edd7 7a03 	vldr	s15, [r7, #12]
 800bba0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800bbac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bbb0:	1d1a      	adds	r2, r3, #4
 800bbb2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bbb6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800bbba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bbbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbc2:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800bbc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bbca:	1d1a      	adds	r2, r3, #4
 800bbcc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bbd0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800bbd4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800bbd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbdc:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800bbe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bbe4:	b299      	uxth	r1, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	2304      	movs	r3, #4
 800bbec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800bbee:	f000 f9ab 	bl	800bf48 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800bbf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bbf6:	b299      	uxth	r1, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	2304      	movs	r3, #4
 800bbfe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bc00:	f000 f9a2 	bl	800bf48 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800bc04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc08:	b299      	uxth	r1, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	2304      	movs	r3, #4
 800bc10:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bc12:	f000 f999 	bl	800bf48 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 800bc16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc1a:	b299      	uxth	r1, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	2304      	movs	r3, #4
 800bc22:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800bc24:	f000 f990 	bl	800bf48 <arm_radix8_butterfly_f32>
}
 800bc28:	bf00      	nop
 800bc2a:	37b0      	adds	r7, #176	; 0xb0
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	460b      	mov	r3, r1
 800bc40:	71fb      	strb	r3, [r7, #7]
 800bc42:	4613      	mov	r3, r2
 800bc44:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800bc4c:	79fb      	ldrb	r3, [r7, #7]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d117      	bne.n	800bc82 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	3304      	adds	r3, #4
 800bc56:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800bc58:	2300      	movs	r3, #0
 800bc5a:	61fb      	str	r3, [r7, #28]
 800bc5c:	e00d      	b.n	800bc7a <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	edd3 7a00 	vldr	s15, [r3]
 800bc64:	eef1 7a67 	vneg.f32	s15, s15
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	3308      	adds	r3, #8
 800bc72:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	3301      	adds	r3, #1
 800bc78:	61fb      	str	r3, [r7, #28]
 800bc7a:	69fa      	ldr	r2, [r7, #28]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d3ed      	bcc.n	800bc5e <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc88:	d040      	beq.n	800bd0c <arm_cfft_f32+0xdc>
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc90:	d845      	bhi.n	800bd1e <arm_cfft_f32+0xee>
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc98:	d033      	beq.n	800bd02 <arm_cfft_f32+0xd2>
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bca0:	d83d      	bhi.n	800bd1e <arm_cfft_f32+0xee>
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bca8:	d026      	beq.n	800bcf8 <arm_cfft_f32+0xc8>
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcb0:	d835      	bhi.n	800bd1e <arm_cfft_f32+0xee>
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcb8:	d028      	beq.n	800bd0c <arm_cfft_f32+0xdc>
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcc0:	d82d      	bhi.n	800bd1e <arm_cfft_f32+0xee>
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcc8:	d01b      	beq.n	800bd02 <arm_cfft_f32+0xd2>
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd0:	d825      	bhi.n	800bd1e <arm_cfft_f32+0xee>
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	2b80      	cmp	r3, #128	; 0x80
 800bcd6:	d00f      	beq.n	800bcf8 <arm_cfft_f32+0xc8>
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	2b80      	cmp	r3, #128	; 0x80
 800bcdc:	d81f      	bhi.n	800bd1e <arm_cfft_f32+0xee>
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b40      	cmp	r3, #64	; 0x40
 800bce2:	d013      	beq.n	800bd0c <arm_cfft_f32+0xdc>
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	2b40      	cmp	r3, #64	; 0x40
 800bce8:	d819      	bhi.n	800bd1e <arm_cfft_f32+0xee>
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b10      	cmp	r3, #16
 800bcee:	d003      	beq.n	800bcf8 <arm_cfft_f32+0xc8>
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2b20      	cmp	r3, #32
 800bcf4:	d005      	beq.n	800bd02 <arm_cfft_f32+0xd2>
 800bcf6:	e012      	b.n	800bd1e <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800bcf8:	68b9      	ldr	r1, [r7, #8]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f7fe ff79 	bl	800abf2 <arm_cfft_radix8by2_f32>
    break;
 800bd00:	e00d      	b.n	800bd1e <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f7ff f968 	bl	800afda <arm_cfft_radix8by4_f32>
    break;
 800bd0a:	e008      	b.n	800bd1e <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	b299      	uxth	r1, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	685a      	ldr	r2, [r3, #4]
 800bd14:	2301      	movs	r3, #1
 800bd16:	68b8      	ldr	r0, [r7, #8]
 800bd18:	f000 f916 	bl	800bf48 <arm_radix8_butterfly_f32>
    break;
 800bd1c:	bf00      	nop
  }

  if ( bitReverseFlag )
 800bd1e:	79bb      	ldrb	r3, [r7, #6]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d007      	beq.n	800bd34 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	8999      	ldrh	r1, [r3, #12]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	68b8      	ldr	r0, [r7, #8]
 800bd30:	f7fe ff06 	bl	800ab40 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800bd34:	79fb      	ldrb	r3, [r7, #7]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d130      	bne.n	800bd9c <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	ee07 3a90 	vmov	s15, r3
 800bd40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd4c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800bd54:	2300      	movs	r3, #0
 800bd56:	61fb      	str	r3, [r7, #28]
 800bd58:	e01c      	b.n	800bd94 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	1d1a      	adds	r2, r3, #4
 800bd5e:	61ba      	str	r2, [r7, #24]
 800bd60:	ed93 7a00 	vldr	s14, [r3]
 800bd64:	edd7 7a04 	vldr	s15, [r7, #16]
 800bd68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd6c:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	edd3 7a00 	vldr	s15, [r3]
 800bd76:	eeb1 7a67 	vneg.f32	s14, s15
 800bd7a:	edd7 7a04 	vldr	s15, [r7, #16]
 800bd7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	3301      	adds	r3, #1
 800bd92:	61fb      	str	r3, [r7, #28]
 800bd94:	69fa      	ldr	r2, [r7, #28]
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d3de      	bcc.n	800bd5a <arm_cfft_f32+0x12a>
    }
  }
}
 800bd9c:	bf00      	nop
 800bd9e:	3720      	adds	r7, #32
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	887a      	ldrh	r2, [r7, #2]
 800bdb8:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	881b      	ldrh	r3, [r3, #0]
 800bdc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdc8:	d02c      	beq.n	800be24 <arm_cfft_init_f32+0x80>
 800bdca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdce:	f300 809e 	bgt.w	800bf0e <arm_cfft_init_f32+0x16a>
 800bdd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdd6:	d032      	beq.n	800be3e <arm_cfft_init_f32+0x9a>
 800bdd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bddc:	f300 8097 	bgt.w	800bf0e <arm_cfft_init_f32+0x16a>
 800bde0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bde4:	d038      	beq.n	800be58 <arm_cfft_init_f32+0xb4>
 800bde6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdea:	f300 8090 	bgt.w	800bf0e <arm_cfft_init_f32+0x16a>
 800bdee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdf2:	d03e      	beq.n	800be72 <arm_cfft_init_f32+0xce>
 800bdf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdf8:	f300 8089 	bgt.w	800bf0e <arm_cfft_init_f32+0x16a>
 800bdfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be00:	d044      	beq.n	800be8c <arm_cfft_init_f32+0xe8>
 800be02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be06:	f300 8082 	bgt.w	800bf0e <arm_cfft_init_f32+0x16a>
 800be0a:	2b80      	cmp	r3, #128	; 0x80
 800be0c:	d04b      	beq.n	800bea6 <arm_cfft_init_f32+0x102>
 800be0e:	2b80      	cmp	r3, #128	; 0x80
 800be10:	dc7d      	bgt.n	800bf0e <arm_cfft_init_f32+0x16a>
 800be12:	2b40      	cmp	r3, #64	; 0x40
 800be14:	d054      	beq.n	800bec0 <arm_cfft_init_f32+0x11c>
 800be16:	2b40      	cmp	r3, #64	; 0x40
 800be18:	dc79      	bgt.n	800bf0e <arm_cfft_init_f32+0x16a>
 800be1a:	2b10      	cmp	r3, #16
 800be1c:	d06a      	beq.n	800bef4 <arm_cfft_init_f32+0x150>
 800be1e:	2b20      	cmp	r3, #32
 800be20:	d05b      	beq.n	800beda <arm_cfft_init_f32+0x136>
 800be22:	e074      	b.n	800bf0e <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 800be24:	4b3f      	ldr	r3, [pc, #252]	; (800bf24 <arm_cfft_init_f32+0x180>)
 800be26:	899a      	ldrh	r2, [r3, #12]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	819a      	strh	r2, [r3, #12]
 800be2c:	4b3d      	ldr	r3, [pc, #244]	; (800bf24 <arm_cfft_init_f32+0x180>)
 800be2e:	689a      	ldr	r2, [r3, #8]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	609a      	str	r2, [r3, #8]
 800be34:	4b3b      	ldr	r3, [pc, #236]	; (800bf24 <arm_cfft_init_f32+0x180>)
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	605a      	str	r2, [r3, #4]
            break;
 800be3c:	e06a      	b.n	800bf14 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800be3e:	4b3a      	ldr	r3, [pc, #232]	; (800bf28 <arm_cfft_init_f32+0x184>)
 800be40:	899a      	ldrh	r2, [r3, #12]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	819a      	strh	r2, [r3, #12]
 800be46:	4b38      	ldr	r3, [pc, #224]	; (800bf28 <arm_cfft_init_f32+0x184>)
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	609a      	str	r2, [r3, #8]
 800be4e:	4b36      	ldr	r3, [pc, #216]	; (800bf28 <arm_cfft_init_f32+0x184>)
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	605a      	str	r2, [r3, #4]

            break;
 800be56:	e05d      	b.n	800bf14 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 800be58:	4b34      	ldr	r3, [pc, #208]	; (800bf2c <arm_cfft_init_f32+0x188>)
 800be5a:	899a      	ldrh	r2, [r3, #12]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	819a      	strh	r2, [r3, #12]
 800be60:	4b32      	ldr	r3, [pc, #200]	; (800bf2c <arm_cfft_init_f32+0x188>)
 800be62:	689a      	ldr	r2, [r3, #8]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	609a      	str	r2, [r3, #8]
 800be68:	4b30      	ldr	r3, [pc, #192]	; (800bf2c <arm_cfft_init_f32+0x188>)
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	605a      	str	r2, [r3, #4]

            break;
 800be70:	e050      	b.n	800bf14 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800be72:	4b2f      	ldr	r3, [pc, #188]	; (800bf30 <arm_cfft_init_f32+0x18c>)
 800be74:	899a      	ldrh	r2, [r3, #12]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	819a      	strh	r2, [r3, #12]
 800be7a:	4b2d      	ldr	r3, [pc, #180]	; (800bf30 <arm_cfft_init_f32+0x18c>)
 800be7c:	689a      	ldr	r2, [r3, #8]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	609a      	str	r2, [r3, #8]
 800be82:	4b2b      	ldr	r3, [pc, #172]	; (800bf30 <arm_cfft_init_f32+0x18c>)
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	605a      	str	r2, [r3, #4]
            break;
 800be8a:	e043      	b.n	800bf14 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 800be8c:	4b29      	ldr	r3, [pc, #164]	; (800bf34 <arm_cfft_init_f32+0x190>)
 800be8e:	899a      	ldrh	r2, [r3, #12]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	819a      	strh	r2, [r3, #12]
 800be94:	4b27      	ldr	r3, [pc, #156]	; (800bf34 <arm_cfft_init_f32+0x190>)
 800be96:	689a      	ldr	r2, [r3, #8]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	609a      	str	r2, [r3, #8]
 800be9c:	4b25      	ldr	r3, [pc, #148]	; (800bf34 <arm_cfft_init_f32+0x190>)
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	605a      	str	r2, [r3, #4]
            break;
 800bea4:	e036      	b.n	800bf14 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800bea6:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <arm_cfft_init_f32+0x194>)
 800bea8:	899a      	ldrh	r2, [r3, #12]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	819a      	strh	r2, [r3, #12]
 800beae:	4b22      	ldr	r3, [pc, #136]	; (800bf38 <arm_cfft_init_f32+0x194>)
 800beb0:	689a      	ldr	r2, [r3, #8]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	609a      	str	r2, [r3, #8]
 800beb6:	4b20      	ldr	r3, [pc, #128]	; (800bf38 <arm_cfft_init_f32+0x194>)
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	605a      	str	r2, [r3, #4]
            break;
 800bebe:	e029      	b.n	800bf14 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 800bec0:	4b1e      	ldr	r3, [pc, #120]	; (800bf3c <arm_cfft_init_f32+0x198>)
 800bec2:	899a      	ldrh	r2, [r3, #12]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	819a      	strh	r2, [r3, #12]
 800bec8:	4b1c      	ldr	r3, [pc, #112]	; (800bf3c <arm_cfft_init_f32+0x198>)
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	609a      	str	r2, [r3, #8]
 800bed0:	4b1a      	ldr	r3, [pc, #104]	; (800bf3c <arm_cfft_init_f32+0x198>)
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	605a      	str	r2, [r3, #4]
            break;
 800bed8:	e01c      	b.n	800bf14 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800beda:	4b19      	ldr	r3, [pc, #100]	; (800bf40 <arm_cfft_init_f32+0x19c>)
 800bedc:	899a      	ldrh	r2, [r3, #12]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	819a      	strh	r2, [r3, #12]
 800bee2:	4b17      	ldr	r3, [pc, #92]	; (800bf40 <arm_cfft_init_f32+0x19c>)
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	609a      	str	r2, [r3, #8]
 800beea:	4b15      	ldr	r3, [pc, #84]	; (800bf40 <arm_cfft_init_f32+0x19c>)
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	605a      	str	r2, [r3, #4]
            break;
 800bef2:	e00f      	b.n	800bf14 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 800bef4:	4b13      	ldr	r3, [pc, #76]	; (800bf44 <arm_cfft_init_f32+0x1a0>)
 800bef6:	899a      	ldrh	r2, [r3, #12]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	819a      	strh	r2, [r3, #12]
 800befc:	4b11      	ldr	r3, [pc, #68]	; (800bf44 <arm_cfft_init_f32+0x1a0>)
 800befe:	689a      	ldr	r2, [r3, #8]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	609a      	str	r2, [r3, #8]
 800bf04:	4b0f      	ldr	r3, [pc, #60]	; (800bf44 <arm_cfft_init_f32+0x1a0>)
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	605a      	str	r2, [r3, #4]
            break;
 800bf0c:	e002      	b.n	800bf14 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800bf0e:	23ff      	movs	r3, #255	; 0xff
 800bf10:	73fb      	strb	r3, [r7, #15]
            break;
 800bf12:	bf00      	nop
        }


        return (status);
 800bf14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	0803bad0 	.word	0x0803bad0
 800bf28:	0803bac0 	.word	0x0803bac0
 800bf2c:	0803bab0 	.word	0x0803bab0
 800bf30:	0803baa0 	.word	0x0803baa0
 800bf34:	0803ba90 	.word	0x0803ba90
 800bf38:	0803ba80 	.word	0x0803ba80
 800bf3c:	0803ba70 	.word	0x0803ba70
 800bf40:	0803ba60 	.word	0x0803ba60
 800bf44:	0803ba50 	.word	0x0803ba50

0800bf48 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b0bd      	sub	sp, #244	; 0xf4
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	607a      	str	r2, [r7, #4]
 800bf52:	461a      	mov	r2, r3
 800bf54:	460b      	mov	r3, r1
 800bf56:	817b      	strh	r3, [r7, #10]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800bf5c:	4b09      	ldr	r3, [pc, #36]	; (800bf84 <arm_radix8_butterfly_f32+0x3c>)
 800bf5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800bf62:	897b      	ldrh	r3, [r7, #10]
 800bf64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800bf68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800bf70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf74:	08db      	lsrs	r3, r3, #3
 800bf76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf80:	e002      	b.n	800bf88 <arm_radix8_butterfly_f32+0x40>
 800bf82:	bf00      	nop
 800bf84:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800bf88:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800bf8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf90:	4413      	add	r3, r2
 800bf92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800bf96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bf9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9e:	4413      	add	r3, r2
 800bfa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800bfa4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bfa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfac:	4413      	add	r3, r2
 800bfae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800bfb2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bfb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfba:	4413      	add	r3, r2
 800bfbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800bfc0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bfc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfc8:	4413      	add	r3, r2
 800bfca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800bfce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bfd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800bfdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bfe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfe4:	4413      	add	r3, r2
 800bfe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800bfea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	4413      	add	r3, r2
 800bff4:	ed93 7a00 	vldr	s14, [r3]
 800bff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	4413      	add	r3, r2
 800c002:	edd3 7a00 	vldr	s15, [r3]
 800c006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c00a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800c00e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c012:	00db      	lsls	r3, r3, #3
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	4413      	add	r3, r2
 800c018:	ed93 7a00 	vldr	s14, [r3]
 800c01c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	4413      	add	r3, r2
 800c026:	edd3 7a00 	vldr	s15, [r3]
 800c02a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c02e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800c032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c036:	00db      	lsls	r3, r3, #3
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	4413      	add	r3, r2
 800c03c:	ed93 7a00 	vldr	s14, [r3]
 800c040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	4413      	add	r3, r2
 800c04a:	edd3 7a00 	vldr	s15, [r3]
 800c04e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c052:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800c056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	4413      	add	r3, r2
 800c060:	ed93 7a00 	vldr	s14, [r3]
 800c064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	4413      	add	r3, r2
 800c06e:	edd3 7a00 	vldr	s15, [r3]
 800c072:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c076:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800c07a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c07e:	00db      	lsls	r3, r3, #3
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	ed93 7a00 	vldr	s14, [r3]
 800c088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c08c:	00db      	lsls	r3, r3, #3
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	4413      	add	r3, r2
 800c092:	edd3 7a00 	vldr	s15, [r3]
 800c096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c09a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800c09e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c0a2:	00db      	lsls	r3, r3, #3
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	ed93 7a00 	vldr	s14, [r3]
 800c0ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	edd3 7a00 	vldr	s15, [r3]
 800c0ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0be:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800c0c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	ed93 7a00 	vldr	s14, [r3]
 800c0d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c0d4:	00db      	lsls	r3, r3, #3
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	4413      	add	r3, r2
 800c0da:	edd3 7a00 	vldr	s15, [r3]
 800c0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0e2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800c0e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	ed93 7a00 	vldr	s14, [r3]
 800c0f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	edd3 7a00 	vldr	s15, [r3]
 800c102:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c106:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800c10a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c10e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c112:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c116:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800c11a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c11e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c122:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c126:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800c12a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c12e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800c132:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c136:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800c13a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c13e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800c142:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c146:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800c14a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c14e:	00db      	lsls	r3, r3, #3
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	4413      	add	r3, r2
 800c154:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c158:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c15c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c160:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800c164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c168:	00db      	lsls	r3, r3, #3
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	4413      	add	r3, r2
 800c16e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c172:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c17a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800c17e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	3304      	adds	r3, #4
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	4413      	add	r3, r2
 800c18a:	ed93 7a00 	vldr	s14, [r3]
 800c18e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	3304      	adds	r3, #4
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	4413      	add	r3, r2
 800c19a:	edd3 7a00 	vldr	s15, [r3]
 800c19e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1a2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800c1a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c1aa:	00db      	lsls	r3, r3, #3
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	ed93 7a00 	vldr	s14, [r3]
 800c1b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	3304      	adds	r3, #4
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	edd3 7a00 	vldr	s15, [r3]
 800c1c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1ca:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800c1ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c1d2:	00db      	lsls	r3, r3, #3
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	4413      	add	r3, r2
 800c1da:	ed93 7a00 	vldr	s14, [r3]
 800c1de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	edd3 7a00 	vldr	s15, [r3]
 800c1ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1f2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800c1f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c1fa:	00db      	lsls	r3, r3, #3
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	4413      	add	r3, r2
 800c202:	ed93 7a00 	vldr	s14, [r3]
 800c206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	3304      	adds	r3, #4
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	4413      	add	r3, r2
 800c212:	edd3 7a00 	vldr	s15, [r3]
 800c216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c21a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800c21e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	3304      	adds	r3, #4
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	ed93 7a00 	vldr	s14, [r3]
 800c22e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	3304      	adds	r3, #4
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	4413      	add	r3, r2
 800c23a:	edd3 7a00 	vldr	s15, [r3]
 800c23e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c242:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800c246:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	3304      	adds	r3, #4
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	4413      	add	r3, r2
 800c252:	ed93 7a00 	vldr	s14, [r3]
 800c256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	3304      	adds	r3, #4
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	4413      	add	r3, r2
 800c262:	edd3 7a00 	vldr	s15, [r3]
 800c266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c26a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800c26e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c272:	00db      	lsls	r3, r3, #3
 800c274:	3304      	adds	r3, #4
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	4413      	add	r3, r2
 800c27a:	ed93 7a00 	vldr	s14, [r3]
 800c27e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	3304      	adds	r3, #4
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	4413      	add	r3, r2
 800c28a:	edd3 7a00 	vldr	s15, [r3]
 800c28e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c292:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800c296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	3304      	adds	r3, #4
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	ed93 7a00 	vldr	s14, [r3]
 800c2a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	edd3 7a00 	vldr	s15, [r3]
 800c2b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2ba:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800c2be:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c2c2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c2c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2ca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800c2ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c2d2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c2d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2da:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800c2de:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c2e2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800c2e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2ea:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800c2ee:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c2f2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800c2f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2fa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800c2fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	3304      	adds	r3, #4
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	4413      	add	r3, r2
 800c30a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c30e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c312:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c316:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800c31a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c31e:	00db      	lsls	r3, r3, #3
 800c320:	3304      	adds	r3, #4
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	4413      	add	r3, r2
 800c326:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c32a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c32e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c332:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800c336:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	4413      	add	r3, r2
 800c340:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c344:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c34c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800c350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	4413      	add	r3, r2
 800c35a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c35e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c362:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c366:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800c36a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	3304      	adds	r3, #4
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	4413      	add	r3, r2
 800c376:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c37a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c37e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c382:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800c386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	3304      	adds	r3, #4
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	4413      	add	r3, r2
 800c392:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c396:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c39e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800c3a2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800c3a6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3ae:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800c3ba:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800c3be:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c3c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3c6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ce:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800c3d2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800c3d6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c3da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3de:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800c3ea:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800c3ee:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c3f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3f6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800c402:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c406:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c40a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c40e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800c412:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c416:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c41a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c41e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800c422:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c426:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c42a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c42e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800c432:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c436:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c43a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c43e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800c442:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c446:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c44a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c44e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800c452:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c456:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c45a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c45e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800c462:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800c466:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c46e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800c472:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800c476:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c47a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c47e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800c482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c486:	00db      	lsls	r3, r3, #3
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c490:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800c494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c498:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800c49c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c4aa:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800c4ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800c4b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	4413      	add	r3, r2
 800c4c0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c4c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c4c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4cc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800c4d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c4d4:	00db      	lsls	r3, r3, #3
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	4413      	add	r3, r2
 800c4da:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c4de:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c4e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4e6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800c4ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c4fa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c4fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c502:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800c506:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	3304      	adds	r3, #4
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	4413      	add	r3, r2
 800c512:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c516:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c51a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c51e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800c522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c526:	00db      	lsls	r3, r3, #3
 800c528:	3304      	adds	r3, #4
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	4413      	add	r3, r2
 800c52e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c532:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c53a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800c53e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	3304      	adds	r3, #4
 800c546:	68fa      	ldr	r2, [r7, #12]
 800c548:	4413      	add	r3, r2
 800c54a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c54e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c552:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c556:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800c55a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c55e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c562:	4413      	add	r3, r2
 800c564:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800c568:	897b      	ldrh	r3, [r7, #10]
 800c56a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c56e:	429a      	cmp	r2, r3
 800c570:	f4ff ad0a 	bcc.w	800bf88 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800c574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c578:	2b07      	cmp	r3, #7
 800c57a:	f240 84e3 	bls.w	800cf44 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800c584:	2301      	movs	r3, #1
 800c586:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800c58a:	893b      	ldrh	r3, [r7, #8]
 800c58c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800c590:	4413      	add	r3, r2
 800c592:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800c594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c596:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800c59a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800c59e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5a0:	4413      	add	r3, r2
 800c5a2:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800c5a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c5a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5a8:	4413      	add	r3, r2
 800c5aa:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800c5ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c5ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5b0:	4413      	add	r3, r2
 800c5b2:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800c5b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c5b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5b8:	4413      	add	r3, r2
 800c5ba:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800c5bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5c0:	4413      	add	r3, r2
 800c5c2:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800c5c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5c8:	4413      	add	r3, r2
 800c5ca:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800c5cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c5d0:	00db      	lsls	r3, r3, #3
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800c5da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5dc:	00db      	lsls	r3, r3, #3
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800c5e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800c5f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5f4:	00db      	lsls	r3, r3, #3
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800c5fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c600:	00db      	lsls	r3, r3, #3
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	4413      	add	r3, r2
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800c60a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	4413      	add	r3, r2
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800c616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	4413      	add	r3, r2
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800c622:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	3304      	adds	r3, #4
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	4413      	add	r3, r2
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800c632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c634:	00db      	lsls	r3, r3, #3
 800c636:	3304      	adds	r3, #4
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	4413      	add	r3, r2
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800c640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	3304      	adds	r3, #4
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	4413      	add	r3, r2
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800c64e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c650:	00db      	lsls	r3, r3, #3
 800c652:	3304      	adds	r3, #4
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	4413      	add	r3, r2
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800c65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	3304      	adds	r3, #4
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	4413      	add	r3, r2
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800c66a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c66c:	00db      	lsls	r3, r3, #3
 800c66e:	3304      	adds	r3, #4
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	4413      	add	r3, r2
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 800c678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c67a:	00db      	lsls	r3, r3, #3
 800c67c:	3304      	adds	r3, #4
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	4413      	add	r3, r2
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800c686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c68a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800c68e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c696:	4413      	add	r3, r2
 800c698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800c69c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800c6aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800c6b8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800c6c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ce:	4413      	add	r3, r2
 800c6d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800c6d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6dc:	4413      	add	r3, r2
 800c6de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800c6e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800c6f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c6f4:	00db      	lsls	r3, r3, #3
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	ed93 7a00 	vldr	s14, [r3]
 800c6fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	4413      	add	r3, r2
 800c708:	edd3 7a00 	vldr	s15, [r3]
 800c70c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c710:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800c714:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c718:	00db      	lsls	r3, r3, #3
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	4413      	add	r3, r2
 800c71e:	ed93 7a00 	vldr	s14, [r3]
 800c722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c726:	00db      	lsls	r3, r3, #3
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	4413      	add	r3, r2
 800c72c:	edd3 7a00 	vldr	s15, [r3]
 800c730:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c734:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800c738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	4413      	add	r3, r2
 800c742:	ed93 7a00 	vldr	s14, [r3]
 800c746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	edd3 7a00 	vldr	s15, [r3]
 800c754:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c758:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800c75c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	4413      	add	r3, r2
 800c766:	ed93 7a00 	vldr	s14, [r3]
 800c76a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	4413      	add	r3, r2
 800c774:	edd3 7a00 	vldr	s15, [r3]
 800c778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c77c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800c780:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	4413      	add	r3, r2
 800c78a:	ed93 7a00 	vldr	s14, [r3]
 800c78e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	4413      	add	r3, r2
 800c798:	edd3 7a00 	vldr	s15, [r3]
 800c79c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7a0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800c7a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c7a8:	00db      	lsls	r3, r3, #3
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	ed93 7a00 	vldr	s14, [r3]
 800c7b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c7b6:	00db      	lsls	r3, r3, #3
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	edd3 7a00 	vldr	s15, [r3]
 800c7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7c4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800c7c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	ed93 7a00 	vldr	s14, [r3]
 800c7d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	edd3 7a00 	vldr	s15, [r3]
 800c7e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7e8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800c7ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	ed93 7a00 	vldr	s14, [r3]
 800c7fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	4413      	add	r3, r2
 800c804:	edd3 7a00 	vldr	s15, [r3]
 800c808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c80c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800c810:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c814:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c81c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800c820:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c824:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c82c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800c830:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c834:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800c838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c83c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800c840:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c844:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800c848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c84c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800c850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	4413      	add	r3, r2
 800c85a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c85e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c862:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c866:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800c86a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800c86e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c872:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c876:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800c87a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	3304      	adds	r3, #4
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	4413      	add	r3, r2
 800c886:	ed93 7a00 	vldr	s14, [r3]
 800c88a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	3304      	adds	r3, #4
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	4413      	add	r3, r2
 800c896:	edd3 7a00 	vldr	s15, [r3]
 800c89a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c89e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800c8a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c8a6:	00db      	lsls	r3, r3, #3
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	ed93 7a00 	vldr	s14, [r3]
 800c8b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	4413      	add	r3, r2
 800c8be:	edd3 7a00 	vldr	s15, [r3]
 800c8c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8c6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800c8ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	ed93 7a00 	vldr	s14, [r3]
 800c8da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c8de:	00db      	lsls	r3, r3, #3
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	edd3 7a00 	vldr	s15, [r3]
 800c8ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800c8f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	ed93 7a00 	vldr	s14, [r3]
 800c902:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	3304      	adds	r3, #4
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	4413      	add	r3, r2
 800c90e:	edd3 7a00 	vldr	s15, [r3]
 800c912:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c916:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800c91a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	3304      	adds	r3, #4
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	4413      	add	r3, r2
 800c926:	ed93 7a00 	vldr	s14, [r3]
 800c92a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c92e:	00db      	lsls	r3, r3, #3
 800c930:	3304      	adds	r3, #4
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	4413      	add	r3, r2
 800c936:	edd3 7a00 	vldr	s15, [r3]
 800c93a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c93e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800c942:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c946:	00db      	lsls	r3, r3, #3
 800c948:	3304      	adds	r3, #4
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	4413      	add	r3, r2
 800c94e:	ed93 7a00 	vldr	s14, [r3]
 800c952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c956:	00db      	lsls	r3, r3, #3
 800c958:	3304      	adds	r3, #4
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	4413      	add	r3, r2
 800c95e:	edd3 7a00 	vldr	s15, [r3]
 800c962:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c966:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800c96a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c96e:	00db      	lsls	r3, r3, #3
 800c970:	3304      	adds	r3, #4
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	4413      	add	r3, r2
 800c976:	ed93 7a00 	vldr	s14, [r3]
 800c97a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c97e:	00db      	lsls	r3, r3, #3
 800c980:	3304      	adds	r3, #4
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	4413      	add	r3, r2
 800c986:	edd3 7a00 	vldr	s15, [r3]
 800c98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c98e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800c992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c996:	00db      	lsls	r3, r3, #3
 800c998:	3304      	adds	r3, #4
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	ed93 7a00 	vldr	s14, [r3]
 800c9a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	edd3 7a00 	vldr	s15, [r3]
 800c9b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9b6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800c9ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c9c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9c6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800c9ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c9d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800c9da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c9de:	edd7 7a08 	vldr	s15, [r7, #32]
 800c9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9e6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800c9ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c9ee:	edd7 7a08 	vldr	s15, [r7, #32]
 800c9f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800c9fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c9fe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ca02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca06:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800ca0a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ca0e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ca12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca16:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800ca1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	3304      	adds	r3, #4
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	4413      	add	r3, r2
 800ca26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca32:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800ca36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca42:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800ca46:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ca4a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ca4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800ca56:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ca5a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ca5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca62:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800ca66:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ca6a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ca6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca72:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800ca76:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ca7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca82:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800ca86:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ca8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca92:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800ca96:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ca9a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ca9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800caa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	4413      	add	r3, r2
 800cab0:	ed97 7a07 	vldr	s14, [r7, #28]
 800cab4:	edd7 7a06 	vldr	s15, [r7, #24]
 800cab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cabc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800cac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	3304      	adds	r3, #4
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	4413      	add	r3, r2
 800cacc:	ed97 7a05 	vldr	s14, [r7, #20]
 800cad0:	edd7 7a04 	vldr	s15, [r7, #16]
 800cad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cad8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800cadc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800cae0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800cae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800caec:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800caf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800cafc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800cb00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb08:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800cb0c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cb10:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800cb14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb18:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800cb1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cb20:	00db      	lsls	r3, r3, #3
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	4413      	add	r3, r2
 800cb26:	ed97 7a07 	vldr	s14, [r7, #28]
 800cb2a:	edd7 7a06 	vldr	s15, [r7, #24]
 800cb2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb32:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800cb36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	ed97 7a05 	vldr	s14, [r7, #20]
 800cb46:	edd7 7a04 	vldr	s15, [r7, #16]
 800cb4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb4e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800cb52:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800cb56:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800cb5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb5e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800cb62:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800cb66:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800cb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb6e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800cb72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800cb76:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800cb7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800cb82:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800cb86:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800cb8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb8e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800cb92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	ed97 7a07 	vldr	s14, [r7, #28]
 800cba0:	edd7 7a06 	vldr	s15, [r7, #24]
 800cba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cba8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800cbac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	ed97 7a05 	vldr	s14, [r7, #20]
 800cbbc:	edd7 7a04 	vldr	s15, [r7, #16]
 800cbc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbc4:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800cbc8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800cbcc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cbd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbd4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800cbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbdc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800cbe0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800cbe4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cbe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbec:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800cbf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800cbf8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800cbfc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800cc00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc04:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800cc08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc0c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800cc10:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800cc14:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800cc18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc1c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800cc20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc24:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800cc28:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800cc2c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800cc30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc34:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800cc38:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800cc3c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800cc40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc44:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800cc48:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800cc4c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800cc50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc54:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800cc58:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800cc5c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800cc60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc64:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800cc68:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800cc6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc74:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800cc78:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800cc7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc84:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800cc88:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800cc8c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800cc90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc94:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800cc98:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800cc9c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800cca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cca4:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800cca8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800ccac:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800ccb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccb4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800ccb8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800ccbc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800ccc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccc4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800ccc8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800cccc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ccd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccd4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800ccd8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ccdc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800cce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cce4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800cce8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ccec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ccf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccf4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800ccf8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ccfc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800cd00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd04:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800cd08:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800cd0c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cd10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd14:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800cd18:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800cd1c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cd20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd24:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800cd28:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800cd2c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800cd30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd34:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800cd38:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800cd3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd44:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800cd48:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800cd4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd54:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800cd58:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800cd5c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800cd60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd64:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800cd68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	4413      	add	r3, r2
 800cd72:	ed97 7a07 	vldr	s14, [r7, #28]
 800cd76:	edd7 7a06 	vldr	s15, [r7, #24]
 800cd7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd7e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800cd82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	3304      	adds	r3, #4
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	ed97 7a05 	vldr	s14, [r7, #20]
 800cd92:	edd7 7a04 	vldr	s15, [r7, #16]
 800cd96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd9a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800cd9e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800cda2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800cda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdaa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800cdae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800cdb2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800cdb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdba:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800cdbe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800cdc2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800cdc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdca:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800cdce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800cdd2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800cdd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdda:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800cdde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cde2:	00db      	lsls	r3, r3, #3
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	4413      	add	r3, r2
 800cde8:	ed97 7a07 	vldr	s14, [r7, #28]
 800cdec:	edd7 7a06 	vldr	s15, [r7, #24]
 800cdf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdf4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800cdf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cdfc:	00db      	lsls	r3, r3, #3
 800cdfe:	3304      	adds	r3, #4
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	4413      	add	r3, r2
 800ce04:	ed97 7a05 	vldr	s14, [r7, #20]
 800ce08:	edd7 7a04 	vldr	s15, [r7, #16]
 800ce0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce10:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800ce14:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ce18:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800ce1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce20:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800ce24:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce28:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800ce2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce30:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800ce34:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ce38:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800ce3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce40:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800ce44:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce48:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800ce4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce50:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800ce54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ce62:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce6a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800ce6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ce72:	00db      	lsls	r3, r3, #3
 800ce74:	3304      	adds	r3, #4
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	4413      	add	r3, r2
 800ce7a:	ed97 7a05 	vldr	s14, [r7, #20]
 800ce7e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ce82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce86:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800ce8a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ce8e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ce92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce96:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800ce9a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ce9e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800cea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cea6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800ceaa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800ceae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ceb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceb6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800ceba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800cebe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800cec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cec6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800ceca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	4413      	add	r3, r2
 800ced4:	ed97 7a07 	vldr	s14, [r7, #28]
 800ced8:	edd7 7a06 	vldr	s15, [r7, #24]
 800cedc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cee0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800cee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	3304      	adds	r3, #4
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	4413      	add	r3, r2
 800cef0:	ed97 7a05 	vldr	s14, [r7, #20]
 800cef4:	edd7 7a04 	vldr	s15, [r7, #16]
 800cef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cefc:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800cf00:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800cf04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf08:	4413      	add	r3, r2
 800cf0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800cf0e:	897b      	ldrh	r3, [r7, #10]
 800cf10:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800cf14:	429a      	cmp	r2, r3
 800cf16:	f4ff abba 	bcc.w	800c68e <arm_radix8_butterfly_f32+0x746>

         j++;
 800cf1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf1e:	3301      	adds	r3, #1
 800cf20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800cf24:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cf28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	f4ff ab2c 	bcc.w	800c58a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800cf32:	893b      	ldrh	r3, [r7, #8]
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800cf38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf3c:	2b07      	cmp	r3, #7
 800cf3e:	f63f a813 	bhi.w	800bf68 <arm_radix8_butterfly_f32+0x20>
}
 800cf42:	e000      	b.n	800cf46 <arm_radix8_butterfly_f32+0xffe>
         break;
 800cf44:	bf00      	nop
}
 800cf46:	bf00      	nop
 800cf48:	37f4      	adds	r7, #244	; 0xf4
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop

0800cf54 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b095      	sub	sp, #84	; 0x54
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	695b      	ldr	r3, [r3, #20]
 800cf64:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	881b      	ldrh	r3, [r3, #0]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800cf76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800cf7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800cf82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800cf88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800cf8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf90:	1d1a      	adds	r2, r3, #4
 800cf92:	64ba      	str	r2, [r7, #72]	; 0x48
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800cf98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf9a:	1d1a      	adds	r2, r3, #4
 800cf9c:	64ba      	str	r2, [r7, #72]	; 0x48
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800cfa2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800cfa6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cfaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800cfb2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800cfb6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cfba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfbe:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800cfc2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800cfc6:	edd7 7a08 	vldr	s15, [r7, #32]
 800cfca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	1d1a      	adds	r2, r3, #4
 800cfd2:	607a      	str	r2, [r7, #4]
 800cfd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cfd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfdc:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800cfe0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800cfe4:	edd7 7a08 	vldr	s15, [r7, #32]
 800cfe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	1d1a      	adds	r2, r3, #4
 800cff0:	607a      	str	r2, [r7, #4]
 800cff2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cffa:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800cffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	4413      	add	r3, r2
 800d006:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800d008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d00a:	3308      	adds	r3, #8
 800d00c:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800d00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800d014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800d01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800d020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800d026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d028:	1d1a      	adds	r2, r3, #4
 800d02a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800d030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d032:	1d1a      	adds	r2, r3, #4
 800d034:	64ba      	str	r2, [r7, #72]	; 0x48
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800d03a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d03e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d042:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d046:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800d04a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d04e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d052:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d056:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800d05a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d05e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d066:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800d06a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d06e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d076:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800d07a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d07e:	edd7 7a08 	vldr	s15, [r7, #32]
 800d082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d086:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800d08a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d08e:	edd7 7a08 	vldr	s15, [r7, #32]
 800d092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d096:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800d09a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d09e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d0a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0a6:	edd7 7a07 	vldr	s15, [r7, #28]
 800d0aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800d0b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	1d1a      	adds	r2, r3, #4
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d0c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0c4:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800d0c8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d0cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d0d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d0d4:	edd7 7a06 	vldr	s15, [r7, #24]
 800d0d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800d0e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	1d1a      	adds	r2, r3, #4
 800d0e8:	607a      	str	r2, [r7, #4]
 800d0ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d0ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0f2:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800d0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0f8:	3308      	adds	r3, #8
 800d0fa:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800d0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0fe:	3b08      	subs	r3, #8
 800d100:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800d102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d104:	3b01      	subs	r3, #1
 800d106:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 800d108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f47f af7f 	bne.w	800d00e <stage_rfft_f32+0xba>
}
 800d110:	bf00      	nop
 800d112:	bf00      	nop
 800d114:	3754      	adds	r7, #84	; 0x54
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800d11e:	b480      	push	{r7}
 800d120:	b095      	sub	sp, #84	; 0x54
 800d122:	af00      	add	r7, sp, #0
 800d124:	60f8      	str	r0, [r7, #12]
 800d126:	60b9      	str	r1, [r7, #8]
 800d128:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	695b      	ldr	r3, [r3, #20]
 800d12e:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	881b      	ldrh	r3, [r3, #0]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800d140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800d146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800d14c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d14e:	3308      	adds	r3, #8
 800d150:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800d152:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d156:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d15a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	1d1a      	adds	r2, r3, #4
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d16c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800d170:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d174:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	1d1a      	adds	r2, r3, #4
 800d180:	607a      	str	r2, [r7, #4]
 800d182:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d18a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800d18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d190:	00db      	lsls	r3, r3, #3
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	4413      	add	r3, r2
 800d196:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800d198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d19a:	3308      	adds	r3, #8
 800d19c:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800d19e:	e07c      	b.n	800d29a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800d1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800d1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800d1ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800d1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800d1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ba:	1d1a      	adds	r2, r3, #4
 800d1bc:	64ba      	str	r2, [r7, #72]	; 0x48
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800d1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1c4:	1d1a      	adds	r2, r3, #4
 800d1c6:	64ba      	str	r2, [r7, #72]	; 0x48
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800d1cc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d1d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d1d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800d1dc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d1e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d1e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1e8:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800d1ec:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d1f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1f8:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800d1fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d200:	edd7 7a08 	vldr	s15, [r7, #32]
 800d204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d208:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800d20c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d210:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d214:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d218:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800d21c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d220:	edd7 7a08 	vldr	s15, [r7, #32]
 800d224:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d228:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800d22c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d230:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d234:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d238:	edd7 7a07 	vldr	s15, [r7, #28]
 800d23c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d240:	edd7 7a06 	vldr	s15, [r7, #24]
 800d244:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	1d1a      	adds	r2, r3, #4
 800d24c:	607a      	str	r2, [r7, #4]
 800d24e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d252:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d256:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800d25a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d25e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d262:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d266:	edd7 7a05 	vldr	s15, [r7, #20]
 800d26a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d26e:	edd7 7a04 	vldr	s15, [r7, #16]
 800d272:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	1d1a      	adds	r2, r3, #4
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d280:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d284:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800d288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d28a:	3308      	adds	r3, #8
 800d28c:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800d28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d290:	3b08      	subs	r3, #8
 800d292:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800d294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d296:	3b01      	subs	r3, #1
 800d298:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800d29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f47f af7f 	bne.w	800d1a0 <merge_rfft_f32+0x82>
   }

}
 800d2a2:	bf00      	nop
 800d2a4:	bf00      	nop
 800d2a6:	3754      	adds	r7, #84	; 0x54
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800d2c2:	78fb      	ldrb	r3, [r7, #3]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00b      	beq.n	800d2e0 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	68b9      	ldr	r1, [r7, #8]
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f7ff ff26 	bl	800d11e <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800d2d2:	78fa      	ldrb	r2, [r7, #3]
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	6879      	ldr	r1, [r7, #4]
 800d2d8:	6978      	ldr	r0, [r7, #20]
 800d2da:	f7fe fca9 	bl	800bc30 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800d2de:	e00a      	b.n	800d2f6 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800d2e0:	78fa      	ldrb	r2, [r7, #3]
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	68b9      	ldr	r1, [r7, #8]
 800d2e6:	6978      	ldr	r0, [r7, #20]
 800d2e8:	f7fe fca2 	bl	800bc30 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7ff fe2f 	bl	800cf54 <stage_rfft_f32>
}
 800d2f6:	bf00      	nop
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
	...

0800d300 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d102      	bne.n	800d314 <arm_rfft_32_fast_init_f32+0x14>
 800d30e:	f04f 33ff 	mov.w	r3, #4294967295
 800d312:	e014      	b.n	800d33e <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2110      	movs	r1, #16
 800d318:	4618      	mov	r0, r3
 800d31a:	f7fe fd43 	bl	800bda4 <arm_cfft_init_f32>
 800d31e:	4603      	mov	r3, r0
 800d320:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800d322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 800d32a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d32e:	e006      	b.n	800d33e <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2220      	movs	r2, #32
 800d334:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a03      	ldr	r2, [pc, #12]	; (800d348 <arm_rfft_32_fast_init_f32+0x48>)
 800d33a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	08033ad0 	.word	0x08033ad0

0800d34c <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d102      	bne.n	800d360 <arm_rfft_64_fast_init_f32+0x14>
 800d35a:	f04f 33ff 	mov.w	r3, #4294967295
 800d35e:	e014      	b.n	800d38a <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2120      	movs	r1, #32
 800d364:	4618      	mov	r0, r3
 800d366:	f7fe fd1d 	bl	800bda4 <arm_cfft_init_f32>
 800d36a:	4603      	mov	r3, r0
 800d36c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800d36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d002      	beq.n	800d37c <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 800d376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d37a:	e006      	b.n	800d38a <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2240      	movs	r2, #64	; 0x40
 800d380:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4a03      	ldr	r2, [pc, #12]	; (800d394 <arm_rfft_64_fast_init_f32+0x48>)
 800d386:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	08033b50 	.word	0x08033b50

0800d398 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d102      	bne.n	800d3ac <arm_rfft_128_fast_init_f32+0x14>
 800d3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3aa:	e014      	b.n	800d3d6 <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2140      	movs	r1, #64	; 0x40
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fe fcf7 	bl	800bda4 <arm_cfft_init_f32>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800d3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d002      	beq.n	800d3c8 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 800d3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3c6:	e006      	b.n	800d3d6 <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2280      	movs	r2, #128	; 0x80
 800d3cc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a03      	ldr	r2, [pc, #12]	; (800d3e0 <arm_rfft_128_fast_init_f32+0x48>)
 800d3d2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	08033c50 	.word	0x08033c50

0800d3e4 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d102      	bne.n	800d3f8 <arm_rfft_256_fast_init_f32+0x14>
 800d3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d3f6:	e015      	b.n	800d424 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2180      	movs	r1, #128	; 0x80
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe fcd1 	bl	800bda4 <arm_cfft_init_f32>
 800d402:	4603      	mov	r3, r0
 800d404:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800d406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d002      	beq.n	800d414 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 800d40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d412:	e007      	b.n	800d424 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d41a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a03      	ldr	r2, [pc, #12]	; (800d42c <arm_rfft_256_fast_init_f32+0x48>)
 800d420:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	08033e50 	.word	0x08033e50

0800d430 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d102      	bne.n	800d444 <arm_rfft_512_fast_init_f32+0x14>
 800d43e:	f04f 33ff 	mov.w	r3, #4294967295
 800d442:	e016      	b.n	800d472 <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fcaa 	bl	800bda4 <arm_cfft_init_f32>
 800d450:	4603      	mov	r3, r0
 800d452:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800d454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 800d45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d460:	e007      	b.n	800d472 <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d468:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a03      	ldr	r2, [pc, #12]	; (800d47c <arm_rfft_512_fast_init_f32+0x4c>)
 800d46e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	08034250 	.word	0x08034250

0800d480 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d102      	bne.n	800d494 <arm_rfft_1024_fast_init_f32+0x14>
 800d48e:	f04f 33ff 	mov.w	r3, #4294967295
 800d492:	e016      	b.n	800d4c2 <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe fc82 	bl	800bda4 <arm_cfft_init_f32>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800d4a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d002      	beq.n	800d4b2 <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 800d4ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4b0:	e007      	b.n	800d4c2 <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d4b8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a03      	ldr	r2, [pc, #12]	; (800d4cc <arm_rfft_1024_fast_init_f32+0x4c>)
 800d4be:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	08034a50 	.word	0x08034a50

0800d4d0 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d102      	bne.n	800d4e4 <arm_rfft_2048_fast_init_f32+0x14>
 800d4de:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e2:	e016      	b.n	800d512 <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fe fc5a 	bl	800bda4 <arm_cfft_init_f32>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800d4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 800d4fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d500:	e007      	b.n	800d512 <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d508:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a03      	ldr	r2, [pc, #12]	; (800d51c <arm_rfft_2048_fast_init_f32+0x4c>)
 800d50e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	08035a50 	.word	0x08035a50

0800d520 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d102      	bne.n	800d534 <arm_rfft_4096_fast_init_f32+0x14>
 800d52e:	f04f 33ff 	mov.w	r3, #4294967295
 800d532:	e016      	b.n	800d562 <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe fc32 	bl	800bda4 <arm_cfft_init_f32>
 800d540:	4603      	mov	r3, r0
 800d542:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800d544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 800d54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d550:	e007      	b.n	800d562 <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d558:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a03      	ldr	r2, [pc, #12]	; (800d56c <arm_rfft_4096_fast_init_f32+0x4c>)
 800d55e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800d560:	2300      	movs	r3, #0
}
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	08037a50 	.word	0x08037a50

0800d570 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 800d580:	887b      	ldrh	r3, [r7, #2]
 800d582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d586:	d023      	beq.n	800d5d0 <arm_rfft_fast_init_f32+0x60>
 800d588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d58c:	dc38      	bgt.n	800d600 <arm_rfft_fast_init_f32+0x90>
 800d58e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d592:	d020      	beq.n	800d5d6 <arm_rfft_fast_init_f32+0x66>
 800d594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d598:	dc32      	bgt.n	800d600 <arm_rfft_fast_init_f32+0x90>
 800d59a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d59e:	d01d      	beq.n	800d5dc <arm_rfft_fast_init_f32+0x6c>
 800d5a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5a4:	dc2c      	bgt.n	800d600 <arm_rfft_fast_init_f32+0x90>
 800d5a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5aa:	d01a      	beq.n	800d5e2 <arm_rfft_fast_init_f32+0x72>
 800d5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5b0:	dc26      	bgt.n	800d600 <arm_rfft_fast_init_f32+0x90>
 800d5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5b6:	d017      	beq.n	800d5e8 <arm_rfft_fast_init_f32+0x78>
 800d5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5bc:	dc20      	bgt.n	800d600 <arm_rfft_fast_init_f32+0x90>
 800d5be:	2b80      	cmp	r3, #128	; 0x80
 800d5c0:	d015      	beq.n	800d5ee <arm_rfft_fast_init_f32+0x7e>
 800d5c2:	2b80      	cmp	r3, #128	; 0x80
 800d5c4:	dc1c      	bgt.n	800d600 <arm_rfft_fast_init_f32+0x90>
 800d5c6:	2b20      	cmp	r3, #32
 800d5c8:	d017      	beq.n	800d5fa <arm_rfft_fast_init_f32+0x8a>
 800d5ca:	2b40      	cmp	r3, #64	; 0x40
 800d5cc:	d012      	beq.n	800d5f4 <arm_rfft_fast_init_f32+0x84>
 800d5ce:	e017      	b.n	800d600 <arm_rfft_fast_init_f32+0x90>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 800d5d0:	4b14      	ldr	r3, [pc, #80]	; (800d624 <arm_rfft_fast_init_f32+0xb4>)
 800d5d2:	60fb      	str	r3, [r7, #12]
    break;
 800d5d4:	e017      	b.n	800d606 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 800d5d6:	4b14      	ldr	r3, [pc, #80]	; (800d628 <arm_rfft_fast_init_f32+0xb8>)
 800d5d8:	60fb      	str	r3, [r7, #12]
    break;
 800d5da:	e014      	b.n	800d606 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 800d5dc:	4b13      	ldr	r3, [pc, #76]	; (800d62c <arm_rfft_fast_init_f32+0xbc>)
 800d5de:	60fb      	str	r3, [r7, #12]
    break;
 800d5e0:	e011      	b.n	800d606 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 800d5e2:	4b13      	ldr	r3, [pc, #76]	; (800d630 <arm_rfft_fast_init_f32+0xc0>)
 800d5e4:	60fb      	str	r3, [r7, #12]
    break;
 800d5e6:	e00e      	b.n	800d606 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 800d5e8:	4b12      	ldr	r3, [pc, #72]	; (800d634 <arm_rfft_fast_init_f32+0xc4>)
 800d5ea:	60fb      	str	r3, [r7, #12]
    break;
 800d5ec:	e00b      	b.n	800d606 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 800d5ee:	4b12      	ldr	r3, [pc, #72]	; (800d638 <arm_rfft_fast_init_f32+0xc8>)
 800d5f0:	60fb      	str	r3, [r7, #12]
    break;
 800d5f2:	e008      	b.n	800d606 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 800d5f4:	4b11      	ldr	r3, [pc, #68]	; (800d63c <arm_rfft_fast_init_f32+0xcc>)
 800d5f6:	60fb      	str	r3, [r7, #12]
    break;
 800d5f8:	e005      	b.n	800d606 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 800d5fa:	4b11      	ldr	r3, [pc, #68]	; (800d640 <arm_rfft_fast_init_f32+0xd0>)
 800d5fc:	60fb      	str	r3, [r7, #12]
    break;
 800d5fe:	e002      	b.n	800d606 <arm_rfft_fast_init_f32+0x96>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 800d600:	f04f 33ff 	mov.w	r3, #4294967295
 800d604:	e009      	b.n	800d61a <arm_rfft_fast_init_f32+0xaa>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d102      	bne.n	800d612 <arm_rfft_fast_init_f32+0xa2>
 800d60c:	f04f 33ff 	mov.w	r3, #4294967295
 800d610:	e003      	b.n	800d61a <arm_rfft_fast_init_f32+0xaa>
  return fptr( S );
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	4798      	blx	r3
 800d618:	4603      	mov	r3, r0

}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	0800d521 	.word	0x0800d521
 800d628:	0800d4d1 	.word	0x0800d4d1
 800d62c:	0800d481 	.word	0x0800d481
 800d630:	0800d431 	.word	0x0800d431
 800d634:	0800d3e5 	.word	0x0800d3e5
 800d638:	0800d399 	.word	0x0800d399
 800d63c:	0800d34d 	.word	0x0800d34d
 800d640:	0800d301 	.word	0x0800d301

0800d644 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d64e:	ed97 0a01 	vldr	s0, [r7, #4]
 800d652:	f009 ff7f 	bl	8017554 <cosf>
 800d656:	eef0 7a40 	vmov.f32	s15, s0
 800d65a:	eeb0 0a67 	vmov.f32	s0, s15
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d66e:	ed97 0a01 	vldr	s0, [r7, #4]
 800d672:	f00a f83b 	bl	80176ec <sinf>
 800d676:	eef0 7a40 	vmov.f32	s15, s0
 800d67a:	eeb0 0a67 	vmov.f32	s0, s15
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	0000      	movs	r0, r0
	...

0800d688 <_ZN2ei3dct9transformEPfj>:
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327950288
#endif // M_PI

// DCT type II, unscaled
int ei::dct::transform(float vector[], size_t len) {
 800d688:	b5b0      	push	{r4, r5, r7, lr}
 800d68a:	ed2d 8b02 	vpush	{d8}
 800d68e:	b08e      	sub	sp, #56	; 0x38
 800d690:	af02      	add	r7, sp, #8
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
	const size_t fft_data_out_size = (len / 2 + 1) * sizeof(ei::fft_complex_t);
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	085b      	lsrs	r3, r3, #1
 800d69a:	3301      	adds	r3, #1
 800d69c:	00db      	lsls	r3, r3, #3
 800d69e:	627b      	str	r3, [r7, #36]	; 0x24
	const size_t fft_data_in_size = len * sizeof(float);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	623b      	str	r3, [r7, #32]

	// Allocate KissFFT input / output buffer
    fft_complex_t *fft_data_out =
		(ei::fft_complex_t*)ei_dsp_calloc(fft_data_out_size, 1);
 800d6a6:	2101      	movs	r1, #1
 800d6a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6aa:	f00c fd79 	bl	801a1a0 <calloc>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	61fb      	str	r3, [r7, #28]
	if (!fft_data_out) {
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d101      	bne.n	800d6bc <_ZN2ei3dct9transformEPfj+0x34>
		return ei::EIDSP_OUT_OF_MEM;
 800d6b8:	4b5f      	ldr	r3, [pc, #380]	; (800d838 <_ZN2ei3dct9transformEPfj+0x1b0>)
 800d6ba:	e0b1      	b.n	800d820 <_ZN2ei3dct9transformEPfj+0x198>
	}

    float *fft_data_in = (float*)ei_dsp_calloc(fft_data_in_size, 1);
 800d6bc:	2101      	movs	r1, #1
 800d6be:	6a38      	ldr	r0, [r7, #32]
 800d6c0:	f00c fd6e 	bl	801a1a0 <calloc>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	61bb      	str	r3, [r7, #24]
	if (!fft_data_in) {
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d104      	bne.n	800d6d8 <_ZN2ei3dct9transformEPfj+0x50>
		ei_dsp_free(fft_data_out, fft_data_out_size);
 800d6ce:	69f8      	ldr	r0, [r7, #28]
 800d6d0:	f00c fe38 	bl	801a344 <free>
		return ei::EIDSP_OUT_OF_MEM;
 800d6d4:	4b58      	ldr	r3, [pc, #352]	; (800d838 <_ZN2ei3dct9transformEPfj+0x1b0>)
 800d6d6:	e0a3      	b.n	800d820 <_ZN2ei3dct9transformEPfj+0x198>
	}

	// Preprocess the input buffer with the data from the vector
	size_t halfLen = len / 2;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	085b      	lsrs	r3, r3, #1
 800d6dc:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < halfLen; i++) {
 800d6de:	2300      	movs	r3, #0
 800d6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d21b      	bcs.n	800d722 <_ZN2ei3dct9transformEPfj+0x9a>
		fft_data_in[i] = vector[i * 2];
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	00db      	lsls	r3, r3, #3
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	441a      	add	r2, r3
 800d6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	69b9      	ldr	r1, [r7, #24]
 800d6f8:	440b      	add	r3, r1
 800d6fa:	6812      	ldr	r2, [r2, #0]
 800d6fc:	601a      	str	r2, [r3, #0]
		fft_data_in[len - 1 - i] = vector[i * 2 + 1];
 800d6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d700:	00db      	lsls	r3, r3, #3
 800d702:	3304      	adds	r3, #4
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	441a      	add	r2, r3
 800d708:	6839      	ldr	r1, [r7, #0]
 800d70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70c:	1acb      	subs	r3, r1, r3
 800d70e:	3b01      	subs	r3, #1
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	69b9      	ldr	r1, [r7, #24]
 800d714:	440b      	add	r3, r1
 800d716:	6812      	ldr	r2, [r2, #0]
 800d718:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < halfLen; i++) {
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	3301      	adds	r3, #1
 800d71e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d720:	e7df      	b.n	800d6e2 <_ZN2ei3dct9transformEPfj+0x5a>
	}
	if (len % 2 == 1) {
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00c      	beq.n	800d746 <_ZN2ei3dct9transformEPfj+0xbe>
		fft_data_in[halfLen] = vector[len - 1];
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d732:	3b01      	subs	r3, #1
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	441a      	add	r2, r3
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	69b9      	ldr	r1, [r7, #24]
 800d740:	440b      	add	r3, r1
 800d742:	6812      	ldr	r2, [r2, #0]
 800d744:	601a      	str	r2, [r3, #0]
	}

	int r = ei::numpy::rfft(fft_data_in, len, fft_data_out, (len / 2 + 1), len);
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	085b      	lsrs	r3, r3, #1
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	4613      	mov	r3, r2
 800d752:	69fa      	ldr	r2, [r7, #28]
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	69b8      	ldr	r0, [r7, #24]
 800d758:	f7f4 fcce 	bl	80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 800d75c:	6138      	str	r0, [r7, #16]
	if (r != 0) {
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d007      	beq.n	800d774 <_ZN2ei3dct9transformEPfj+0xec>
		ei_dsp_free(fft_data_in, fft_data_in_size);
 800d764:	69b8      	ldr	r0, [r7, #24]
 800d766:	f00c fded 	bl	801a344 <free>
		ei_dsp_free(fft_data_out, fft_data_out_size);
 800d76a:	69f8      	ldr	r0, [r7, #28]
 800d76c:	f00c fdea 	bl	801a344 <free>
		return r;
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	e055      	b.n	800d820 <_ZN2ei3dct9transformEPfj+0x198>
	}

	for (size_t i = 0; i < len / 2 + 1; i++) {
 800d774:	2300      	movs	r3, #0
 800d776:	62bb      	str	r3, [r7, #40]	; 0x28
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	085b      	lsrs	r3, r3, #1
 800d77c:	3301      	adds	r3, #1
 800d77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d780:	429a      	cmp	r2, r3
 800d782:	d246      	bcs.n	800d812 <_ZN2ei3dct9transformEPfj+0x18a>
		float temp = i * M_PI / (len * 2);
 800d784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d786:	f7f2 fedd 	bl	8000544 <__aeabi_ui2d>
 800d78a:	a329      	add	r3, pc, #164	; (adr r3, 800d830 <_ZN2ei3dct9transformEPfj+0x1a8>)
 800d78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d790:	f7f2 ff52 	bl	8000638 <__aeabi_dmul>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	4614      	mov	r4, r2
 800d79a:	461d      	mov	r5, r3
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	005b      	lsls	r3, r3, #1
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7f2 fecf 	bl	8000544 <__aeabi_ui2d>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	f7f3 f86d 	bl	800088c <__aeabi_ddiv>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	f7f3 fa35 	bl	8000c28 <__aeabi_d2f>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	60fb      	str	r3, [r7, #12]
		vector[i] = fft_data_out[i].r * cos(temp) + fft_data_out[i].i * sin(temp);
 800d7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c4:	00db      	lsls	r3, r3, #3
 800d7c6:	69fa      	ldr	r2, [r7, #28]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	ed93 8a00 	vldr	s16, [r3]
 800d7ce:	ed97 0a03 	vldr	s0, [r7, #12]
 800d7d2:	f7ff ff37 	bl	800d644 <_ZSt3cosf>
 800d7d6:	eef0 7a40 	vmov.f32	s15, s0
 800d7da:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	00db      	lsls	r3, r3, #3
 800d7e2:	69fa      	ldr	r2, [r7, #28]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	edd3 8a01 	vldr	s17, [r3, #4]
 800d7ea:	ed97 0a03 	vldr	s0, [r7, #12]
 800d7ee:	f7ff ff39 	bl	800d664 <_ZSt3sinf>
 800d7f2:	eef0 7a40 	vmov.f32	s15, s0
 800d7f6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	4413      	add	r3, r2
 800d802:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d806:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < len / 2 + 1; i++) {
 800d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80c:	3301      	adds	r3, #1
 800d80e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d810:	e7b2      	b.n	800d778 <_ZN2ei3dct9transformEPfj+0xf0>
	}

	ei_dsp_free(fft_data_in, fft_data_in_size);
 800d812:	69b8      	ldr	r0, [r7, #24]
 800d814:	f00c fd96 	bl	801a344 <free>
	ei_dsp_free(fft_data_out, fft_data_out_size);
 800d818:	69f8      	ldr	r0, [r7, #28]
 800d81a:	f00c fd93 	bl	801a344 <free>

	return 0;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3730      	adds	r7, #48	; 0x30
 800d824:	46bd      	mov	sp, r7
 800d826:	ecbd 8b02 	vpop	{d8}
 800d82a:	bdb0      	pop	{r4, r5, r7, pc}
 800d82c:	f3af 8000 	nop.w
 800d830:	54442d18 	.word	0x54442d18
 800d834:	400921fb 	.word	0x400921fb
 800d838:	fffffc16 	.word	0xfffffc16

0800d83c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800d83c:	b480      	push	{r7}
 800d83e:	b089      	sub	sp, #36	; 0x24
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d850:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	00db      	lsls	r3, r3, #3
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	ed93 7a00 	vldr	s14, [r3]
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	edd3 7a00 	vldr	s15, [r3]
 800d868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	edd3 6a01 	vldr	s13, [r3, #4]
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	edd3 7a01 	vldr	s15, [r3, #4]
 800d878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d87c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d880:	edc7 7a04 	vstr	s15, [r7, #16]
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	ed93 7a00 	vldr	s14, [r3]
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d890:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	edd3 6a01 	vldr	s13, [r3, #4]
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	edd3 7a00 	vldr	s15, [r3]
 800d8a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8a8:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	00db      	lsls	r3, r3, #3
 800d8b0:	69ba      	ldr	r2, [r7, #24]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	ed93 7a00 	vldr	s14, [r3]
 800d8bc:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	edc3 7a00 	vstr	s15, [r3]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	ed93 7a01 	vldr	s14, [r3, #4]
 800d8d0:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	ed93 7a00 	vldr	s14, [r3]
 800d8e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	edc3 7a00 	vstr	s15, [r3]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	ed93 7a01 	vldr	s14, [r3, #4]
 800d8f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	3308      	adds	r3, #8
 800d90a:	61fb      	str	r3, [r7, #28]
        ++Fout;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	3308      	adds	r3, #8
 800d910:	60fb      	str	r3, [r7, #12]
    }while (--m);
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	3b01      	subs	r3, #1
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	bf14      	ite	ne
 800d91e:	2301      	movne	r3, #1
 800d920:	2300      	moveq	r3, #0
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	d000      	beq.n	800d92a <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 800d928:	e798      	b.n	800d85c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 800d92a:	bf00      	nop
 800d92c:	3724      	adds	r7, #36	; 0x24
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 800d936:	b480      	push	{r7}
 800d938:	b097      	sub	sp, #92	; 0x5c
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	60b9      	str	r1, [r7, #8]
 800d940:	607a      	str	r2, [r7, #4]
 800d942:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	005b      	lsls	r3, r3, #1
 800d94c:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 800d94e:	683a      	ldr	r2, [r7, #0]
 800d950:	4613      	mov	r3, r2
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	4413      	add	r3, r2
 800d956:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d95e:	657b      	str	r3, [r7, #84]	; 0x54
 800d960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d962:	653b      	str	r3, [r7, #80]	; 0x50
 800d964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d966:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	00db      	lsls	r3, r3, #3
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	ed93 7a00 	vldr	s14, [r3]
 800d974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d976:	edd3 7a00 	vldr	s15, [r3]
 800d97a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	00db      	lsls	r3, r3, #3
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	4413      	add	r3, r2
 800d986:	edd3 6a01 	vldr	s13, [r3, #4]
 800d98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d98c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d994:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d998:	edc7 7a04 	vstr	s15, [r7, #16]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	00db      	lsls	r3, r3, #3
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	ed93 7a00 	vldr	s14, [r3]
 800d9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9aa:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	00db      	lsls	r3, r3, #3
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	edd3 6a01 	vldr	s13, [r3, #4]
 800d9be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9c0:	edd3 7a00 	vldr	s15, [r3]
 800d9c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9cc:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 800d9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9d2:	00db      	lsls	r3, r3, #3
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	ed93 7a00 	vldr	s14, [r3]
 800d9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9de:	edd3 7a00 	vldr	s15, [r3]
 800d9e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	edd3 6a01 	vldr	s13, [r3, #4]
 800d9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f4:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da00:	edc7 7a06 	vstr	s15, [r7, #24]
 800da04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da06:	00db      	lsls	r3, r3, #3
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	4413      	add	r3, r2
 800da0c:	ed93 7a00 	vldr	s14, [r3]
 800da10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da12:	edd3 7a01 	vldr	s15, [r3, #4]
 800da16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da1c:	00db      	lsls	r3, r3, #3
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	4413      	add	r3, r2
 800da22:	edd3 6a01 	vldr	s13, [r3, #4]
 800da26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da28:	edd3 7a00 	vldr	s15, [r3]
 800da2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da34:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 800da38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da3a:	00db      	lsls	r3, r3, #3
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	4413      	add	r3, r2
 800da40:	ed93 7a00 	vldr	s14, [r3]
 800da44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da46:	edd3 7a00 	vldr	s15, [r3]
 800da4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	4413      	add	r3, r2
 800da56:	edd3 6a01 	vldr	s13, [r3, #4]
 800da5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da5c:	edd3 7a01 	vldr	s15, [r3, #4]
 800da60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da68:	edc7 7a08 	vstr	s15, [r7, #32]
 800da6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	4413      	add	r3, r2
 800da74:	ed93 7a00 	vldr	s14, [r3]
 800da78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da7a:	edd3 7a01 	vldr	s15, [r3, #4]
 800da7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da84:	00db      	lsls	r3, r3, #3
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	4413      	add	r3, r2
 800da8a:	edd3 6a01 	vldr	s13, [r3, #4]
 800da8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da90:	edd3 7a00 	vldr	s15, [r3]
 800da94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	ed93 7a00 	vldr	s14, [r3]
 800daa6:	edd7 7a06 	vldr	s15, [r7, #24]
 800daaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daae:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	ed93 7a01 	vldr	s14, [r3, #4]
 800dab8:	edd7 7a07 	vldr	s15, [r7, #28]
 800dabc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dac0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	ed93 7a00 	vldr	s14, [r3]
 800daca:	edd7 7a06 	vldr	s15, [r7, #24]
 800dace:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	edc3 7a00 	vstr	s15, [r3]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	ed93 7a01 	vldr	s14, [r3, #4]
 800dade:	edd7 7a07 	vldr	s15, [r7, #28]
 800dae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 800daec:	ed97 7a04 	vldr	s14, [r7, #16]
 800daf0:	edd7 7a08 	vldr	s15, [r7, #32]
 800daf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daf8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800dafc:	ed97 7a05 	vldr	s14, [r7, #20]
 800db00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800db04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db08:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 800db0c:	ed97 7a04 	vldr	s14, [r7, #16]
 800db10:	edd7 7a08 	vldr	s15, [r7, #32]
 800db14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db18:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800db1c:	ed97 7a05 	vldr	s14, [r7, #20]
 800db20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800db24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db28:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	ed93 7a00 	vldr	s14, [r3]
 800db32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	4413      	add	r3, r2
 800db3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db42:	edc3 7a00 	vstr	s15, [r3]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	ed93 7a01 	vldr	s14, [r3, #4]
 800db4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800db50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db52:	00db      	lsls	r3, r3, #3
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	4413      	add	r3, r2
 800db58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db5c:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db66:	4413      	add	r3, r2
 800db68:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	011b      	lsls	r3, r3, #4
 800db6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db70:	4413      	add	r3, r2
 800db72:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 800db74:	68ba      	ldr	r2, [r7, #8]
 800db76:	4613      	mov	r3, r2
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	4413      	add	r3, r2
 800db7c:	00db      	lsls	r3, r3, #3
 800db7e:	461a      	mov	r2, r3
 800db80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db82:	4413      	add	r3, r2
 800db84:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	ed93 7a00 	vldr	s14, [r3]
 800db8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	edc3 7a00 	vstr	s15, [r3]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	ed93 7a01 	vldr	s14, [r3, #4]
 800dba0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d030      	beq.n	800dc18 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 800dbb6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800dbba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	00db      	lsls	r3, r3, #3
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbca:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 800dbce:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dbd2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	00db      	lsls	r3, r3, #3
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	4413      	add	r3, r2
 800dbde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbe2:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 800dbe6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800dbea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbfa:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 800dbfe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dc02:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc08:	00db      	lsls	r3, r3, #3
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc12:	edc3 7a01 	vstr	s15, [r3, #4]
 800dc16:	e02f      	b.n	800dc78 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 800dc18:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800dc1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	4413      	add	r3, r2
 800dc28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc2c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 800dc30:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dc34:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	00db      	lsls	r3, r3, #3
 800dc3c:	68fa      	ldr	r2, [r7, #12]
 800dc3e:	4413      	add	r3, r2
 800dc40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc44:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 800dc48:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800dc4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dc50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc52:	00db      	lsls	r3, r3, #3
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	4413      	add	r3, r2
 800dc58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc5c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 800dc60:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dc64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dc68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc6a:	00db      	lsls	r3, r3, #3
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	4413      	add	r3, r2
 800dc70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc74:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3308      	adds	r3, #8
 800dc7c:	60fb      	str	r3, [r7, #12]
    }while(--k);
 800dc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc80:	3b01      	subs	r3, #1
 800dc82:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	bf14      	ite	ne
 800dc8a:	2301      	movne	r3, #1
 800dc8c:	2300      	moveq	r3, #0
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d000      	beq.n	800dc96 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 800dc94:	e668      	b.n	800d968 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 800dc96:	bf00      	nop
 800dc98:	375c      	adds	r7, #92	; 0x5c
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
	...

0800dca4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 800dca4:	b5b0      	push	{r4, r5, r7, lr}
 800dca6:	b094      	sub	sp, #80	; 0x50
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
     size_t k=m;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	fb02 f303 	mul.w	r3, r2, r3
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	3321      	adds	r3, #33	; 0x21
 800dcc8:	f107 0210 	add.w	r2, r7, #16
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	440b      	add	r3, r1
 800dcd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dcd4:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800dcde:	647b      	str	r3, [r7, #68]	; 0x44
 800dce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dce2:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	4413      	add	r3, r2
 800dcec:	ed93 7a00 	vldr	s14, [r3]
 800dcf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcf2:	edd3 7a00 	vldr	s15, [r3]
 800dcf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	00db      	lsls	r3, r3, #3
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	4413      	add	r3, r2
 800dd02:	edd3 6a01 	vldr	s13, [r3, #4]
 800dd06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd08:	edd3 7a01 	vldr	s15, [r3, #4]
 800dd0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd14:	edc7 7a08 	vstr	s15, [r7, #32]
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	4413      	add	r3, r2
 800dd20:	ed93 7a00 	vldr	s14, [r3]
 800dd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd26:	edd3 7a01 	vldr	s15, [r3, #4]
 800dd2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	00db      	lsls	r3, r3, #3
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	4413      	add	r3, r2
 800dd36:	edd3 6a01 	vldr	s13, [r3, #4]
 800dd3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd3c:	edd3 7a00 	vldr	s15, [r3]
 800dd40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd48:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 800dd4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd4e:	00db      	lsls	r3, r3, #3
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	4413      	add	r3, r2
 800dd54:	ed93 7a00 	vldr	s14, [r3]
 800dd58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd5a:	edd3 7a00 	vldr	s15, [r3]
 800dd5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd64:	00db      	lsls	r3, r3, #3
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	4413      	add	r3, r2
 800dd6a:	edd3 6a01 	vldr	s13, [r3, #4]
 800dd6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd70:	edd3 7a01 	vldr	s15, [r3, #4]
 800dd74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd7c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800dd80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd82:	00db      	lsls	r3, r3, #3
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	4413      	add	r3, r2
 800dd88:	ed93 7a00 	vldr	s14, [r3]
 800dd8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd8e:	edd3 7a01 	vldr	s15, [r3, #4]
 800dd92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd98:	00db      	lsls	r3, r3, #3
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	edd3 6a01 	vldr	s13, [r3, #4]
 800dda2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dda4:	edd3 7a00 	vldr	s15, [r3]
 800dda8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ddac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddb0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 800ddb4:	ed97 7a08 	vldr	s14, [r7, #32]
 800ddb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ddbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddc0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800ddc4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ddc8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ddcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddd0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 800ddd4:	ed97 7a08 	vldr	s14, [r7, #32]
 800ddd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dde0:	edc7 7a06 	vstr	s15, [r7, #24]
 800dde4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800dde8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ddec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddf0:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	00db      	lsls	r3, r3, #3
 800ddf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddfa:	4413      	add	r3, r2
 800ddfc:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	011b      	lsls	r3, r3, #4
 800de02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de04:	4413      	add	r3, r2
 800de06:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7f2 fbbb 	bl	8000588 <__aeabi_f2d>
 800de12:	4604      	mov	r4, r0
 800de14:	460d      	mov	r5, r1
 800de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de18:	4618      	mov	r0, r3
 800de1a:	f7f2 fbb5 	bl	8000588 <__aeabi_f2d>
 800de1e:	f04f 0200 	mov.w	r2, #0
 800de22:	4b57      	ldr	r3, [pc, #348]	; (800df80 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800de24:	f7f2 fc08 	bl	8000638 <__aeabi_dmul>
 800de28:	4602      	mov	r2, r0
 800de2a:	460b      	mov	r3, r1
 800de2c:	4620      	mov	r0, r4
 800de2e:	4629      	mov	r1, r5
 800de30:	f7f2 fa4a 	bl	80002c8 <__aeabi_dsub>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4610      	mov	r0, r2
 800de3a:	4619      	mov	r1, r3
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	18d4      	adds	r4, r2, r3
 800de44:	f7f2 fef0 	bl	8000c28 <__aeabi_d2f>
 800de48:	4603      	mov	r3, r0
 800de4a:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	4618      	mov	r0, r3
 800de52:	f7f2 fb99 	bl	8000588 <__aeabi_f2d>
 800de56:	4604      	mov	r4, r0
 800de58:	460d      	mov	r5, r1
 800de5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7f2 fb93 	bl	8000588 <__aeabi_f2d>
 800de62:	f04f 0200 	mov.w	r2, #0
 800de66:	4b46      	ldr	r3, [pc, #280]	; (800df80 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800de68:	f7f2 fbe6 	bl	8000638 <__aeabi_dmul>
 800de6c:	4602      	mov	r2, r0
 800de6e:	460b      	mov	r3, r1
 800de70:	4620      	mov	r0, r4
 800de72:	4629      	mov	r1, r5
 800de74:	f7f2 fa28 	bl	80002c8 <__aeabi_dsub>
 800de78:	4602      	mov	r2, r0
 800de7a:	460b      	mov	r3, r1
 800de7c:	4610      	mov	r0, r2
 800de7e:	4619      	mov	r1, r3
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	00db      	lsls	r3, r3, #3
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	18d4      	adds	r4, r2, r3
 800de88:	f7f2 fece 	bl	8000c28 <__aeabi_d2f>
 800de8c:	4603      	mov	r3, r0
 800de8e:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 800de90:	ed97 7a06 	vldr	s14, [r7, #24]
 800de94:	edd7 7a05 	vldr	s15, [r7, #20]
 800de98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de9c:	edc7 7a06 	vstr	s15, [r7, #24]
 800dea0:	ed97 7a07 	vldr	s14, [r7, #28]
 800dea4:	edd7 7a05 	vldr	s15, [r7, #20]
 800dea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deac:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	ed93 7a00 	vldr	s14, [r3]
 800deb6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800deba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	edc3 7a00 	vstr	s15, [r3]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	ed93 7a01 	vldr	s14, [r3, #4]
 800deca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dece:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	00db      	lsls	r3, r3, #3
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	4413      	add	r3, r2
 800dee0:	ed93 7a00 	vldr	s14, [r3]
 800dee4:	edd7 7a07 	vldr	s15, [r7, #28]
 800dee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	4413      	add	r3, r2
 800def0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800def4:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	00db      	lsls	r3, r3, #3
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	4413      	add	r3, r2
 800df00:	ed93 7a01 	vldr	s14, [r3, #4]
 800df04:	edd7 7a06 	vldr	s15, [r7, #24]
 800df08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df0a:	00db      	lsls	r3, r3, #3
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	4413      	add	r3, r2
 800df10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df14:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	4413      	add	r3, r2
 800df20:	ed93 7a00 	vldr	s14, [r3]
 800df24:	edd7 7a07 	vldr	s15, [r7, #28]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	4413      	add	r3, r2
 800df30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df34:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	00db      	lsls	r3, r3, #3
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	4413      	add	r3, r2
 800df40:	ed93 7a01 	vldr	s14, [r3, #4]
 800df44:	edd7 7a06 	vldr	s15, [r7, #24]
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	00db      	lsls	r3, r3, #3
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	4413      	add	r3, r2
 800df50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df54:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	3308      	adds	r3, #8
 800df5c:	60fb      	str	r3, [r7, #12]
     }while(--k);
 800df5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df60:	3b01      	subs	r3, #1
 800df62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df66:	2b00      	cmp	r3, #0
 800df68:	bf14      	ite	ne
 800df6a:	2301      	movne	r3, #1
 800df6c:	2300      	moveq	r3, #0
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	2b00      	cmp	r3, #0
 800df72:	d000      	beq.n	800df76 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 800df74:	e6b6      	b.n	800dce4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 800df76:	bf00      	nop
 800df78:	3750      	adds	r7, #80	; 0x50
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bdb0      	pop	{r4, r5, r7, pc}
 800df7e:	bf00      	nop
 800df80:	3fe00000 	.word	0x3fe00000

0800df84 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800df84:	b480      	push	{r7}
 800df86:	b0ab      	sub	sp, #172	; 0xac
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800df98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	68ba      	ldr	r2, [r7, #8]
 800dfa0:	fb02 f303 	mul.w	r3, r2, r3
 800dfa4:	00db      	lsls	r3, r3, #3
 800dfa6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dfaa:	441a      	add	r2, r3
 800dfac:	f107 0318 	add.w	r3, r7, #24
 800dfb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfb4:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	fb02 f303 	mul.w	r3, r2, r3
 800dfc0:	011b      	lsls	r3, r3, #4
 800dfc2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dfc6:	441a      	add	r2, r3
 800dfc8:	f107 0310 	add.w	r3, r7, #16
 800dfcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfd0:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	00db      	lsls	r3, r3, #3
 800dfde:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dfe2:	4413      	add	r3, r2
 800dfe4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	011b      	lsls	r3, r3, #4
 800dfec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dff0:	4413      	add	r3, r2
 800dff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	4613      	mov	r3, r2
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	4413      	add	r3, r2
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	461a      	mov	r2, r3
 800e002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e006:	4413      	add	r3, r2
 800e008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	015b      	lsls	r3, r3, #5
 800e010:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e014:	4413      	add	r3, r2
 800e016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800e020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 800e024:	2300      	movs	r3, #0
 800e026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e02a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	429a      	cmp	r2, r3
 800e032:	f280 82a9 	bge.w	800e588 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 800e036:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e03a:	f107 0320 	add.w	r3, r7, #32
 800e03e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e042:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 800e046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e04a:	ed93 7a00 	vldr	s14, [r3]
 800e04e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	fb02 f303 	mul.w	r3, r2, r3
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e05e:	4413      	add	r3, r2
 800e060:	edd3 7a00 	vldr	s15, [r3]
 800e064:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e068:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e06c:	edd3 6a01 	vldr	s13, [r3, #4]
 800e070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	fb02 f303 	mul.w	r3, r2, r3
 800e07a:	00db      	lsls	r3, r3, #3
 800e07c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e080:	4413      	add	r3, r2
 800e082:	edd3 7a01 	vldr	s15, [r3, #4]
 800e086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e08a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e08e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800e092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e096:	ed93 7a00 	vldr	s14, [r3]
 800e09a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	fb02 f303 	mul.w	r3, r2, r3
 800e0a4:	00db      	lsls	r3, r3, #3
 800e0a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e0aa:	4413      	add	r3, r2
 800e0ac:	edd3 7a01 	vldr	s15, [r3, #4]
 800e0b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e0b8:	edd3 6a01 	vldr	s13, [r3, #4]
 800e0bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0c0:	68ba      	ldr	r2, [r7, #8]
 800e0c2:	fb02 f303 	mul.w	r3, r2, r3
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e0cc:	4413      	add	r3, r2
 800e0ce:	edd3 7a00 	vldr	s15, [r3]
 800e0d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 800e0de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0e2:	ed93 7a00 	vldr	s14, [r3]
 800e0e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	fb02 f303 	mul.w	r3, r2, r3
 800e0f0:	011b      	lsls	r3, r3, #4
 800e0f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e0f6:	4413      	add	r3, r2
 800e0f8:	edd3 7a00 	vldr	s15, [r3]
 800e0fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e104:	edd3 6a01 	vldr	s13, [r3, #4]
 800e108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e10c:	68ba      	ldr	r2, [r7, #8]
 800e10e:	fb02 f303 	mul.w	r3, r2, r3
 800e112:	011b      	lsls	r3, r3, #4
 800e114:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e118:	4413      	add	r3, r2
 800e11a:	edd3 7a01 	vldr	s15, [r3, #4]
 800e11e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e122:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e126:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800e12a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e12e:	ed93 7a00 	vldr	s14, [r3]
 800e132:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	fb02 f303 	mul.w	r3, r2, r3
 800e13c:	011b      	lsls	r3, r3, #4
 800e13e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e142:	4413      	add	r3, r2
 800e144:	edd3 7a01 	vldr	s15, [r3, #4]
 800e148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e14c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e150:	edd3 6a01 	vldr	s13, [r3, #4]
 800e154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e158:	68ba      	ldr	r2, [r7, #8]
 800e15a:	fb02 f303 	mul.w	r3, r2, r3
 800e15e:	011b      	lsls	r3, r3, #4
 800e160:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e164:	4413      	add	r3, r2
 800e166:	edd3 7a00 	vldr	s15, [r3]
 800e16a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e16e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e172:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 800e176:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e17a:	ed93 7a00 	vldr	s14, [r3]
 800e17e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	fb02 f203 	mul.w	r2, r2, r3
 800e188:	4613      	mov	r3, r2
 800e18a:	005b      	lsls	r3, r3, #1
 800e18c:	4413      	add	r3, r2
 800e18e:	00db      	lsls	r3, r3, #3
 800e190:	461a      	mov	r2, r3
 800e192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e196:	4413      	add	r3, r2
 800e198:	edd3 7a00 	vldr	s15, [r3]
 800e19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e1a4:	edd3 6a01 	vldr	s13, [r3, #4]
 800e1a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	fb02 f203 	mul.w	r2, r2, r3
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	005b      	lsls	r3, r3, #1
 800e1b6:	4413      	add	r3, r2
 800e1b8:	00db      	lsls	r3, r3, #3
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1c0:	4413      	add	r3, r2
 800e1c2:	edd3 7a01 	vldr	s15, [r3, #4]
 800e1c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800e1d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e1d6:	ed93 7a00 	vldr	s14, [r3]
 800e1da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	fb02 f203 	mul.w	r2, r2, r3
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	005b      	lsls	r3, r3, #1
 800e1e8:	4413      	add	r3, r2
 800e1ea:	00db      	lsls	r3, r3, #3
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1f2:	4413      	add	r3, r2
 800e1f4:	edd3 7a01 	vldr	s15, [r3, #4]
 800e1f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e200:	edd3 6a01 	vldr	s13, [r3, #4]
 800e204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	fb02 f203 	mul.w	r2, r2, r3
 800e20e:	4613      	mov	r3, r2
 800e210:	005b      	lsls	r3, r3, #1
 800e212:	4413      	add	r3, r2
 800e214:	00db      	lsls	r3, r3, #3
 800e216:	461a      	mov	r2, r3
 800e218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e21c:	4413      	add	r3, r2
 800e21e:	edd3 7a00 	vldr	s15, [r3]
 800e222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e22a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 800e22e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e232:	ed93 7a00 	vldr	s14, [r3]
 800e236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e23a:	68ba      	ldr	r2, [r7, #8]
 800e23c:	fb02 f303 	mul.w	r3, r2, r3
 800e240:	015b      	lsls	r3, r3, #5
 800e242:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e246:	4413      	add	r3, r2
 800e248:	edd3 7a00 	vldr	s15, [r3]
 800e24c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e250:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e254:	edd3 6a01 	vldr	s13, [r3, #4]
 800e258:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	fb02 f303 	mul.w	r3, r2, r3
 800e262:	015b      	lsls	r3, r3, #5
 800e264:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e268:	4413      	add	r3, r2
 800e26a:	edd3 7a01 	vldr	s15, [r3, #4]
 800e26e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e272:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e276:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800e27a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e27e:	ed93 7a00 	vldr	s14, [r3]
 800e282:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	fb02 f303 	mul.w	r3, r2, r3
 800e28c:	015b      	lsls	r3, r3, #5
 800e28e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e292:	4413      	add	r3, r2
 800e294:	edd3 7a01 	vldr	s15, [r3, #4]
 800e298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e29c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e2a0:	edd3 6a01 	vldr	s13, [r3, #4]
 800e2a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	fb02 f303 	mul.w	r3, r2, r3
 800e2ae:	015b      	lsls	r3, r3, #5
 800e2b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e2b4:	4413      	add	r3, r2
 800e2b6:	edd3 7a00 	vldr	s15, [r3]
 800e2ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e2be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2c2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 800e2c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e2ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800e2ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2d2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800e2d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e2da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e2de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2e2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 800e2e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e2ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800e2ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2f2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 800e2f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e2fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e2fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e302:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 800e306:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e30a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e30e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e312:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 800e316:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e31a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e31e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e322:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 800e326:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e32a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e32e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e332:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800e336:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e33a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e33e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e342:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 800e346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e34a:	ed93 7a00 	vldr	s14, [r3]
 800e34e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800e352:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e35a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e35e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e362:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 800e366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e36a:	ed93 7a01 	vldr	s14, [r3, #4]
 800e36e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800e372:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800e376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e37a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e37e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e382:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 800e386:	ed97 7a08 	vldr	s14, [r7, #32]
 800e38a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800e38e:	edd7 7a06 	vldr	s15, [r7, #24]
 800e392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e39a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800e39e:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 800e3ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e3b2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800e3b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800e3ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3c2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800e3c6:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3d2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 800e3d6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800e3da:	edd7 7a07 	vldr	s15, [r7, #28]
 800e3de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3e2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800e3e6:	edd7 7a05 	vldr	s15, [r7, #20]
 800e3ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3f2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 800e3f6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800e3fa:	edd7 7a07 	vldr	s15, [r7, #28]
 800e3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e402:	eeb1 7a67 	vneg.f32	s14, s15
 800e406:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800e40a:	edd7 7a05 	vldr	s15, [r7, #20]
 800e40e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e412:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e416:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 800e41a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800e41e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800e422:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e42a:	edc3 7a00 	vstr	s15, [r3]
 800e42e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800e432:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e43a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e43e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 800e442:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800e446:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800e44a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e44e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e452:	edc3 7a00 	vstr	s15, [r3]
 800e456:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800e45a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e462:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e466:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 800e46a:	ed97 7a08 	vldr	s14, [r7, #32]
 800e46e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800e472:	edd7 7a04 	vldr	s15, [r7, #16]
 800e476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e47a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e47e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800e482:	edd7 7a06 	vldr	s15, [r7, #24]
 800e486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e48a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e48e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 800e492:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e496:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800e49a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e49e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e4a6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800e4aa:	edd7 7a06 	vldr	s15, [r7, #24]
 800e4ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4b6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 800e4ba:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800e4be:	edd7 7a07 	vldr	s15, [r7, #28]
 800e4c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4c6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800e4ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800e4ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4d6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 800e4da:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800e4de:	edd7 7a05 	vldr	s15, [r7, #20]
 800e4e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4e6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800e4ea:	edd7 7a07 	vldr	s15, [r7, #28]
 800e4ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4f6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 800e4fa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800e4fe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800e502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e50a:	edc3 7a00 	vstr	s15, [r3]
 800e50e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800e512:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e51a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e51e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 800e522:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800e526:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800e52a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e52e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e532:	edc3 7a00 	vstr	s15, [r3]
 800e536:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800e53a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e546:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 800e54a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e54e:	3308      	adds	r3, #8
 800e550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e554:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e558:	3308      	adds	r3, #8
 800e55a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e55e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e562:	3308      	adds	r3, #8
 800e564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e56c:	3308      	adds	r3, #8
 800e56e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e572:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e576:	3308      	adds	r3, #8
 800e578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 800e57c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e580:	3301      	adds	r3, #1
 800e582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e586:	e550      	b.n	800e02a <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 800e588:	bf00      	nop
 800e58a:	37ac      	adds	r7, #172	; 0xac
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b08e      	sub	sp, #56	; 0x38
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800e5a8:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 800e5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5b2:	00db      	lsls	r3, r3, #3
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f00b febd 	bl	801a334 <malloc>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	61bb      	str	r3, [r7, #24]

    for ( u=0; u<m; ++u ) {
 800e5be:	2300      	movs	r3, #0
 800e5c0:	637b      	str	r3, [r7, #52]	; 0x34
 800e5c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	f280 80b6 	bge.w	800e738 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a4>
        k=u;
 800e5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ce:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	da14      	bge.n	800e606 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
            scratch[q1] = Fout[ k  ];
 800e5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5de:	00db      	lsls	r3, r3, #3
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	18d1      	adds	r1, r2, r3
 800e5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e6:	00db      	lsls	r3, r3, #3
 800e5e8:	69ba      	ldr	r2, [r7, #24]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	460a      	mov	r2, r1
 800e5ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5f2:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 800e5f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800e5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e600:	3301      	adds	r3, #1
 800e602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e604:	e7e6      	b.n	800e5d4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x40>
        }

        k=u;
 800e606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e608:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800e60a:	2300      	movs	r3, #0
 800e60c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e60e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e612:	429a      	cmp	r2, r3
 800e614:	f280 808c 	bge.w	800e730 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19c>
            int twidx=0;
 800e618:	2300      	movs	r3, #0
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	00db      	lsls	r3, r3, #3
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	4413      	add	r3, r2
 800e624:	69ba      	ldr	r2, [r7, #24]
 800e626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e62a:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 800e62e:	2301      	movs	r3, #1
 800e630:	62bb      	str	r3, [r7, #40]	; 0x28
 800e632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e636:	429a      	cmp	r2, r3
 800e638:	da72      	bge.n	800e720 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18c>
                twidx += fstride * k;
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	fb02 f203 	mul.w	r2, r2, r3
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	4413      	add	r3, r2
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 800e648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	db03      	blt.n	800e658 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc4>
 800e650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	69ba      	ldr	r2, [r7, #24]
 800e65e:	4413      	add	r3, r2
 800e660:	ed93 7a00 	vldr	s14, [r3]
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	6a3a      	ldr	r2, [r7, #32]
 800e66a:	4413      	add	r3, r2
 800e66c:	edd3 7a00 	vldr	s15, [r3]
 800e670:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	00db      	lsls	r3, r3, #3
 800e678:	69ba      	ldr	r2, [r7, #24]
 800e67a:	4413      	add	r3, r2
 800e67c:	edd3 6a01 	vldr	s13, [r3, #4]
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	00db      	lsls	r3, r3, #3
 800e684:	6a3a      	ldr	r2, [r7, #32]
 800e686:	4413      	add	r3, r2
 800e688:	edd3 7a01 	vldr	s15, [r3, #4]
 800e68c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e690:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e694:	edc7 7a04 	vstr	s15, [r7, #16]
 800e698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69a:	00db      	lsls	r3, r3, #3
 800e69c:	69ba      	ldr	r2, [r7, #24]
 800e69e:	4413      	add	r3, r2
 800e6a0:	ed93 7a00 	vldr	s14, [r3]
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	6a3a      	ldr	r2, [r7, #32]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	edd3 7a01 	vldr	s15, [r3, #4]
 800e6b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	00db      	lsls	r3, r3, #3
 800e6b8:	69ba      	ldr	r2, [r7, #24]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	edd3 6a01 	vldr	s13, [r3, #4]
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	6a3a      	ldr	r2, [r7, #32]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	edd3 7a00 	vldr	s15, [r3]
 800e6cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6d4:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	4413      	add	r3, r2
 800e6e0:	ed93 7a00 	vldr	s14, [r3]
 800e6e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800e6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ea:	00db      	lsls	r3, r3, #3
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6f4:	edc3 7a00 	vstr	s15, [r3]
 800e6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	4413      	add	r3, r2
 800e700:	ed93 7a01 	vldr	s14, [r3, #4]
 800e704:	edd7 7a05 	vldr	s15, [r7, #20]
 800e708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70a:	00db      	lsls	r3, r3, #3
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	4413      	add	r3, r2
 800e710:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e714:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	3301      	adds	r3, #1
 800e71c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e71e:	e788      	b.n	800e632 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9e>
            }
            k += m;
 800e720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	4413      	add	r3, r2
 800e726:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	3301      	adds	r3, #1
 800e72c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e72e:	e76e      	b.n	800e60e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x7a>
    for ( u=0; u<m; ++u ) {
 800e730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e732:	3301      	adds	r3, #1
 800e734:	637b      	str	r3, [r7, #52]	; 0x34
 800e736:	e744      	b.n	800e5c2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 800e738:	69b8      	ldr	r0, [r7, #24]
 800e73a:	f00b fe03 	bl	801a344 <free>
}
 800e73e:	bf00      	nop
 800e740:	3738      	adds	r7, #56	; 0x38
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
	...

0800e748 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b08a      	sub	sp, #40	; 0x28
 800e74c:	af02      	add	r7, sp, #8
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
 800e754:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 800e75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75c:	1d1a      	adds	r2, r3, #4
 800e75e:	62ba      	str	r2, [r7, #40]	; 0x28
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 800e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e766:	1d1a      	adds	r2, r3, #4
 800e768:	62ba      	str	r2, [r7, #40]	; 0x28
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	697a      	ldr	r2, [r7, #20]
 800e772:	fb02 f303 	mul.w	r3, r2, r3
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	4413      	add	r3, r2
 800e77c:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d11a      	bne.n	800e7ba <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	68ba      	ldr	r2, [r7, #8]
 800e788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e78c:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	fb02 f303 	mul.w	r3, r2, r3
 800e798:	00db      	lsls	r3, r3, #3
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	4413      	add	r3, r2
 800e79e:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	60fb      	str	r3, [r7, #12]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	bf14      	ite	ne
 800e7ae:	2301      	movne	r3, #1
 800e7b0:	2300      	moveq	r3, #0
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d024      	beq.n	800e802 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800e7b8:	e7e4      	b.n	800e784 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	fb02 f203 	mul.w	r2, r2, r3
 800e7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c4:	9301      	str	r3, [sp, #4]
 800e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	68b9      	ldr	r1, [r7, #8]
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f7ff ffba 	bl	800e748 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	fb02 f303 	mul.w	r3, r2, r3
 800e7dc:	00db      	lsls	r3, r3, #3
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	60fb      	str	r3, [r7, #12]
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	bf14      	ite	ne
 800e7f6:	2301      	movne	r3, #1
 800e7f8:	2300      	moveq	r3, #0
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d000      	beq.n	800e802 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800e800:	e7db      	b.n	800e7ba <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	60fb      	str	r3, [r7, #12]
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	3b02      	subs	r3, #2
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d826      	bhi.n	800e85c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 800e80e:	a201      	add	r2, pc, #4	; (adr r2, 800e814 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 800e810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e814:	0800e825 	.word	0x0800e825
 800e818:	0800e833 	.word	0x0800e833
 800e81c:	0800e841 	.word	0x0800e841
 800e820:	0800e84f 	.word	0x0800e84f

    // recombine the p smaller DFTs
    switch (p) {
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e828:	6879      	ldr	r1, [r7, #4]
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f7ff f806 	bl	800d83c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 800e830:	e01d      	b.n	800e86e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e836:	6879      	ldr	r1, [r7, #4]
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f7ff fa33 	bl	800dca4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 800e83e:	e016      	b.n	800e86e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e844:	6879      	ldr	r1, [r7, #4]
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f7ff f875 	bl	800d936 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 800e84c:	e00f      	b.n	800e86e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f7ff fb95 	bl	800df84 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 800e85a:	e008      	b.n	800e86e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e864:	6879      	ldr	r1, [r7, #4]
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f7ff fe94 	bl	800e594 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 800e86c:	bf00      	nop
    }
}
 800e86e:	bf00      	nop
 800e870:	3720      	adds	r7, #32
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop

0800e878 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
    int p=4;
 800e882:	2304      	movs	r3, #4
 800e884:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7f1 fe6c 	bl	8000564 <__aeabi_i2d>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	ec43 2b10 	vmov	d0, r2, r3
 800e894:	f009 f81a 	bl	80178cc <sqrt>
 800e898:	eeb0 7a40 	vmov.f32	s14, s0
 800e89c:	eef0 7a60 	vmov.f32	s15, s1
 800e8a0:	eeb0 0a47 	vmov.f32	s0, s14
 800e8a4:	eef0 0a67 	vmov.f32	s1, s15
 800e8a8:	f008 fcbe 	bl	8017228 <floor>
 800e8ac:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	fb93 f2f2 	sdiv	r2, r3, r2
 800e8b8:	6979      	ldr	r1, [r7, #20]
 800e8ba:	fb01 f202 	mul.w	r2, r1, r2
 800e8be:	1a9b      	subs	r3, r3, r2
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d01e      	beq.n	800e902 <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	2b02      	cmp	r3, #2
 800e8c8:	d005      	beq.n	800e8d6 <_ZL9kf_factoriPi+0x5e>
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	2b04      	cmp	r3, #4
 800e8ce:	d105      	bne.n	800e8dc <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	617b      	str	r3, [r7, #20]
 800e8d4:	e006      	b.n	800e8e4 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	617b      	str	r3, [r7, #20]
 800e8da:	e003      	b.n	800e8e4 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	3302      	adds	r3, #2
 800e8e0:	617b      	str	r3, [r7, #20]
 800e8e2:	bf00      	nop
            }
            if (p > floor_sqrt)
 800e8e4:	6978      	ldr	r0, [r7, #20]
 800e8e6:	f7f1 fe3d 	bl	8000564 <__aeabi_i2d>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e8f2:	f7f2 f913 	bl	8000b1c <__aeabi_dcmplt>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	617b      	str	r3, [r7, #20]
        while (n % p) {
 800e900:	e7d6      	b.n	800e8b0 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	fb92 f3f3 	sdiv	r3, r2, r3
 800e90a:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	1d1a      	adds	r2, r3, #4
 800e910:	603a      	str	r2, [r7, #0]
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	1d1a      	adds	r2, r3, #4
 800e91a:	603a      	str	r2, [r7, #0]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b01      	cmp	r3, #1
 800e924:	dd00      	ble.n	800e928 <_ZL9kf_factoriPi+0xb0>
    do {
 800e926:	e7c3      	b.n	800e8b0 <_ZL9kf_factoriPi+0x38>
}
 800e928:	bf00      	nop
 800e92a:	3718      	adds	r7, #24
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 800e930:	b5b0      	push	{r4, r5, r7, lr}
 800e932:	b08c      	sub	sp, #48	; 0x30
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
 800e93c:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 800e93e:	2300      	movs	r3, #0
 800e940:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 800e946:	00db      	lsls	r3, r3, #3
 800e948:	61fb      	str	r3, [r7, #28]

    if ( lenmem==NULL ) {
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d105      	bne.n	800e95c <kiss_fft_alloc+0x2c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 800e950:	69f8      	ldr	r0, [r7, #28]
 800e952:	f00b fcef 	bl	801a334 <malloc>
 800e956:	4603      	mov	r3, r0
 800e958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e95a:	e00c      	b.n	800e976 <kiss_fft_alloc+0x46>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d006      	beq.n	800e970 <kiss_fft_alloc+0x40>
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	69fa      	ldr	r2, [r7, #28]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d801      	bhi.n	800e970 <kiss_fft_alloc+0x40>
            st = (kiss_fft_cfg)mem;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	62fb      	str	r3, [r7, #44]	; 0x2c
        *lenmem = memneeded;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	69fa      	ldr	r2, [r7, #28]
 800e974:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 800e976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d05d      	beq.n	800ea38 <kiss_fft_alloc+0x108>
        int i;
        st->nfft=nfft;
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	68fa      	ldr	r2, [r7, #12]
 800e980:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 800e982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e984:	68ba      	ldr	r2, [r7, #8]
 800e986:	605a      	str	r2, [r3, #4]

        for (i=0;i<nfft;++i) {
 800e988:	2300      	movs	r3, #0
 800e98a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	429a      	cmp	r2, r3
 800e992:	da4b      	bge.n	800ea2c <kiss_fft_alloc+0xfc>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800e994:	a32e      	add	r3, pc, #184	; (adr r3, 800ea50 <kiss_fft_alloc+0x120>)
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            double phase = -2*pi*i / nfft;
 800e99e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9a0:	f7f1 fde0 	bl	8000564 <__aeabi_i2d>
 800e9a4:	a32c      	add	r3, pc, #176	; (adr r3, 800ea58 <kiss_fft_alloc+0x128>)
 800e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9aa:	f7f1 fe45 	bl	8000638 <__aeabi_dmul>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	4614      	mov	r4, r2
 800e9b4:	461d      	mov	r5, r3
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f7f1 fdd4 	bl	8000564 <__aeabi_i2d>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	4629      	mov	r1, r5
 800e9c4:	f7f1 ff62 	bl	800088c <__aeabi_ddiv>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            if (st->inverse)
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d005      	beq.n	800e9e4 <kiss_fft_alloc+0xb4>
                phase *= -1;
 800e9d8:	6a3b      	ldr	r3, [r7, #32]
 800e9da:	623b      	str	r3, [r7, #32]
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e9e2:	627b      	str	r3, [r7, #36]	; 0x24
            kf_cexp(st->twiddles+i, phase );
 800e9e4:	ed97 0b08 	vldr	d0, [r7, #32]
 800e9e8:	f008 fbce 	bl	8017188 <cos>
 800e9ec:	ec51 0b10 	vmov	r0, r1, d0
 800e9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f2:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800e9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	18d4      	adds	r4, r2, r3
 800e9fc:	f7f2 f914 	bl	8000c28 <__aeabi_d2f>
 800ea00:	4603      	mov	r3, r0
 800ea02:	6023      	str	r3, [r4, #0]
 800ea04:	ed97 0b08 	vldr	d0, [r7, #32]
 800ea08:	f008 fd0e 	bl	8017428 <sin>
 800ea0c:	ec51 0b10 	vmov	r0, r1, d0
 800ea10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea12:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800ea16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea18:	00db      	lsls	r3, r3, #3
 800ea1a:	18d4      	adds	r4, r2, r3
 800ea1c:	f7f2 f904 	bl	8000c28 <__aeabi_d2f>
 800ea20:	4603      	mov	r3, r0
 800ea22:	6063      	str	r3, [r4, #4]
        for (i=0;i<nfft;++i) {
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	3301      	adds	r3, #1
 800ea28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea2a:	e7af      	b.n	800e98c <kiss_fft_alloc+0x5c>
        }

        kf_factor(nfft,st->factors);
 800ea2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2e:	3308      	adds	r3, #8
 800ea30:	4619      	mov	r1, r3
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f7ff ff20 	bl	800e878 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 800ea38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <kiss_fft_alloc+0x114>
        *memallocated = memneeded;
 800ea3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea40:	69fa      	ldr	r2, [r7, #28]
 800ea42:	601a      	str	r2, [r3, #0]
    }

    return st;
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3730      	adds	r7, #48	; 0x30
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	54442d18 	.word	0x54442d18
 800ea54:	400921fb 	.word	0x400921fb
 800ea58:	54442d18 	.word	0x54442d18
 800ea5c:	c01921fb 	.word	0xc01921fb

0800ea60 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b088      	sub	sp, #32
 800ea64:	af02      	add	r7, sp, #8
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
 800ea6c:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d11e      	bne.n	800eab4 <kiss_fft_stride+0x54>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f00b fc59 	bl	801a334 <malloc>
 800ea82:	4603      	mov	r3, r0
 800ea84:	617b      	str	r3, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	3308      	adds	r3, #8
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	9201      	str	r2, [sp, #4]
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	2201      	movs	r2, #1
 800ea94:	68b9      	ldr	r1, [r7, #8]
 800ea96:	6978      	ldr	r0, [r7, #20]
 800ea98:	f7ff fe56 	bl	800e748 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	6979      	ldr	r1, [r7, #20]
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f00b fc54 	bl	801a354 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 800eaac:	6978      	ldr	r0, [r7, #20]
 800eaae:	f00b fc49 	bl	801a344 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 800eab2:	e00a      	b.n	800eaca <kiss_fft_stride+0x6a>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3308      	adds	r3, #8
 800eab8:	68fa      	ldr	r2, [r7, #12]
 800eaba:	9201      	str	r2, [sp, #4]
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	2201      	movs	r2, #1
 800eac2:	68b9      	ldr	r1, [r7, #8]
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fe3f 	bl	800e748 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 800eaca:	bf00      	nop
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b084      	sub	sp, #16
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	60f8      	str	r0, [r7, #12]
 800eada:	60b9      	str	r1, [r7, #8]
 800eadc:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 800eade:	2301      	movs	r3, #1
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	68b9      	ldr	r1, [r7, #8]
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f7ff ffbb 	bl	800ea60 <kiss_fft_stride>
}
 800eaea:	bf00      	nop
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	0000      	movs	r0, r0
 800eaf4:	0000      	movs	r0, r0
	...

0800eaf8 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 800eaf8:	b5b0      	push	{r4, r5, r7, lr}
 800eafa:	b08c      	sub	sp, #48	; 0x30
 800eafc:	af02      	add	r7, sp, #8
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 800eb06:	2300      	movs	r3, #0
 800eb08:	623b      	str	r3, [r7, #32]
    size_t subsize = 0, memneeded;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	613b      	str	r3, [r7, #16]

    if (nfft & 1) {
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	f003 0301 	and.w	r3, r3, #1
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d009      	beq.n	800eb2c <kiss_fftr_alloc+0x34>
        fprintf(stderr,"Real FFT optimization must be even.\n");
 800eb18:	4b5f      	ldr	r3, [pc, #380]	; (800ec98 <kiss_fftr_alloc+0x1a0>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	2224      	movs	r2, #36	; 0x24
 800eb20:	2101      	movs	r1, #1
 800eb22:	485e      	ldr	r0, [pc, #376]	; (800ec9c <kiss_fftr_alloc+0x1a4>)
 800eb24:	f00b fbd0 	bl	801a2c8 <fwrite>
        return NULL;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	e0ad      	b.n	800ec88 <kiss_fftr_alloc+0x190>
    }
    nfft >>= 1;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	105b      	asrs	r3, r3, #1
 800eb30:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 800eb32:	f107 0310 	add.w	r3, r7, #16
 800eb36:	2200      	movs	r2, #0
 800eb38:	9200      	str	r2, [sp, #0]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	68b9      	ldr	r1, [r7, #8]
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f7ff fef6 	bl	800e930 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	4613      	mov	r3, r2
 800eb48:	005b      	lsls	r3, r3, #1
 800eb4a:	4413      	add	r3, r2
 800eb4c:	0fda      	lsrs	r2, r3, #31
 800eb4e:	4413      	add	r3, r2
 800eb50:	105b      	asrs	r3, r3, #1
 800eb52:	00da      	lsls	r2, r3, #3
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	4413      	add	r3, r2
 800eb58:	330c      	adds	r3, #12
 800eb5a:	617b      	str	r3, [r7, #20]

    if (lenmem == NULL) {
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d105      	bne.n	800eb6e <kiss_fftr_alloc+0x76>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 800eb62:	6978      	ldr	r0, [r7, #20]
 800eb64:	f00b fbe6 	bl	801a334 <malloc>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	623b      	str	r3, [r7, #32]
 800eb6c:	e009      	b.n	800eb82 <kiss_fftr_alloc+0x8a>
    } else {
        if (*lenmem >= memneeded)
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d801      	bhi.n	800eb7c <kiss_fftr_alloc+0x84>
            st = (kiss_fftr_cfg) mem;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	623b      	str	r3, [r7, #32]
        *lenmem = memneeded;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 800eb82:	6a3b      	ldr	r3, [r7, #32]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <kiss_fftr_alloc+0x94>
        return NULL;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	e07d      	b.n	800ec88 <kiss_fftr_alloc+0x190>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 800eb8c:	6a3b      	ldr	r3, [r7, #32]
 800eb8e:	f103 020c 	add.w	r2, r3, #12
 800eb92:	6a3b      	ldr	r3, [r7, #32]
 800eb94:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 800eb96:	6a3b      	ldr	r3, [r7, #32]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	441a      	add	r2, r3
 800eb9e:	6a3b      	ldr	r3, [r7, #32]
 800eba0:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	685a      	ldr	r2, [r3, #4]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	00db      	lsls	r3, r3, #3
 800ebaa:	441a      	add	r2, r3
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	f107 0310 	add.w	r3, r7, #16
 800ebb8:	2100      	movs	r1, #0
 800ebba:	9100      	str	r1, [sp, #0]
 800ebbc:	68b9      	ldr	r1, [r7, #8]
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f7ff feb6 	bl	800e930 <kiss_fft_alloc>

    for (i = 0; i < nfft/2; ++i) {
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	0fda      	lsrs	r2, r3, #31
 800ebcc:	4413      	add	r3, r2
 800ebce:	105b      	asrs	r3, r3, #1
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	da50      	bge.n	800ec7a <kiss_fftr_alloc+0x182>
        double phase =
            -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	3301      	adds	r3, #1
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7f1 fcc1 	bl	8000564 <__aeabi_i2d>
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	460d      	mov	r5, r1
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f7f1 fcbc 	bl	8000564 <__aeabi_i2d>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	f7f1 fe4a 	bl	800088c <__aeabi_ddiv>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	4619      	mov	r1, r3
 800ec00:	f04f 0200 	mov.w	r2, #0
 800ec04:	4b26      	ldr	r3, [pc, #152]	; (800eca0 <kiss_fftr_alloc+0x1a8>)
 800ec06:	f7f1 fb61 	bl	80002cc <__adddf3>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	4610      	mov	r0, r2
 800ec10:	4619      	mov	r1, r3
        double phase =
 800ec12:	a31f      	add	r3, pc, #124	; (adr r3, 800ec90 <kiss_fftr_alloc+0x198>)
 800ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec18:	f7f1 fd0e 	bl	8000638 <__aeabi_dmul>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	e9c7 2306 	strd	r2, r3, [r7, #24]
        if (inverse_fft)
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d005      	beq.n	800ec36 <kiss_fftr_alloc+0x13e>
            phase *= -1;
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	61bb      	str	r3, [r7, #24]
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ec34:	61fb      	str	r3, [r7, #28]
        kf_cexp (st->super_twiddles+i,phase);
 800ec36:	ed97 0b06 	vldr	d0, [r7, #24]
 800ec3a:	f008 faa5 	bl	8017188 <cos>
 800ec3e:	ec51 0b10 	vmov	r0, r1, d0
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	689a      	ldr	r2, [r3, #8]
 800ec46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec48:	00db      	lsls	r3, r3, #3
 800ec4a:	18d4      	adds	r4, r2, r3
 800ec4c:	f7f1 ffec 	bl	8000c28 <__aeabi_d2f>
 800ec50:	4603      	mov	r3, r0
 800ec52:	6023      	str	r3, [r4, #0]
 800ec54:	ed97 0b06 	vldr	d0, [r7, #24]
 800ec58:	f008 fbe6 	bl	8017428 <sin>
 800ec5c:	ec51 0b10 	vmov	r0, r1, d0
 800ec60:	6a3b      	ldr	r3, [r7, #32]
 800ec62:	689a      	ldr	r2, [r3, #8]
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	18d4      	adds	r4, r2, r3
 800ec6a:	f7f1 ffdd 	bl	8000c28 <__aeabi_d2f>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	6063      	str	r3, [r4, #4]
    for (i = 0; i < nfft/2; ++i) {
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	3301      	adds	r3, #1
 800ec76:	627b      	str	r3, [r7, #36]	; 0x24
 800ec78:	e7a6      	b.n	800ebc8 <kiss_fftr_alloc+0xd0>
    }

    if (memallocated != NULL) {
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d002      	beq.n	800ec86 <kiss_fftr_alloc+0x18e>
        *memallocated = memneeded;
 800ec80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec82:	697a      	ldr	r2, [r7, #20]
 800ec84:	601a      	str	r2, [r3, #0]
    }

    return st;
 800ec86:	6a3b      	ldr	r3, [r7, #32]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3728      	adds	r7, #40	; 0x28
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bdb0      	pop	{r4, r5, r7, pc}
 800ec90:	54442d18 	.word	0x54442d18
 800ec94:	c00921fb 	.word	0xc00921fb
 800ec98:	20000330 	.word	0x20000330
 800ec9c:	0801d390 	.word	0x0801d390
 800eca0:	3fe00000 	.word	0x3fe00000

0800eca4 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b092      	sub	sp, #72	; 0x48
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00a      	beq.n	800ecd0 <kiss_fftr+0x2c>
        fprintf(stderr,"kiss fft usage error: improper alloc\n");
 800ecba:	4b8b      	ldr	r3, [pc, #556]	; (800eee8 <kiss_fftr+0x244>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	2225      	movs	r2, #37	; 0x25
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	4889      	ldr	r0, [pc, #548]	; (800eeec <kiss_fftr+0x248>)
 800ecc6:	f00b faff 	bl	801a2c8 <fwrite>
        exit(1);
 800ecca:	2001      	movs	r0, #1
 800eccc:	f00b fa76 	bl	801a1bc <exit>
    }

    ncfft = st->substate->nfft;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6818      	ldr	r0, [r3, #0]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	461a      	mov	r2, r3
 800ece2:	68b9      	ldr	r1, [r7, #8]
 800ece4:	f7ff fef5 	bl	800ead2 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 800ecf8:	ed97 7a04 	vldr	s14, [r7, #16]
 800ecfc:	edd7 7a05 	vldr	s15, [r7, #20]
 800ed00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 800ed0a:	ed97 7a04 	vldr	s14, [r7, #16]
 800ed0e:	edd7 7a05 	vldr	s15, [r7, #20]
 800ed12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	4413      	add	r3, r2
 800ed1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed1e:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f04f 0200 	mov.w	r2, #0
 800ed28:	605a      	str	r2, [r3, #4]
 800ed2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed2c:	00db      	lsls	r3, r3, #3
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	4413      	add	r3, r2
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	6852      	ldr	r2, [r2, #4]
 800ed36:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 800ed38:	2301      	movs	r3, #1
 800ed3a:	647b      	str	r3, [r7, #68]	; 0x44
 800ed3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed3e:	0fda      	lsrs	r2, r3, #31
 800ed40:	4413      	add	r3, r2
 800ed42:	105b      	asrs	r3, r3, #1
 800ed44:	461a      	mov	r2, r3
 800ed46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	f300 80c9 	bgt.w	800eee0 <kiss_fftr+0x23c>
        fpk    = st->tmpbuf[k];
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	685a      	ldr	r2, [r3, #4]
 800ed52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed54:	00db      	lsls	r3, r3, #3
 800ed56:	441a      	add	r2, r3
 800ed58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed60:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	685a      	ldr	r2, [r3, #4]
 800ed68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed6c:	1acb      	subs	r3, r1, r3
 800ed6e:	00db      	lsls	r3, r3, #3
 800ed70:	4413      	add	r3, r2
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	685a      	ldr	r2, [r3, #4]
 800ed7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed7e:	1acb      	subs	r3, r1, r3
 800ed80:	00db      	lsls	r3, r3, #3
 800ed82:	4413      	add	r3, r2
 800ed84:	edd3 7a01 	vldr	s15, [r3, #4]
 800ed88:	eef1 7a67 	vneg.f32	s15, s15
 800ed8c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 800ed90:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ed94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ed98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed9c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800eda0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800eda4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800eda8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 800edb0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800edb4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800edb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edbc:	edc7 7a08 	vstr	s15, [r7, #32]
 800edc0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800edc4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800edc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edcc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 800edd0:	ed97 7a08 	vldr	s14, [r7, #32]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	689a      	ldr	r2, [r3, #8]
 800edd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800edde:	3b01      	subs	r3, #1
 800ede0:	00db      	lsls	r3, r3, #3
 800ede2:	4413      	add	r3, r2
 800ede4:	edd3 7a00 	vldr	s15, [r3]
 800ede8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800edec:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	689a      	ldr	r2, [r3, #8]
 800edf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800edfa:	3b01      	subs	r3, #1
 800edfc:	00db      	lsls	r3, r3, #3
 800edfe:	4413      	add	r3, r2
 800ee00:	edd3 7a01 	vldr	s15, [r3, #4]
 800ee04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee0c:	edc7 7a06 	vstr	s15, [r7, #24]
 800ee10:	ed97 7a08 	vldr	s14, [r7, #32]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	689a      	ldr	r2, [r3, #8]
 800ee18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee1a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	4413      	add	r3, r2
 800ee24:	edd3 7a01 	vldr	s15, [r3, #4]
 800ee28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee2c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	689a      	ldr	r2, [r3, #8]
 800ee34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee36:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ee3a:	3b01      	subs	r3, #1
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	4413      	add	r3, r2
 800ee40:	edd3 7a00 	vldr	s15, [r3]
 800ee44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee4c:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 800ee50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ee54:	edd7 7a06 	vldr	s15, [r7, #24]
 800ee58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee5e:	00db      	lsls	r3, r3, #3
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	4413      	add	r3, r2
 800ee64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ee68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee6c:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 800ee70:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800ee74:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee7e:	00db      	lsls	r3, r3, #3
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	4413      	add	r3, r2
 800ee84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ee88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee8c:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 800ee90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ee94:	edd7 7a06 	vldr	s15, [r7, #24]
 800ee98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eea0:	1ad3      	subs	r3, r2, r3
 800eea2:	00db      	lsls	r3, r3, #3
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	4413      	add	r3, r2
 800eea8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eeac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eeb0:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 800eeb4:	ed97 7a07 	vldr	s14, [r7, #28]
 800eeb8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800eebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	00db      	lsls	r3, r3, #3
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	4413      	add	r3, r2
 800eecc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eed4:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 800eed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeda:	3301      	adds	r3, #1
 800eedc:	647b      	str	r3, [r7, #68]	; 0x44
 800eede:	e72d      	b.n	800ed3c <kiss_fftr+0x98>
    }
}
 800eee0:	bf00      	nop
 800eee2:	3748      	adds	r7, #72	; 0x48
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	20000330 	.word	0x20000330
 800eeec:	0801d3b8 	.word	0x0801d3b8

0800eef0 <_Z29ei_run_impulse_check_canceledv>:
#include "main.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"
#include <stdarg.h>
#include <stdio.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 800eef0:	b480      	push	{r7}
 800eef2:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 800ef00:	b580      	push	{r7, lr}
 800ef02:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800ef04:	f7f8 faf2 	bl	80074ec <HAL_GetTick>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	f04f 0300 	mov.w	r3, #0
}
 800ef10:	4610      	mov	r0, r2
 800ef12:	4619      	mov	r1, r3
 800ef14:	bd80      	pop	{r7, pc}
	...

0800ef18 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_printf("%f", f);
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f7f1 fb30 	bl	8000588 <__aeabi_f2d>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4803      	ldr	r0, [pc, #12]	; (800ef3c <_Z15ei_printf_floatf+0x24>)
 800ef2e:	f7f7 f809 	bl	8005f44 <_Z9ei_printfPKcz>
}
 800ef32:	bf00      	nop
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	0801d3e0 	.word	0x0801d3e0

0800ef40 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	4603      	mov	r3, r0
 800ef48:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	2b0b      	cmp	r3, #11
 800ef4e:	d833      	bhi.n	800efb8 <TfLiteTypeGetName+0x78>
 800ef50:	a201      	add	r2, pc, #4	; (adr r2, 800ef58 <TfLiteTypeGetName+0x18>)
 800ef52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef56:	bf00      	nop
 800ef58:	0800ef89 	.word	0x0800ef89
 800ef5c:	0800ef8d 	.word	0x0800ef8d
 800ef60:	0800ef95 	.word	0x0800ef95
 800ef64:	0800ef99 	.word	0x0800ef99
 800ef68:	0800efa1 	.word	0x0800efa1
 800ef6c:	0800efad 	.word	0x0800efad
 800ef70:	0800efa5 	.word	0x0800efa5
 800ef74:	0800ef91 	.word	0x0800ef91
 800ef78:	0800efa9 	.word	0x0800efa9
 800ef7c:	0800ef9d 	.word	0x0800ef9d
 800ef80:	0800efb1 	.word	0x0800efb1
 800ef84:	0800efb5 	.word	0x0800efb5
    case kTfLiteNoType:
      return "NOTYPE";
 800ef88:	4b0f      	ldr	r3, [pc, #60]	; (800efc8 <TfLiteTypeGetName+0x88>)
 800ef8a:	e016      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800ef8c:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <TfLiteTypeGetName+0x8c>)
 800ef8e:	e014      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 800ef90:	4b0f      	ldr	r3, [pc, #60]	; (800efd0 <TfLiteTypeGetName+0x90>)
 800ef92:	e012      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 800ef94:	4b0f      	ldr	r3, [pc, #60]	; (800efd4 <TfLiteTypeGetName+0x94>)
 800ef96:	e010      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 800ef98:	4b0f      	ldr	r3, [pc, #60]	; (800efd8 <TfLiteTypeGetName+0x98>)
 800ef9a:	e00e      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 800ef9c:	4b0f      	ldr	r3, [pc, #60]	; (800efdc <TfLiteTypeGetName+0x9c>)
 800ef9e:	e00c      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 800efa0:	4b0f      	ldr	r3, [pc, #60]	; (800efe0 <TfLiteTypeGetName+0xa0>)
 800efa2:	e00a      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 800efa4:	4b0f      	ldr	r3, [pc, #60]	; (800efe4 <TfLiteTypeGetName+0xa4>)
 800efa6:	e008      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800efa8:	4b0f      	ldr	r3, [pc, #60]	; (800efe8 <TfLiteTypeGetName+0xa8>)
 800efaa:	e006      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 800efac:	4b0f      	ldr	r3, [pc, #60]	; (800efec <TfLiteTypeGetName+0xac>)
 800efae:	e004      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 800efb0:	4b0f      	ldr	r3, [pc, #60]	; (800eff0 <TfLiteTypeGetName+0xb0>)
 800efb2:	e002      	b.n	800efba <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 800efb4:	4b0f      	ldr	r3, [pc, #60]	; (800eff4 <TfLiteTypeGetName+0xb4>)
 800efb6:	e000      	b.n	800efba <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 800efb8:	4b0f      	ldr	r3, [pc, #60]	; (800eff8 <TfLiteTypeGetName+0xb8>)
}
 800efba:	4618      	mov	r0, r3
 800efbc:	370c      	adds	r7, #12
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	0801d3e8 	.word	0x0801d3e8
 800efcc:	0801d3f0 	.word	0x0801d3f0
 800efd0:	0801d3f8 	.word	0x0801d3f8
 800efd4:	0801d400 	.word	0x0801d400
 800efd8:	0801d408 	.word	0x0801d408
 800efdc:	0801d410 	.word	0x0801d410
 800efe0:	0801d418 	.word	0x0801d418
 800efe4:	0801d420 	.word	0x0801d420
 800efe8:	0801d428 	.word	0x0801d428
 800efec:	0801d434 	.word	0x0801d434
 800eff0:	0801d43c 	.word	0x0801d43c
 800eff4:	0801d444 	.word	0x0801d444
 800eff8:	0801d44c 	.word	0x0801d44c

0800effc <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800effc:	b480      	push	{r7}
 800effe:	af00      	add	r7, sp, #0
 800f000:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f004:	4618      	mov	r0, r3
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
	...

0800f010 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800f010:	b5b0      	push	{r4, r5, r7, lr}
 800f012:	b088      	sub	sp, #32
 800f014:	af00      	add	r7, sp, #0
 800f016:	ed87 0b02 	vstr	d0, [r7, #8]
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800f01e:	f04f 0200 	mov.w	r2, #0
 800f022:	f04f 0300 	mov.w	r3, #0
 800f026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f02a:	f7f1 fd6d 	bl	8000b08 <__aeabi_dcmpeq>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d006      	beq.n	800f042 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	2200      	movs	r2, #0
 800f03e:	601a      	str	r2, [r3, #0]
    return;
 800f040:	e06b      	b.n	800f11a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800f042:	6838      	ldr	r0, [r7, #0]
 800f044:	ed97 0b02 	vldr	d0, [r7, #8]
 800f048:	f008 f96e 	bl	8017328 <frexp>
 800f04c:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800f050:	f04f 0200 	mov.w	r2, #0
 800f054:	4b32      	ldr	r3, [pc, #200]	; (800f120 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800f056:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f05a:	f7f1 faed 	bl	8000638 <__aeabi_dmul>
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	ec43 2b17 	vmov	d7, r2, r3
 800f066:	eeb0 0a47 	vmov.f32	s0, s14
 800f06a:	eef0 0a67 	vmov.f32	s1, s15
 800f06e:	f000 f978 	bl	800f362 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800f072:	ec53 2b10 	vmov	r2, r3, d0
 800f076:	4610      	mov	r0, r2
 800f078:	4619      	mov	r1, r3
 800f07a:	f7f1 fe3d 	bl	8000cf8 <__aeabi_d2lz>
 800f07e:	4602      	mov	r2, r0
 800f080:	460b      	mov	r3, r1
 800f082:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800f086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f08a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800f08e:	f04f 0100 	mov.w	r1, #0
 800f092:	4290      	cmp	r0, r2
 800f094:	eb71 0303 	sbcs.w	r3, r1, r3
 800f098:	da01      	bge.n	800f09e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800f09a:	f00b f855 	bl	801a148 <abort>
  if (q_fixed == (1ll << 31)) {
 800f09e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	bf08      	it	eq
 800f0a6:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800f0aa:	d117      	bne.n	800f0dc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800f0ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f0b0:	0fd9      	lsrs	r1, r3, #31
 800f0b2:	4608      	mov	r0, r1
 800f0b4:	f04f 0100 	mov.w	r1, #0
 800f0b8:	1884      	adds	r4, r0, r2
 800f0ba:	eb41 0503 	adc.w	r5, r1, r3
 800f0be:	f04f 0200 	mov.w	r2, #0
 800f0c2:	f04f 0300 	mov.w	r3, #0
 800f0c6:	0862      	lsrs	r2, r4, #1
 800f0c8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800f0cc:	106b      	asrs	r3, r5, #1
 800f0ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	1c5a      	adds	r2, r3, #1
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800f0dc:	f7ff ff8e 	bl	800effc <_ZNSt14numeric_limitsIlE3maxEv>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f0e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f0ec:	4290      	cmp	r0, r2
 800f0ee:	eb71 0303 	sbcs.w	r3, r1, r3
 800f0f2:	da01      	bge.n	800f0f8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800f0f4:	f00b f828 	bl	801a148 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f113 0f1f 	cmn.w	r3, #31
 800f100:	da08      	bge.n	800f114 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	2200      	movs	r2, #0
 800f106:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800f108:	f04f 0200 	mov.w	r2, #0
 800f10c:	f04f 0300 	mov.w	r3, #0
 800f110:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800f114:	69ba      	ldr	r2, [r7, #24]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	601a      	str	r2, [r3, #0]
}
 800f11a:	3720      	adds	r7, #32
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bdb0      	pop	{r4, r5, r7, pc}
 800f120:	41e00000 	.word	0x41e00000

0800f124 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	ed87 0b02 	vstr	d0, [r7, #8]
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800f132:	f04f 0200 	mov.w	r2, #0
 800f136:	4b0d      	ldr	r3, [pc, #52]	; (800f16c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800f138:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f13c:	f7f1 fd0c 	bl	8000b58 <__aeabi_dcmpgt>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d101      	bne.n	800f14a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800f146:	f00a ffff 	bl	801a148 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800f14a:	6839      	ldr	r1, [r7, #0]
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	ed97 0b02 	vldr	d0, [r7, #8]
 800f152:	f7ff ff5d 	bl	800f010 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	da01      	bge.n	800f162 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800f15e:	f00a fff3 	bl	801a148 <abort>
}
 800f162:	bf00      	nop
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	3ff00000 	.word	0x3ff00000

0800f170 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	f7f1 fcc9 	bl	8000b1c <__aeabi_dcmplt>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d001      	beq.n	800f194 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	e000      	b.n	800f196 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800f194:	687b      	ldr	r3, [r7, #4]
    }
 800f196:	4618      	mov	r0, r3
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
	...

0800f1a0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800f1a0:	b5b0      	push	{r4, r5, r7, lr}
 800f1a2:	b08e      	sub	sp, #56	; 0x38
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	ed87 0b06 	vstr	d0, [r7, #24]
 800f1aa:	ed87 1b04 	vstr	d1, [r7, #16]
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800f1b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f1b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f1bc:	f7f1 fa3c 	bl	8000638 <__aeabi_dmul>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	4614      	mov	r4, r2
 800f1c6:	461d      	mov	r5, r3
 800f1c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	fa22 f303 	lsr.w	r3, r2, r3
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f1 f9c6 	bl	8000564 <__aeabi_i2d>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4620      	mov	r0, r4
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f7f1 fa2a 	bl	8000638 <__aeabi_dmul>
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800f1ec:	a30e      	add	r3, pc, #56	; (adr r3, 800f228 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800f1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800f1f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f1fa:	f107 0320 	add.w	r3, r7, #32
 800f1fe:	4611      	mov	r1, r2
 800f200:	4618      	mov	r0, r3
 800f202:	f7ff ffb5 	bl	800f170 <_ZSt3minIdERKT_S2_S2_>
 800f206:	4603      	mov	r3, r0
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800f210:	6879      	ldr	r1, [r7, #4]
 800f212:	68b8      	ldr	r0, [r7, #8]
 800f214:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800f218:	f7ff ff84 	bl	800f124 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800f21c:	bf00      	nop
 800f21e:	3738      	adds	r7, #56	; 0x38
 800f220:	46bd      	mov	sp, r7
 800f222:	bdb0      	pop	{r4, r5, r7, pc}
 800f224:	f3af 8000 	nop.w
 800f228:	ffc00000 	.word	0xffc00000
 800f22c:	41dfffff 	.word	0x41dfffff

0800f230 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f234:	b087      	sub	sp, #28
 800f236:	af00      	add	r7, sp, #0
 800f238:	60f8      	str	r0, [r7, #12]
 800f23a:	60b9      	str	r1, [r7, #8]
 800f23c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800f23e:	2201      	movs	r2, #1
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	fa02 f303 	lsl.w	r3, r2, r3
 800f246:	3b01      	subs	r3, #1
 800f248:	4618      	mov	r0, r3
 800f24a:	f7f1 f98b 	bl	8000564 <__aeabi_i2d>
 800f24e:	4682      	mov	sl, r0
 800f250:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	1ad1      	subs	r1, r2, r3
 800f258:	f04f 0201 	mov.w	r2, #1
 800f25c:	f04f 0300 	mov.w	r3, #0
 800f260:	f1a1 0620 	sub.w	r6, r1, #32
 800f264:	f1c1 0020 	rsb	r0, r1, #32
 800f268:	fa03 f901 	lsl.w	r9, r3, r1
 800f26c:	fa02 f606 	lsl.w	r6, r2, r6
 800f270:	ea49 0906 	orr.w	r9, r9, r6
 800f274:	fa22 f000 	lsr.w	r0, r2, r0
 800f278:	ea49 0900 	orr.w	r9, r9, r0
 800f27c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800f280:	4640      	mov	r0, r8
 800f282:	4649      	mov	r1, r9
 800f284:	f7f1 f9aa 	bl	80005dc <__aeabi_l2d>
 800f288:	4602      	mov	r2, r0
 800f28a:	460b      	mov	r3, r1
 800f28c:	4650      	mov	r0, sl
 800f28e:	4659      	mov	r1, fp
 800f290:	f7f1 f9d2 	bl	8000638 <__aeabi_dmul>
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	4690      	mov	r8, r2
 800f29a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800f29c:	f04f 0201 	mov.w	r2, #1
 800f2a0:	f04f 0300 	mov.w	r3, #0
 800f2a4:	68b9      	ldr	r1, [r7, #8]
 800f2a6:	f1a1 0620 	sub.w	r6, r1, #32
 800f2aa:	f1c1 0020 	rsb	r0, r1, #32
 800f2ae:	fa03 f501 	lsl.w	r5, r3, r1
 800f2b2:	fa02 f606 	lsl.w	r6, r2, r6
 800f2b6:	4335      	orrs	r5, r6
 800f2b8:	fa22 f000 	lsr.w	r0, r2, r0
 800f2bc:	4305      	orrs	r5, r0
 800f2be:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	f7f1 f989 	bl	80005dc <__aeabi_l2d>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800f2ce:	4640      	mov	r0, r8
 800f2d0:	4649      	mov	r1, r9
 800f2d2:	f7f1 fadb 	bl	800088c <__aeabi_ddiv>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	460b      	mov	r3, r1
 800f2da:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800f2de:	ed97 0b04 	vldr	d0, [r7, #16]
 800f2e2:	f007 ffa1 	bl	8017228 <floor>
 800f2e6:	ec53 2b10 	vmov	r2, r3, d0
 800f2ea:	4610      	mov	r0, r2
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	f7f1 fc53 	bl	8000b98 <__aeabi_d2iz>
 800f2f2:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	371c      	adds	r7, #28
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f2fe <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f2fe:	b480      	push	{r7}
 800f300:	b083      	sub	sp, #12
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
 800f306:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	ed93 7a00 	vldr	s14, [r3]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	edd3 7a00 	vldr	s15, [r3]
 800f314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31c:	d501      	bpl.n	800f322 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	e000      	b.n	800f324 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800f322:	687b      	ldr	r3, [r7, #4]
    }
 800f324:	4618      	mov	r0, r3
 800f326:	370c      	adds	r7, #12
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	ed93 7a00 	vldr	s14, [r3]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	edd3 7a00 	vldr	s15, [r3]
 800f346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f34e:	d501      	bpl.n	800f354 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	e000      	b.n	800f356 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800f354:	687b      	ldr	r3, [r7, #4]
    }
 800f356:	4618      	mov	r0, r3
 800f358:	370c      	adds	r7, #12
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr

0800f362 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800f362:	b580      	push	{r7, lr}
 800f364:	b082      	sub	sp, #8
 800f366:	af00      	add	r7, sp, #0
 800f368:	ed87 0b00 	vstr	d0, [r7]
 800f36c:	ed97 0b00 	vldr	d0, [r7]
 800f370:	f008 f812 	bl	8017398 <round>
 800f374:	eeb0 7a40 	vmov.f32	s14, s0
 800f378:	eef0 7a60 	vmov.f32	s15, s1
 800f37c:	eeb0 0a47 	vmov.f32	s0, s14
 800f380:	eef0 0a67 	vmov.f32	s1, s15
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b082      	sub	sp, #8
 800f38e:	af00      	add	r7, sp, #0
 800f390:	ed87 0a01 	vstr	s0, [r7, #4]
 800f394:	ed97 0a01 	vldr	s0, [r7, #4]
 800f398:	f7f1 ff65 	bl	8001266 <_ZSt5roundf>
 800f39c:	eef0 7a40 	vmov.f32	s15, s0
 800f3a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800f3aa:	b480      	push	{r7}
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800f3bc:	b480      	push	{r7}
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	237f      	movs	r3, #127	; 0x7f
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800f3cc:	b480      	push	{r7}
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800f3dc:	b480      	push	{r7}
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	23ff      	movs	r3, #255	; 0xff
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800f3ec:	b480      	push	{r7}
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	4b02      	ldr	r3, [pc, #8]	; (800f3fc <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr
 800f3fc:	ffff8000 	.word	0xffff8000

0800f400 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800f400:	b480      	push	{r7}
 800f402:	af00      	add	r7, sp, #0
 800f404:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f408:	4618      	mov	r0, r3
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr

0800f412 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800f412:	b480      	push	{r7}
 800f414:	b083      	sub	sp, #12
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4618      	mov	r0, r3
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	689a      	ldr	r2, [r3, #8]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	4413      	add	r3, r2
 800f440:	685b      	ldr	r3, [r3, #4]
}
 800f442:	4618      	mov	r0, r3
 800f444:	370c      	adds	r7, #12
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr

0800f44e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800f44e:	b480      	push	{r7}
 800f450:	b087      	sub	sp, #28
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800f456:	f04f 0201 	mov.w	r2, #1
 800f45a:	f04f 0300 	mov.w	r3, #0
 800f45e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800f462:	2300      	movs	r3, #0
 800f464:	60fb      	str	r3, [r7, #12]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	da1b      	bge.n	800f4a8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	4413      	add	r3, r2
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	461a      	mov	r2, r3
 800f47c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f480:	6979      	ldr	r1, [r7, #20]
 800f482:	fb02 f001 	mul.w	r0, r2, r1
 800f486:	6939      	ldr	r1, [r7, #16]
 800f488:	fb03 f101 	mul.w	r1, r3, r1
 800f48c:	4401      	add	r1, r0
 800f48e:	6938      	ldr	r0, [r7, #16]
 800f490:	fba0 2302 	umull	r2, r3, r0, r2
 800f494:	4419      	add	r1, r3
 800f496:	460b      	mov	r3, r1
 800f498:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f49c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	60fb      	str	r3, [r7, #12]
 800f4a6:	e7de      	b.n	800f466 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800f4a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800f4ac:	4610      	mov	r0, r2
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	371c      	adds	r7, #28
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr

0800f4ba <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b082      	sub	sp, #8
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7ff ffc1 	bl	800f44e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	460b      	mov	r3, r1
}
 800f4d0:	4610      	mov	r0, r2
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	3708      	adds	r7, #8
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800f4da:	b480      	push	{r7}
 800f4dc:	b083      	sub	sp, #12
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	ed87 0b00 	vstr	d0, [r7]
 800f4e4:	683a      	ldr	r2, [r7, #0]
 800f4e6:	6879      	ldr	r1, [r7, #4]
 800f4e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4ec:	ec43 2b17 	vmov	d7, r2, r3
 800f4f0:	eeb0 0a47 	vmov.f32	s0, s14
 800f4f4:	eef0 0a67 	vmov.f32	s1, s15
 800f4f8:	370c      	adds	r7, #12
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
	...

0800f504 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 800f504:	b5b0      	push	{r4, r5, r7, lr}
 800f506:	b09c      	sub	sp, #112	; 0x70
 800f508:	af04      	add	r7, sp, #16
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d013      	beq.n	800f544 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	695c      	ldr	r4, [r3, #20]
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f526:	461a      	mov	r2, r3
 800f528:	2301      	movs	r3, #1
 800f52a:	9303      	str	r3, [sp, #12]
 800f52c:	9202      	str	r2, [sp, #8]
 800f52e:	4b98      	ldr	r3, [pc, #608]	; (800f790 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800f530:	9301      	str	r3, [sp, #4]
 800f532:	4b98      	ldr	r3, [pc, #608]	; (800f794 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 800f534:	9300      	str	r3, [sp, #0]
 800f536:	2335      	movs	r3, #53	; 0x35
 800f538:	4a97      	ldr	r2, [pc, #604]	; (800f798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800f53a:	4998      	ldr	r1, [pc, #608]	; (800f79c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	47a0      	blx	r4
 800f540:	2301      	movs	r3, #1
 800f542:	e173      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d013      	beq.n	800f576 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	695c      	ldr	r4, [r3, #20]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f558:	461a      	mov	r2, r3
 800f55a:	2301      	movs	r3, #1
 800f55c:	9303      	str	r3, [sp, #12]
 800f55e:	9202      	str	r2, [sp, #8]
 800f560:	4b8b      	ldr	r3, [pc, #556]	; (800f790 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	4b8e      	ldr	r3, [pc, #568]	; (800f7a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	2337      	movs	r3, #55	; 0x37
 800f56a:	4a8b      	ldr	r2, [pc, #556]	; (800f798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800f56c:	498b      	ldr	r1, [pc, #556]	; (800f79c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	47a0      	blx	r4
 800f572:	2301      	movs	r3, #1
 800f574:	e15a      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f57a:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800f57c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d10a      	bne.n	800f598 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	695c      	ldr	r4, [r3, #20]
 800f586:	4b87      	ldr	r3, [pc, #540]	; (800f7a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	2342      	movs	r3, #66	; 0x42
 800f58c:	4a82      	ldr	r2, [pc, #520]	; (800f798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800f58e:	4986      	ldr	r1, [pc, #536]	; (800f7a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	47a0      	blx	r4
 800f594:	2301      	movs	r3, #1
 800f596:	e149      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800f598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10a      	bne.n	800f5b6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	695c      	ldr	r4, [r3, #20]
 800f5a4:	4b81      	ldr	r3, [pc, #516]	; (800f7ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	2343      	movs	r3, #67	; 0x43
 800f5aa:	4a7b      	ldr	r2, [pc, #492]	; (800f798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800f5ac:	497e      	ldr	r1, [pc, #504]	; (800f7a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	47a0      	blx	r4
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e13a      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800f5b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	bfcc      	ite	gt
 800f5c0:	2301      	movgt	r3, #1
 800f5c2:	2300      	movle	r3, #0
 800f5c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800f5c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d067      	beq.n	800f6a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	2b09      	cmp	r3, #9
 800f5d6:	d00e      	beq.n	800f5f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b07      	cmp	r3, #7
 800f5de:	d00a      	beq.n	800f5f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	695c      	ldr	r4, [r3, #20]
 800f5e4:	4b72      	ldr	r3, [pc, #456]	; (800f7b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	2347      	movs	r3, #71	; 0x47
 800f5ea:	4a6b      	ldr	r2, [pc, #428]	; (800f798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800f5ec:	496e      	ldr	r1, [pc, #440]	; (800f7a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	47a0      	blx	r4
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	e11a      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	2b09      	cmp	r3, #9
 800f5fc:	d012      	beq.n	800f624 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	695c      	ldr	r4, [r3, #20]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	2309      	movs	r3, #9
 800f60a:	9303      	str	r3, [sp, #12]
 800f60c:	9202      	str	r2, [sp, #8]
 800f60e:	4b69      	ldr	r3, [pc, #420]	; (800f7b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800f610:	9301      	str	r3, [sp, #4]
 800f612:	4b69      	ldr	r3, [pc, #420]	; (800f7b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	2349      	movs	r3, #73	; 0x49
 800f618:	4a5f      	ldr	r2, [pc, #380]	; (800f798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800f61a:	4960      	ldr	r1, [pc, #384]	; (800f79c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	47a0      	blx	r4
 800f620:	2301      	movs	r3, #1
 800f622:	e103      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800f624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f62e:	429a      	cmp	r2, r3
 800f630:	d013      	beq.n	800f65a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	695c      	ldr	r4, [r3, #20]
 800f636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f640:	9203      	str	r2, [sp, #12]
 800f642:	9302      	str	r3, [sp, #8]
 800f644:	4b5d      	ldr	r3, [pc, #372]	; (800f7bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800f646:	9301      	str	r3, [sp, #4]
 800f648:	4b5d      	ldr	r3, [pc, #372]	; (800f7c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	234a      	movs	r3, #74	; 0x4a
 800f64e:	4a52      	ldr	r2, [pc, #328]	; (800f798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800f650:	4952      	ldr	r1, [pc, #328]	; (800f79c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	47a0      	blx	r4
 800f656:	2301      	movs	r3, #1
 800f658:	e0e8      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	689a      	ldr	r2, [r3, #8]
 800f65e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	009b      	lsls	r3, r3, #2
 800f664:	4413      	add	r3, r2
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d017      	beq.n	800f6a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	695c      	ldr	r4, [r3, #20]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	689a      	ldr	r2, [r3, #8]
 800f678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	4413      	add	r3, r2
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	9303      	str	r3, [sp, #12]
 800f684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f688:	9302      	str	r3, [sp, #8]
 800f68a:	4b4e      	ldr	r3, [pc, #312]	; (800f7c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	4b4b      	ldr	r3, [pc, #300]	; (800f7bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	234b      	movs	r3, #75	; 0x4b
 800f694:	4a40      	ldr	r2, [pc, #256]	; (800f798 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800f696:	4941      	ldr	r1, [pc, #260]	; (800f79c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	47a0      	blx	r4
 800f69c:	2301      	movs	r3, #1
 800f69e:	e0c5      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800f6a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800f6ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3304      	adds	r3, #4
 800f6b2:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f6ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	da47      	bge.n	800f752 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800f6c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d005      	beq.n	800f6d6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 800f6ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6d0:	4413      	add	r3, r2
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	e001      	b.n	800f6da <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 800f6d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800f6dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f6de:	f7f0 ff53 	bl	8000588 <__aeabi_f2d>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800f6ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f6ec:	f7f0 ff4c 	bl	8000588 <__aeabi_f2d>
 800f6f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f6f4:	f7f0 ffa0 	bl	8000638 <__aeabi_dmul>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	4614      	mov	r4, r2
 800f6fe:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800f700:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f702:	f7f0 ff41 	bl	8000588 <__aeabi_f2d>
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800f70a:	4620      	mov	r0, r4
 800f70c:	4629      	mov	r1, r5
 800f70e:	f7f1 f8bd 	bl	800088c <__aeabi_ddiv>
 800f712:	4602      	mov	r2, r0
 800f714:	460b      	mov	r3, r1
 800f716:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800f71a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f71e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f722:	4611      	mov	r1, r2
 800f724:	4618      	mov	r0, r3
 800f726:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800f72a:	f7ff fc71 	bl	800f010 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800f72e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f736:	4413      	add	r3, r2
 800f738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f73a:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 800f73c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f744:	4413      	add	r3, r2
 800f746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f748:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800f74a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f74c:	3301      	adds	r3, #1
 800f74e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f750:	e7b2      	b.n	800f6b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	2b03      	cmp	r3, #3
 800f758:	d146      	bne.n	800f7e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800f75a:	f04f 0200 	mov.w	r2, #0
 800f75e:	f04f 0300 	mov.w	r3, #0
 800f762:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800f766:	f107 0318 	add.w	r3, r7, #24
 800f76a:	9301      	str	r3, [sp, #4]
 800f76c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f76e:	9300      	str	r3, [sp, #0]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	68b9      	ldr	r1, [r7, #8]
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f000 f85e 	bl	800f838 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800f77c:	4603      	mov	r3, r0
 800f77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f786:	2b00      	cmp	r3, #0
 800f788:	d01e      	beq.n	800f7c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 800f78a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f78e:	e04d      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 800f790:	0801d4d0 	.word	0x0801d4d0
 800f794:	0801d4ec 	.word	0x0801d4ec
 800f798:	0801d45c 	.word	0x0801d45c
 800f79c:	0801d4b4 	.word	0x0801d4b4
 800f7a0:	0801d508 	.word	0x0801d508
 800f7a4:	0801d53c 	.word	0x0801d53c
 800f7a8:	0801d524 	.word	0x0801d524
 800f7ac:	0801d550 	.word	0x0801d550
 800f7b0:	0801d56c 	.word	0x0801d56c
 800f7b4:	0801d5a8 	.word	0x0801d5a8
 800f7b8:	0801d5b4 	.word	0x0801d5b4
 800f7bc:	0801d5c4 	.word	0x0801d5c4
 800f7c0:	0801d5d4 	.word	0x0801d5d4
 800f7c4:	0801d5f8 	.word	0x0801d5f8
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800f7c8:	ed97 7b06 	vldr	d7, [r7, #24]
 800f7cc:	f107 0314 	add.w	r3, r7, #20
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800f7d4:	eeb0 0a47 	vmov.f32	s0, s14
 800f7d8:	eef0 0a67 	vmov.f32	s1, s15
 800f7dc:	f7ff fc18 	bl	800f010 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	425a      	negs	r2, r3
 800f7e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f7e6:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2b09      	cmp	r3, #9
 800f7ee:	d007      	beq.n	800f800 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	2b03      	cmp	r3, #3
 800f7f6:	d003      	beq.n	800f800 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800f7fc:	2b07      	cmp	r3, #7
 800f7fe:	d114      	bne.n	800f82a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800f800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f802:	7819      	ldrb	r1, [r3, #0]
 800f804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f808:	9300      	str	r3, [sp, #0]
 800f80a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f80e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f000 f99b 	bl	800fb4c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800f816:	4603      	mov	r3, r0
 800f818:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800f81c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f820:	2b00      	cmp	r3, #0
 800f822:	d002      	beq.n	800f82a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 800f824:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f828:	e000      	b.n	800f82c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3760      	adds	r7, #96	; 0x60
 800f830:	46bd      	mov	sp, r7
 800f832:	bdb0      	pop	{r4, r5, r7, pc}
 800f834:	0000      	movs	r0, r0
	...

0800f838 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800f838:	b5b0      	push	{r4, r5, r7, lr}
 800f83a:	b08e      	sub	sp, #56	; 0x38
 800f83c:	af02      	add	r7, sp, #8
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
 800f844:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7f0 fe9c 	bl	8000588 <__aeabi_f2d>
 800f850:	4604      	mov	r4, r0
 800f852:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	4618      	mov	r0, r3
 800f85a:	f7f0 fe95 	bl	8000588 <__aeabi_f2d>
 800f85e:	4602      	mov	r2, r0
 800f860:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800f862:	4620      	mov	r0, r4
 800f864:	4629      	mov	r1, r5
 800f866:	f7f0 fee7 	bl	8000638 <__aeabi_dmul>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d04a      	beq.n	800f90e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7f0 fe83 	bl	8000588 <__aeabi_f2d>
 800f882:	4602      	mov	r2, r0
 800f884:	460b      	mov	r3, r1
 800f886:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800f88a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f88e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f892:	f7f0 fd19 	bl	80002c8 <__aeabi_dsub>
 800f896:	4602      	mov	r2, r0
 800f898:	460b      	mov	r3, r1
 800f89a:	ec43 2b17 	vmov	d7, r2, r3
 800f89e:	eeb0 0a47 	vmov.f32	s0, s14
 800f8a2:	eef0 0a67 	vmov.f32	s1, s15
 800f8a6:	f7ff fe18 	bl	800f4da <_ZSt3absd>
 800f8aa:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800f8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f0 fe68 	bl	8000588 <__aeabi_f2d>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800f8c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f8c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f8c8:	f7f0 ffe0 	bl	800088c <__aeabi_ddiv>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	461c      	mov	r4, r3
 800f8d8:	a318      	add	r3, pc, #96	; (adr r3, 800f93c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	f7f1 f927 	bl	8000b30 <__aeabi_dcmple>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d101      	bne.n	800f8ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	461c      	mov	r4, r3
 800f8ec:	b2e3      	uxtb	r3, r4
 800f8ee:	f083 0301 	eor.w	r3, r3, #1
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00a      	beq.n	800f90e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	695c      	ldr	r4, [r3, #20]
 800f8fc:	4b0c      	ldr	r3, [pc, #48]	; (800f930 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	239a      	movs	r3, #154	; 0x9a
 800f902:	4a0c      	ldr	r2, [pc, #48]	; (800f934 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800f904:	490c      	ldr	r1, [pc, #48]	; (800f938 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800f906:	68f8      	ldr	r0, [r7, #12]
 800f908:	47a0      	blx	r4
 800f90a:	2301      	movs	r3, #1
 800f90c:	e009      	b.n	800f922 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800f90e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f910:	9300      	str	r3, [sp, #0]
 800f912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	68b9      	ldr	r1, [r7, #8]
 800f918:	68f8      	ldr	r0, [r7, #12]
 800f91a:	f000 f813 	bl	800f944 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800f91e:	4603      	mov	r3, r0
                                          multiplier);
 800f920:	bf00      	nop
}
 800f922:	4618      	mov	r0, r3
 800f924:	3730      	adds	r7, #48	; 0x30
 800f926:	46bd      	mov	sp, r7
 800f928:	bdb0      	pop	{r4, r5, r7, pc}
 800f92a:	bf00      	nop
 800f92c:	f3af 8000 	nop.w
 800f930:	0801d638 	.word	0x0801d638
 800f934:	0801d45c 	.word	0x0801d45c
 800f938:	0801d524 	.word	0x0801d524
 800f93c:	47ae147b 	.word	0x47ae147b
 800f940:	3f947ae1 	.word	0x3f947ae1

0800f944 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800f944:	b590      	push	{r4, r7, lr}
 800f946:	b089      	sub	sp, #36	; 0x24
 800f948:	af02      	add	r7, sp, #8
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
 800f950:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	ed93 7a03 	vldr	s14, [r3, #12]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	edd3 7a03 	vldr	s15, [r3, #12]
 800f95e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800f962:	ee17 0a90 	vmov	r0, s15
 800f966:	f7f0 fe0f 	bl	8000588 <__aeabi_f2d>
 800f96a:	4602      	mov	r2, r0
 800f96c:	460b      	mov	r3, r1
 800f96e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800f972:	2301      	movs	r3, #1
 800f974:	461c      	mov	r4, r3
 800f976:	f04f 0200 	mov.w	r2, #0
 800f97a:	f04f 0300 	mov.w	r3, #0
 800f97e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f982:	f7f1 f8df 	bl	8000b44 <__aeabi_dcmpge>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d101      	bne.n	800f990 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800f98c:	2300      	movs	r3, #0
 800f98e:	461c      	mov	r4, r3
 800f990:	b2e3      	uxtb	r3, r4
 800f992:	f083 0301 	eor.w	r3, r3, #1
 800f996:	b2db      	uxtb	r3, r3
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00a      	beq.n	800f9b2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	695c      	ldr	r4, [r3, #20]
 800f9a0:	4b0e      	ldr	r3, [pc, #56]	; (800f9dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 800f9a2:	9300      	str	r3, [sp, #0]
 800f9a4:	23a7      	movs	r3, #167	; 0xa7
 800f9a6:	4a0e      	ldr	r2, [pc, #56]	; (800f9e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800f9a8:	490e      	ldr	r1, [pc, #56]	; (800f9e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800f9aa:	68f8      	ldr	r0, [r7, #12]
 800f9ac:	47a0      	blx	r4
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e010      	b.n	800f9d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7f0 fde6 	bl	8000588 <__aeabi_f2d>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	460b      	mov	r3, r1
 800f9c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f9c4:	f7f0 ff62 	bl	800088c <__aeabi_ddiv>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9ce:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800f9d2:	2300      	movs	r3, #0
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	371c      	adds	r7, #28
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd90      	pop	{r4, r7, pc}
 800f9dc:	0801d65c 	.word	0x0801d65c
 800f9e0:	0801d45c 	.word	0x0801d45c
 800f9e4:	0801d524 	.word	0x0801d524

0800f9e8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	ed87 0a00 	vstr	s0, [r7]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800f9fa:	ed97 7a00 	vldr	s14, [r7]
 800f9fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fa02:	eeb0 0a66 	vmov.f32	s0, s13
 800fa06:	f7ff fcc0 	bl	800f38a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800fa0a:	eef0 7a40 	vmov.f32	s15, s0
 800fa0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa12:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800fa1a:	4413      	add	r3, r2
  };
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b08e      	sub	sp, #56	; 0x38
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60b9      	str	r1, [r7, #8]
 800fa2c:	607a      	str	r2, [r7, #4]
 800fa2e:	603b      	str	r3, [r7, #0]
 800fa30:	4603      	mov	r3, r0
 800fa32:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800fa40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa42:	617b      	str	r3, [r7, #20]
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 800fa48:	7bfb      	ldrb	r3, [r7, #15]
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d118      	bne.n	800fa80 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800fa4e:	f107 0314 	add.w	r3, r7, #20
 800fa52:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800fb48 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7ff ffc6 	bl	800f9e8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	61fb      	str	r3, [r7, #28]
 800fa60:	f107 021c 	add.w	r2, r7, #28
 800fa64:	f107 0308 	add.w	r3, r7, #8
 800fa68:	4611      	mov	r1, r2
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f000 f8d6 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 800fa70:	4603      	mov	r3, r0
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa76:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa7c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 800fa7e:	e05f      	b.n	800fb40 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	2b03      	cmp	r3, #3
 800fa84:	d129      	bne.n	800fada <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 800fa86:	f107 0314 	add.w	r3, r7, #20
 800fa8a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800fb48 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7ff ffaa 	bl	800f9e8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800fa94:	4603      	mov	r3, r0
 800fa96:	623b      	str	r3, [r7, #32]
 800fa98:	f107 0220 	add.w	r2, r7, #32
 800fa9c:	f107 0308 	add.w	r3, r7, #8
 800faa0:	4611      	mov	r1, r2
 800faa2:	4618      	mov	r0, r3
 800faa4:	f000 f8ba 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 800faa8:	4603      	mov	r3, r0
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faae:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 800fab0:	f107 0314 	add.w	r3, r7, #20
 800fab4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800fab8:	4618      	mov	r0, r3
 800faba:	f7ff ff95 	bl	800f9e8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800fabe:	4603      	mov	r3, r0
 800fac0:	627b      	str	r3, [r7, #36]	; 0x24
 800fac2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fac6:	1d3b      	adds	r3, r7, #4
 800fac8:	4611      	mov	r1, r2
 800faca:	4618      	mov	r0, r3
 800facc:	f000 f8ba 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 800fad0:	4603      	mov	r3, r0
 800fad2:	681a      	ldr	r2, [r3, #0]
 800fad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fad6:	601a      	str	r2, [r3, #0]
}
 800fad8:	e032      	b.n	800fb40 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 800fada:	7bfb      	ldrb	r3, [r7, #15]
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d129      	bne.n	800fb34 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 800fae0:	f107 0314 	add.w	r3, r7, #20
 800fae4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800fae8:	4618      	mov	r0, r3
 800faea:	f7ff ff7d 	bl	800f9e8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800faee:	4603      	mov	r3, r0
 800faf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800faf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800faf6:	f107 0308 	add.w	r3, r7, #8
 800fafa:	4611      	mov	r1, r2
 800fafc:	4618      	mov	r0, r3
 800fafe:	f000 f88d 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 800fb02:	4603      	mov	r3, r0
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb08:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 800fb0a:	f107 0314 	add.w	r3, r7, #20
 800fb0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7ff ff68 	bl	800f9e8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb1c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fb20:	1d3b      	adds	r3, r7, #4
 800fb22:	4611      	mov	r1, r2
 800fb24:	4618      	mov	r0, r3
 800fb26:	f000 f88d 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb30:	601a      	str	r2, [r3, #0]
}
 800fb32:	e005      	b.n	800fb40 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb38:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb3e:	601a      	str	r2, [r3, #0]
}
 800fb40:	bf00      	nop
 800fb42:	3738      	adds	r7, #56	; 0x38
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	00000000 	.word	0x00000000

0800fb4c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800fb4c:	b590      	push	{r4, r7, lr}
 800fb4e:	b089      	sub	sp, #36	; 0x24
 800fb50:	af02      	add	r7, sp, #8
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	607a      	str	r2, [r7, #4]
 800fb56:	603b      	str	r3, [r7, #0]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	2b03      	cmp	r3, #3
 800fb6a:	d108      	bne.n	800fb7e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800fb6c:	f7ff fc2e 	bl	800f3cc <_ZNSt14numeric_limitsIhE3minEv>
 800fb70:	4603      	mov	r3, r0
 800fb72:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800fb74:	f7ff fc32 	bl	800f3dc <_ZNSt14numeric_limitsIhE3maxEv>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	613b      	str	r3, [r7, #16]
 800fb7c:	e024      	b.n	800fbc8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	2b09      	cmp	r3, #9
 800fb84:	d108      	bne.n	800fb98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800fb86:	f7ff fc10 	bl	800f3aa <_ZNSt14numeric_limitsIaE3minEv>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800fb8e:	f7ff fc15 	bl	800f3bc <_ZNSt14numeric_limitsIaE3maxEv>
 800fb92:	4603      	mov	r3, r0
 800fb94:	613b      	str	r3, [r7, #16]
 800fb96:	e017      	b.n	800fbc8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	2b07      	cmp	r3, #7
 800fb9e:	d108      	bne.n	800fbb2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800fba0:	f7ff fc24 	bl	800f3ec <_ZNSt14numeric_limitsIsE3minEv>
 800fba4:	4603      	mov	r3, r0
 800fba6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800fba8:	f7ff fc2a 	bl	800f400 <_ZNSt14numeric_limitsIsE3maxEv>
 800fbac:	4603      	mov	r3, r0
 800fbae:	613b      	str	r3, [r7, #16]
 800fbb0:	e00a      	b.n	800fbc8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	695c      	ldr	r4, [r3, #20]
 800fbb6:	4b0c      	ldr	r3, [pc, #48]	; (800fbe8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 800fbb8:	9300      	str	r3, [sp, #0]
 800fbba:	23da      	movs	r3, #218	; 0xda
 800fbbc:	4a0b      	ldr	r2, [pc, #44]	; (800fbec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 800fbbe:	490c      	ldr	r1, [pc, #48]	; (800fbf0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	47a0      	blx	r4
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	e00a      	b.n	800fbde <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 800fbc8:	7af8      	ldrb	r0, [r7, #11]
 800fbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	6979      	ldr	r1, [r7, #20]
 800fbd8:	f7ff ff24 	bl	800fa24 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	371c      	adds	r7, #28
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd90      	pop	{r4, r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	0801d678 	.word	0x0801d678
 800fbec:	0801d45c 	.word	0x0801d45c
 800fbf0:	0801d524 	.word	0x0801d524

0800fbf4 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	da01      	bge.n	800fc0e <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	e000      	b.n	800fc10 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800fc0e:	687b      	ldr	r3, [r7, #4]
    }
 800fc10:	4618      	mov	r0, r3
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	da01      	bge.n	800fc36 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	e000      	b.n	800fc38 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800fc36:	687b      	ldr	r3, [r7, #4]
    }
 800fc38:	4618      	mov	r0, r3
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	da01      	bge.n	800fc5e <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	e000      	b.n	800fc60 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800fc5e:	687b      	ldr	r3, [r7, #4]
    }
 800fc60:	4618      	mov	r0, r3
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                                    const TfLiteNode* node, int index) {
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	689a      	ldr	r2, [r3, #8]
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	6819      	ldr	r1, [r3, #0]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	440b      	add	r3, r1
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	019b      	lsls	r3, r3, #6
 800fc8a:	4413      	add	r3, r2
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                               int index) {
 800fc98:	b480      	push	{r7}
 800fc9a:	b085      	sub	sp, #20
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	689a      	ldr	r2, [r3, #8]
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	6859      	ldr	r1, [r3, #4]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	440b      	add	r3, r1
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	019b      	lsls	r3, r3, #6
 800fcb6:	4413      	add	r3, r2
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3714      	adds	r7, #20
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d002      	beq.n	800fcd8 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800fcd6:	e000      	b.n	800fcda <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800fcd8:	2300      	movs	r3, #0
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr

0800fce6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800fce6:	b480      	push	{r7}
 800fce8:	b083      	sub	sp, #12
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	e000      	b.n	800fcfc <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2200      	movs	r2, #0
 800fd34:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	68b9      	ldr	r1, [r7, #8]
 800fd3a:	68f8      	ldr	r0, [r7, #12]
 800fd3c:	f000 f89e 	bl	800fe7c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	4618      	mov	r0, r3
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b082      	sub	sp, #8
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b05      	cmp	r3, #5
 800fd58:	dd08      	ble.n	800fd6c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d004      	beq.n	800fd6c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	4618      	mov	r0, r3
 800fd68:	f007 f928 	bl	8016fbc <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 800fd76:	b480      	push	{r7}
 800fd78:	b083      	sub	sp, #12
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4618      	mov	r0, r3
 800fd84:	370c      	adds	r7, #12
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr

0800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b082      	sub	sp, #8
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
 800fd96:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	da01      	bge.n	800fda2 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800fd9e:	f00a f9d3 	bl	801a148 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	683a      	ldr	r2, [r7, #0]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	db01      	blt.n	800fdb0 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800fdac:	f00a f9cc 	bl	801a148 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b05      	cmp	r3, #5
 800fdb6:	dd06      	ble.n	800fdc6 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	685a      	ldr	r2, [r3, #4]
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	4413      	add	r3, r2
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	e004      	b.n	800fdd0 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	009b      	lsls	r3, r3, #2
 800fdcc:	4413      	add	r3, r2
 800fdce:	685b      	ldr	r3, [r3, #4]
  }
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b05      	cmp	r3, #5
 800fde6:	dd02      	ble.n	800fdee <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	e001      	b.n	800fdf2 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	3304      	adds	r3, #4
  }
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	370c      	adds	r7, #12
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 800fdfe:	b480      	push	{r7}
 800fe00:	b083      	sub	sp, #12
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b05      	cmp	r3, #5
 800fe0c:	dd02      	ble.n	800fe14 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	e001      	b.n	800fe18 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	3304      	adds	r3, #4
  }
 800fe18:	4618      	mov	r0, r3
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b05      	cmp	r3, #5
 800fe34:	dd08      	ble.n	800fe48 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d004      	beq.n	800fe48 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	4618      	mov	r0, r3
 800fe44:	f007 f8ba 	bl	8016fbc <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	683a      	ldr	r2, [r7, #0]
 800fe4c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	2b05      	cmp	r3, #5
 800fe52:	dd0f      	ble.n	800fe74 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d201      	bcs.n	800fe62 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	e001      	b.n	800fe66 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800fe62:	f04f 33ff 	mov.w	r3, #4294967295
 800fe66:	4618      	mov	r0, r3
 800fe68:	f007 f8ca 	bl	8017000 <_Znaj>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	461a      	mov	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b086      	sub	sp, #24
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800fe88:	68b9      	ldr	r1, [r7, #8]
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	f7ff ffca 	bl	800fe24 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 800fe90:	68f8      	ldr	r0, [r7, #12]
 800fe92:	f7ff ffa1 	bl	800fdd8 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800fe96:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	6879      	ldr	r1, [r7, #4]
 800fea0:	6978      	ldr	r0, [r7, #20]
 800fea2:	f00a fa57 	bl	801a354 <memcpy>
  }
 800fea6:	bf00      	nop
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}

0800feae <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800feae:	b580      	push	{r7, lr}
 800feb0:	b086      	sub	sp, #24
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800feb6:	2301      	movs	r3, #1
 800feb8:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f7ff ff9f 	bl	800fdfe <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800fec0:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800fec2:	2300      	movs	r3, #0
 800fec4:	613b      	str	r3, [r7, #16]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	693a      	ldr	r2, [r7, #16]
 800fecc:	429a      	cmp	r2, r3
 800fece:	da0c      	bge.n	800feea <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	68fa      	ldr	r2, [r7, #12]
 800fed6:	4413      	add	r3, r2
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	fb02 f303 	mul.w	r3, r2, r3
 800fee0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	3301      	adds	r3, #1
 800fee6:	613b      	str	r3, [r7, #16]
 800fee8:	e7ed      	b.n	800fec6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800feea:	697b      	ldr	r3, [r7, #20]
  }
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d103      	bne.n	800ff0c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f7ff feff 	bl	800fd08 <_ZN6tflite12RuntimeShapeC1Ev>
 800ff0a:	e00d      	b.n	800ff28 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	3304      	adds	r3, #4
 800ff1c:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800ff1e:	68fa      	ldr	r2, [r7, #12]
 800ff20:	6939      	ldr	r1, [r7, #16]
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7ff fefe 	bl	800fd24 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	3718      	adds	r7, #24
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d002      	beq.n	800ff44 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800ff42:	e000      	b.n	800ff46 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	370c      	adds	r7, #12
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr

0800ff52 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800ff52:	b480      	push	{r7}
 800ff54:	b083      	sub	sp, #12
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d002      	beq.n	800ff66 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	e000      	b.n	800ff68 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 800ff66:	2300      	movs	r3, #0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800ff86:	e000      	b.n	800ff8a <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800ff96:	b480      	push	{r7}
 800ff98:	b083      	sub	sp, #12
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	e000      	b.n	800ffac <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 800ffaa:	2300      	movs	r3, #0
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	370c      	adds	r7, #12
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr

0800ffb8 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800ffb8:	b480      	push	{r7}
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr
	...

0800ffcc <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800ffcc:	b480      	push	{r7}
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	4b04      	ldr	r3, [pc, #16]	; (800ffe4 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800ffd2:	ee07 3a90 	vmov	s15, r3
 800ffd6:	eeb0 0a67 	vmov.f32	s0, s15
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	7f7fffff 	.word	0x7f7fffff

0800ffe8 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800fff0:	ee07 3a90 	vmov	s15, r3
 800fff4:	eeb0 0a67 	vmov.f32	s0, s15
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr

08010000 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8010000:	b5b0      	push	{r4, r5, r7, lr}
 8010002:	b08c      	sub	sp, #48	; 0x30
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	429a      	cmp	r2, r3
 8010010:	d107      	bne.n	8010022 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8010012:	f7ff ffd1 	bl	800ffb8 <_ZNSt14numeric_limitsIlE3minEv>
 8010016:	4602      	mov	r2, r0
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	4293      	cmp	r3, r2
 801001c:	d101      	bne.n	8010022 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 801001e:	2301      	movs	r3, #1
 8010020:	e000      	b.n	8010024 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8010022:	2300      	movs	r3, #0
 8010024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	461a      	mov	r2, r3
 801002c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010030:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	461a      	mov	r2, r3
 8010038:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801003c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	fb02 f203 	mul.w	r2, r2, r3
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	6a39      	ldr	r1, [r7, #32]
 801004c:	fb01 f303 	mul.w	r3, r1, r3
 8010050:	18d1      	adds	r1, r2, r3
 8010052:	6a3a      	ldr	r2, [r7, #32]
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	fba2 2303 	umull	r2, r3, r2, r3
 801005a:	4419      	add	r1, r3
 801005c:	460b      	mov	r3, r1
 801005e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010062:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8010066:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801006a:	2a00      	cmp	r2, #0
 801006c:	f173 0300 	sbcs.w	r3, r3, #0
 8010070:	db02      	blt.n	8010078 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8010072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010076:	e000      	b.n	801007a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 8010078:	4b18      	ldr	r3, [pc, #96]	; (80100dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 801007a:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	4618      	mov	r0, r3
 8010080:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8010084:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010088:	1884      	adds	r4, r0, r2
 801008a:	eb41 0503 	adc.w	r5, r1, r3
 801008e:	4622      	mov	r2, r4
 8010090:	462b      	mov	r3, r5
 8010092:	2a00      	cmp	r2, #0
 8010094:	f173 0100 	sbcs.w	r1, r3, #0
 8010098:	da06      	bge.n	80100a8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 801009a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801009e:	f04f 0100 	mov.w	r1, #0
 80100a2:	1812      	adds	r2, r2, r0
 80100a4:	eb41 0303 	adc.w	r3, r1, r3
 80100a8:	f04f 0000 	mov.w	r0, #0
 80100ac:	f04f 0100 	mov.w	r1, #0
 80100b0:	0fd0      	lsrs	r0, r2, #31
 80100b2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80100b6:	17d9      	asrs	r1, r3, #31
 80100b8:	4602      	mov	r2, r0
 80100ba:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 80100bc:	4613      	mov	r3, r2
 80100be:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80100c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d003      	beq.n	80100d0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 80100c8:	f7fe ff98 	bl	800effc <_ZNSt14numeric_limitsIlE3maxEv>
 80100cc:	4603      	mov	r3, r0
 80100ce:	e000      	b.n	80100d2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 80100d0:	68bb      	ldr	r3, [r7, #8]
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3730      	adds	r7, #48	; 0x30
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bdb0      	pop	{r4, r5, r7, pc}
 80100da:	bf00      	nop
 80100dc:	c0000001 	.word	0xc0000001

080100e0 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32* DimsDataUpTo5D() const { return dims_; }
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	3304      	adds	r3, #4
 80100ec:	4618      	mov	r0, r3
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
 8010104:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8010106:	68f8      	ldr	r0, [r7, #12]
 8010108:	f7ff fe35 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801010c:	4603      	mov	r3, r0
 801010e:	2b04      	cmp	r3, #4
 8010110:	d001      	beq.n	8010116 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 8010112:	f00a f819 	bl	801a148 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f7ff ffe2 	bl	80100e0 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 801011c:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	2b00      	cmp	r3, #0
 8010122:	db04      	blt.n	801012e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	68ba      	ldr	r2, [r7, #8]
 801012a:	429a      	cmp	r2, r3
 801012c:	db01      	blt.n	8010132 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 801012e:	f00a f80b 	bl	801a148 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	db05      	blt.n	8010144 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	3304      	adds	r3, #4
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	429a      	cmp	r2, r3
 8010142:	db01      	blt.n	8010148 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8010144:	f00a f800 	bl	801a148 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	db05      	blt.n	801015a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	3308      	adds	r3, #8
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	683a      	ldr	r2, [r7, #0]
 8010156:	429a      	cmp	r2, r3
 8010158:	db01      	blt.n	801015e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 801015a:	f009 fff5 	bl	801a148 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	2b00      	cmp	r3, #0
 8010162:	db05      	blt.n	8010170 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	330c      	adds	r3, #12
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	6a3a      	ldr	r2, [r7, #32]
 801016c:	429a      	cmp	r2, r3
 801016e:	db01      	blt.n	8010174 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8010170:	f009 ffea 	bl	801a148 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	3304      	adds	r3, #4
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	fb02 f203 	mul.w	r2, r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4413      	add	r3, r2
 8010184:	697a      	ldr	r2, [r7, #20]
 8010186:	3208      	adds	r2, #8
 8010188:	6812      	ldr	r2, [r2, #0]
 801018a:	fb02 f203 	mul.w	r2, r2, r3
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	4413      	add	r3, r2
 8010192:	697a      	ldr	r2, [r7, #20]
 8010194:	320c      	adds	r2, #12
 8010196:	6812      	ldr	r2, [r2, #0]
 8010198:	fb02 f203 	mul.w	r2, r2, r3
 801019c:	6a3b      	ldr	r3, [r7, #32]
 801019e:	4413      	add	r3, r2
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3718      	adds	r7, #24
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80101b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80101b6:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 80101ba:	f107 0208 	add.w	r2, r7, #8
 80101be:	f107 030c 	add.w	r3, r7, #12
 80101c2:	4611      	mov	r1, r2
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7ff f8b3 	bl	800f330 <_ZSt3maxIfERKT_S2_S2_>
 80101ca:	4602      	mov	r2, r0
 80101cc:	1d3b      	adds	r3, r7, #4
 80101ce:	4619      	mov	r1, r3
 80101d0:	4610      	mov	r0, r2
 80101d2:	f7ff f894 	bl	800f2fe <_ZSt3minIfERKT_S2_S2_>
 80101d6:	4603      	mov	r3, r0
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	ee07 3a90 	vmov	s15, r3
}
 80101de:	eeb0 0a67 	vmov.f32	s0, s15
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 80101e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ea:	b089      	sub	sp, #36	; 0x24
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 80101f2:	6839      	ldr	r1, [r7, #0]
 80101f4:	2900      	cmp	r1, #0
 80101f6:	da06      	bge.n	8010206 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 80101f8:	4b31      	ldr	r3, [pc, #196]	; (80102c0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 80101fa:	4a32      	ldr	r2, [pc, #200]	; (80102c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80101fc:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8010200:	4831      	ldr	r0, [pc, #196]	; (80102c8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8010202:	f009 ffa9 	bl	801a158 <__assert_func>
  assert(exponent <= 31);
 8010206:	6839      	ldr	r1, [r7, #0]
 8010208:	291f      	cmp	r1, #31
 801020a:	dd06      	ble.n	801021a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 801020c:	4b2f      	ldr	r3, [pc, #188]	; (80102cc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801020e:	4a2d      	ldr	r2, [pc, #180]	; (80102c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8010210:	f240 1167 	movw	r1, #359	; 0x167
 8010214:	482c      	ldr	r0, [pc, #176]	; (80102c8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8010216:	f009 ff9f 	bl	801a158 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801021a:	f04f 0001 	mov.w	r0, #1
 801021e:	f04f 0100 	mov.w	r1, #0
 8010222:	683c      	ldr	r4, [r7, #0]
 8010224:	f1a4 0620 	sub.w	r6, r4, #32
 8010228:	f1c4 0520 	rsb	r5, r4, #32
 801022c:	fa01 f304 	lsl.w	r3, r1, r4
 8010230:	fa00 f606 	lsl.w	r6, r0, r6
 8010234:	4333      	orrs	r3, r6
 8010236:	fa20 f505 	lsr.w	r5, r0, r5
 801023a:	432b      	orrs	r3, r5
 801023c:	fa00 f204 	lsl.w	r2, r0, r4
 8010240:	4613      	mov	r3, r2
 8010242:	3b01      	subs	r3, #1
 8010244:	4618      	mov	r0, r3
 8010246:	f000 f885 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801024a:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 801024c:	2000      	movs	r0, #0
 801024e:	f000 f881 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010252:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8010254:	2001      	movs	r0, #1
 8010256:	f000 f87d 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801025a:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 801025c:	69f9      	ldr	r1, [r7, #28]
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 f883 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010264:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8010266:	2101      	movs	r1, #1
 8010268:	69f8      	ldr	r0, [r7, #28]
 801026a:	f000 f88c 	bl	8010386 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801026e:	4604      	mov	r4, r0
 8010270:	69b9      	ldr	r1, [r7, #24]
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 f896 	bl	80103a4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8010278:	4603      	mov	r3, r0
 801027a:	6979      	ldr	r1, [r7, #20]
 801027c:	4618      	mov	r0, r3
 801027e:	f000 f874 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010282:	4603      	mov	r3, r0
 8010284:	4619      	mov	r1, r3
 8010286:	4620      	mov	r0, r4
 8010288:	f000 f8a0 	bl	80103cc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801028c:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801028e:	6839      	ldr	r1, [r7, #0]
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 f878 	bl	8010386 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8010296:	4604      	mov	r4, r0
 8010298:	68f9      	ldr	r1, [r7, #12]
 801029a:	6938      	ldr	r0, [r7, #16]
 801029c:	f000 f8a4 	bl	80103e8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80102a0:	4603      	mov	r3, r0
 80102a2:	6979      	ldr	r1, [r7, #20]
 80102a4:	4618      	mov	r0, r3
 80102a6:	f000 f860 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80102aa:	4603      	mov	r3, r0
 80102ac:	4619      	mov	r1, r3
 80102ae:	4620      	mov	r0, r4
 80102b0:	f000 f88c 	bl	80103cc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80102b4:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3724      	adds	r7, #36	; 0x24
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102be:	bf00      	nop
 80102c0:	0801d710 	.word	0x0801d710
 80102c4:	0801d720 	.word	0x0801d720
 80102c8:	0801d77c 	.word	0x0801d77c
 80102cc:	0801d804 	.word	0x0801d804

080102d0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4603      	mov	r3, r0
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
 80102dc:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 80102de:	7bfb      	ldrb	r3, [r7, #15]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d10b      	bne.n	80102fc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	f04f 0200 	mov.w	r2, #0
 80102ea:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 80102ec:	f7ff fe6e 	bl	800ffcc <_ZNSt14numeric_limitsIfE3maxEv>
 80102f0:	eef0 7a40 	vmov.f32	s15, s0
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 80102fa:	e023      	b.n	8010344 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 80102fc:	7bfb      	ldrb	r3, [r7, #15]
 80102fe:	2b03      	cmp	r3, #3
 8010300:	d107      	bne.n	8010312 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	f04f 0200 	mov.w	r2, #0
 8010308:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4a0f      	ldr	r2, [pc, #60]	; (801034c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 801030e:	601a      	str	r2, [r3, #0]
}
 8010310:	e018      	b.n	8010344 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8010312:	7bfb      	ldrb	r3, [r7, #15]
 8010314:	2b02      	cmp	r3, #2
 8010316:	d107      	bne.n	8010328 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	4a0d      	ldr	r2, [pc, #52]	; (8010350 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 801031c:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010324:	601a      	str	r2, [r3, #0]
}
 8010326:	e00d      	b.n	8010344 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8010328:	f7ff fe5e 	bl	800ffe8 <_ZNSt14numeric_limitsIfE6lowestEv>
 801032c:	eef0 7a40 	vmov.f32	s15, s0
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8010336:	f7ff fe49 	bl	800ffcc <_ZNSt14numeric_limitsIfE3maxEv>
 801033a:	eef0 7a40 	vmov.f32	s15, s0
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	edc3 7a00 	vstr	s15, [r3]
}
 8010344:	bf00      	nop
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	40c00000 	.word	0x40c00000
 8010350:	bf800000 	.word	0xbf800000

08010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  return x;
 801035c:	687b      	ldr	r3, [r7, #4]
}
 801035e:	4618      	mov	r0, r3
 8010360:	370c      	adds	r7, #12
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr

0801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801036a:	b480      	push	{r7}
 801036c:	b083      	sub	sp, #12
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
 8010372:	6039      	str	r1, [r7, #0]
  return a & b;
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	4013      	ands	r3, r2
}
 801037a:	4618      	mov	r0, r3
 801037c:	370c      	adds	r7, #12
 801037e:	46bd      	mov	sp, r7
 8010380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010384:	4770      	bx	lr

08010386 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8010386:	b480      	push	{r7}
 8010388:	b083      	sub	sp, #12
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
 801038e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	fa42 f303 	asr.w	r3, r2, r3
}
 8010398:	4618      	mov	r0, r3
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	bfb4      	ite	lt
 80103b6:	2301      	movlt	r3, #1
 80103b8:	2300      	movge	r3, #0
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 f827 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80103c2:	4603      	mov	r3, r0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
  return a + b;
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	4413      	add	r3, r2
}
 80103dc:	4618      	mov	r0, r3
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	bfcc      	ite	gt
 80103fa:	2301      	movgt	r3, #1
 80103fc:	2300      	movle	r3, #0
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	4618      	mov	r0, r3
 8010402:	f000 f805 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010406:	4603      	mov	r3, r0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d004      	beq.n	8010428 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 801041e:	2000      	movs	r0, #0
 8010420:	f000 f807 	bl	8010432 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8010424:	4603      	mov	r3, r0
 8010426:	e000      	b.n	801042a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8010428:	2300      	movs	r3, #0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8010432:	b480      	push	{r7}
 8010434:	b083      	sub	sp, #12
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
  return ~a;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	43db      	mvns	r3, r3
}
 801043e:	4618      	mov	r0, r3
 8010440:	370c      	adds	r7, #12
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr

0801044a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 801044a:	b480      	push	{r7}
 801044c:	b083      	sub	sp, #12
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 801045c:	e000      	b.n	8010460 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 801045e:	2300      	movs	r3, #0
}
 8010460:	4618      	mov	r0, r3
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4618      	mov	r0, r3
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8010486:	b480      	push	{r7}
 8010488:	b083      	sub	sp, #12
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4618      	mov	r0, r3
 8010496:	370c      	adds	r7, #12
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 80104a0:	b590      	push	{r4, r7, lr}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	607a      	str	r2, [r7, #4]
 80104ac:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 80104ae:	68b9      	ldr	r1, [r7, #8]
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f7ff fc6c 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80104b6:	4604      	mov	r4, r0
 80104b8:	6839      	ldr	r1, [r7, #0]
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7ff fc67 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80104c0:	4603      	mov	r3, r0
 80104c2:	429c      	cmp	r4, r3
 80104c4:	d001      	beq.n	80104ca <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 80104c6:	f009 fe3f 	bl	801a148 <abort>
  return shape1.Dims(index1);
 80104ca:	68b9      	ldr	r1, [r7, #8]
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f7ff fc5e 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80104d2:	4603      	mov	r3, r0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3714      	adds	r7, #20
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd90      	pop	{r4, r7, pc}

080104dc <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104ee:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	dc02      	bgt.n	80104fc <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	425b      	negs	r3, r3
 80104fa:	e000      	b.n	80104fe <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80104fc:	2300      	movs	r3, #0
 80104fe:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8010500:	68fa      	ldr	r2, [r7, #12]
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	fa02 f303 	lsl.w	r3, r2, r3
 8010508:	68b9      	ldr	r1, [r7, #8]
 801050a:	4618      	mov	r0, r3
 801050c:	f7ff fd78 	bl	8010000 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8010510:	4603      	mov	r3, r0
 8010512:	6939      	ldr	r1, [r7, #16]
 8010514:	4618      	mov	r0, r3
 8010516:	f7ff fe67 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801051a:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 801051c:	4618      	mov	r0, r3
 801051e:	3718      	adds	r7, #24
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 8010524:	b590      	push	{r4, r7, lr}
 8010526:	ed2d 8b02 	vpush	{d8}
 801052a:	b0a7      	sub	sp, #156	; 0x9c
 801052c:	af02      	add	r7, sp, #8
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	607a      	str	r2, [r7, #4]
 8010534:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801053c:	66bb      	str	r3, [r7, #104]	; 0x68
  const int stride_height = params.stride_height;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010544:	667b      	str	r3, [r7, #100]	; 0x64
  const int dilation_width_factor = params.dilation_width_factor;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801054c:	663b      	str	r3, [r7, #96]	; 0x60
  const int dilation_height_factor = params.dilation_height_factor;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010554:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int pad_width = params.padding_values.width;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801055c:	65bb      	str	r3, [r7, #88]	; 0x58
  const int pad_height = params.padding_values.height;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010564:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_min = params.float_activation_min;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801056a:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_activation_max = params.float_activation_max;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010570:	64fb      	str	r3, [r7, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8010572:	68b8      	ldr	r0, [r7, #8]
 8010574:	f7ff fbff 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010578:	4603      	mov	r3, r0
 801057a:	2b04      	cmp	r3, #4
 801057c:	d001      	beq.n	8010582 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 801057e:	f009 fde3 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8010582:	6838      	ldr	r0, [r7, #0]
 8010584:	f7ff fbf7 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010588:	4603      	mov	r3, r0
 801058a:	2b04      	cmp	r3, #4
 801058c:	d001      	beq.n	8010592 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 801058e:	f009 fddb 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8010592:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010596:	f7ff fbee 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801059a:	4603      	mov	r3, r0
 801059c:	2b04      	cmp	r3, #4
 801059e:	d001      	beq.n	80105a4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 80105a0:	f009 fdd2 	bl	801a148 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80105a4:	2300      	movs	r3, #0
 80105a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80105aa:	2100      	movs	r1, #0
 80105ac:	68b8      	ldr	r0, [r7, #8]
 80105ae:	f7ff ff77 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80105b2:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80105b4:	2303      	movs	r3, #3
 80105b6:	683a      	ldr	r2, [r7, #0]
 80105b8:	2103      	movs	r1, #3
 80105ba:	68b8      	ldr	r0, [r7, #8]
 80105bc:	f7ff ff70 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80105c0:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80105c2:	2303      	movs	r3, #3
 80105c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80105c8:	2100      	movs	r1, #0
 80105ca:	6838      	ldr	r0, [r7, #0]
 80105cc:	f7ff ff68 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80105d0:	6438      	str	r0, [r7, #64]	; 0x40
  if (bias_data) {
 80105d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d009      	beq.n	80105ee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80105da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80105de:	f7ff fc66 	bl	800feae <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80105e2:	4602      	mov	r2, r0
 80105e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d001      	beq.n	80105ee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 80105ea:	f009 fdad 	bl	801a148 <abort>
  }
  const int input_height = input_shape.Dims(1);
 80105ee:	2101      	movs	r1, #1
 80105f0:	68b8      	ldr	r0, [r7, #8]
 80105f2:	f7ff fbcc 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80105f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int input_width = input_shape.Dims(2);
 80105f8:	2102      	movs	r1, #2
 80105fa:	68b8      	ldr	r0, [r7, #8]
 80105fc:	f7ff fbc7 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010600:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_height = filter_shape.Dims(1);
 8010602:	2101      	movs	r1, #1
 8010604:	6838      	ldr	r0, [r7, #0]
 8010606:	f7ff fbc2 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 801060a:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_width = filter_shape.Dims(2);
 801060c:	2102      	movs	r1, #2
 801060e:	6838      	ldr	r0, [r7, #0]
 8010610:	f7ff fbbd 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010614:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
 8010616:	2101      	movs	r1, #1
 8010618:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801061c:	f7ff fbb7 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010620:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
 8010622:	2102      	movs	r1, #2
 8010624:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010628:	f7ff fbb1 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 801062c:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int batch = 0; batch < batches; ++batch) {
 801062e:	2300      	movs	r3, #0
 8010630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010634:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801063a:	429a      	cmp	r2, r3
 801063c:	f280 80de 	bge.w	80107fc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010640:	2300      	movs	r3, #0
 8010642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010646:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	429a      	cmp	r2, r3
 801064e:	f280 80cf 	bge.w	80107f0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010652:	2300      	movs	r3, #0
 8010654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010658:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065e:	429a      	cmp	r2, r3
 8010660:	f280 80c0 	bge.w	80107e4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8010664:	2300      	movs	r3, #0
 8010666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801066a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801066e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010670:	429a      	cmp	r2, r3
 8010672:	f280 80b1 	bge.w	80107d8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8010676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801067a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801067c:	fb02 f203 	mul.w	r2, r2, r3
 8010680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010682:	1ad3      	subs	r3, r2, r3
 8010684:	627b      	str	r3, [r7, #36]	; 0x24
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8010686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801068a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801068c:	fb02 f203 	mul.w	r2, r2, r3
 8010690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010692:	1ad3      	subs	r3, r2, r3
 8010694:	623b      	str	r3, [r7, #32]
          float total = 0.f;
 8010696:	f04f 0300 	mov.w	r3, #0
 801069a:	67fb      	str	r3, [r7, #124]	; 0x7c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 801069c:	2300      	movs	r3, #0
 801069e:	67bb      	str	r3, [r7, #120]	; 0x78
 80106a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80106a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a4:	429a      	cmp	r2, r3
 80106a6:	da5e      	bge.n	8010766 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x242>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80106a8:	2300      	movs	r3, #0
 80106aa:	677b      	str	r3, [r7, #116]	; 0x74
 80106ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80106ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b0:	429a      	cmp	r2, r3
 80106b2:	da54      	bge.n	801075e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x23a>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80106b4:	2300      	movs	r3, #0
 80106b6:	673b      	str	r3, [r7, #112]	; 0x70
 80106b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80106ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106bc:	429a      	cmp	r2, r3
 80106be:	da4a      	bge.n	8010756 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x232>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80106c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80106c4:	fb02 f303 	mul.w	r3, r2, r3
 80106c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ca:	4413      	add	r3, r2
 80106cc:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80106ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80106d2:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80106d6:	6a3a      	ldr	r2, [r7, #32]
 80106d8:	4413      	add	r3, r2
 80106da:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	db35      	blt.n	801074e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80106e2:	69fa      	ldr	r2, [r7, #28]
 80106e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e6:	429a      	cmp	r2, r3
 80106e8:	da31      	bge.n	801074e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80106ea:	69bb      	ldr	r3, [r7, #24]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	db2e      	blt.n	801074e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80106f0:	69ba      	ldr	r2, [r7, #24]
 80106f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106f4:	429a      	cmp	r2, r3
 80106f6:	da2a      	bge.n	801074e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
                    (in_y < input_height)) {
                  float input_value = input_data[Offset(
 80106f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106fa:	9300      	str	r3, [sp, #0]
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	69ba      	ldr	r2, [r7, #24]
 8010700:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8010704:	68b8      	ldr	r0, [r7, #8]
 8010706:	f7ff fcf7 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801070a:	4603      	mov	r3, r0
                      input_shape, batch, in_y, in_x, in_channel)];
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	4413      	add	r3, r2
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	617b      	str	r3, [r7, #20]
                  float filter_value =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8010716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801071c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801071e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010722:	6838      	ldr	r0, [r7, #0]
 8010724:	f7ff fce8 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010728:	4603      	mov	r3, r0
                                         filter_x, in_channel)];
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010730:	4413      	add	r3, r2
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 8010736:	ed97 7a05 	vldr	s14, [r7, #20]
 801073a:	edd7 7a04 	vldr	s15, [r7, #16]
 801073e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010742:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8010746:	ee77 7a27 	vadd.f32	s15, s14, s15
 801074a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801074e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010750:	3301      	adds	r3, #1
 8010752:	673b      	str	r3, [r7, #112]	; 0x70
 8010754:	e7b0      	b.n	80106b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x194>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8010756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010758:	3301      	adds	r3, #1
 801075a:	677b      	str	r3, [r7, #116]	; 0x74
 801075c:	e7a6      	b.n	80106ac <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x188>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 801075e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010760:	3301      	adds	r3, #1
 8010762:	67bb      	str	r3, [r7, #120]	; 0x78
 8010764:	e79c      	b.n	80106a0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17c>
                }
              }
            }
          }
          float bias_value = 0.0f;
 8010766:	f04f 0300 	mov.w	r3, #0
 801076a:	66fb      	str	r3, [r7, #108]	; 0x6c
          if (bias_data) {
 801076c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010770:	2b00      	cmp	r3, #0
 8010772:	d007      	beq.n	8010784 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x260>
            bias_value = bias_data[out_channel];
 8010774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010778:	009b      	lsls	r3, r3, #2
 801077a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801077e:	4413      	add	r3, r2
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	66fb      	str	r3, [r7, #108]	; 0x6c
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 8010784:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8010788:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801078c:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8010790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801079a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801079e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80107a2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80107a6:	f7ff fca7 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80107aa:	4603      	mov	r3, r0
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80107b2:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 80107b4:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 80107b8:	edd7 0a14 	vldr	s1, [r7, #80]	; 0x50
 80107bc:	eeb0 0a48 	vmov.f32	s0, s16
 80107c0:	f7ff fcf2 	bl	80101a8 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 80107c4:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80107c8:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80107cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107d0:	3301      	adds	r3, #1
 80107d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80107d6:	e748      	b.n	801066a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x146>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80107d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107dc:	3301      	adds	r3, #1
 80107de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80107e2:	e739      	b.n	8010658 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80107e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107e8:	3301      	adds	r3, #1
 80107ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80107ee:	e72a      	b.n	8010646 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 80107f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107f4:	3301      	adds	r3, #1
 80107f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80107fa:	e71b      	b.n	8010634 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 80107fc:	bf00      	nop
 80107fe:	3794      	adds	r7, #148	; 0x94
 8010800:	46bd      	mov	sp, r7
 8010802:	ecbd 8b02 	vpop	{d8}
 8010806:	bd90      	pop	{r4, r7, pc}

08010808 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
 8010808:	b590      	push	{r4, r7, lr}
 801080a:	b0ab      	sub	sp, #172	; 0xac
 801080c:	af02      	add	r7, sp, #8
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
 8010814:	603b      	str	r3, [r7, #0]
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801081c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010826:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801082e:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010836:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801083e:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010846:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32 input_offset = params.input_offset;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	695b      	ldr	r3, [r3, #20]
 801084c:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32 filter_offset = params.weights_offset;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	699b      	ldr	r3, [r3, #24]
 8010852:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 output_offset = params.output_offset;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	69db      	ldr	r3, [r3, #28]
 8010858:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_multiplier = params.output_multiplier;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6a1b      	ldr	r3, [r3, #32]
 801085e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int output_shift = params.output_shift;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010864:	65bb      	str	r3, [r7, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801086a:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010870:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8010872:	69ba      	ldr	r2, [r7, #24]
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	429a      	cmp	r2, r3
 8010878:	dd01      	ble.n	801087e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x76>
 801087a:	f009 fc65 	bl	801a148 <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801087e:	68b8      	ldr	r0, [r7, #8]
 8010880:	f7ff fa79 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010884:	4603      	mov	r3, r0
 8010886:	2b04      	cmp	r3, #4
 8010888:	d001      	beq.n	801088e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x86>
 801088a:	f009 fc5d 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801088e:	6838      	ldr	r0, [r7, #0]
 8010890:	f7ff fa71 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010894:	4603      	mov	r3, r0
 8010896:	2b04      	cmp	r3, #4
 8010898:	d001      	beq.n	801089e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x96>
 801089a:	f009 fc55 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801089e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80108a2:	f7ff fa68 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b04      	cmp	r3, #4
 80108aa:	d001      	beq.n	80108b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xa8>
 80108ac:	f009 fc4c 	bl	801a148 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80108b0:	2300      	movs	r3, #0
 80108b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80108b6:	2100      	movs	r1, #0
 80108b8:	68b8      	ldr	r0, [r7, #8]
 80108ba:	f7ff fdf1 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80108be:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80108c0:	2303      	movs	r3, #3
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	2103      	movs	r1, #3
 80108c6:	68b8      	ldr	r0, [r7, #8]
 80108c8:	f7ff fdea 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80108cc:	6538      	str	r0, [r7, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80108ce:	2303      	movs	r3, #3
 80108d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80108d4:	2100      	movs	r1, #0
 80108d6:	6838      	ldr	r0, [r7, #0]
 80108d8:	f7ff fde2 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80108dc:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (bias_data) {
 80108de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d009      	beq.n	80108fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80108e6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80108ea:	f7ff fae0 	bl	800feae <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80108ee:	4602      	mov	r2, r0
 80108f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d001      	beq.n	80108fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
 80108f6:	f009 fc27 	bl	801a148 <abort>
  }
  const int input_height = input_shape.Dims(1);
 80108fa:	2101      	movs	r1, #1
 80108fc:	68b8      	ldr	r0, [r7, #8]
 80108fe:	f7ff fa46 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010902:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 8010904:	2102      	movs	r1, #2
 8010906:	68b8      	ldr	r0, [r7, #8]
 8010908:	f7ff fa41 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 801090c:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_height = filter_shape.Dims(1);
 801090e:	2101      	movs	r1, #1
 8010910:	6838      	ldr	r0, [r7, #0]
 8010912:	f7ff fa3c 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010916:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_width = filter_shape.Dims(2);
 8010918:	2102      	movs	r1, #2
 801091a:	6838      	ldr	r0, [r7, #0]
 801091c:	f7ff fa37 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010920:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
 8010922:	2101      	movs	r1, #1
 8010924:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010928:	f7ff fa31 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 801092c:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
 801092e:	2102      	movs	r1, #2
 8010930:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010934:	f7ff fa2b 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010938:	6378      	str	r0, [r7, #52]	; 0x34
  for (int batch = 0; batch < batches; ++batch) {
 801093a:	2300      	movs	r3, #0
 801093c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010940:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010946:	429a      	cmp	r2, r3
 8010948:	f280 8101 	bge.w	8010b4e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x346>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801094c:	2300      	movs	r3, #0
 801094e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010952:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010958:	429a      	cmp	r2, r3
 801095a:	f280 80f2 	bge.w	8010b42 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x33a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801095e:	2300      	movs	r3, #0
 8010960:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010964:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096a:	429a      	cmp	r2, r3
 801096c:	f280 80e3 	bge.w	8010b36 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x32e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8010970:	2300      	movs	r3, #0
 8010972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010976:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801097a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801097c:	429a      	cmp	r2, r3
 801097e:	f280 80d4 	bge.w	8010b2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x322>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8010982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010986:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801098a:	fb02 f203 	mul.w	r2, r2, r3
 801098e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	633b      	str	r3, [r7, #48]	; 0x30
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8010994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010998:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801099a:	fb02 f203 	mul.w	r2, r2, r3
 801099e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	62fb      	str	r3, [r7, #44]	; 0x2c
          int32 acc = 0;
 80109a4:	2300      	movs	r3, #0
 80109a6:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80109a8:	2300      	movs	r3, #0
 80109aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80109ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80109b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109b4:	429a      	cmp	r2, r3
 80109b6:	da6d      	bge.n	8010a94 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x28c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80109b8:	2300      	movs	r3, #0
 80109ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80109be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80109c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109c4:	429a      	cmp	r2, r3
 80109c6:	da5f      	bge.n	8010a88 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x280>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80109c8:	2300      	movs	r3, #0
 80109ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80109d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109d4:	429a      	cmp	r2, r3
 80109d6:	da51      	bge.n	8010a7c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x274>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80109d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80109de:	fb02 f303 	mul.w	r3, r2, r3
 80109e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109e4:	4413      	add	r3, r2
 80109e6:	62bb      	str	r3, [r7, #40]	; 0x28
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80109e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80109ee:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80109f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109f4:	4413      	add	r3, r2
 80109f6:	627b      	str	r3, [r7, #36]	; 0x24
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80109f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	db38      	blt.n	8010a70 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 80109fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a02:	429a      	cmp	r2, r3
 8010a04:	da34      	bge.n	8010a70 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 8010a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	db31      	blt.n	8010a70 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 8010a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a10:	429a      	cmp	r2, r3
 8010a12:	da2d      	bge.n	8010a70 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8010a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a18:	9300      	str	r3, [sp, #0]
 8010a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a1e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010a22:	68b8      	ldr	r0, [r7, #8]
 8010a24:	f7ff fb68 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	4413      	add	r3, r2
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8010a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010a46:	6838      	ldr	r0, [r7, #0]
 8010a48:	f7ff fb56 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8010a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010a54:	4413      	add	r3, r2
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	61fb      	str	r3, [r7, #28]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
 8010a5a:	69fa      	ldr	r2, [r7, #28]
 8010a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a5e:	4413      	add	r3, r2
 8010a60:	6a39      	ldr	r1, [r7, #32]
 8010a62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010a64:	440a      	add	r2, r1
 8010a66:	fb02 f203 	mul.w	r2, r2, r3
                  acc +=
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	4413      	add	r3, r2
 8010a6e:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8010a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a74:	3301      	adds	r3, #1
 8010a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010a7a:	e7a8      	b.n	80109ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1c6>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8010a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a80:	3301      	adds	r3, #1
 8010a82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010a86:	e79a      	b.n	80109be <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1b6>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8010a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010a92:	e78c      	b.n	80109ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1a6>
                }
              }
            }
          }
          if (bias_data) {
 8010a94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d009      	beq.n	8010ab0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x2a8>
            acc += bias_data[out_channel];
 8010a9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010aa6:	4413      	add	r3, r2
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	4413      	add	r3, r2
 8010aae:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ab4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7ff fd10 	bl	80104dc <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8010abc:	4603      	mov	r3, r0
 8010abe:	613b      	str	r3, [r7, #16]
                                              output_shift);
          acc += output_offset;
 8010ac0:	693a      	ldr	r2, [r7, #16]
 8010ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ac4:	4413      	add	r3, r2
 8010ac6:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8010ac8:	f107 0218 	add.w	r2, r7, #24
 8010acc:	f107 0310 	add.w	r3, r7, #16
 8010ad0:	4611      	mov	r1, r2
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7ff f8a2 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8010ade:	f107 0214 	add.w	r2, r7, #20
 8010ae2:	f107 0310 	add.w	r3, r7, #16
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff f8ab 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 8010aee:	4603      	mov	r3, r0
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8010af4:	693c      	ldr	r4, [r7, #16]
 8010af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010afa:	9300      	str	r3, [sp, #0]
 8010afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010b04:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010b08:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010b0c:	f7ff faf4 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010b10:	4603      	mov	r3, r0
 8010b12:	461a      	mov	r2, r3
 8010b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010b18:	4413      	add	r3, r2
 8010b1a:	b2e2      	uxtb	r2, r4
 8010b1c:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8010b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b22:	3301      	adds	r3, #1
 8010b24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b28:	e725      	b.n	8010976 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x16e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b2e:	3301      	adds	r3, #1
 8010b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b34:	e716      	b.n	8010964 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x15c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010b40:	e707      	b.n	8010952 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x14a>
  for (int batch = 0; batch < batches; ++batch) {
 8010b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b46:	3301      	adds	r3, #1
 8010b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010b4c:	e6f8      	b.n	8010940 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x138>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
 8010b4e:	bf00      	nop
 8010b50:	37a4      	adds	r7, #164	; 0xa4
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd90      	pop	{r4, r7, pc}

08010b56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
 8010b56:	b590      	push	{r4, r7, lr}
 8010b58:	b0a9      	sub	sp, #164	; 0xa4
 8010b5a:	af02      	add	r7, sp, #8
 8010b5c:	60f8      	str	r0, [r7, #12]
 8010b5e:	60b9      	str	r1, [r7, #8]
 8010b60:	607a      	str	r2, [r7, #4]
 8010b62:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	695b      	ldr	r3, [r3, #20]
 8010b68:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010b70:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010b78:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010b80:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010b88:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b90:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010b98:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_offset = params.output_offset;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	69db      	ldr	r3, [r3, #28]
 8010b9e:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ba4:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010baa:	617b      	str	r3, [r7, #20]

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8010bac:	69ba      	ldr	r2, [r7, #24]
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	dd01      	ble.n	8010bb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8010bb4:	f009 fac8 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8010bb8:	6838      	ldr	r0, [r7, #0]
 8010bba:	f7ff f8dc 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b04      	cmp	r3, #4
 8010bc2:	d001      	beq.n	8010bc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 8010bc4:	f009 fac0 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8010bc8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8010bcc:	f7ff f8d3 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b04      	cmp	r3, #4
 8010bd4:	d001      	beq.n	8010bda <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8010bd6:	f009 fab7 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8010bda:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010bde:	f7ff f8ca 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b04      	cmp	r3, #4
 8010be6:	d001      	beq.n	8010bec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8010be8:	f009 faae 	bl	801a148 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8010bec:	2300      	movs	r3, #0
 8010bee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	6838      	ldr	r0, [r7, #0]
 8010bf6:	f7ff fc53 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010bfa:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8010bfc:	2303      	movs	r3, #3
 8010bfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010c02:	2103      	movs	r1, #3
 8010c04:	6838      	ldr	r0, [r7, #0]
 8010c06:	f7ff fc4b 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010c0a:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8010c0c:	2303      	movs	r3, #3
 8010c0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010c12:	2100      	movs	r1, #0
 8010c14:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8010c18:	f7ff fc42 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010c1c:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8010c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d009      	beq.n	8010c3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8010c26:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010c2a:	f7ff f940 	bl	800feae <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8010c2e:	4602      	mov	r2, r0
 8010c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d001      	beq.n	8010c3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8010c36:	f009 fa87 	bl	801a148 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8010c3a:	2101      	movs	r1, #1
 8010c3c:	6838      	ldr	r0, [r7, #0]
 8010c3e:	f7ff f8a6 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010c42:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8010c44:	2102      	movs	r1, #2
 8010c46:	6838      	ldr	r0, [r7, #0]
 8010c48:	f7ff f8a1 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010c4c:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8010c4e:	2101      	movs	r1, #1
 8010c50:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8010c54:	f7ff f89b 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010c58:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8010c5a:	2102      	movs	r1, #2
 8010c5c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8010c60:	f7ff f895 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010c64:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8010c66:	2101      	movs	r1, #1
 8010c68:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010c6c:	f7ff f88f 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010c70:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8010c72:	2102      	movs	r1, #2
 8010c74:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010c78:	f7ff f889 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8010c7c:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8010c7e:	2300      	movs	r3, #0
 8010c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010c84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	f280 810f 	bge.w	8010eae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010c90:	2300      	movs	r3, #0
 8010c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010c96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	f280 8100 	bge.w	8010ea2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010ca8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	f280 80f1 	bge.w	8010e96 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x340>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010cba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	f280 80e2 	bge.w	8010e8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x334>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8010cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010cca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010ccc:	fb02 f203 	mul.w	r2, r2, r3
 8010cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cd2:	1ad3      	subs	r3, r2, r3
 8010cd4:	637b      	str	r3, [r7, #52]	; 0x34
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8010cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010cda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010cdc:	fb02 f203 	mul.w	r2, r2, r3
 8010ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	633b      	str	r3, [r7, #48]	; 0x30
          int32 acc = 0;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8010cea:	2300      	movs	r3, #0
 8010cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010cf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	da72      	bge.n	8010de0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010d00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d06:	429a      	cmp	r2, r3
 8010d08:	da64      	bge.n	8010dd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010d0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d12:	429a      	cmp	r2, r3
 8010d14:	da58      	bge.n	8010dc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x272>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8010d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d1c:	fb02 f303 	mul.w	r3, r2, r3
 8010d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d22:	4413      	add	r3, r2
 8010d24:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8010d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010d2c:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8010d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d32:	4413      	add	r3, r2
 8010d34:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8010d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	db0c      	blt.n	8010d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8010d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d40:	429a      	cmp	r2, r3
 8010d42:	da08      	bge.n	8010d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8010d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	db05      	blt.n	8010d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8010d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	da01      	bge.n	8010d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8010d52:	2301      	movs	r3, #1
 8010d54:	e000      	b.n	8010d58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
 8010d56:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8010d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8010d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d02d      	beq.n	8010dc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26a>
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8010d64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d6c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010d70:	6838      	ldr	r0, [r7, #0]
 8010d72:	f7ff f9c1 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010d76:	4603      	mov	r3, r0
 8010d78:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8010d7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d7e:	4413      	add	r3, r2
 8010d80:	f993 3000 	ldrsb.w	r3, [r3]
 8010d84:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8010d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d88:	9300      	str	r3, [sp, #0]
 8010d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010d92:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010d96:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8010d9a:	f7ff f9ad 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8010da2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010da6:	4413      	add	r3, r2
 8010da8:	f993 3000 	ldrsb.w	r3, [r3]
 8010dac:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8010dae:	6a3a      	ldr	r2, [r7, #32]
 8010db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010db2:	4413      	add	r3, r2
 8010db4:	69fa      	ldr	r2, [r7, #28]
 8010db6:	fb02 f203 	mul.w	r2, r2, r3
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8010dc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010dc6:	e7a2      	b.n	8010d0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b8>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8010dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010dcc:	3301      	adds	r3, #1
 8010dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010dd2:	e795      	b.n	8010d00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8010dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010dd8:	3301      	adds	r3, #1
 8010dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010dde:	e787      	b.n	8010cf0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                }
              }
            }
          }

          if (bias_data) {
 8010de0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d009      	beq.n	8010dfc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a6>
            acc += bias_data[out_channel];
 8010de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010df2:	4413      	add	r3, r2
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	4413      	add	r3, r2
 8010dfa:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8010dfc:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8010dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e02:	009b      	lsls	r3, r3, #2
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8010e08:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8010e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	461a      	mov	r2, r3
 8010e18:	f7ff fb60 	bl	80104dc <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e24:	4413      	add	r3, r2
 8010e26:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8010e28:	f107 0218 	add.w	r2, r7, #24
 8010e2c:	f107 0310 	add.w	r3, r7, #16
 8010e30:	4611      	mov	r1, r2
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fe fef2 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8010e3e:	f107 0214 	add.w	r2, r7, #20
 8010e42:	f107 0310 	add.w	r3, r7, #16
 8010e46:	4611      	mov	r1, r2
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7fe fefb 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8010e54:	693c      	ldr	r4, [r7, #16]
 8010e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e5a:	9300      	str	r3, [sp, #0]
 8010e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010e64:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010e68:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010e6c:	f7ff f944 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010e70:	4603      	mov	r3, r0
 8010e72:	461a      	mov	r2, r3
 8010e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e78:	4413      	add	r3, r2
 8010e7a:	b262      	sxtb	r2, r4
 8010e7c:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8010e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e82:	3301      	adds	r3, #1
 8010e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010e88:	e717      	b.n	8010cba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x164>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e8e:	3301      	adds	r3, #1
 8010e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010e94:	e708      	b.n	8010ca8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010ea0:	e6f9      	b.n	8010c96 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8010ea2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010eac:	e6ea      	b.n	8010c84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8010eae:	bf00      	nop
 8010eb0:	379c      	adds	r7, #156	; 0x9c
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd90      	pop	{r4, r7, pc}

08010eb6 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 8010eb6:	b480      	push	{r7}
 8010eb8:	b087      	sub	sp, #28
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	60f8      	str	r0, [r7, #12]
 8010ebe:	60b9      	str	r1, [r7, #8]
 8010ec0:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	da0a      	bge.n	8010ee4 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	4413      	add	r3, r2
 8010ed8:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 8010eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ede:	d001      	beq.n	8010ee4 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	e000      	b.n	8010ee6 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 8010ee8:	7dfb      	ldrb	r3, [r7, #23]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d00a      	beq.n	8010f04 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	689a      	ldr	r2, [r3, #8]
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	6819      	ldr	r1, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	440b      	add	r3, r1
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	019b      	lsls	r3, r3, #6
 8010f00:	4413      	add	r3, r2
 8010f02:	e000      	b.n	8010f06 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  return nullptr;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	371c      	adds	r7, #28
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr

08010f12 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8010f12:	b480      	push	{r7}
 8010f14:	b087      	sub	sp, #28
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	60f8      	str	r0, [r7, #12]
 8010f1a:	60b9      	str	r1, [r7, #8]
 8010f1c:	607a      	str	r2, [r7, #4]
 8010f1e:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	3b01      	subs	r3, #1
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	fb02 f303 	mul.w	r3, r2, r3
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8010f2e:	6a3b      	ldr	r3, [r7, #32]
 8010f30:	3b01      	subs	r3, #1
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	fb02 f203 	mul.w	r2, r2, r3
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	441a      	add	r2, r3
  int total_padding =
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	1ad3      	subs	r3, r2, r3
 8010f40:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f48:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	bfb8      	it	lt
 8010f54:	425b      	neglt	r3, r3
 8010f56:	461a      	mov	r2, r3
 8010f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5a:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	0fda      	lsrs	r2, r3, #31
 8010f60:	4413      	add	r3, r2
 8010f62:	105b      	asrs	r3, r3, #1
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	371c      	adds	r7, #28
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr

08010f70 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8010f70:	b480      	push	{r7}
 8010f72:	b087      	sub	sp, #28
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	60b9      	str	r1, [r7, #8]
 8010f78:	607a      	str	r2, [r7, #4]
 8010f7a:	603b      	str	r3, [r7, #0]
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	3b01      	subs	r3, #1
 8010f84:	6a3a      	ldr	r2, [r7, #32]
 8010f86:	fb02 f303 	mul.w	r3, r2, r3
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	617b      	str	r3, [r7, #20]
  switch (padding) {
 8010f8e:	7bfb      	ldrb	r3, [r7, #15]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d002      	beq.n	8010f9a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 8010f94:	2b02      	cmp	r3, #2
 8010f96:	d008      	beq.n	8010faa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 8010f98:	e010      	b.n	8010fbc <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8010f9a:	68ba      	ldr	r2, [r7, #8]
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	1e5a      	subs	r2, r3, #1
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8010fa8:	e009      	b.n	8010fbe <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8010faa:	68ba      	ldr	r2, [r7, #8]
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	441a      	add	r2, r3
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	1ad2      	subs	r2, r2, r3
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8010fba:	e000      	b.n	8010fbe <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 8010fbc:	2300      	movs	r3, #0
  }
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	371c      	adds	r7, #28
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr

08010fca <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b088      	sub	sp, #32
 8010fce:	af02      	add	r7, sp, #8
 8010fd0:	60f8      	str	r0, [r7, #12]
 8010fd2:	60b9      	str	r1, [r7, #8]
 8010fd4:	607a      	str	r2, [r7, #4]
 8010fd6:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8010fd8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8010fdc:	6a3b      	ldr	r3, [r7, #32]
 8010fde:	9300      	str	r3, [sp, #0]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010fe6:	f7ff ffc3 	bl	8010f70 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8010fea:	4602      	mov	r2, r0
 8010fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fee:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8010ff0:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	9300      	str	r3, [sp, #0]
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ffe:	f7ff ffb7 	bl	8010f70 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011002:	4602      	mov	r2, r0
 8011004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011006:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8011008:	2300      	movs	r3, #0
 801100a:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 801100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f107 0214 	add.w	r2, r7, #20
 8011014:	9201      	str	r2, [sp, #4]
 8011016:	9300      	str	r3, [sp, #0]
 8011018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801101c:	6839      	ldr	r1, [r7, #0]
 801101e:	68b8      	ldr	r0, [r7, #8]
 8011020:	f7ff ff77 	bl	8010f12 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011024:	4602      	mov	r2, r0
  padding_values.height =
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 801102a:	697a      	ldr	r2, [r7, #20]
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8011030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f107 0214 	add.w	r2, r7, #20
 8011038:	9201      	str	r2, [sp, #4]
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801103e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011040:	6a39      	ldr	r1, [r7, #32]
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7ff ff65 	bl	8010f12 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011048:	4602      	mov	r2, r0
  padding_values.width =
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 801104e:	697a      	ldr	r2, [r7, #20]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	609a      	str	r2, [r3, #8]
  return padding_values;
 8011054:	bf00      	nop
}
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	3718      	adds	r7, #24
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}

0801105e <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>:
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;
};

inline PaddingType RuntimePaddingType(TfLitePadding padding) {
 801105e:	b480      	push	{r7}
 8011060:	b083      	sub	sp, #12
 8011062:	af00      	add	r7, sp, #0
 8011064:	4603      	mov	r3, r0
 8011066:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8011068:	79fb      	ldrb	r3, [r7, #7]
 801106a:	2b01      	cmp	r3, #1
 801106c:	d002      	beq.n	8011074 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x16>
 801106e:	2b02      	cmp	r3, #2
 8011070:	d002      	beq.n	8011078 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1a>
 8011072:	e003      	b.n	801107c <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8011074:	2301      	movs	r3, #1
 8011076:	e002      	b.n	801107e <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 8011078:	2302      	movs	r3, #2
 801107a:	e000      	b.n	801107e <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 801107c:	2300      	movs	r3, #0
  }
}
 801107e:	4618      	mov	r0, r3
 8011080:	370c      	adds	r7, #12
 8011082:	46bd      	mov	sp, r7
 8011084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011088:	4770      	bx	lr
	...

0801108c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
 801108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801108e:	b09d      	sub	sp, #116	; 0x74
 8011090:	af0a      	add	r7, sp, #40	; 0x28
 8011092:	6278      	str	r0, [r7, #36]	; 0x24
 8011094:	6239      	str	r1, [r7, #32]
 8011096:	61fa      	str	r2, [r7, #28]
 8011098:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 801109a:	6a3b      	ldr	r3, [r7, #32]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b03      	cmp	r3, #3
 80110a2:	bf0c      	ite	eq
 80110a4:	2301      	moveq	r3, #1
 80110a6:	2300      	movne	r3, #0
 80110a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 80110ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80110b0:	f083 0301 	eor.w	r3, r3, #1
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d010      	beq.n	80110dc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x50>
 80110ba:	6a3b      	ldr	r3, [r7, #32]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2b02      	cmp	r3, #2
 80110c2:	d00b      	beq.n	80110dc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x50>
 80110c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c6:	695c      	ldr	r4, [r3, #20]
 80110c8:	4b4e      	ldr	r3, [pc, #312]	; (8011204 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x178>)
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	f240 2323 	movw	r3, #547	; 0x223
 80110d0:	4a4d      	ldr	r2, [pc, #308]	; (8011208 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 80110d2:	494e      	ldr	r1, [pc, #312]	; (801120c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x180>)
 80110d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110d6:	47a0      	blx	r4
 80110d8:	2301      	movs	r3, #1
 80110da:	e08f      	b.n	80111fc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d013      	beq.n	801110e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x82>
 80110e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e8:	695c      	ldr	r4, [r3, #20]
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2201      	movs	r2, #1
 80110f2:	9203      	str	r2, [sp, #12]
 80110f4:	9302      	str	r3, [sp, #8]
 80110f6:	4b46      	ldr	r3, [pc, #280]	; (8011210 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x184>)
 80110f8:	9301      	str	r3, [sp, #4]
 80110fa:	4b46      	ldr	r3, [pc, #280]	; (8011214 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x188>)
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	f44f 7309 	mov.w	r3, #548	; 0x224
 8011102:	4a41      	ldr	r2, [pc, #260]	; (8011208 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 8011104:	4944      	ldr	r1, [pc, #272]	; (8011218 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18c>)
 8011106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011108:	47a0      	blx	r4
 801110a:	2301      	movs	r3, #1
 801110c:	e076      	b.n	80111fc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
 801110e:	69fb      	ldr	r3, [r7, #28]
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8011116:	69fb      	ldr	r3, [r7, #28]
 8011118:	6899      	ldr	r1, [r3, #8]
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	685c      	ldr	r4, [r3, #4]
      params->dilation_height_factor, params->dilation_width_factor, height,
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	695d      	ldr	r5, [r3, #20]
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	691b      	ldr	r3, [r3, #16]
      width, filter_height, filter_width, padding, &out_height, &out_width);
 8011126:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011128:	f107 0008 	add.w	r0, r7, #8
 801112c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011130:	9207      	str	r2, [sp, #28]
 8011132:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011136:	9206      	str	r2, [sp, #24]
 8011138:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801113c:	9205      	str	r2, [sp, #20]
 801113e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011140:	9204      	str	r2, [sp, #16]
 8011142:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011144:	9203      	str	r2, [sp, #12]
 8011146:	69ba      	ldr	r2, [r7, #24]
 8011148:	9202      	str	r2, [sp, #8]
 801114a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801114c:	9201      	str	r2, [sp, #4]
 801114e:	9300      	str	r3, [sp, #0]
 8011150:	462b      	mov	r3, r5
 8011152:	4622      	mov	r2, r4
 8011154:	f7ff ff39 	bl	8010fca <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8011158:	4634      	mov	r4, r6
 801115a:	f107 0308 	add.w	r3, r7, #8
 801115e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8011164:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011168:	2b01      	cmp	r3, #1
 801116a:	d046      	beq.n	80111fa <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x16e>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801116c:	2200      	movs	r2, #0
 801116e:	6a39      	ldr	r1, [r7, #32]
 8011170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011172:	f7fe fd7b 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011176:	6438      	str	r0, [r7, #64]	; 0x40
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8011178:	2201      	movs	r2, #1
 801117a:	6a39      	ldr	r1, [r7, #32]
 801117c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801117e:	f7fe fd75 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011182:	63f8      	str	r0, [r7, #60]	; 0x3c
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 8011184:	2202      	movs	r2, #2
 8011186:	6a39      	ldr	r1, [r7, #32]
 8011188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801118a:	f7ff fe94 	bl	8010eb6 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 801118e:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8011190:	2200      	movs	r2, #0
 8011192:	6a39      	ldr	r1, [r7, #32]
 8011194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011196:	f7fe fd7f 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801119a:	6378      	str	r0, [r7, #52]	; 0x34
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 801119c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	330c      	adds	r3, #12
 80111a8:	607b      	str	r3, [r7, #4]
 80111aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80111ac:	3210      	adds	r2, #16
 80111ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80111b0:	3114      	adds	r1, #20
 80111b2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80111b4:	3020      	adds	r0, #32
 80111b6:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80111b8:	3424      	adds	r4, #36	; 0x24
 80111ba:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 80111bc:	69ad      	ldr	r5, [r5, #24]
 80111be:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 80111c0:	69f6      	ldr	r6, [r6, #28]
 80111c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c4:	9308      	str	r3, [sp, #32]
 80111c6:	9607      	str	r6, [sp, #28]
 80111c8:	9506      	str	r5, [sp, #24]
 80111ca:	9405      	str	r4, [sp, #20]
 80111cc:	9004      	str	r0, [sp, #16]
 80111ce:	9103      	str	r1, [sp, #12]
 80111d0:	9202      	str	r2, [sp, #8]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	9301      	str	r3, [sp, #4]
 80111d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d8:	9300      	str	r3, [sp, #0]
 80111da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80111e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111e2:	f7fe f98f 	bl	800f504 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 80111e6:	4603      	mov	r3, r0
 80111e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80111ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x16e>
 80111f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111f8:	e000      	b.n	80111fc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	374c      	adds	r7, #76	; 0x4c
 8011200:	46bd      	mov	sp, r7
 8011202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011204:	0801d880 	.word	0x0801d880
 8011208:	0801d814 	.word	0x0801d814
 801120c:	0801d868 	.word	0x0801d868
 8011210:	0801d8c0 	.word	0x0801d8c0
 8011214:	0801d8c4 	.word	0x0801d8c4
 8011218:	0801d8a4 	.word	0x0801d8a4

0801121c <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801122c:	2b00      	cmp	r3, #0
 801122e:	d101      	bne.n	8011234 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x18>
 8011230:	f008 ff8a 	bl	801a148 <abort>
  void* data = nullptr;
 8011234:	2300      	movs	r3, #0
 8011236:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801123c:	f107 0214 	add.w	r2, r7, #20
 8011240:	2128      	movs	r1, #40	; 0x28
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	4798      	blx	r3
 8011246:	4603      	mov	r3, r0
 8011248:	2b01      	cmp	r3, #1
 801124a:	bf0c      	ite	eq
 801124c:	2301      	moveq	r3, #1
 801124e:	2300      	movne	r3, #0
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 8011256:	2300      	movs	r3, #0
 8011258:	e000      	b.n	801125c <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 801125a:	697b      	ldr	r3, [r7, #20]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3718      	adds	r7, #24
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8011264:	b590      	push	{r4, r7, lr}
 8011266:	b099      	sub	sp, #100	; 0x64
 8011268:	af08      	add	r7, sp, #32
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	691b      	ldr	r3, [r3, #16]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d101      	bne.n	801127a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8011276:	f008 ff67 	bl	801a148 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	695b      	ldr	r3, [r3, #20]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d101      	bne.n	8011286 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8011282:	f008 ff61 	bl	801a148 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	691b      	ldr	r3, [r3, #16]
 801128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	695b      	ldr	r3, [r3, #20]
 8011290:	63bb      	str	r3, [r7, #56]	; 0x38

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8011292:	2200      	movs	r2, #0
 8011294:	6839      	ldr	r1, [r7, #0]
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f7fe fcfe 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801129c:	6378      	str	r0, [r7, #52]	; 0x34
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801129e:	2200      	movs	r2, #0
 80112a0:	6839      	ldr	r1, [r7, #0]
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7fe fce2 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80112a8:	6338      	str	r0, [r7, #48]	; 0x30
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 80112aa:	2201      	movs	r2, #1
 80112ac:	6839      	ldr	r1, [r7, #0]
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7fe fcdc 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80112b4:	62f8      	str	r0, [r7, #44]	; 0x2c

  int input_width = input->dims->data[2];
 80112b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	62bb      	str	r3, [r7, #40]	; 0x28
  int input_height = input->dims->data[1];
 80112be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c0:	689b      	ldr	r3, [r3, #8]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	627b      	str	r3, [r7, #36]	; 0x24
  int filter_width = filter->dims->data[2];
 80112c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	623b      	str	r3, [r7, #32]
  int filter_height = filter->dims->data[1];
 80112ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d0:	689b      	ldr	r3, [r3, #8]
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	61fb      	str	r3, [r7, #28]
  int output_width = output->dims->data[2];
 80112d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112d8:	689b      	ldr	r3, [r3, #8]
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	61bb      	str	r3, [r7, #24]
  int output_height = output->dims->data[1];
 80112de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	689b      	ldr	r3, [r3, #8]
 80112e4:	617b      	str	r3, [r7, #20]

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 80112e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e8:	689b      	ldr	r3, [r3, #8]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	613b      	str	r3, [r7, #16]
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112f2:	693a      	ldr	r2, [r7, #16]
 80112f4:	0091      	lsls	r1, r2, #2
 80112f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80112f8:	3218      	adds	r2, #24
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	4798      	blx	r3
 80112fe:	4603      	mov	r3, r0
 8011300:	73fb      	strb	r3, [r7, #15]
 8011302:	7bfb      	ldrb	r3, [r7, #15]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d001      	beq.n	801130c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
 8011308:	7bfb      	ldrb	r3, [r7, #15]
 801130a:	e0ad      	b.n	8011468 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011310:	693a      	ldr	r2, [r7, #16]
 8011312:	0091      	lsls	r1, r2, #2
 8011314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011316:	321c      	adds	r2, #28
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	4798      	blx	r3
 801131c:	4603      	mov	r3, r0
 801131e:	73bb      	strb	r3, [r7, #14]
 8011320:	7bbb      	ldrb	r3, [r7, #14]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d001      	beq.n	801132a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
 8011326:	7bbb      	ldrb	r3, [r7, #14]
 8011328:	e09e      	b.n	8011468 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 801132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	2b09      	cmp	r3, #9
 8011330:	f040 8083 	bne.w	801143a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8011334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801133a:	2b01      	cmp	r3, #1
 801133c:	d014      	beq.n	8011368 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	695c      	ldr	r4, [r3, #20]
 8011342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011348:	461a      	mov	r2, r3
 801134a:	2301      	movs	r3, #1
 801134c:	9303      	str	r3, [sp, #12]
 801134e:	9202      	str	r2, [sp, #8]
 8011350:	4b47      	ldr	r3, [pc, #284]	; (8011470 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 8011352:	9301      	str	r3, [sp, #4]
 8011354:	4b47      	ldr	r3, [pc, #284]	; (8011474 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8011356:	9300      	str	r3, [sp, #0]
 8011358:	f240 2369 	movw	r3, #617	; 0x269
 801135c:	4a46      	ldr	r2, [pc, #280]	; (8011478 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 801135e:	4947      	ldr	r1, [pc, #284]	; (801147c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	47a0      	blx	r4
 8011364:	2301      	movs	r3, #1
 8011366:	e07f      	b.n	8011468 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801136c:	60bb      	str	r3, [r7, #8]
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d10b      	bne.n	801138c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	695c      	ldr	r4, [r3, #20]
 8011378:	4b41      	ldr	r3, [pc, #260]	; (8011480 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 801137a:	9300      	str	r3, [sp, #0]
 801137c:	f240 236e 	movw	r3, #622	; 0x26e
 8011380:	4a3d      	ldr	r2, [pc, #244]	; (8011478 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8011382:	4940      	ldr	r1, [pc, #256]	; (8011484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	47a0      	blx	r4
 8011388:	2301      	movs	r3, #1
 801138a:	e06d      	b.n	8011468 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d10b      	bne.n	80113ac <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	695c      	ldr	r4, [r3, #20]
 8011398:	4b3b      	ldr	r3, [pc, #236]	; (8011488 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	f240 236f 	movw	r3, #623	; 0x26f
 80113a0:	4a35      	ldr	r2, [pc, #212]	; (8011478 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80113a2:	4938      	ldr	r1, [pc, #224]	; (8011484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	47a0      	blx	r4
 80113a8:	2301      	movs	r3, #1
 80113aa:	e05d      	b.n	8011468 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d10b      	bne.n	80113cc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x168>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	695c      	ldr	r4, [r3, #20]
 80113b8:	4b34      	ldr	r3, [pc, #208]	; (801148c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 80113ba:	9300      	str	r3, [sp, #0]
 80113bc:	f44f 731c 	mov.w	r3, #624	; 0x270
 80113c0:	4a2d      	ldr	r2, [pc, #180]	; (8011478 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80113c2:	4930      	ldr	r1, [pc, #192]	; (8011484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	47a0      	blx	r4
 80113c8:	2301      	movs	r3, #1
 80113ca:	e04d      	b.n	8011468 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>

    TF_LITE_ENSURE(context,
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2b01      	cmp	r3, #1
 80113d4:	d013      	beq.n	80113fe <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d00b      	beq.n	80113fe <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	695c      	ldr	r4, [r3, #20]
 80113ea:	4b29      	ldr	r3, [pc, #164]	; (8011490 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80113ec:	9300      	str	r3, [sp, #0]
 80113ee:	f240 2372 	movw	r3, #626	; 0x272
 80113f2:	4a21      	ldr	r2, [pc, #132]	; (8011478 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80113f4:	4923      	ldr	r1, [pc, #140]	; (8011484 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	47a0      	blx	r4
 80113fa:	2301      	movs	r3, #1
 80113fc:	e034      	b.n	8011468 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	429a      	cmp	r2, r3
 801140c:	d015      	beq.n	801143a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	695c      	ldr	r4, [r3, #20]
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	68ba      	ldr	r2, [r7, #8]
 801141a:	6852      	ldr	r2, [r2, #4]
 801141c:	6812      	ldr	r2, [r2, #0]
 801141e:	9203      	str	r2, [sp, #12]
 8011420:	9302      	str	r3, [sp, #8]
 8011422:	4b1c      	ldr	r3, [pc, #112]	; (8011494 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8011424:	9301      	str	r3, [sp, #4]
 8011426:	4b1c      	ldr	r3, [pc, #112]	; (8011498 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	f240 2376 	movw	r3, #630	; 0x276
 801142e:	4a12      	ldr	r2, [pc, #72]	; (8011478 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8011430:	4912      	ldr	r1, [pc, #72]	; (801147c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	47a0      	blx	r4
 8011436:	2301      	movs	r3, #1
 8011438:	e016      	b.n	8011468 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
 801143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143c:	781b      	ldrb	r3, [r3, #0]
  return CalculateOpData(context, node, params, input_width, input_height,
 801143e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011440:	9206      	str	r2, [sp, #24]
 8011442:	9305      	str	r3, [sp, #20]
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	9304      	str	r3, [sp, #16]
 8011448:	69bb      	ldr	r3, [r7, #24]
 801144a:	9303      	str	r3, [sp, #12]
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	9302      	str	r3, [sp, #8]
 8011450:	6a3b      	ldr	r3, [r7, #32]
 8011452:	9301      	str	r3, [sp, #4]
 8011454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011456:	9300      	str	r3, [sp, #0]
 8011458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801145c:	6839      	ldr	r1, [r7, #0]
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f7ff fe14 	bl	801108c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
 8011464:	4603      	mov	r3, r0
                         output_height, input->type, data);
 8011466:	bf00      	nop
}  // namespace conv
 8011468:	4618      	mov	r0, r3
 801146a:	3744      	adds	r7, #68	; 0x44
 801146c:	46bd      	mov	sp, r7
 801146e:	bd90      	pop	{r4, r7, pc}
 8011470:	0801d8d8 	.word	0x0801d8d8
 8011474:	0801d8f4 	.word	0x0801d8f4
 8011478:	0801d814 	.word	0x0801d814
 801147c:	0801d8a4 	.word	0x0801d8a4
 8011480:	0801d910 	.word	0x0801d910
 8011484:	0801d868 	.word	0x0801d868
 8011488:	0801d924 	.word	0x0801d924
 801148c:	0801d940 	.word	0x0801d940
 8011490:	0801d960 	.word	0x0801d960
 8011494:	0801d9dc 	.word	0x0801d9dc
 8011498:	0801da04 	.word	0x0801da04

0801149c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, const OpData& data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 801149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a0:	b0be      	sub	sp, #248	; 0xf8
 80114a2:	af08      	add	r7, sp, #32
 80114a4:	6178      	str	r0, [r7, #20]
 80114a6:	6139      	str	r1, [r7, #16]
 80114a8:	60fa      	str	r2, [r7, #12]
 80114aa:	60bb      	str	r3, [r7, #8]
  const int32_t input_offset = -input->params.zero_point;
 80114ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80114b0:	691b      	ldr	r3, [r3, #16]
 80114b2:	425b      	negs	r3, r3
 80114b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  const int32_t filter_offset = -filter->params.zero_point;
 80114b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114bc:	691b      	ldr	r3, [r3, #16]
 80114be:	425b      	negs	r3, r3
 80114c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  const int32_t output_offset = output->params.zero_point;
 80114c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7ff fdc3 	bl	801105e <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 80114d8:	4603      	mov	r3, r0
 80114da:	773b      	strb	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	b21b      	sxth	r3, r3
 80114e2:	83fb      	strh	r3, [r7, #30]
  op_params.padding_values.height = data.padding.height;
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	b21b      	sxth	r3, r3
 80114ea:	843b      	strh	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	b21b      	sxth	r3, r3
 80114f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.stride_height = params->stride_height;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	b21b      	sxth	r3, r3
 80114fa:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	691b      	ldr	r3, [r3, #16]
 8011500:	b21b      	sxth	r3, r3
 8011502:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.dilation_height_factor = params->dilation_height_factor;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	695b      	ldr	r3, [r3, #20]
 8011508:	b21b      	sxth	r3, r3
 801150a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  op_params.input_offset = input_offset;
 801150c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011510:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.weights_offset = filter_offset;
 8011512:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011516:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.output_offset = output_offset;
 8011518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801151c:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.output_multiplier = data.output_multiplier;
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	691b      	ldr	r3, [r3, #16]
 8011522:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.output_shift = -data.output_shift;
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	695b      	ldr	r3, [r3, #20]
 8011528:	425b      	negs	r3, r3
 801152a:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_min = data.output_activation_min;
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	6a1b      	ldr	r3, [r3, #32]
 8011530:	647b      	str	r3, [r7, #68]	; 0x44
  op_params.quantized_activation_max = data.output_activation_max;
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011536:	64bb      	str	r3, [r7, #72]	; 0x48
  reference_ops::Conv(op_params, GetTensorShape(input),
 8011538:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801153c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8011540:	4618      	mov	r0, r3
 8011542:	f7fe fcd7 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8011546:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801154a:	f7fe fbbb 	bl	800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801154e:	4680      	mov	r8, r0
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 8011550:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011554:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8011558:	4618      	mov	r0, r3
 801155a:	f7fe fccb 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801155e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8011562:	f7fe fbaf 	bl	800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8011566:	4604      	mov	r4, r0
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 8011568:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801156c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011570:	4618      	mov	r0, r3
 8011572:	f7fe fcbf 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8011576:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801157a:	f7fe ff66 	bl	801044a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801157e:	4605      	mov	r5, r0
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 8011580:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011584:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8011588:	4618      	mov	r0, r3
 801158a:	f7fe fcb3 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801158e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8011592:	f7fe fba8 	bl	800fce6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8011596:	4606      	mov	r6, r0
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 8011598:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801159c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7fe fca7 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80115a6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80115aa:	f7fe fb9c 	bl	800fce6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80115b4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80115b8:	f107 001c 	add.w	r0, r7, #28
 80115bc:	2300      	movs	r3, #0
 80115be:	9307      	str	r3, [sp, #28]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	9306      	str	r3, [sp, #24]
 80115c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80115c8:	9305      	str	r3, [sp, #20]
 80115ca:	9604      	str	r6, [sp, #16]
 80115cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80115d0:	9303      	str	r3, [sp, #12]
 80115d2:	9502      	str	r5, [sp, #8]
 80115d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80115d8:	9301      	str	r3, [sp, #4]
 80115da:	9400      	str	r4, [sp, #0]
 80115dc:	4613      	mov	r3, r2
 80115de:	4642      	mov	r2, r8
 80115e0:	f7ff f912 	bl	8010808 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 80115e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fe fbae 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 80115ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fe fba9 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 80115f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fe fba4 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 8011602:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011606:	4618      	mov	r0, r3
 8011608:	f7fe fb9f 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801160c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011610:	4618      	mov	r0, r3
 8011612:	f7fe fb9a 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(im2col), nullptr);
}
 8011616:	bf00      	nop
 8011618:	37d8      	adds	r7, #216	; 0xd8
 801161a:	46bd      	mov	sp, r7
 801161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011620 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, const OpData& data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
 8011620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011622:	b0b5      	sub	sp, #212	; 0xd4
 8011624:	af08      	add	r7, sp, #32
 8011626:	6178      	str	r0, [r7, #20]
 8011628:	6139      	str	r1, [r7, #16]
 801162a:	60fa      	str	r2, [r7, #12]
 801162c:	60bb      	str	r3, [r7, #8]
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
 801162e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011632:	691b      	ldr	r3, [r3, #16]
 8011634:	425b      	negs	r3, r3
 8011636:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.output_offset = output->params.zero_point;
 8011638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.stride_height = params->stride_height;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	b21b      	sxth	r3, r3
 8011646:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.stride_width = params->stride_width;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	b21b      	sxth	r3, r3
 801164e:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.dilation_height_factor = params->dilation_height_factor;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	695b      	ldr	r3, [r3, #20]
 8011654:	b21b      	sxth	r3, r3
 8011656:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	691b      	ldr	r3, [r3, #16]
 801165c:	b21b      	sxth	r3, r3
 801165e:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.padding_values.height = data.padding.height;
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	b21b      	sxth	r3, r3
 8011666:	83bb      	strh	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	b21b      	sxth	r3, r3
 801166e:	837b      	strh	r3, [r7, #26]
  op_params.quantized_activation_min = data.output_activation_min;
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	6a1b      	ldr	r3, [r3, #32]
 8011674:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_max = data.output_activation_max;
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801167a:	647b      	str	r3, [r7, #68]	; 0x44

  reference_integer_ops::ConvPerChannel(
      op_params, data.per_channel_output_multiplier,
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	699c      	ldr	r4, [r3, #24]
      data.per_channel_output_shift, GetTensorShape(input),
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	69dd      	ldr	r5, [r3, #28]
 8011684:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011688:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801168c:	4618      	mov	r0, r3
 801168e:	f7fe fc31 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 8011692:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8011696:	f7fe fc6d 	bl	800ff74 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801169a:	4606      	mov	r6, r0
      GetTensorData<int8>(input), GetTensorShape(filter),
 801169c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80116a0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7fe fc25 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 80116aa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80116ae:	f7fe fc61 	bl	800ff74 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80116b2:	6078      	str	r0, [r7, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
 80116b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80116b8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe fc19 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 80116c2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80116c6:	f7fe fec0 	bl	801044a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80116ca:	6038      	str	r0, [r7, #0]
      GetTensorData<int32>(bias), GetTensorShape(output),
 80116cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80116d0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fe fc0d 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 80116da:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80116de:	f7fe fc5a 	bl	800ff96 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80116e2:	4603      	mov	r3, r0
 80116e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80116e8:	f107 0018 	add.w	r0, r7, #24
 80116ec:	9306      	str	r3, [sp, #24]
 80116ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80116f2:	9305      	str	r3, [sp, #20]
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	9304      	str	r3, [sp, #16]
 80116f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80116fc:	9303      	str	r3, [sp, #12]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	9302      	str	r3, [sp, #8]
 8011702:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011706:	9301      	str	r3, [sp, #4]
 8011708:	9600      	str	r6, [sp, #0]
 801170a:	4613      	mov	r3, r2
 801170c:	462a      	mov	r2, r5
 801170e:	4621      	mov	r1, r4
 8011710:	f7ff fa21 	bl	8010b56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
 8011714:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011718:	4618      	mov	r0, r3
 801171a:	f7fe fb16 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
 801171e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe fb11 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
 8011728:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801172c:	4618      	mov	r0, r3
 801172e:	f7fe fb0c 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
 8011732:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011736:	4618      	mov	r0, r3
 8011738:	f7fe fb07 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(output));
}
 801173c:	bf00      	nop
 801173e:	37b4      	adds	r7, #180	; 0xb4
 8011740:	46bd      	mov	sp, r7
 8011742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011744 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 8011744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011748:	b0ba      	sub	sp, #232	; 0xe8
 801174a:	af08      	add	r7, sp, #32
 801174c:	60f8      	str	r0, [r7, #12]
 801174e:	60b9      	str	r1, [r7, #8]
 8011750:	607a      	str	r2, [r7, #4]
 8011752:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	7b1b      	ldrb	r3, [r3, #12]
 8011758:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801175c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8011760:	4618      	mov	r0, r3
 8011762:	f7fe fdb5 	bl	80102d0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	4618      	mov	r0, r3
 801176c:	f7ff fc77 	bl	801105e <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 8011770:	4603      	mov	r3, r0
 8011772:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data.padding.width;
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	b21b      	sxth	r3, r3
 801177a:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data.padding.height;
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	b21b      	sxth	r3, r3
 8011782:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	b21b      	sxth	r3, r3
 801178a:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	689b      	ldr	r3, [r3, #8]
 8011790:	b21b      	sxth	r3, r3
 8011792:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	691b      	ldr	r3, [r3, #16]
 8011798:	b21b      	sxth	r3, r3
 801179a:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	695b      	ldr	r3, [r3, #20]
 80117a0:	b21b      	sxth	r3, r3
 80117a2:	843b      	strh	r3, [r7, #32]
  op_params.float_activation_min = output_activation_min;
 80117a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117a6:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 80117a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117aa:	647b      	str	r3, [r7, #68]	; 0x44

  reference_ops::Conv(op_params, GetTensorShape(input),
 80117ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80117b0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7fe fb9d 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80117ba:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80117be:	f7fe fbb7 	bl	800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80117c2:	4680      	mov	r8, r0
                      GetTensorData<float>(input), GetTensorShape(filter),
 80117c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80117c8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fe fb91 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80117d2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80117d6:	f7fe fbab 	bl	800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80117da:	4604      	mov	r4, r0
                      GetTensorData<float>(filter), GetTensorShape(bias),
 80117dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80117e0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fe fb85 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80117ea:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80117ee:	f7fe fb9f 	bl	800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80117f2:	4605      	mov	r5, r0
                      GetTensorData<float>(bias), GetTensorShape(output),
 80117f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80117f8:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7fe fb79 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8011802:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8011806:	f7fe fba4 	bl	800ff52 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801180a:	4606      	mov	r6, r0
                      GetTensorData<float>(output), GetTensorShape(im2col),
 801180c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011810:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011814:	4618      	mov	r0, r3
 8011816:	f7fe fb6d 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801181a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 801181e:	f7fe fb98 	bl	800ff52 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8011822:	4603      	mov	r3, r0
 8011824:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8011828:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801182c:	f107 0010 	add.w	r0, r7, #16
 8011830:	9306      	str	r3, [sp, #24]
 8011832:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011836:	9305      	str	r3, [sp, #20]
 8011838:	9604      	str	r6, [sp, #16]
 801183a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801183e:	9303      	str	r3, [sp, #12]
 8011840:	9502      	str	r5, [sp, #8]
 8011842:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011846:	9301      	str	r3, [sp, #4]
 8011848:	9400      	str	r4, [sp, #0]
 801184a:	4613      	mov	r3, r2
 801184c:	4642      	mov	r2, r8
 801184e:	f7fe fe69 	bl	8010524 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
 8011852:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011856:	4618      	mov	r0, r3
 8011858:	f7fe fa77 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
 801185c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011860:	4618      	mov	r0, r3
 8011862:	f7fe fa72 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
 8011866:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801186a:	4618      	mov	r0, r3
 801186c:	f7fe fa6d 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
 8011870:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011874:	4618      	mov	r0, r3
 8011876:	f7fe fa68 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801187a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801187e:	4618      	mov	r0, r3
 8011880:	f7fe fa63 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
 8011884:	bf00      	nop
 8011886:	37c8      	adds	r7, #200	; 0xc8
 8011888:	46bd      	mov	sp, r7
 801188a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011890 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8011890:	b590      	push	{r4, r7, lr}
 8011892:	b08f      	sub	sp, #60	; 0x3c
 8011894:	af06      	add	r7, sp, #24
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	695b      	ldr	r3, [r3, #20]
 801189e:	61fb      	str	r3, [r7, #28]

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80118a0:	2200      	movs	r2, #0
 80118a2:	6839      	ldr	r1, [r7, #0]
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f7fe f9f7 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80118aa:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80118ac:	2200      	movs	r2, #0
 80118ae:	6839      	ldr	r1, [r7, #0]
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f7fe f9db 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80118b6:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 80118b8:	2201      	movs	r2, #1
 80118ba:	6839      	ldr	r1, [r7, #0]
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7fe f9d5 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80118c2:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 80118c4:	2202      	movs	r2, #2
 80118c6:	6839      	ldr	r1, [r7, #0]
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f7ff faf4 	bl	8010eb6 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 80118ce:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	691b      	ldr	r3, [r3, #16]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d101      	bne.n	80118dc <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
 80118d8:	f008 fc36 	bl	801a148 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	691b      	ldr	r3, [r3, #16]
 80118e0:	60bb      	str	r3, [r7, #8]

  switch (input->type) {  // Already know in/out types are same.
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b09      	cmp	r3, #9
 80118e8:	d019      	beq.n	801191e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
 80118ea:	2b09      	cmp	r3, #9
 80118ec:	dc3b      	bgt.n	8011966 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6>
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	d002      	beq.n	80118f8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x68>
 80118f2:	2b03      	cmp	r3, #3
 80118f4:	d024      	beq.n	8011940 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 80118f6:	e036      	b.n	8011966 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
 80118f8:	69bb      	ldr	r3, [r7, #24]
 80118fa:	9305      	str	r3, [sp, #20]
 80118fc:	2300      	movs	r3, #0
 80118fe:	9304      	str	r3, [sp, #16]
 8011900:	2300      	movs	r3, #0
 8011902:	9303      	str	r3, [sp, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	9302      	str	r3, [sp, #8]
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	9301      	str	r3, [sp, #4]
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	69fa      	ldr	r2, [r7, #28]
 8011914:	6839      	ldr	r1, [r7, #0]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7ff ff14 	bl	8011744 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                nullptr, output);
      break;
 801191c:	e032      	b.n	8011984 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 801191e:	2300      	movs	r3, #0
 8011920:	9304      	str	r3, [sp, #16]
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	9303      	str	r3, [sp, #12]
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	9302      	str	r3, [sp, #8]
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	9301      	str	r3, [sp, #4]
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	69fa      	ldr	r2, [r7, #28]
 8011936:	6839      	ldr	r1, [r7, #0]
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7ff fe71 	bl	8011620 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
                              output, nullptr);
      break;
 801193e:	e021      	b.n	8011984 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
 8011940:	69bb      	ldr	r3, [r7, #24]
 8011942:	9305      	str	r3, [sp, #20]
 8011944:	2300      	movs	r3, #0
 8011946:	9304      	str	r3, [sp, #16]
 8011948:	2300      	movs	r3, #0
 801194a:	9303      	str	r3, [sp, #12]
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	9302      	str	r3, [sp, #8]
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	9301      	str	r3, [sp, #4]
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	9300      	str	r3, [sp, #0]
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	69fa      	ldr	r2, [r7, #28]
 801195c:	6839      	ldr	r1, [r7, #0]
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7ff fd9c 	bl	801149c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                    nullptr, output);
      break;
 8011964:	e00e      	b.n	8011984 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	695c      	ldr	r4, [r3, #20]
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	4618      	mov	r0, r3
 8011970:	f7fd fae6 	bl	800ef40 <TfLiteTypeGetName>
 8011974:	4602      	mov	r2, r0
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	4905      	ldr	r1, [pc, #20]	; (8011990 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x100>)
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8011980:	2301      	movs	r3, #1
 8011982:	e000      	b.n	8011986 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  }
  return kTfLiteOk;
 8011984:	2300      	movs	r3, #0
}
 8011986:	4618      	mov	r0, r3
 8011988:	3724      	adds	r7, #36	; 0x24
 801198a:	46bd      	mov	sp, r7
 801198c:	bd90      	pop	{r4, r7, pc}
 801198e:	bf00      	nop
 8011990:	0801da28 	.word	0x0801da28

08011994 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration* Register_CONV_2D() {
 8011994:	b480      	push	{r7}
 8011996:	af00      	add	r7, sp, #0
                                 /*invoke=*/conv::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8011998:	4b02      	ldr	r3, [pc, #8]	; (80119a4 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x10>)
}
 801199a:	4618      	mov	r0, r3
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	20000064 	.word	0x20000064

080119a8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b086      	sub	sp, #24
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7fe f9df 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80119b8:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	db03      	blt.n	80119c8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 80119c0:	683a      	ldr	r2, [r7, #0]
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	db01      	blt.n	80119cc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 80119c8:	f008 fbbe 	bl	801a148 <abort>
  const auto* dims_data = shape.DimsData();
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f7fe fa16 	bl	800fdfe <_ZNK6tflite12RuntimeShape8DimsDataEv>
 80119d2:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 80119d4:	2301      	movs	r3, #1
 80119d6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80119d8:	2300      	movs	r3, #0
 80119da:	613b      	str	r3, [r7, #16]
 80119dc:	693a      	ldr	r2, [r7, #16]
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	da12      	bge.n	8011a0a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80119e4:	693a      	ldr	r2, [r7, #16]
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d005      	beq.n	80119f8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	009b      	lsls	r3, r3, #2
 80119f0:	68ba      	ldr	r2, [r7, #8]
 80119f2:	4413      	add	r3, r2
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	e000      	b.n	80119fa <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 80119f8:	2301      	movs	r3, #1
 80119fa:	697a      	ldr	r2, [r7, #20]
 80119fc:	fb03 f302 	mul.w	r3, r3, r2
 8011a00:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	3301      	adds	r3, #1
 8011a06:	613b      	str	r3, [r7, #16]
 8011a08:	e7e8      	b.n	80119dc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8011a0a:	697b      	ldr	r3, [r7, #20]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3718      	adds	r7, #24
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8011a14:	b590      	push	{r4, r7, lr}
 8011a16:	b091      	sub	sp, #68	; 0x44
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
 8011a20:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	69db      	ldr	r3, [r3, #28]
 8011a26:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	6a1b      	ldr	r3, [r3, #32]
 8011a2c:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8011a2e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011a30:	f7fe f9a1 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011a34:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8011a36:	6838      	ldr	r0, [r7, #0]
 8011a38:	f7fe f99d 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011a3c:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8011a3e:	6a3b      	ldr	r3, [r7, #32]
 8011a40:	3b01      	subs	r3, #1
 8011a42:	4619      	mov	r1, r3
 8011a44:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011a46:	f7ff ffaf 	bl	80119a8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8011a4a:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	1e99      	subs	r1, r3, #2
 8011a50:	6a3b      	ldr	r3, [r7, #32]
 8011a52:	3b01      	subs	r3, #1
 8011a54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011a56:	6838      	ldr	r0, [r7, #0]
 8011a58:	f7fe fd22 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011a5c:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	4619      	mov	r1, r3
 8011a64:	6838      	ldr	r0, [r7, #0]
 8011a66:	f7fe f992 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a6a:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	429a      	cmp	r2, r3
 8011a76:	da5f      	bge.n	8011b38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011a78:	2300      	movs	r3, #0
 8011a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	da55      	bge.n	8011b30 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8011a84:	f04f 0300 	mov.w	r3, #0
 8011a88:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8011a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	da21      	bge.n	8011ada <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8011a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a98:	693a      	ldr	r2, [r7, #16]
 8011a9a:	fb02 f203 	mul.w	r2, r2, r3
 8011a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa0:	4413      	add	r3, r2
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8011aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aae:	693a      	ldr	r2, [r7, #16]
 8011ab0:	fb02 f203 	mul.w	r2, r2, r3
 8011ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab6:	4413      	add	r3, r2
 8011ab8:	009b      	lsls	r3, r3, #2
 8011aba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011abc:	4413      	add	r3, r2
 8011abe:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8011ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ac6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ace:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8011ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	633b      	str	r3, [r7, #48]	; 0x30
 8011ad8:	e7d9      	b.n	8011a8e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8011ada:	f04f 0300 	mov.w	r3, #0
 8011ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8011ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d005      	beq.n	8011af2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8011ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011aec:	4413      	add	r3, r2
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8011af2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011af6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8011afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b02:	fb02 f203 	mul.w	r2, r2, r3
 8011b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b08:	4413      	add	r3, r2
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b0e:	18d4      	adds	r4, r2, r3
 8011b10:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8011b14:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8011b18:	eeb0 0a67 	vmov.f32	s0, s15
 8011b1c:	f7fe fb44 	bl	80101a8 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 8011b20:	eef0 7a40 	vmov.f32	s15, s0
 8011b24:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b2e:	e7a5      	b.n	8011a7c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8011b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b32:	3301      	adds	r3, #1
 8011b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b36:	e79b      	b.n	8011a70 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8011b38:	bf00      	nop
 8011b3a:	3744      	adds	r7, #68	; 0x44
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd90      	pop	{r4, r7, pc}

08011b40 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b096      	sub	sp, #88	; 0x58
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	607a      	str	r2, [r7, #4]
 8011b4c:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	689b      	ldr	r3, [r3, #8]
 8011b5e:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	68db      	ldr	r3, [r3, #12]
 8011b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	691b      	ldr	r3, [r3, #16]
 8011b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	695b      	ldr	r3, [r3, #20]
 8011b70:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	699b      	ldr	r3, [r3, #24]
 8011b76:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8011b78:	6838      	ldr	r0, [r7, #0]
 8011b7a:	f7fe f8fc 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	dc01      	bgt.n	8011b88 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8011b84:	f008 fae0 	bl	801a148 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8011b88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011b8a:	f7fe f8f4 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	dc01      	bgt.n	8011b98 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8011b94:	f008 fad8 	bl	801a148 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8011b98:	69ba      	ldr	r2, [r7, #24]
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	dd01      	ble.n	8011ba4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8011ba0:	f008 fad2 	bl	801a148 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8011ba4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011ba6:	f7fe f8e6 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011baa:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8011bac:	6838      	ldr	r0, [r7, #0]
 8011bae:	f7fe f8e2 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011bb2:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8011bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bb6:	3b01      	subs	r3, #1
 8011bb8:	4619      	mov	r1, r3
 8011bba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011bbc:	f7ff fef4 	bl	80119a8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8011bc0:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	1e99      	subs	r1, r3, #2
 8011bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011bcc:	6838      	ldr	r0, [r7, #0]
 8011bce:	f7fe fc67 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011bd2:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8011bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	4619      	mov	r1, r3
 8011bda:	6838      	ldr	r0, [r7, #0]
 8011bdc:	f7fe f8d7 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011be0:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8011be2:	2300      	movs	r3, #0
 8011be4:	657b      	str	r3, [r7, #84]	; 0x54
 8011be6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bea:	429a      	cmp	r2, r3
 8011bec:	da73      	bge.n	8011cd6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011bee:	2300      	movs	r3, #0
 8011bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8011bf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	da69      	bge.n	8011cce <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8011bfe:	2300      	movs	r3, #0
 8011c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c06:	429a      	cmp	r2, r3
 8011c08:	da24      	bge.n	8011c54 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 8011c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c0e:	fb02 f203 	mul.w	r2, r2, r3
 8011c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c14:	4413      	add	r3, r2
 8011c16:	461a      	mov	r2, r3
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8011c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c24:	fb02 f203 	mul.w	r2, r2, r3
 8011c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c2a:	4413      	add	r3, r2
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c30:	4413      	add	r3, r2
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8011c36:	69fa      	ldr	r2, [r7, #28]
 8011c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c3a:	4413      	add	r3, r2
 8011c3c:	6a39      	ldr	r1, [r7, #32]
 8011c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c40:	440a      	add	r2, r1
 8011c42:	fb02 f203 	mul.w	r2, r2, r3
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	4413      	add	r3, r2
 8011c4a:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8011c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c4e:	3301      	adds	r3, #1
 8011c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c52:	e7d6      	b.n	8011c02 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8011c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d007      	beq.n	8011c6a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 8011c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c60:	4413      	add	r3, r2
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	4413      	add	r3, r2
 8011c68:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7fe fc33 	bl	80104dc <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8011c76:	4603      	mov	r3, r0
 8011c78:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8011c7a:	693a      	ldr	r2, [r7, #16]
 8011c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c7e:	4413      	add	r3, r2
 8011c80:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8011c82:	f107 0218 	add.w	r2, r7, #24
 8011c86:	f107 0310 	add.w	r3, r7, #16
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7fd ffc5 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 8011c92:	4603      	mov	r3, r0
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8011c98:	f107 0214 	add.w	r2, r7, #20
 8011c9c:	f107 0310 	add.w	r3, r7, #16
 8011ca0:	4611      	mov	r1, r2
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fd ffce 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 8011cae:	6939      	ldr	r1, [r7, #16]
 8011cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011cb4:	fb02 f203 	mul.w	r2, r2, r3
 8011cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cba:	4413      	add	r3, r2
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011cc0:	4413      	add	r3, r2
 8011cc2:	b2ca      	uxtb	r2, r1
 8011cc4:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cc8:	3301      	adds	r3, #1
 8011cca:	653b      	str	r3, [r7, #80]	; 0x50
 8011ccc:	e791      	b.n	8011bf2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8011cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cd0:	3301      	adds	r3, #1
 8011cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8011cd4:	e787      	b.n	8011be6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8011cd6:	bf00      	nop
 8011cd8:	3758      	adds	r7, #88	; 0x58
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b098      	sub	sp, #96	; 0x60
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	60b9      	str	r1, [r7, #8]
 8011ce8:	607a      	str	r2, [r7, #4]
 8011cea:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	689b      	ldr	r3, [r3, #8]
 8011cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 output_multiplier = params.output_multiplier;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	691b      	ldr	r3, [r3, #16]
 8011d08:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_activation_min = params.quantized_activation_min;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	695b      	ldr	r3, [r3, #20]
 8011d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32 output_activation_max = params.quantized_activation_max;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	699b      	ldr	r3, [r3, #24]
 8011d14:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8011d16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	dd01      	ble.n	8011d22 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 8011d1e:	f008 fa13 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 8011d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 8011d28:	f008 fa0e 	bl	801a148 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8011d2c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8011d2e:	f7fe f822 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011d32:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8011d34:	6838      	ldr	r0, [r7, #0]
 8011d36:	f7fe f81e 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011d3a:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8011d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d3e:	3b01      	subs	r3, #1
 8011d40:	4619      	mov	r1, r3
 8011d42:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8011d44:	f7ff fe30 	bl	80119a8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8011d48:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8011d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4c:	1e99      	subs	r1, r3, #2
 8011d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d50:	3b01      	subs	r3, #1
 8011d52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011d54:	6838      	ldr	r0, [r7, #0]
 8011d56:	f7fe fba3 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011d5a:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8011d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5e:	3b01      	subs	r3, #1
 8011d60:	4619      	mov	r1, r3
 8011d62:	6838      	ldr	r0, [r7, #0]
 8011d64:	f7fe f813 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011d68:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d72:	429a      	cmp	r2, r3
 8011d74:	da7c      	bge.n	8011e70 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011d76:	2300      	movs	r3, #0
 8011d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8011d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	da72      	bge.n	8011e68 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 8011d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011d88:	4413      	add	r3, r2
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 8011d8e:	2300      	movs	r3, #0
 8011d90:	657b      	str	r3, [r7, #84]	; 0x54
 8011d92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d96:	429a      	cmp	r2, r3
 8011d98:	da2c      	bge.n	8011df4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 8011d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d9e:	fb02 f203 	mul.w	r2, r2, r3
 8011da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011da4:	4413      	add	r3, r2
 8011da6:	461a      	mov	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	4413      	add	r3, r2
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	4413      	add	r3, r2
 8011db6:	b29b      	uxth	r3, r3
 8011db8:	847b      	strh	r3, [r7, #34]	; 0x22
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 8011dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dbe:	fb02 f203 	mul.w	r2, r2, r3
 8011dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dc4:	4413      	add	r3, r2
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dca:	4413      	add	r3, r2
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	b29a      	uxth	r2, r3
 8011dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	4413      	add	r3, r2
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 8011dda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011dde:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8011de2:	fb02 f203 	mul.w	r2, r2, r3
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	4413      	add	r3, r2
 8011dea:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8011dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dee:	3301      	adds	r3, #1
 8011df0:	657b      	str	r3, [r7, #84]	; 0x54
 8011df2:	e7ce      	b.n	8011d92 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011df8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7fe fb6e 	bl	80104dc <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8011e00:	4603      	mov	r3, r0
      accum =
 8011e02:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 8011e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e08:	1ad3      	subs	r3, r2, r3
 8011e0a:	61bb      	str	r3, [r7, #24]
 8011e0c:	f107 0218 	add.w	r2, r7, #24
 8011e10:	f107 0314 	add.w	r3, r7, #20
 8011e14:	4611      	mov	r1, r2
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fd ff00 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 8011e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	61fb      	str	r3, [r7, #28]
 8011e2a:	f107 021c 	add.w	r2, r7, #28
 8011e2e:	f107 0314 	add.w	r3, r7, #20
 8011e32:	4611      	mov	r1, r2
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7fd ff05 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 8011e40:	697a      	ldr	r2, [r7, #20]
 8011e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e44:	4413      	add	r3, r2
 8011e46:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 8011e48:	6979      	ldr	r1, [r7, #20]
 8011e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e4e:	fb02 f203 	mul.w	r2, r2, r3
 8011e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e54:	4413      	add	r3, r2
 8011e56:	005b      	lsls	r3, r3, #1
 8011e58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011e5a:	4413      	add	r3, r2
 8011e5c:	b20a      	sxth	r2, r1
 8011e5e:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e62:	3301      	adds	r3, #1
 8011e64:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e66:	e788      	b.n	8011d7a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 8011e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e6e:	e77e      	b.n	8011d6e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 8011e70:	bf00      	nop
 8011e72:	3760      	adds	r7, #96	; 0x60
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b096      	sub	sp, #88	; 0x58
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	607a      	str	r2, [r7, #4]
 8011e84:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	689b      	ldr	r3, [r3, #8]
 8011e96:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	695b      	ldr	r3, [r3, #20]
 8011ea8:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	699b      	ldr	r3, [r3, #24]
 8011eae:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8011eb0:	6838      	ldr	r0, [r7, #0]
 8011eb2:	f7fd ff60 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	dc01      	bgt.n	8011ec0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 8011ebc:	f008 f944 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8011ec0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011ec2:	f7fd ff58 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b02      	cmp	r3, #2
 8011eca:	d001      	beq.n	8011ed0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 8011ecc:	f008 f93c 	bl	801a148 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8011ed0:	69fa      	ldr	r2, [r7, #28]
 8011ed2:	69bb      	ldr	r3, [r7, #24]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	dd01      	ble.n	8011edc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 8011ed8:	f008 f936 	bl	801a148 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8011edc:	6838      	ldr	r0, [r7, #0]
 8011ede:	f7fd ff4a 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011ee2:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011ee8:	f7fd ff51 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011eec:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 8011eee:	2101      	movs	r1, #1
 8011ef0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011ef2:	f7fd ff4c 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 8011ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011efa:	3b02      	subs	r3, #2
 8011efc:	4619      	mov	r1, r3
 8011efe:	6838      	ldr	r0, [r7, #0]
 8011f00:	f7fd ff45 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011f04:	4602      	mov	r2, r0
 8011f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f08:	4293      	cmp	r3, r2
 8011f0a:	dd01      	ble.n	8011f10 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 8011f0c:	f008 f91c 	bl	801a148 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8011f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f12:	3b01      	subs	r3, #1
 8011f14:	4619      	mov	r1, r3
 8011f16:	6838      	ldr	r0, [r7, #0]
 8011f18:	f7fd ff39 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8011f1c:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 8011f1e:	2300      	movs	r3, #0
 8011f20:	657b      	str	r3, [r7, #84]	; 0x54
 8011f22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f26:	429a      	cmp	r2, r3
 8011f28:	da75      	bge.n	8012016 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8011f2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f32:	429a      	cmp	r2, r3
 8011f34:	da6b      	bge.n	801200e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32 acc = 0;
 8011f36:	2300      	movs	r3, #0
 8011f38:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f42:	429a      	cmp	r2, r3
 8011f44:	da26      	bge.n	8011f94 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32 input_val = input_data[b * accum_depth + d];
 8011f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f4a:	fb02 f203 	mul.w	r2, r2, r3
 8011f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f50:	4413      	add	r3, r2
 8011f52:	461a      	mov	r2, r3
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	4413      	add	r3, r2
 8011f58:	f993 3000 	ldrsb.w	r3, [r3]
 8011f5c:	627b      	str	r3, [r7, #36]	; 0x24
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8011f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f62:	fb02 f203 	mul.w	r2, r2, r3
 8011f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f68:	4413      	add	r3, r2
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f6e:	4413      	add	r3, r2
 8011f70:	f993 3000 	ldrsb.w	r3, [r3]
 8011f74:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8011f76:	6a3a      	ldr	r2, [r7, #32]
 8011f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f7a:	4413      	add	r3, r2
 8011f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f80:	440a      	add	r2, r1
 8011f82:	fb02 f203 	mul.w	r2, r2, r3
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	4413      	add	r3, r2
 8011f8a:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8011f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f8e:	3301      	adds	r3, #1
 8011f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f92:	e7d4      	b.n	8011f3e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 8011f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d007      	beq.n	8011faa <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 8011f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fa0:	4413      	add	r3, r2
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7fe fa93 	bl	80104dc <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 8011fba:	697a      	ldr	r2, [r7, #20]
 8011fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fbe:	4413      	add	r3, r2
 8011fc0:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 8011fc2:	f107 021c 	add.w	r2, r7, #28
 8011fc6:	f107 0314 	add.w	r3, r7, #20
 8011fca:	4611      	mov	r1, r2
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fd fe25 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 8011fd8:	f107 0218 	add.w	r2, r7, #24
 8011fdc:	f107 0314 	add.w	r3, r7, #20
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7fd fe2e 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 8011fee:	6979      	ldr	r1, [r7, #20]
 8011ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ff4:	fb02 f203 	mul.w	r2, r2, r3
 8011ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ffa:	4413      	add	r3, r2
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012000:	4413      	add	r3, r2
 8012002:	b24a      	sxtb	r2, r1
 8012004:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012008:	3301      	adds	r3, #1
 801200a:	653b      	str	r3, [r7, #80]	; 0x50
 801200c:	e78f      	b.n	8011f2e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 801200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012010:	3301      	adds	r3, #1
 8012012:	657b      	str	r3, [r7, #84]	; 0x54
 8012014:	e785      	b.n	8011f22 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 8012016:	bf00      	nop
 8012018:	3758      	adds	r7, #88	; 0x58
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}

0801201e <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 801201e:	b580      	push	{r7, lr}
 8012020:	b08c      	sub	sp, #48	; 0x30
 8012022:	af02      	add	r7, sp, #8
 8012024:	60f8      	str	r0, [r7, #12]
 8012026:	607b      	str	r3, [r7, #4]
 8012028:	460b      	mov	r3, r1
 801202a:	72fb      	strb	r3, [r7, #11]
 801202c:	4613      	mov	r3, r2
 801202e:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 8012030:	2300      	movs	r3, #0
 8012032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 8012036:	7abb      	ldrb	r3, [r7, #10]
 8012038:	2b01      	cmp	r3, #1
 801203a:	d041      	beq.n	80120c0 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 801203c:	f04f 0200 	mov.w	r2, #0
 8012040:	f04f 0300 	mov.w	r3, #0
 8012044:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8012048:	f107 0318 	add.w	r3, r7, #24
 801204c:	9301      	str	r3, [sp, #4]
 801204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012050:	9300      	str	r3, [sp, #0]
 8012052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012056:	6879      	ldr	r1, [r7, #4]
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f7fd fbed 	bl	800f838 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801205e:	4603      	mov	r3, r0
 8012060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 801206c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012070:	e028      	b.n	80120c4 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 8012072:	ed97 7b06 	vldr	d7, [r7, #24]
 8012076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012078:	f107 0214 	add.w	r2, r7, #20
 801207c:	4611      	mov	r1, r2
 801207e:	4618      	mov	r0, r3
 8012080:	eeb0 0a47 	vmov.f32	s0, s14
 8012084:	eef0 0a67 	vmov.f32	s1, s15
 8012088:	f7fc ffc2 	bl	800f010 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	425a      	negs	r2, r3
 8012090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012092:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8012094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012096:	f103 0208 	add.w	r2, r3, #8
 801209a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801209c:	330c      	adds	r3, #12
 801209e:	7af9      	ldrb	r1, [r7, #11]
 80120a0:	9300      	str	r3, [sp, #0]
 80120a2:	4613      	mov	r3, r2
 80120a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f7fd fd50 	bl	800fb4c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80120ac:	4603      	mov	r3, r0
 80120ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80120b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d002      	beq.n	80120c0 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 80120ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80120be:	e001      	b.n	80120c4 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 80120c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3728      	adds	r7, #40	; 0x28
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b086      	sub	sp, #24
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	60b9      	str	r1, [r7, #8]
 80120d6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d101      	bne.n	80120e4 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 80120e0:	f008 f832 	bl	801a148 <abort>
  void* data = nullptr;
 80120e4:	2300      	movs	r3, #0
 80120e6:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ec:	f107 0214 	add.w	r2, r7, #20
 80120f0:	2114      	movs	r1, #20
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	4798      	blx	r3
 80120f6:	4603      	mov	r3, r0
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	bf0c      	ite	eq
 80120fc:	2301      	moveq	r3, #1
 80120fe:	2300      	movne	r3, #0
 8012100:	b2db      	uxtb	r3, r3
 8012102:	2b00      	cmp	r3, #0
 8012104:	d001      	beq.n	801210a <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 8012106:	2300      	movs	r3, #0
 8012108:	e000      	b.n	801210c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 801210a:	697b      	ldr	r3, [r7, #20]
}
 801210c:	4618      	mov	r0, r3
 801210e:	3718      	adds	r7, #24
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8012114:	b5b0      	push	{r4, r5, r7, lr}
 8012116:	b08c      	sub	sp, #48	; 0x30
 8012118:	af04      	add	r7, sp, #16
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	691b      	ldr	r3, [r3, #16]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d101      	bne.n	801212a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012126:	f008 f80f 	bl	801a148 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	695b      	ldr	r3, [r3, #20]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d101      	bne.n	8012136 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8012132:	f008 f809 	bl	801a148 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	691b      	ldr	r3, [r3, #16]
 801213a:	61fb      	str	r3, [r7, #28]
  const auto params =
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	695b      	ldr	r3, [r3, #20]
 8012140:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012142:	2200      	movs	r2, #0
 8012144:	6839      	ldr	r1, [r7, #0]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7fd fd90 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801214c:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 801214e:	2201      	movs	r2, #1
 8012150:	6839      	ldr	r1, [r7, #0]
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f7fd fd8a 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012158:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 801215a:	2202      	movs	r2, #2
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7fe fea9 	bl	8010eb6 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8012164:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012166:	2200      	movs	r2, #0
 8012168:	6839      	ldr	r1, [r7, #0]
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f7fd fd94 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012170:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	781a      	ldrb	r2, [r3, #0]
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	429a      	cmp	r2, r3
 801217c:	d01b      	beq.n	80121b6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	695c      	ldr	r4, [r3, #20]
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	4618      	mov	r0, r3
 8012188:	f7fc feda 	bl	800ef40 <TfLiteTypeGetName>
 801218c:	4605      	mov	r5, r0
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	4618      	mov	r0, r3
 8012194:	f7fc fed4 	bl	800ef40 <TfLiteTypeGetName>
 8012198:	4603      	mov	r3, r0
 801219a:	9303      	str	r3, [sp, #12]
 801219c:	9502      	str	r5, [sp, #8]
 801219e:	4b17      	ldr	r3, [pc, #92]	; (80121fc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 80121a0:	9301      	str	r3, [sp, #4]
 80121a2:	4b17      	ldr	r3, [pc, #92]	; (8012200 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 80121a4:	9300      	str	r3, [sp, #0]
 80121a6:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80121aa:	4a16      	ldr	r2, [pc, #88]	; (8012204 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 80121ac:	4916      	ldr	r1, [pc, #88]	; (8012208 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	47a0      	blx	r4
 80121b2:	2301      	movs	r3, #1
 80121b4:	e01e      	b.n	80121f4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	781a      	ldrb	r2, [r3, #0]
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d006      	beq.n	80121d0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	695b      	ldr	r3, [r3, #20]
 80121c6:	4911      	ldr	r1, [pc, #68]	; (801220c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	4798      	blx	r3
 80121cc:	2301      	movs	r3, #1
 80121ce:	e011      	b.n	80121f4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	7819      	ldrb	r1, [r3, #0]
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	781a      	ldrb	r2, [r3, #0]
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	9303      	str	r3, [sp, #12]
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	9302      	str	r3, [sp, #8]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	9301      	str	r3, [sp, #4]
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7ff ff17 	bl	801201e <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 80121f0:	4603      	mov	r3, r0
                         filter, bias, output, data);
 80121f2:	bf00      	nop
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3720      	adds	r7, #32
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bdb0      	pop	{r4, r5, r7, pc}
 80121fc:	0801dbc0 	.word	0x0801dbc0
 8012200:	0801dbd0 	.word	0x0801dbd0
 8012204:	0801db48 	.word	0x0801db48
 8012208:	0801dba4 	.word	0x0801dba4
 801220c:	0801dbdc 	.word	0x0801dbdc

08012210 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 8012210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012212:	b0ad      	sub	sp, #180	; 0xb4
 8012214:	af06      	add	r7, sp, #24
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	60b9      	str	r1, [r7, #8]
 801221a:	607a      	str	r2, [r7, #4]
 801221c:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	691b      	ldr	r3, [r3, #16]
 8012222:	425b      	negs	r3, r3
 8012224:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 8012226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801222a:	691b      	ldr	r3, [r3, #16]
 801222c:	425b      	negs	r3, r3
 801222e:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 8012230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012234:	691b      	ldr	r3, [r3, #16]
 8012236:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	425b      	negs	r3, r3
 8012244:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	689b      	ldr	r3, [r3, #8]
 801224a:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8012252:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012256:	6839      	ldr	r1, [r7, #0]
 8012258:	4618      	mov	r0, r3
 801225a:	f7fd fe4b 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 801225e:	6838      	ldr	r0, [r7, #0]
 8012260:	f7fd fe88 	bl	800ff74 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8012264:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 8012266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801226a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801226e:	4618      	mov	r0, r3
 8012270:	f7fd fe40 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8012274:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8012278:	f7fd fe7c 	bl	800ff74 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801227c:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 801227e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012282:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8012286:	4618      	mov	r0, r3
 8012288:	f7fd fe34 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 801228c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8012290:	f7fe f8db 	bl	801044a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8012294:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 8012296:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801229a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fd fe28 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 80122a4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80122a8:	f7fd fe75 	bl	800ff96 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80122ac:	4603      	mov	r3, r0
 80122ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80122b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80122b6:	f107 0010 	add.w	r0, r7, #16
 80122ba:	9304      	str	r3, [sp, #16]
 80122bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80122c0:	9303      	str	r3, [sp, #12]
 80122c2:	9502      	str	r5, [sp, #8]
 80122c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80122c8:	9301      	str	r3, [sp, #4]
 80122ca:	9400      	str	r4, [sp, #0]
 80122cc:	4613      	mov	r3, r2
 80122ce:	4632      	mov	r2, r6
 80122d0:	f7ff fdd2 	bl	8011e78 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 80122d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fd fd36 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 80122de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fd fd31 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 80122e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7fd fd2c 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 80122f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fd fd27 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	379c      	adds	r7, #156	; 0x9c
 8012302:	46bd      	mov	sp, r7
 8012304:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012308 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 8012308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801230a:	b0c9      	sub	sp, #292	; 0x124
 801230c:	af06      	add	r7, sp, #24
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	f107 0008 	add.w	r0, r7, #8
 8012314:	6001      	str	r1, [r0, #0]
 8012316:	1d39      	adds	r1, r7, #4
 8012318:	600a      	str	r2, [r1, #0]
 801231a:	463a      	mov	r2, r7
 801231c:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 801231e:	463b      	mov	r3, r7
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	691b      	ldr	r3, [r3, #16]
 8012324:	425b      	negs	r3, r3
 8012326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 801232a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801232e:	691b      	ldr	r3, [r3, #16]
 8012330:	425b      	negs	r3, r3
 8012332:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 8012336:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801233a:	691b      	ldr	r3, [r3, #16]
 801233c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 8012340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012344:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 8012346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801234a:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 801234c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012350:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 8012352:	1d3b      	adds	r3, r7, #4
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 801235a:	1d3b      	adds	r3, r7, #4
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	425b      	negs	r3, r3
 8012362:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 8012364:	1d3b      	adds	r3, r7, #4
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	689b      	ldr	r3, [r3, #8]
 801236a:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 801236c:	1d3b      	adds	r3, r7, #4
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 8012374:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b03      	cmp	r3, #3
 801237c:	d002      	beq.n	8012384 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 801237e:	2b07      	cmp	r3, #7
 8012380:	d058      	beq.n	8012434 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 8012382:	e0af      	b.n	80124e4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 8012384:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012388:	463b      	mov	r3, r7
 801238a:	6819      	ldr	r1, [r3, #0]
 801238c:	4610      	mov	r0, r2
 801238e:	f7fd fdb1 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012392:	463b      	mov	r3, r7
 8012394:	6818      	ldr	r0, [r3, #0]
 8012396:	f7fd fc95 	bl	800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801239a:	4606      	mov	r6, r0
 801239c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80123a0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fd fda5 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80123aa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80123ae:	f7fd fc89 	bl	800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80123b2:	4604      	mov	r4, r0
 80123b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80123b8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fd fd99 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80123c2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80123c6:	f7fe f840 	bl	801044a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80123ca:	4605      	mov	r5, r0
 80123cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123d0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fd fd8d 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80123da:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80123de:	f7fd fc82 	bl	800fce6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80123e2:	4603      	mov	r3, r0
 80123e4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80123e8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80123ec:	f107 0014 	add.w	r0, r7, #20
 80123f0:	9304      	str	r3, [sp, #16]
 80123f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123f6:	9303      	str	r3, [sp, #12]
 80123f8:	9502      	str	r5, [sp, #8]
 80123fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80123fe:	9301      	str	r3, [sp, #4]
 8012400:	9400      	str	r4, [sp, #0]
 8012402:	4613      	mov	r3, r2
 8012404:	4632      	mov	r2, r6
 8012406:	f7ff fb9b 	bl	8011b40 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 801240a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801240e:	4618      	mov	r0, r3
 8012410:	f7fd fc9b 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
 8012414:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012418:	4618      	mov	r0, r3
 801241a:	f7fd fc96 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
 801241e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012422:	4618      	mov	r0, r3
 8012424:	f7fd fc91 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
 8012428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801242c:	4618      	mov	r0, r3
 801242e:	f7fd fc8c 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8012432:	e068      	b.n	8012506 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 8012434:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8012438:	463b      	mov	r3, r7
 801243a:	6819      	ldr	r1, [r3, #0]
 801243c:	4610      	mov	r0, r2
 801243e:	f7fd fd59 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012442:	463b      	mov	r3, r7
 8012444:	6818      	ldr	r0, [r3, #0]
 8012446:	f7fd fc3d 	bl	800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801244a:	4606      	mov	r6, r0
 801244c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012450:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8012454:	4618      	mov	r0, r3
 8012456:	f7fd fd4d 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801245a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 801245e:	f7fd fc31 	bl	800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8012462:	4604      	mov	r4, r0
 8012464:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012468:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801246c:	4618      	mov	r0, r3
 801246e:	f7fd fd41 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012472:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8012476:	f7fd ffe8 	bl	801044a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801247a:	4605      	mov	r5, r0
 801247c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012480:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8012484:	4618      	mov	r0, r3
 8012486:	f7fd fd35 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801248a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801248e:	f000 f935 	bl	80126fc <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8012492:	4603      	mov	r3, r0
 8012494:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8012498:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 801249c:	f107 0014 	add.w	r0, r7, #20
 80124a0:	9304      	str	r3, [sp, #16]
 80124a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80124a6:	9303      	str	r3, [sp, #12]
 80124a8:	9502      	str	r5, [sp, #8]
 80124aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80124ae:	9301      	str	r3, [sp, #4]
 80124b0:	9400      	str	r4, [sp, #0]
 80124b2:	4613      	mov	r3, r2
 80124b4:	4632      	mov	r2, r6
 80124b6:	f7ff fc12 	bl	8011cde <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 80124ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fd fc43 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
 80124c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7fd fc3e 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
 80124ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7fd fc39 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
 80124d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fd fc34 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80124e2:	e010      	b.n	8012506 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	695c      	ldr	r4, [r3, #20]
 80124e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124ec:	781b      	ldrb	r3, [r3, #0]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7fc fd26 	bl	800ef40 <TfLiteTypeGetName>
 80124f4:	4602      	mov	r2, r0
 80124f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	4905      	ldr	r1, [pc, #20]	; (8012514 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 8012502:	2301      	movs	r3, #1
 8012504:	e000      	b.n	8012508 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
  }

  return kTfLiteOk;
 8012506:	2300      	movs	r3, #0
}
 8012508:	4618      	mov	r0, r3
 801250a:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 801250e:	46bd      	mov	sp, r7
 8012510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012512:	bf00      	nop
 8012514:	0801dc6c 	.word	0x0801dc6c

08012518 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 8012518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801251a:	b0af      	sub	sp, #188	; 0xbc
 801251c:	af06      	add	r7, sp, #24
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	603b      	str	r3, [r7, #0]
 8012524:	4613      	mov	r3, r2
 8012526:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 8012528:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801252c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012530:	79fb      	ldrb	r3, [r7, #7]
 8012532:	4618      	mov	r0, r3
 8012534:	f7fd fecc 	bl	80102d0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 8012538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801253a:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 801253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253e:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8012540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012544:	6839      	ldr	r1, [r7, #0]
 8012546:	4618      	mov	r0, r3
 8012548:	f7fd fcd4 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801254c:	6838      	ldr	r0, [r7, #0]
 801254e:	f7fd fcef 	bl	800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8012552:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 8012554:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012558:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801255c:	4618      	mov	r0, r3
 801255e:	f7fd fcc9 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8012562:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8012566:	f7fd fce3 	bl	800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801256a:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 801256c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012570:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8012574:	4618      	mov	r0, r3
 8012576:	f7fd fcbd 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801257a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801257e:	f7fd fcd7 	bl	800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8012582:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8012584:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012588:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801258c:	4618      	mov	r0, r3
 801258e:	f7fd fcb1 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8012592:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8012596:	f7fd fcdc 	bl	800ff52 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801259a:	4603      	mov	r3, r0
 801259c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80125a0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80125a4:	f107 0010 	add.w	r0, r7, #16
 80125a8:	9304      	str	r3, [sp, #16]
 80125aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80125ae:	9303      	str	r3, [sp, #12]
 80125b0:	9502      	str	r5, [sp, #8]
 80125b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80125b6:	9301      	str	r3, [sp, #4]
 80125b8:	9400      	str	r4, [sp, #0]
 80125ba:	4613      	mov	r3, r2
 80125bc:	4632      	mov	r2, r6
 80125be:	f7ff fa29 	bl	8011a14 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 80125c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7fd fbbf 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
 80125cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7fd fbba 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 80125d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80125da:	4618      	mov	r0, r3
 80125dc:	f7fd fbb5 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 80125e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7fd fbb0 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 80125ea:	2300      	movs	r3, #0
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	37a4      	adds	r7, #164	; 0xa4
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80125f4:	b590      	push	{r4, r7, lr}
 80125f6:	b08d      	sub	sp, #52	; 0x34
 80125f8:	af04      	add	r7, sp, #16
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	695b      	ldr	r3, [r3, #20]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d101      	bne.n	801260a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8012606:	f007 fd9f 	bl	801a148 <abort>
  const auto* params =
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	695b      	ldr	r3, [r3, #20]
 801260e:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012610:	2200      	movs	r2, #0
 8012612:	6839      	ldr	r1, [r7, #0]
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f7fd fb29 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801261a:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 801261c:	2201      	movs	r2, #1
 801261e:	6839      	ldr	r1, [r7, #0]
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7fd fb23 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012626:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8012628:	2202      	movs	r2, #2
 801262a:	6839      	ldr	r1, [r7, #0]
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7fe fc42 	bl	8010eb6 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8012632:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012634:	2200      	movs	r2, #0
 8012636:	6839      	ldr	r1, [r7, #0]
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f7fd fb2d 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801263e:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d101      	bne.n	801264c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 8012648:	f007 fd7e 	bl	801a148 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	691b      	ldr	r3, [r3, #16]
 8012650:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8012652:	69bb      	ldr	r3, [r7, #24]
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	2b09      	cmp	r3, #9
 8012658:	d015      	beq.n	8012686 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 801265a:	2b09      	cmp	r3, #9
 801265c:	dc2f      	bgt.n	80126be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 801265e:	2b01      	cmp	r3, #1
 8012660:	d002      	beq.n	8012668 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 8012662:	2b03      	cmp	r3, #3
 8012664:	d01d      	beq.n	80126a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 8012666:	e02a      	b.n	80126be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	781a      	ldrb	r2, [r3, #0]
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	9302      	str	r3, [sp, #8]
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	9301      	str	r3, [sp, #4]
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	6839      	ldr	r1, [r7, #0]
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f7ff ff4b 	bl	8012518 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 8012682:	4603      	mov	r3, r0
                       output);
 8012684:	e029      	b.n	80126da <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	9302      	str	r3, [sp, #8]
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	9301      	str	r3, [sp, #4]
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	9300      	str	r3, [sp, #0]
 8012692:	69bb      	ldr	r3, [r7, #24]
 8012694:	68ba      	ldr	r2, [r7, #8]
 8012696:	6839      	ldr	r1, [r7, #0]
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7ff fdb9 	bl	8012210 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 801269e:	4603      	mov	r3, r0
                               output);
 80126a0:	e01b      	b.n	80126da <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	9302      	str	r3, [sp, #8]
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	9301      	str	r3, [sp, #4]
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	9300      	str	r3, [sp, #0]
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	68ba      	ldr	r2, [r7, #8]
 80126b2:	6839      	ldr	r1, [r7, #0]
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f7ff fe27 	bl	8012308 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 80126ba:	4603      	mov	r3, r0
 80126bc:	e00d      	b.n	80126da <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	695c      	ldr	r4, [r3, #20]
 80126c2:	69bb      	ldr	r3, [r7, #24]
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fc fc3a 	bl	800ef40 <TfLiteTypeGetName>
 80126cc:	4602      	mov	r2, r0
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	4904      	ldr	r1, [pc, #16]	; (80126e4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80126d8:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3724      	adds	r7, #36	; 0x24
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd90      	pop	{r4, r7, pc}
 80126e2:	bf00      	nop
 80126e4:	0801dc6c 	.word	0x0801dc6c

080126e8 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 80126e8:	b480      	push	{r7}
 80126ea:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 80126ec:	4b02      	ldr	r3, [pc, #8]	; (80126f8 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr
 80126f8:	20000084 	.word	0x20000084

080126fc <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d002      	beq.n	8012710 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	e000      	b.n	8012712 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 8012710:	2300      	movs	r3, #0
}
 8012712:	4618      	mov	r0, r3
 8012714:	370c      	adds	r7, #12
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr

0801271e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801271e:	b590      	push	{r4, r7, lr}
 8012720:	b087      	sub	sp, #28
 8012722:	af00      	add	r7, sp, #0
 8012724:	60f8      	str	r0, [r7, #12]
 8012726:	60b9      	str	r1, [r7, #8]
 8012728:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801272a:	68f8      	ldr	r0, [r7, #12]
 801272c:	f7fd fb23 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012730:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8012732:	2300      	movs	r3, #0
 8012734:	617b      	str	r3, [r7, #20]
 8012736:	697a      	ldr	r2, [r7, #20]
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	429a      	cmp	r2, r3
 801273c:	da15      	bge.n	801276a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801273e:	697a      	ldr	r2, [r7, #20]
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	429a      	cmp	r2, r3
 8012744:	d00d      	beq.n	8012762 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8012746:	6979      	ldr	r1, [r7, #20]
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7fd fb20 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 801274e:	4604      	mov	r4, r0
 8012750:	6979      	ldr	r1, [r7, #20]
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7fd fb1b 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8012758:	4603      	mov	r3, r0
 801275a:	429c      	cmp	r4, r3
 801275c:	d001      	beq.n	8012762 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801275e:	f007 fcf3 	bl	801a148 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	3301      	adds	r3, #1
 8012766:	617b      	str	r3, [r7, #20]
 8012768:	e7e5      	b.n	8012736 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801276a:	68b9      	ldr	r1, [r7, #8]
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	f7ff f91b 	bl	80119a8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8012772:	4603      	mov	r3, r0
}
 8012774:	4618      	mov	r0, r3
 8012776:	371c      	adds	r7, #28
 8012778:	46bd      	mov	sp, r7
 801277a:	bd90      	pop	{r4, r7, pc}

0801277c <_ZN6tflite17CountLeadingZerosImEEiT_>:
  int32_t result = x >> total_shift;
  return result;
}

template <typename T>
int CountLeadingZeros(T integer_input) {
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d003      	beq.n	8012792 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8012790:	e000      	b.n	8012794 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8012792:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 8012794:	4618      	mov	r0, r3
 8012796:	370c      	adds	r7, #12
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr

080127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 80127a0:	b480      	push	{r7}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	4618      	mov	r0, r3
 80127ac:	370c      	adds	r7, #12
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr

080127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80127b6:	b590      	push	{r4, r7, lr}
 80127b8:	b085      	sub	sp, #20
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80127be:	f107 030c 	add.w	r3, r7, #12
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7ff ffec 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80127c8:	4604      	mov	r4, r0
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7fd fdc2 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80127d0:	4603      	mov	r3, r0
 80127d2:	6023      	str	r3, [r4, #0]
    return retval;
 80127d4:	68fb      	ldr	r3, [r7, #12]
  }
 80127d6:	4618      	mov	r0, r3
 80127d8:	3714      	adds	r7, #20
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd90      	pop	{r4, r7, pc}

080127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80127de:	b580      	push	{r7, lr}
 80127e0:	b082      	sub	sp, #8
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80127e6:	2100      	movs	r1, #0
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f7fd fcfd 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80127ee:	4603      	mov	r3, r0
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 f813 	bl	801282c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8012806:	4603      	mov	r3, r0
}
 8012808:	4618      	mov	r0, r3
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8012810:	b480      	push	{r7}
 8012812:	b083      	sub	sp, #12
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
  return a - b;
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	1ad3      	subs	r3, r2, r3
}
 8012820:	4618      	mov	r0, r3
 8012822:	370c      	adds	r7, #12
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801282c:	b580      	push	{r7, lr}
 801282e:	b082      	sub	sp, #8
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8012834:	2101      	movs	r1, #1
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7fd fcd6 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801283c:	4603      	mov	r3, r0
  }
 801283e:	4618      	mov	r0, r3
 8012840:	3708      	adds	r7, #8
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8012846:	b480      	push	{r7}
 8012848:	b089      	sub	sp, #36	; 0x24
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	461a      	mov	r2, r3
 8012854:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012858:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801285c:	2201      	movs	r2, #1
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	fa02 f303 	lsl.w	r3, r2, r3
 8012864:	461a      	mov	r2, r3
 8012866:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801286a:	69f9      	ldr	r1, [r7, #28]
 801286c:	fb02 f001 	mul.w	r0, r2, r1
 8012870:	69b9      	ldr	r1, [r7, #24]
 8012872:	fb03 f101 	mul.w	r1, r3, r1
 8012876:	4401      	add	r1, r0
 8012878:	69b8      	ldr	r0, [r7, #24]
 801287a:	fba0 2302 	umull	r2, r3, r0, r2
 801287e:	4419      	add	r1, r3
 8012880:	460b      	mov	r3, r1
 8012882:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012886:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801288a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801288e:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8012890:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012894:	60bb      	str	r3, [r7, #8]
             ? min
 8012896:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801289a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801289e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80128a2:	db0e      	blt.n	80128c2 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 80128a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80128a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80128ac:	f04f 0100 	mov.w	r1, #0
 80128b0:	4290      	cmp	r0, r2
 80128b2:	eb71 0303 	sbcs.w	r3, r1, r3
 80128b6:	db01      	blt.n	80128bc <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 80128b8:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 80128ba:	e004      	b.n	80128c6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 80128bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 80128c0:	e001      	b.n	80128c6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 80128c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3724      	adds	r7, #36	; 0x24
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr

080128d2 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 80128d2:	b590      	push	{r4, r7, lr}
 80128d4:	b085      	sub	sp, #20
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	60f8      	str	r0, [r7, #12]
 80128da:	60b9      	str	r1, [r7, #8]
 80128dc:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 80128de:	68b9      	ldr	r1, [r7, #8]
 80128e0:	68f8      	ldr	r0, [r7, #12]
 80128e2:	f7fd fd42 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80128e6:	4604      	mov	r4, r0
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f7fd fda2 	bl	8010432 <_ZN8gemmlowp6BitNotIlEET_S1_>
 80128ee:	4603      	mov	r3, r0
 80128f0:	6879      	ldr	r1, [r7, #4]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fd fd39 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80128f8:	4603      	mov	r3, r0
 80128fa:	4619      	mov	r1, r3
 80128fc:	4620      	mov	r0, r4
 80128fe:	f000 f805 	bl	801290c <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8012902:	4603      	mov	r3, r0
}
 8012904:	4618      	mov	r0, r3
 8012906:	3714      	adds	r7, #20
 8012908:	46bd      	mov	sp, r7
 801290a:	bd90      	pop	{r4, r7, pc}

0801290c <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	4053      	eors	r3, r2
}
 801291c:	4618      	mov	r0, r3
 801291e:	370c      	adds	r7, #12
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr

08012928 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8012928:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801292c:	b08b      	sub	sp, #44	; 0x2c
 801292e:	af00      	add	r7, sp, #0
 8012930:	6078      	str	r0, [r7, #4]
 8012932:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8012934:	6879      	ldr	r1, [r7, #4]
 8012936:	4608      	mov	r0, r1
 8012938:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801293c:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 8012940:	6839      	ldr	r1, [r7, #0]
 8012942:	4608      	mov	r0, r1
 8012944:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8012948:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 801294c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012950:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012954:	eb18 0a00 	adds.w	sl, r8, r0
 8012958:	eb49 0b01 	adc.w	fp, r9, r1
 801295c:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8012960:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012964:	2800      	cmp	r0, #0
 8012966:	f171 0100 	sbcs.w	r1, r1, #0
 801296a:	db04      	blt.n	8012976 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 801296c:	f04f 0001 	mov.w	r0, #1
 8012970:	f04f 0100 	mov.w	r1, #0
 8012974:	e003      	b.n	801297e <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 8012976:	f04f 30ff 	mov.w	r0, #4294967295
 801297a:	f04f 31ff 	mov.w	r1, #4294967295
 801297e:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8012982:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8012986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801298a:	eb18 0400 	adds.w	r4, r8, r0
 801298e:	eb49 0501 	adc.w	r5, r9, r1
 8012992:	0fe9      	lsrs	r1, r5, #31
 8012994:	4608      	mov	r0, r1
 8012996:	f04f 0100 	mov.w	r1, #0
 801299a:	1902      	adds	r2, r0, r4
 801299c:	eb41 0305 	adc.w	r3, r1, r5
 80129a0:	f04f 0000 	mov.w	r0, #0
 80129a4:	f04f 0100 	mov.w	r1, #0
 80129a8:	0850      	lsrs	r0, r2, #1
 80129aa:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80129ae:	1059      	asrs	r1, r3, #1
 80129b0:	4602      	mov	r2, r0
 80129b2:	460b      	mov	r3, r1
 80129b4:	4613      	mov	r3, r2
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	372c      	adds	r7, #44	; 0x2c
 80129ba:	46bd      	mov	sp, r7
 80129bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80129c0:	4770      	bx	lr

080129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b084      	sub	sp, #16
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80129ca:	f107 030c 	add.w	r3, r7, #12
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7ff fee6 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80129d4:	4602      	mov	r2, r0
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6013      	str	r3, [r2, #0]
    return retval;
 80129da:	68fb      	ldr	r3, [r7, #12]
  }
 80129dc:	4618      	mov	r0, r3
 80129de:	3710      	adds	r7, #16
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b08a      	sub	sp, #40	; 0x28
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 80129ec:	f000 f85a 	bl	8012aa4 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 80129f0:	4603      	mov	r3, r0
 80129f2:	4619      	mov	r1, r3
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f860 	bl	8012aba <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80129fa:	4603      	mov	r3, r0
 80129fc:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 80129fe:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8012a02:	f000 f88c 	bl	8012b1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8012a06:	4603      	mov	r3, r0
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f000 f874 	bl	8012af6 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8012a12:	4823      	ldr	r0, [pc, #140]	; (8012aa0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8012a14:	f000 f883 	bl	8012b1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f000 f86b 	bl	8012af6 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8012a20:	4603      	mov	r3, r0
 8012a22:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8012a24:	69b9      	ldr	r1, [r7, #24]
 8012a26:	6a38      	ldr	r0, [r7, #32]
 8012a28:	f000 f886 	bl	8012b38 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	4619      	mov	r1, r3
 8012a30:	69f8      	ldr	r0, [r7, #28]
 8012a32:	f000 f8a3 	bl	8012b7c <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012a36:	4603      	mov	r3, r0
 8012a38:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8012a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a40:	2b02      	cmp	r3, #2
 8012a42:	dc21      	bgt.n	8012a88 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8012a44:	6979      	ldr	r1, [r7, #20]
 8012a46:	6a38      	ldr	r0, [r7, #32]
 8012a48:	f000 f876 	bl	8012b38 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8012a50:	f000 f8b2 	bl	8012bb8 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8012a54:	4603      	mov	r3, r0
 8012a56:	6939      	ldr	r1, [r7, #16]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f000 f8b6 	bl	8012bca <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8012a62:	68f9      	ldr	r1, [r7, #12]
 8012a64:	6978      	ldr	r0, [r7, #20]
 8012a66:	f000 f8ce 	bl	8012c06 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f000 f8ec 	bl	8012c4a <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012a72:	4603      	mov	r3, r0
 8012a74:	4619      	mov	r1, r3
 8012a76:	6978      	ldr	r0, [r7, #20]
 8012a78:	f000 f880 	bl	8012b7c <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8012a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a82:	3301      	adds	r3, #1
 8012a84:	627b      	str	r3, [r7, #36]	; 0x24
 8012a86:	e7da      	b.n	8012a3e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8012a88:	6978      	ldr	r0, [r7, #20]
 8012a8a:	f000 f8f8 	bl	8012c7e <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	4618      	mov	r0, r3
 8012a92:	f000 f90a 	bl	8012caa <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012a96:	4603      	mov	r3, r0
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3728      	adds	r7, #40	; 0x28
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	c3c3c3c4 	.word	0xc3c3c3c4

08012aa4 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8012aa8:	f000 f945 	bl	8012d36 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8012aac:	4603      	mov	r3, r0
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7ff fe81 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012ab4:	4603      	mov	r3, r0
  }
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	bd80      	pop	{r7, pc}

08012aba <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8012aba:	b590      	push	{r4, r7, lr}
 8012abc:	b083      	sub	sp, #12
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
 8012ac2:	6039      	str	r1, [r7, #0]
 8012ac4:	1d3b      	adds	r3, r7, #4
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7ff fe6a 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012acc:	4603      	mov	r3, r0
 8012ace:	681c      	ldr	r4, [r3, #0]
 8012ad0:	463b      	mov	r3, r7
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7ff fe64 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4619      	mov	r1, r3
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f7ff ff22 	bl	8012928 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7ff ff6b 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012aec:	4603      	mov	r3, r0
 8012aee:	4618      	mov	r0, r3
 8012af0:	370c      	adds	r7, #12
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd90      	pop	{r4, r7, pc}

08012af6 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8012af6:	b590      	push	{r4, r7, lr}
 8012af8:	b085      	sub	sp, #20
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8012afe:	f107 030c 	add.w	r3, r7, #12
 8012b02:	4618      	mov	r0, r3
 8012b04:	f000 f91e 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012b08:	4604      	mov	r4, r0
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f7fd fc22 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012b10:	4603      	mov	r3, r0
 8012b12:	6023      	str	r3, [r4, #0]
    return retval;
 8012b14:	68fb      	ldr	r3, [r7, #12]
  }
 8012b16:	4618      	mov	r0, r3
 8012b18:	3714      	adds	r7, #20
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd90      	pop	{r4, r7, pc}

08012b1e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b082      	sub	sp, #8
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8012b26:	2100      	movs	r1, #0
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7fd fb5d 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012b2e:	4603      	mov	r3, r0
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8012b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b3a:	b085      	sub	sp, #20
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8012b42:	1d3b      	adds	r3, r7, #4
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7ff fe2b 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	681d      	ldr	r5, [r3, #0]
 8012b4e:	463b      	mov	r3, r7
 8012b50:	4618      	mov	r0, r3
 8012b52:	f000 f8f7 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012b56:	4603      	mov	r3, r0
 8012b58:	681e      	ldr	r6, [r3, #0]
 8012b5a:	f107 030c 	add.w	r3, r7, #12
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f000 f8f0 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012b64:	4604      	mov	r4, r0
 8012b66:	4631      	mov	r1, r6
 8012b68:	4628      	mov	r0, r5
 8012b6a:	f7fd fa49 	bl	8010000 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	6023      	str	r3, [r4, #0]
  return c;
 8012b72:	68fb      	ldr	r3, [r7, #12]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3714      	adds	r7, #20
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b7c <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8012b7c:	b590      	push	{r4, r7, lr}
 8012b7e:	b083      	sub	sp, #12
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
 8012b86:	1d3b      	adds	r3, r7, #4
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f000 f8db 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	681c      	ldr	r4, [r3, #0]
 8012b92:	463b      	mov	r3, r7
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 f8d5 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f7fd fc13 	bl	80103cc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f000 f8d6 	bl	8012d5a <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd90      	pop	{r4, r7, pc}

08012bb8 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8012bbc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8012bc0:	f7ff ff99 	bl	8012af6 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8012bc4:	4603      	mov	r3, r0
  }
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	bd80      	pop	{r7, pc}

08012bca <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8012bca:	b590      	push	{r4, r7, lr}
 8012bcc:	b083      	sub	sp, #12
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
 8012bd2:	6039      	str	r1, [r7, #0]
 8012bd4:	1d3b      	adds	r3, r7, #4
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f000 f8b4 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	681c      	ldr	r4, [r3, #0]
 8012be0:	463b      	mov	r3, r7
 8012be2:	4618      	mov	r0, r3
 8012be4:	f000 f8ae 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012be8:	4603      	mov	r3, r0
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	4619      	mov	r1, r3
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f7ff fe0e 	bl	8012810 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f000 f8af 	bl	8012d5a <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	4618      	mov	r0, r3
 8012c00:	370c      	adds	r7, #12
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd90      	pop	{r4, r7, pc}

08012c06 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8012c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c08:	b085      	sub	sp, #20
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
 8012c0e:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8012c10:	1d3b      	adds	r3, r7, #4
 8012c12:	4618      	mov	r0, r3
 8012c14:	f000 f896 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	681d      	ldr	r5, [r3, #0]
 8012c1c:	463b      	mov	r3, r7
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f000 f890 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012c24:	4603      	mov	r3, r0
 8012c26:	681e      	ldr	r6, [r3, #0]
 8012c28:	f107 030c 	add.w	r3, r7, #12
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f000 f856 	bl	8012cde <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8012c32:	4604      	mov	r4, r0
 8012c34:	4631      	mov	r1, r6
 8012c36:	4628      	mov	r0, r5
 8012c38:	f7fd f9e2 	bl	8010000 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	6023      	str	r3, [r4, #0]
  return c;
 8012c40:	68fb      	ldr	r3, [r7, #12]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3714      	adds	r7, #20
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c4a <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012c4a:	b5b0      	push	{r4, r5, r7, lr}
 8012c4c:	b084      	sub	sp, #16
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012c52:	1d3b      	adds	r3, r7, #4
 8012c54:	4618      	mov	r0, r3
 8012c56:	f000 f842 	bl	8012cde <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	681d      	ldr	r5, [r3, #0]
 8012c5e:	f107 030c 	add.w	r3, r7, #12
 8012c62:	4618      	mov	r0, r3
 8012c64:	f000 f86e 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012c68:	4604      	mov	r4, r0
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	f000 f886 	bl	8012d7c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8012c70:	4603      	mov	r3, r0
 8012c72:	6023      	str	r3, [r4, #0]
  return result;
 8012c74:	68fb      	ldr	r3, [r7, #12]
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3710      	adds	r7, #16
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bdb0      	pop	{r4, r5, r7, pc}

08012c7e <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8012c7e:	b590      	push	{r4, r7, lr}
 8012c80:	b085      	sub	sp, #20
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8012c86:	1d3b      	adds	r3, r7, #4
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f000 f85b 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012c8e:	4604      	mov	r4, r0
 8012c90:	f107 030c 	add.w	r3, r7, #12
 8012c94:	4618      	mov	r0, r3
 8012c96:	f000 f87d 	bl	8012d94 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	6823      	ldr	r3, [r4, #0]
 8012c9e:	6013      	str	r3, [r2, #0]
  return c;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3714      	adds	r7, #20
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd90      	pop	{r4, r7, pc}

08012caa <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012caa:	b5b0      	push	{r4, r5, r7, lr}
 8012cac:	b084      	sub	sp, #16
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012cb2:	1d3b      	adds	r3, r7, #4
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f000 f86d 	bl	8012d94 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	681d      	ldr	r5, [r3, #0]
 8012cbe:	f107 030c 	add.w	r3, r7, #12
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7ff fd6c 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012cc8:	4604      	mov	r4, r0
 8012cca:	4628      	mov	r0, r5
 8012ccc:	f000 f86d 	bl	8012daa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	6023      	str	r3, [r4, #0]
  return result;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bdb0      	pop	{r4, r5, r7, pc}

08012cde <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8012cde:	b480      	push	{r7}
 8012ce0:	b083      	sub	sp, #12
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	4618      	mov	r0, r3
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8012cf4:	b590      	push	{r4, r7, lr}
 8012cf6:	b085      	sub	sp, #20
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8012d00:	f107 0308 	add.w	r3, r7, #8
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ff fd4b 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012d0a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012d0c:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8012d0e:	1d3b      	adds	r3, r7, #4
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7ff fd45 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012d16:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	4621      	mov	r1, r4
 8012d1e:	68f8      	ldr	r0, [r7, #12]
 8012d20:	f7ff fdd7 	bl	80128d2 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012d24:	4603      	mov	r3, r0
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7ff fe4b 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012d2c:	4603      	mov	r3, r0
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3714      	adds	r7, #20
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd90      	pop	{r4, r7, pc}

08012d36 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8012d36:	b580      	push	{r7, lr}
 8012d38:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8012d3a:	f7fc f95f 	bl	800effc <_ZNSt14numeric_limitsIlE3maxEv>
 8012d3e:	4603      	mov	r3, r0
  }
 8012d40:	4618      	mov	r0, r3
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	4618      	mov	r0, r3
 8012d50:	370c      	adds	r7, #12
 8012d52:	46bd      	mov	sp, r7
 8012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d58:	4770      	bx	lr

08012d5a <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012d5a:	b580      	push	{r7, lr}
 8012d5c:	b084      	sub	sp, #16
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012d62:	f107 030c 	add.w	r3, r7, #12
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7ff ffec 	bl	8012d44 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6013      	str	r3, [r2, #0]
    return retval;
 8012d72:	68fb      	ldr	r3, [r7, #12]
  }
 8012d74:	4618      	mov	r0, r3
 8012d76:	3710      	adds	r7, #16
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f000 f82f 	bl	8012de8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8012d8a:	4603      	mov	r3, r0
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3708      	adds	r7, #8
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8012d94:	b480      	push	{r7}
 8012d96:	b083      	sub	sp, #12
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	4618      	mov	r0, r3
 8012da0:	370c      	adds	r7, #12
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr

08012daa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8012daa:	b580      	push	{r7, lr}
 8012dac:	b082      	sub	sp, #8
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f000 f85a 	bl	8012e6c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8012db8:	4603      	mov	r3, r0
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3708      	adds	r7, #8
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	b082      	sub	sp, #8
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	bf0c      	ite	eq
 8012dd0:	2301      	moveq	r3, #1
 8012dd2:	2300      	movne	r3, #0
 8012dd4:	b2db      	uxtb	r3, r3
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7fd fb1a 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012ddc:	4603      	mov	r3, r0
}
 8012dde:	4618      	mov	r0, r3
 8012de0:	3708      	adds	r7, #8
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
	...

08012de8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b08a      	sub	sp, #40	; 0x28
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8012df0:	f7fd f8e2 	bl	800ffb8 <_ZNSt14numeric_limitsIlE3minEv>
 8012df4:	4603      	mov	r3, r0
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fd faac 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012dfc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8012dfe:	f7fc f8fd 	bl	800effc <_ZNSt14numeric_limitsIlE3maxEv>
 8012e02:	4603      	mov	r3, r0
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7fd faa5 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012e0a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8012e0c:	2320      	movs	r3, #32
 8012e0e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8012e10:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012e14:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8012e16:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8012e1a:	f7fd fa9b 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	4619      	mov	r1, r3
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f7fd fae0 	bl	80103e8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012e28:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8012e2a:	480f      	ldr	r0, [pc, #60]	; (8012e68 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8012e2c:	f7fd fa92 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012e30:	4603      	mov	r3, r0
 8012e32:	4619      	mov	r1, r3
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f7fd fab5 	bl	80103a4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8012e3a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8012e3c:	2102      	movs	r1, #2
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f7ff fd01 	bl	8012846 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8012e44:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8012e46:	68fa      	ldr	r2, [r7, #12]
 8012e48:	6a39      	ldr	r1, [r7, #32]
 8012e4a:	6978      	ldr	r0, [r7, #20]
 8012e4c:	f7ff fd41 	bl	80128d2 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012e50:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e56:	6938      	ldr	r0, [r7, #16]
 8012e58:	f7ff fd3b 	bl	80128d2 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012e5c:	60f8      	str	r0, [r7, #12]
    return result;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
  }
 8012e60:	4618      	mov	r0, r3
 8012e62:	3728      	adds	r7, #40	; 0x28
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	e0000001 	.word	0xe0000001

08012e6c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b08a      	sub	sp, #40	; 0x28
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8012e74:	f7fd f8a0 	bl	800ffb8 <_ZNSt14numeric_limitsIlE3minEv>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7fd fa6a 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012e80:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8012e82:	f7fc f8bb 	bl	800effc <_ZNSt14numeric_limitsIlE3maxEv>
 8012e86:	4603      	mov	r3, r0
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7fd fa63 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012e8e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8012e90:	2320      	movs	r3, #32
 8012e92:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8012e94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012e98:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8012e9a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8012e9e:	f7fd fa59 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7fd fa9e 	bl	80103e8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012eac:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8012eae:	480f      	ldr	r0, [pc, #60]	; (8012eec <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8012eb0:	f7fd fa50 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7fd fa73 	bl	80103a4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8012ebe:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7ff fcbf 	bl	8012846 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8012ec8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8012eca:	68fa      	ldr	r2, [r7, #12]
 8012ecc:	6a39      	ldr	r1, [r7, #32]
 8012ece:	6978      	ldr	r0, [r7, #20]
 8012ed0:	f7ff fcff 	bl	80128d2 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012ed4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012eda:	6938      	ldr	r0, [r7, #16]
 8012edc:	f7ff fcf9 	bl	80128d2 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8012ee0:	60f8      	str	r0, [r7, #12]
    return result;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
  }
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3728      	adds	r7, #40	; 0x28
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	c0000001 	.word	0xc0000001

08012ef0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b08a      	sub	sp, #40	; 0x28
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8012ef8:	482c      	ldr	r0, [pc, #176]	; (8012fac <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8012efa:	f7ff fc70 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012efe:	4603      	mov	r3, r0
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7ff fc58 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012f06:	4603      	mov	r3, r0
 8012f08:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8012f0a:	4829      	ldr	r0, [pc, #164]	; (8012fb0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8012f0c:	f7ff fc67 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012f10:	4603      	mov	r3, r0
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7ff fc4f 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8012f1c:	f000 f86c 	bl	8012ff8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8012f20:	4603      	mov	r3, r0
 8012f22:	4619      	mov	r1, r3
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 f870 	bl	801300a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8012f2e:	69f9      	ldr	r1, [r7, #28]
 8012f30:	69f8      	ldr	r0, [r7, #28]
 8012f32:	f000 f83f 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012f36:	4603      	mov	r3, r0
 8012f38:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8012f3a:	69f9      	ldr	r1, [r7, #28]
 8012f3c:	69b8      	ldr	r0, [r7, #24]
 8012f3e:	f000 f839 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012f42:	4603      	mov	r3, r0
 8012f44:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8012f46:	69b9      	ldr	r1, [r7, #24]
 8012f48:	69b8      	ldr	r0, [r7, #24]
 8012f4a:	f000 f833 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8012f52:	6938      	ldr	r0, [r7, #16]
 8012f54:	f000 f877 	bl	8013046 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8012f5c:	6979      	ldr	r1, [r7, #20]
 8012f5e:	68f8      	ldr	r0, [r7, #12]
 8012f60:	f000 f853 	bl	801300a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012f64:	4603      	mov	r3, r0
 8012f66:	6a39      	ldr	r1, [r7, #32]
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f000 f823 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	69b9      	ldr	r1, [r7, #24]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f000 f849 	bl	801300a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f000 f879 	bl	8013072 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8012f80:	4603      	mov	r3, r0
 8012f82:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8012f84:	68b9      	ldr	r1, [r7, #8]
 8012f86:	69f8      	ldr	r0, [r7, #28]
 8012f88:	f000 f83f 	bl	801300a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	4619      	mov	r1, r3
 8012f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f92:	f000 f80f 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012f96:	4603      	mov	r3, r0
 8012f98:	4619      	mov	r1, r3
 8012f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f9c:	f000 f87f 	bl	801309e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012fa0:	4603      	mov	r3, r0
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3728      	adds	r7, #40	; 0x28
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}
 8012faa:	bf00      	nop
 8012fac:	70f5a894 	.word	0x70f5a894
 8012fb0:	2aaaaaab 	.word	0x2aaaaaab

08012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8012fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fb6:	b085      	sub	sp, #20
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8012fbe:	1d3b      	adds	r3, r7, #4
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7ff fbed 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	681d      	ldr	r5, [r3, #0]
 8012fca:	463b      	mov	r3, r7
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7ff fbe7 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	681e      	ldr	r6, [r3, #0]
 8012fd6:	f107 030c 	add.w	r3, r7, #12
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7ff fbe0 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012fe0:	4604      	mov	r4, r0
 8012fe2:	4631      	mov	r1, r6
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	f7fd f80b 	bl	8010000 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012fea:	4603      	mov	r3, r0
 8012fec:	6023      	str	r3, [r4, #0]
  return c;
 8012fee:	68fb      	ldr	r3, [r7, #12]
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3714      	adds	r7, #20
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ff8 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8012ffc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8013000:	f7ff fbd9 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013004:	4603      	mov	r3, r0
  }
 8013006:	4618      	mov	r0, r3
 8013008:	bd80      	pop	{r7, pc}

0801300a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801300a:	b590      	push	{r4, r7, lr}
 801300c:	b083      	sub	sp, #12
 801300e:	af00      	add	r7, sp, #0
 8013010:	6078      	str	r0, [r7, #4]
 8013012:	6039      	str	r1, [r7, #0]
 8013014:	1d3b      	adds	r3, r7, #4
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff fbc2 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801301c:	4603      	mov	r3, r0
 801301e:	681c      	ldr	r4, [r3, #0]
 8013020:	463b      	mov	r3, r7
 8013022:	4618      	mov	r0, r3
 8013024:	f7ff fbbc 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013028:	4603      	mov	r3, r0
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4619      	mov	r1, r3
 801302e:	4620      	mov	r0, r4
 8013030:	f7fd f9cc 	bl	80103cc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013034:	4603      	mov	r3, r0
 8013036:	4618      	mov	r0, r3
 8013038:	f7ff fcc3 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801303c:	4603      	mov	r3, r0
 801303e:	4618      	mov	r0, r3
 8013040:	370c      	adds	r7, #12
 8013042:	46bd      	mov	sp, r7
 8013044:	bd90      	pop	{r4, r7, pc}

08013046 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8013046:	b580      	push	{r7, lr}
 8013048:	b082      	sub	sp, #8
 801304a:	af00      	add	r7, sp, #0
 801304c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801304e:	1d3b      	adds	r3, r7, #4
 8013050:	4618      	mov	r0, r3
 8013052:	f7ff fba5 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013056:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	4618      	mov	r0, r3
 801305c:	f000 f83d 	bl	80130da <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8013060:	4603      	mov	r3, r0
 8013062:	4618      	mov	r0, r3
 8013064:	f7ff fcad 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013068:	4603      	mov	r3, r0
}
 801306a:	4618      	mov	r0, r3
 801306c:	3708      	adds	r7, #8
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}

08013072 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8013072:	b580      	push	{r7, lr}
 8013074:	b082      	sub	sp, #8
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801307a:	1d3b      	adds	r3, r7, #4
 801307c:	4618      	mov	r0, r3
 801307e:	f7ff fb8f 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013082:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	4618      	mov	r0, r3
 8013088:	f7ff fbb6 	bl	80127f8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801308c:	4603      	mov	r3, r0
 801308e:	4618      	mov	r0, r3
 8013090:	f7ff fc97 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013094:	4603      	mov	r3, r0
}
 8013096:	4618      	mov	r0, r3
 8013098:	3708      	adds	r7, #8
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}

0801309e <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801309e:	b590      	push	{r4, r7, lr}
 80130a0:	b083      	sub	sp, #12
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
 80130a6:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80130a8:	1d3b      	adds	r3, r7, #4
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7ff fb78 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80130b0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80130b2:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80130b4:	463b      	mov	r3, r7
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7ff fb72 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80130bc:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4619      	mov	r1, r3
 80130c2:	4620      	mov	r0, r4
 80130c4:	f000 f815 	bl	80130f2 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 80130c8:	4603      	mov	r3, r0
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7ff fc79 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80130d0:	4603      	mov	r3, r0
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	370c      	adds	r7, #12
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd90      	pop	{r4, r7, pc}

080130da <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80130da:	b580      	push	{r7, lr}
 80130dc:	b082      	sub	sp, #8
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 f813 	bl	801310e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 80130e8:	4603      	mov	r3, r0
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3708      	adds	r7, #8
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b082      	sub	sp, #8
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	6078      	str	r0, [r7, #4]
 80130fa:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 80130fc:	6839      	ldr	r1, [r7, #0]
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 f812 	bl	8013128 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8013104:	4603      	mov	r3, r0
}
 8013106:	4618      	mov	r0, r3
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}

0801310e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801310e:	b580      	push	{r7, lr}
 8013110:	b082      	sub	sp, #8
 8013112:	af00      	add	r7, sp, #0
 8013114:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013116:	2102      	movs	r1, #2
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f7fd f865 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801311e:	4603      	mov	r3, r0
  }
 8013120:	4618      	mov	r0, r3
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
 8013132:	6839      	ldr	r1, [r7, #0]
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f7fd f949 	bl	80103cc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801313a:	4603      	mov	r3, r0
 801313c:	4618      	mov	r0, r3
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8013144:	b590      	push	{r4, r7, lr}
 8013146:	ed2d 8b04 	vpush	{d8-d9}
 801314a:	b0a5      	sub	sp, #148	; 0x94
 801314c:	af02      	add	r7, sp, #8
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	607a      	str	r2, [r7, #4]
 8013154:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8013156:	68b8      	ldr	r0, [r7, #8]
 8013158:	f7fc fe0d 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801315c:	4603      	mov	r3, r0
 801315e:	2b04      	cmp	r3, #4
 8013160:	d001      	beq.n	8013166 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8013162:	f006 fff1 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8013166:	6838      	ldr	r0, [r7, #0]
 8013168:	f7fc fe05 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801316c:	4603      	mov	r3, r0
 801316e:	2b04      	cmp	r3, #4
 8013170:	d001      	beq.n	8013176 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8013172:	f006 ffe9 	bl	801a148 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8013176:	2300      	movs	r3, #0
 8013178:	683a      	ldr	r2, [r7, #0]
 801317a:	2100      	movs	r1, #0
 801317c:	68b8      	ldr	r0, [r7, #8]
 801317e:	f7fd f98f 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013182:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8013184:	2303      	movs	r3, #3
 8013186:	683a      	ldr	r2, [r7, #0]
 8013188:	2103      	movs	r1, #3
 801318a:	68b8      	ldr	r0, [r7, #8]
 801318c:	f7fd f988 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013190:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8013192:	2101      	movs	r1, #1
 8013194:	68b8      	ldr	r0, [r7, #8]
 8013196:	f7fc fdfa 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 801319a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 801319c:	2102      	movs	r1, #2
 801319e:	68b8      	ldr	r0, [r7, #8]
 80131a0:	f7fc fdf5 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80131a4:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 80131a6:	2101      	movs	r1, #1
 80131a8:	6838      	ldr	r0, [r7, #0]
 80131aa:	f7fc fdf0 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80131ae:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 80131b0:	2102      	movs	r1, #2
 80131b2:	6838      	ldr	r0, [r7, #0]
 80131b4:	f7fc fdeb 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80131b8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	68db      	ldr	r3, [r3, #12]
 80131be:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80131c6:	2300      	movs	r3, #0
 80131c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80131cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80131d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131d2:	429a      	cmp	r2, r3
 80131d4:	f280 80d4 	bge.w	8013380 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80131d8:	2300      	movs	r3, #0
 80131da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80131de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80131e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80131e4:	429a      	cmp	r2, r3
 80131e6:	f280 80c5 	bge.w	8013374 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80131ea:	2300      	movs	r3, #0
 80131ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80131ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80131f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131f2:	429a      	cmp	r2, r3
 80131f4:	f280 80b8 	bge.w	8013368 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 80131f8:	2300      	movs	r3, #0
 80131fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80131fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80131fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013200:	429a      	cmp	r2, r3
 8013202:	f280 80ad 	bge.w	8013360 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8013206:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013208:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801320a:	fb02 f303 	mul.w	r3, r2, r3
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8013214:	1a9b      	subs	r3, r3, r2
 8013216:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8013218:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801321c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801321e:	fb02 f303 	mul.w	r3, r2, r3
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8013228:	1a9b      	subs	r3, r3, r2
 801322a:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801322c:	2300      	movs	r3, #0
 801322e:	61bb      	str	r3, [r7, #24]
 8013230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013232:	425b      	negs	r3, r3
 8013234:	61fb      	str	r3, [r7, #28]
 8013236:	f107 021c 	add.w	r2, r7, #28
 801323a:	f107 0318 	add.w	r3, r7, #24
 801323e:	4611      	mov	r1, r2
 8013240:	4618      	mov	r0, r3
 8013242:	f7fc fcd7 	bl	800fbf4 <_ZSt3maxIiERKT_S2_S2_>
 8013246:	4603      	mov	r3, r0
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f103 0018 	add.w	r0, r3, #24
 8013252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013256:	1ad3      	subs	r3, r2, r3
 8013258:	623b      	str	r3, [r7, #32]
 801325a:	f107 0320 	add.w	r3, r7, #32
 801325e:	4619      	mov	r1, r3
 8013260:	f000 fcba 	bl	8013bd8 <_ZSt3minIiERKT_S2_S2_>
 8013264:	4603      	mov	r3, r0
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 801326a:	2300      	movs	r3, #0
 801326c:	627b      	str	r3, [r7, #36]	; 0x24
 801326e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013270:	425b      	negs	r3, r3
 8013272:	62bb      	str	r3, [r7, #40]	; 0x28
 8013274:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801327c:	4611      	mov	r1, r2
 801327e:	4618      	mov	r0, r3
 8013280:	f7fc fcb8 	bl	800fbf4 <_ZSt3maxIiERKT_S2_S2_>
 8013284:	4603      	mov	r3, r0
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	f103 0014 	add.w	r0, r3, #20
 8013290:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013294:	1ad3      	subs	r3, r2, r3
 8013296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801329c:	4619      	mov	r1, r3
 801329e:	f000 fc9b 	bl	8013bd8 <_ZSt3minIiERKT_S2_S2_>
 80132a2:	4603      	mov	r3, r0
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 80132a8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80132ac:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80132ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132b0:	677b      	str	r3, [r7, #116]	; 0x74
 80132b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80132b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b6:	429a      	cmp	r2, r3
 80132b8:	da2b      	bge.n	8013312 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80132ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132bc:	673b      	str	r3, [r7, #112]	; 0x70
 80132be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80132c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132c2:	429a      	cmp	r2, r3
 80132c4:	da21      	bge.n	801330a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80132c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80132c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80132ca:	4413      	add	r3, r2
 80132cc:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80132ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80132d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132d2:	4413      	add	r3, r2
 80132d4:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80132d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132de:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80132e2:	68b8      	ldr	r0, [r7, #8]
 80132e4:	f7fc ff08 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80132e8:	4603      	mov	r3, r0
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	441a      	add	r2, r3
 80132f0:	f107 0314 	add.w	r3, r7, #20
 80132f4:	4611      	mov	r1, r2
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7fc f81a 	bl	800f330 <_ZSt3maxIfERKT_S2_S2_>
 80132fc:	4603      	mov	r3, r0
              max = std::max(
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8013302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013304:	3301      	adds	r3, #1
 8013306:	673b      	str	r3, [r7, #112]	; 0x70
 8013308:	e7d9      	b.n	80132be <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801330a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801330c:	3301      	adds	r3, #1
 801330e:	677b      	str	r3, [r7, #116]	; 0x74
 8013310:	e7cf      	b.n	80132b2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8013312:	ed97 8a05 	vldr	s16, [r7, #20]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8013322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013324:	9300      	str	r3, [sp, #0]
 8013326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013328:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801332c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8013330:	6838      	ldr	r0, [r7, #0]
 8013332:	f7fc fee1 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8013336:	4603      	mov	r3, r0
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801333e:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8013340:	eeb0 1a49 	vmov.f32	s2, s18
 8013344:	eef0 0a68 	vmov.f32	s1, s17
 8013348:	eeb0 0a48 	vmov.f32	s0, s16
 801334c:	f7fc ff2c 	bl	80101a8 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 8013350:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8013354:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8013358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801335a:	3301      	adds	r3, #1
 801335c:	67bb      	str	r3, [r7, #120]	; 0x78
 801335e:	e74d      	b.n	80131fc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8013360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013362:	3301      	adds	r3, #1
 8013364:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013366:	e742      	b.n	80131ee <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8013368:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801336c:	3301      	adds	r3, #1
 801336e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013372:	e734      	b.n	80131de <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8013374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013378:	3301      	adds	r3, #1
 801337a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801337e:	e725      	b.n	80131cc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8013380:	bf00      	nop
 8013382:	378c      	adds	r7, #140	; 0x8c
 8013384:	46bd      	mov	sp, r7
 8013386:	ecbd 8b04 	vpop	{d8-d9}
 801338a:	bd90      	pop	{r4, r7, pc}

0801338c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
 801338c:	b580      	push	{r7, lr}
 801338e:	b0a4      	sub	sp, #144	; 0x90
 8013390:	af02      	add	r7, sp, #8
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
 8013398:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	69da      	ldr	r2, [r3, #28]
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	6a1b      	ldr	r3, [r3, #32]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	dd01      	ble.n	80133aa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 80133a6:	f006 fecf 	bl	801a148 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	69db      	ldr	r3, [r3, #28]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	da01      	bge.n	80133b6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 80133b2:	f006 fec9 	bl	801a148 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	6a1b      	ldr	r3, [r3, #32]
 80133ba:	2bff      	cmp	r3, #255	; 0xff
 80133bc:	dd01      	ble.n	80133c2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 80133be:	f006 fec3 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80133c2:	68b8      	ldr	r0, [r7, #8]
 80133c4:	f7fc fcd7 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b04      	cmp	r3, #4
 80133cc:	d001      	beq.n	80133d2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 80133ce:	f006 febb 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80133d2:	6838      	ldr	r0, [r7, #0]
 80133d4:	f7fc fccf 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b04      	cmp	r3, #4
 80133dc:	d001      	beq.n	80133e2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 80133de:	f006 feb3 	bl	801a148 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80133e2:	2300      	movs	r3, #0
 80133e4:	683a      	ldr	r2, [r7, #0]
 80133e6:	2100      	movs	r1, #0
 80133e8:	68b8      	ldr	r0, [r7, #8]
 80133ea:	f7fd f859 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80133ee:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80133f0:	2303      	movs	r3, #3
 80133f2:	683a      	ldr	r2, [r7, #0]
 80133f4:	2103      	movs	r1, #3
 80133f6:	68b8      	ldr	r0, [r7, #8]
 80133f8:	f7fd f852 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80133fc:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 80133fe:	2101      	movs	r1, #1
 8013400:	68b8      	ldr	r0, [r7, #8]
 8013402:	f7fc fcc4 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8013406:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8013408:	2102      	movs	r1, #2
 801340a:	68b8      	ldr	r0, [r7, #8]
 801340c:	f7fc fcbf 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8013410:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8013412:	2101      	movs	r1, #1
 8013414:	6838      	ldr	r0, [r7, #0]
 8013416:	f7fc fcba 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 801341a:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 801341c:	2102      	movs	r1, #2
 801341e:	6838      	ldr	r0, [r7, #0]
 8013420:	f7fc fcb5 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8013424:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	691b      	ldr	r3, [r3, #16]
 8013430:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8013432:	2300      	movs	r3, #0
 8013434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013438:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801343e:	429a      	cmp	r2, r3
 8013440:	f280 80e1 	bge.w	8013606 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8013444:	2300      	movs	r3, #0
 8013446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801344a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801344e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013450:	429a      	cmp	r2, r3
 8013452:	f280 80d2 	bge.w	80135fa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8013456:	2300      	movs	r3, #0
 8013458:	67fb      	str	r3, [r7, #124]	; 0x7c
 801345a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801345c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801345e:	429a      	cmp	r2, r3
 8013460:	f280 80c5 	bge.w	80135ee <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 8013464:	2300      	movs	r3, #0
 8013466:	67bb      	str	r3, [r7, #120]	; 0x78
 8013468:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801346a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801346c:	429a      	cmp	r2, r3
 801346e:	f280 80ba 	bge.w	80135e6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8013472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013474:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013476:	fb02 f303 	mul.w	r3, r2, r3
 801347a:	68fa      	ldr	r2, [r7, #12]
 801347c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8013480:	1a9b      	subs	r3, r3, r2
 8013482:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8013484:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801348a:	fb02 f303 	mul.w	r3, r2, r3
 801348e:	68fa      	ldr	r2, [r7, #12]
 8013490:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8013494:	1a9b      	subs	r3, r3, r2
 8013496:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8013498:	2300      	movs	r3, #0
 801349a:	617b      	str	r3, [r7, #20]
 801349c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801349e:	425b      	negs	r3, r3
 80134a0:	61bb      	str	r3, [r7, #24]
 80134a2:	f107 0218 	add.w	r2, r7, #24
 80134a6:	f107 0314 	add.w	r3, r7, #20
 80134aa:	4611      	mov	r1, r2
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7fc fba1 	bl	800fbf4 <_ZSt3maxIiERKT_S2_S2_>
 80134b2:	4603      	mov	r3, r0
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	f103 0018 	add.w	r0, r3, #24
 80134be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80134c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134c2:	1ad3      	subs	r3, r2, r3
 80134c4:	61fb      	str	r3, [r7, #28]
 80134c6:	f107 031c 	add.w	r3, r7, #28
 80134ca:	4619      	mov	r1, r3
 80134cc:	f000 fb84 	bl	8013bd8 <_ZSt3minIiERKT_S2_S2_>
 80134d0:	4603      	mov	r3, r0
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80134d6:	2300      	movs	r3, #0
 80134d8:	623b      	str	r3, [r7, #32]
 80134da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134dc:	425b      	negs	r3, r3
 80134de:	627b      	str	r3, [r7, #36]	; 0x24
 80134e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80134e4:	f107 0320 	add.w	r3, r7, #32
 80134e8:	4611      	mov	r1, r2
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fc fb82 	bl	800fbf4 <_ZSt3maxIiERKT_S2_S2_>
 80134f0:	4603      	mov	r3, r0
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f103 0014 	add.w	r0, r3, #20
 80134fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80134fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013500:	1ad3      	subs	r3, r2, r3
 8013502:	62bb      	str	r3, [r7, #40]	; 0x28
 8013504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013508:	4619      	mov	r1, r3
 801350a:	f000 fb65 	bl	8013bd8 <_ZSt3minIiERKT_S2_S2_>
 801350e:	4603      	mov	r3, r0
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8 max = 0;
 8013514:	2300      	movs	r3, #0
 8013516:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8013518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801351a:	677b      	str	r3, [r7, #116]	; 0x74
 801351c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013520:	429a      	cmp	r2, r3
 8013522:	da2b      	bge.n	801357c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8013524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013526:	673b      	str	r3, [r7, #112]	; 0x70
 8013528:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801352a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801352c:	429a      	cmp	r2, r3
 801352e:	da21      	bge.n	8013574 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8013530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013534:	4413      	add	r3, r2
 8013536:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8013538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801353c:	4413      	add	r3, r2
 801353e:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8013540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013542:	9300      	str	r3, [sp, #0]
 8013544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013548:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801354c:	68b8      	ldr	r0, [r7, #8]
 801354e:	f7fc fdd3 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8013552:	4603      	mov	r3, r0
 8013554:	461a      	mov	r2, r3
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	441a      	add	r2, r3
 801355a:	f107 0313 	add.w	r3, r7, #19
 801355e:	4611      	mov	r1, r2
 8013560:	4618      	mov	r0, r3
 8013562:	f000 fb4d 	bl	8013c00 <_ZSt3maxIhERKT_S2_S2_>
 8013566:	4603      	mov	r3, r0
              max = std::max(
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801356c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801356e:	3301      	adds	r3, #1
 8013570:	673b      	str	r3, [r7, #112]	; 0x70
 8013572:	e7d9      	b.n	8013528 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8013574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013576:	3301      	adds	r3, #1
 8013578:	677b      	str	r3, [r7, #116]	; 0x74
 801357a:	e7cf      	b.n	801351c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	69db      	ldr	r3, [r3, #28]
 8013580:	b2db      	uxtb	r3, r3
 8013582:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8013586:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801358a:	f107 0313 	add.w	r3, r7, #19
 801358e:	4611      	mov	r1, r2
 8013590:	4618      	mov	r0, r3
 8013592:	f000 fb35 	bl	8013c00 <_ZSt3maxIhERKT_S2_S2_>
 8013596:	4603      	mov	r3, r0
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8>(max, params.quantized_activation_max);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	6a1b      	ldr	r3, [r3, #32]
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80135a6:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 80135aa:	f107 0313 	add.w	r3, r7, #19
 80135ae:	4611      	mov	r1, r2
 80135b0:	4618      	mov	r0, r3
 80135b2:	f000 fb39 	bl	8013c28 <_ZSt3minIhERKT_S2_S2_>
 80135b6:	4603      	mov	r3, r0
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80135bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80135be:	9300      	str	r3, [sp, #0]
 80135c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80135c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80135c6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80135ca:	6838      	ldr	r0, [r7, #0]
 80135cc:	f7fc fd94 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80135d0:	4603      	mov	r3, r0
 80135d2:	461a      	mov	r2, r3
 80135d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80135d8:	4413      	add	r3, r2
 80135da:	7cfa      	ldrb	r2, [r7, #19]
 80135dc:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 80135de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80135e0:	3301      	adds	r3, #1
 80135e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80135e4:	e740      	b.n	8013468 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80135e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80135e8:	3301      	adds	r3, #1
 80135ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80135ec:	e735      	b.n	801345a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80135ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80135f2:	3301      	adds	r3, #1
 80135f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80135f8:	e727      	b.n	801344a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 80135fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80135fe:	3301      	adds	r3, #1
 8013600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013604:	e718      	b.n	8013438 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
 8013606:	bf00      	nop
 8013608:	3788      	adds	r7, #136	; 0x88
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}

0801360e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
 801360e:	b590      	push	{r4, r7, lr}
 8013610:	b0a5      	sub	sp, #148	; 0x94
 8013612:	af02      	add	r7, sp, #8
 8013614:	60f8      	str	r0, [r7, #12]
 8013616:	60b9      	str	r1, [r7, #8]
 8013618:	607a      	str	r2, [r7, #4]
 801361a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	69da      	ldr	r2, [r3, #28]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	6a1b      	ldr	r3, [r3, #32]
 8013624:	429a      	cmp	r2, r3
 8013626:	dd01      	ble.n	801362c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e>
 8013628:	f006 fd8e 	bl	801a148 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	69dc      	ldr	r4, [r3, #28]
 8013630:	f7fb febb 	bl	800f3aa <_ZNSt14numeric_limitsIaE3minEv>
 8013634:	4603      	mov	r3, r0
 8013636:	429c      	cmp	r4, r3
 8013638:	da01      	bge.n	801363e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x30>
 801363a:	f006 fd85 	bl	801a148 <abort>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	6a1c      	ldr	r4, [r3, #32]
 8013642:	f7fb febb 	bl	800f3bc <_ZNSt14numeric_limitsIaE3maxEv>
 8013646:	4603      	mov	r3, r0
 8013648:	429c      	cmp	r4, r3
 801364a:	dd01      	ble.n	8013650 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x42>
 801364c:	f006 fd7c 	bl	801a148 <abort>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8013650:	68b8      	ldr	r0, [r7, #8]
 8013652:	f7fc fb90 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013656:	4603      	mov	r3, r0
 8013658:	2b04      	cmp	r3, #4
 801365a:	d001      	beq.n	8013660 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x52>
 801365c:	f006 fd74 	bl	801a148 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8013660:	6838      	ldr	r0, [r7, #0]
 8013662:	f7fc fb88 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013666:	4603      	mov	r3, r0
 8013668:	2b04      	cmp	r3, #4
 801366a:	d001      	beq.n	8013670 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x62>
 801366c:	f006 fd6c 	bl	801a148 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8013670:	2300      	movs	r3, #0
 8013672:	683a      	ldr	r2, [r7, #0]
 8013674:	2100      	movs	r1, #0
 8013676:	68b8      	ldr	r0, [r7, #8]
 8013678:	f7fc ff12 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801367c:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801367e:	2303      	movs	r3, #3
 8013680:	683a      	ldr	r2, [r7, #0]
 8013682:	2103      	movs	r1, #3
 8013684:	68b8      	ldr	r0, [r7, #8]
 8013686:	f7fc ff0b 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801368a:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 801368c:	2101      	movs	r1, #1
 801368e:	68b8      	ldr	r0, [r7, #8]
 8013690:	f7fc fb7d 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 8013694:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8013696:	2102      	movs	r1, #2
 8013698:	68b8      	ldr	r0, [r7, #8]
 801369a:	f7fc fb78 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 801369e:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 80136a0:	2101      	movs	r1, #1
 80136a2:	6838      	ldr	r0, [r7, #0]
 80136a4:	f7fc fb73 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80136a8:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 80136aa:	2102      	movs	r1, #2
 80136ac:	6838      	ldr	r0, [r7, #0]
 80136ae:	f7fc fb6e 	bl	800fd8e <_ZNK6tflite12RuntimeShape4DimsEi>
 80136b2:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	691b      	ldr	r3, [r3, #16]
 80136be:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80136c0:	2300      	movs	r3, #0
 80136c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80136c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80136ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80136cc:	429a      	cmp	r2, r3
 80136ce:	f280 80e5 	bge.w	801389c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80136d2:	2300      	movs	r3, #0
 80136d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80136d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80136dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80136de:	429a      	cmp	r2, r3
 80136e0:	f280 80d6 	bge.w	8013890 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x282>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80136e4:	2300      	movs	r3, #0
 80136e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80136e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80136ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80136ec:	429a      	cmp	r2, r3
 80136ee:	f280 80c9 	bge.w	8013884 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x276>
        for (int channel = 0; channel < depth; ++channel) {
 80136f2:	2300      	movs	r3, #0
 80136f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80136f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80136f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80136fa:	429a      	cmp	r2, r3
 80136fc:	f280 80be 	bge.w	801387c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x26e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8013700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013704:	fb02 f303 	mul.w	r3, r2, r3
 8013708:	68fa      	ldr	r2, [r7, #12]
 801370a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 801370e:	1a9b      	subs	r3, r3, r2
 8013710:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8013712:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013718:	fb02 f303 	mul.w	r3, r2, r3
 801371c:	68fa      	ldr	r2, [r7, #12]
 801371e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8013722:	1a9b      	subs	r3, r3, r2
 8013724:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8013726:	2300      	movs	r3, #0
 8013728:	617b      	str	r3, [r7, #20]
 801372a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801372c:	425b      	negs	r3, r3
 801372e:	61bb      	str	r3, [r7, #24]
 8013730:	f107 0218 	add.w	r2, r7, #24
 8013734:	f107 0314 	add.w	r3, r7, #20
 8013738:	4611      	mov	r1, r2
 801373a:	4618      	mov	r0, r3
 801373c:	f7fc fa5a 	bl	800fbf4 <_ZSt3maxIiERKT_S2_S2_>
 8013740:	4603      	mov	r3, r0
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	f103 0018 	add.w	r0, r3, #24
 801374c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013750:	1ad3      	subs	r3, r2, r3
 8013752:	61fb      	str	r3, [r7, #28]
 8013754:	f107 031c 	add.w	r3, r7, #28
 8013758:	4619      	mov	r1, r3
 801375a:	f000 fa3d 	bl	8013bd8 <_ZSt3minIiERKT_S2_S2_>
 801375e:	4603      	mov	r3, r0
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8013764:	2300      	movs	r3, #0
 8013766:	623b      	str	r3, [r7, #32]
 8013768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801376a:	425b      	negs	r3, r3
 801376c:	627b      	str	r3, [r7, #36]	; 0x24
 801376e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013772:	f107 0320 	add.w	r3, r7, #32
 8013776:	4611      	mov	r1, r2
 8013778:	4618      	mov	r0, r3
 801377a:	f7fc fa3b 	bl	800fbf4 <_ZSt3maxIiERKT_S2_S2_>
 801377e:	4603      	mov	r3, r0
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	f103 0014 	add.w	r0, r3, #20
 801378a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801378c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801378e:	1ad3      	subs	r3, r2, r3
 8013790:	62bb      	str	r3, [r7, #40]	; 0x28
 8013792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013796:	4619      	mov	r1, r3
 8013798:	f000 fa1e 	bl	8013bd8 <_ZSt3minIiERKT_S2_S2_>
 801379c:	4603      	mov	r3, r0
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	63bb      	str	r3, [r7, #56]	; 0x38
          int8_t max = std::numeric_limits<int8_t>::lowest();
 80137a2:	2380      	movs	r3, #128	; 0x80
 80137a4:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80137a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137a8:	677b      	str	r3, [r7, #116]	; 0x74
 80137aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80137ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ae:	429a      	cmp	r2, r3
 80137b0:	da2c      	bge.n	801380c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1fe>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80137b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137b4:	673b      	str	r3, [r7, #112]	; 0x70
 80137b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80137b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ba:	429a      	cmp	r2, r3
 80137bc:	da22      	bge.n	8013804 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1f6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80137be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80137c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80137c2:	4413      	add	r3, r2
 80137c4:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80137c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80137c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137ca:	4413      	add	r3, r2
 80137cc:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80137ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137d6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80137da:	68b8      	ldr	r0, [r7, #8]
 80137dc:	f7fc fc8c 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80137e0:	4603      	mov	r3, r0
 80137e2:	461a      	mov	r2, r3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	441a      	add	r2, r3
 80137e8:	f107 0313 	add.w	r3, r7, #19
 80137ec:	4611      	mov	r1, r2
 80137ee:	4618      	mov	r0, r3
 80137f0:	f000 fa2e 	bl	8013c50 <_ZSt3maxIaERKT_S2_S2_>
 80137f4:	4603      	mov	r3, r0
              max = std::max(
 80137f6:	f993 3000 	ldrsb.w	r3, [r3]
 80137fa:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80137fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80137fe:	3301      	adds	r3, #1
 8013800:	673b      	str	r3, [r7, #112]	; 0x70
 8013802:	e7d8      	b.n	80137b6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a8>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8013804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013806:	3301      	adds	r3, #1
 8013808:	677b      	str	r3, [r7, #116]	; 0x74
 801380a:	e7ce      	b.n	80137aa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19c>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	69db      	ldr	r3, [r3, #28]
 8013810:	b25b      	sxtb	r3, r3
 8013812:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8013816:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801381a:	f107 0313 	add.w	r3, r7, #19
 801381e:	4611      	mov	r1, r2
 8013820:	4618      	mov	r0, r3
 8013822:	f000 fa15 	bl	8013c50 <_ZSt3maxIaERKT_S2_S2_>
 8013826:	4603      	mov	r3, r0
 8013828:	f993 3000 	ldrsb.w	r3, [r3]
 801382c:	74fb      	strb	r3, [r7, #19]
          max = std::min<int8_t>(max, params.quantized_activation_max);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	6a1b      	ldr	r3, [r3, #32]
 8013832:	b25b      	sxtb	r3, r3
 8013834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013838:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 801383c:	f107 0313 	add.w	r3, r7, #19
 8013840:	4611      	mov	r1, r2
 8013842:	4618      	mov	r0, r3
 8013844:	f000 fa1a 	bl	8013c7c <_ZSt3minIaERKT_S2_S2_>
 8013848:	4603      	mov	r3, r0
 801384a:	f993 3000 	ldrsb.w	r3, [r3]
 801384e:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8013850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013856:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801385a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801385e:	6838      	ldr	r0, [r7, #0]
 8013860:	f7fc fc4a 	bl	80100f8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8013864:	4603      	mov	r3, r0
 8013866:	461a      	mov	r2, r3
 8013868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801386c:	4413      	add	r3, r2
 801386e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013872:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8013874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013876:	3301      	adds	r3, #1
 8013878:	67bb      	str	r3, [r7, #120]	; 0x78
 801387a:	e73c      	b.n	80136f6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xe8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801387c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801387e:	3301      	adds	r3, #1
 8013880:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013882:	e731      	b.n	80136e8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xda>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8013884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013888:	3301      	adds	r3, #1
 801388a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801388e:	e723      	b.n	80136d8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xca>
  for (int batch = 0; batch < batches; ++batch) {
 8013890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013894:	3301      	adds	r3, #1
 8013896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801389a:	e714      	b.n	80136c6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xb8>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
 801389c:	bf00      	nop
 801389e:	378c      	adds	r7, #140	; 0x8c
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd90      	pop	{r4, r7, pc}

080138a4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(const TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input,
                             const TfLiteTensor* output, OpData* data) {
 80138a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138a6:	b097      	sub	sp, #92	; 0x5c
 80138a8:	af08      	add	r7, sp, #32
 80138aa:	6278      	str	r0, [r7, #36]	; 0x24
 80138ac:	6239      	str	r1, [r7, #32]
 80138ae:	61fa      	str	r2, [r7, #28]
 80138b0:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 80138b2:	2101      	movs	r1, #1
 80138b4:	69f8      	ldr	r0, [r7, #28]
 80138b6:	f7fb fdb9 	bl	800f42c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80138ba:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 80138bc:	2102      	movs	r1, #2
 80138be:	69f8      	ldr	r0, [r7, #28]
 80138c0:	f7fb fdb4 	bl	800f42c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80138c4:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 80138c6:	6a3b      	ldr	r3, [r7, #32]
 80138c8:	689d      	ldr	r5, [r3, #8]
 80138ca:	6a3b      	ldr	r3, [r7, #32]
 80138cc:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 80138ce:	6a3b      	ldr	r3, [r7, #32]
 80138d0:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 80138d2:	6a3a      	ldr	r2, [r7, #32]
 80138d4:	68d2      	ldr	r2, [r2, #12]
 80138d6:	6a39      	ldr	r1, [r7, #32]
 80138d8:	7809      	ldrb	r1, [r1, #0]
 80138da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80138dc:	6078      	str	r0, [r7, #4]
 80138de:	f107 0408 	add.w	r4, r7, #8
 80138e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80138e6:	9007      	str	r0, [sp, #28]
 80138e8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80138ec:	9006      	str	r0, [sp, #24]
 80138ee:	9105      	str	r1, [sp, #20]
 80138f0:	9204      	str	r2, [sp, #16]
 80138f2:	9303      	str	r3, [sp, #12]
 80138f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f6:	9302      	str	r3, [sp, #8]
 80138f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138fa:	9301      	str	r3, [sp, #4]
 80138fc:	2301      	movs	r3, #1
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	2301      	movs	r3, #1
 8013902:	4632      	mov	r2, r6
 8013904:	4629      	mov	r1, r5
 8013906:	4620      	mov	r0, r4
 8013908:	f7fd fb5f 	bl	8010fca <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 801390c:	687c      	ldr	r4, [r7, #4]
 801390e:	f107 0308 	add.w	r3, r7, #8
 8013912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 8013918:	2300      	movs	r3, #0
}
 801391a:	4618      	mov	r0, r3
 801391c:	373c      	adds	r7, #60	; 0x3c
 801391e:	46bd      	mov	sp, r7
 8013920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013922 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:
  }
}

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, OpData* data,
                  const TfLiteTensor* input, TfLiteTensor* output) {
 8013922:	b590      	push	{r4, r7, lr}
 8013924:	b0a1      	sub	sp, #132	; 0x84
 8013926:	af02      	add	r7, sp, #8
 8013928:	60f8      	str	r0, [r7, #12]
 801392a:	60b9      	str	r1, [r7, #8]
 801392c:	607a      	str	r2, [r7, #4]
 801392e:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	7d1b      	ldrb	r3, [r3, #20]
 8013934:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013938:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801393c:	4618      	mov	r0, r3
 801393e:	f7fc fcc7 	bl	80102d0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	689b      	ldr	r3, [r3, #8]
 8013946:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	691b      	ldr	r3, [r3, #16]
 8013952:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	685b      	ldr	r3, [r3, #4]
 801395e:	b21b      	sxth	r3, r3
 8013960:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	b21b      	sxth	r3, r3
 8013968:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 801396a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801396c:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 801396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013970:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8013972:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013976:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801397a:	4618      	mov	r0, r3
 801397c:	f7fc faba 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013980:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8013984:	f7fc fad4 	bl	800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013988:	4604      	mov	r4, r0
                         GetTensorData<float>(input), GetTensorShape(output),
 801398a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801398e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013992:	4618      	mov	r0, r3
 8013994:	f7fc faae 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8013998:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801399c:	f7fc fad9 	bl	800ff52 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 80139a0:	4602      	mov	r2, r0
 80139a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80139a6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80139aa:	f107 0014 	add.w	r0, r7, #20
 80139ae:	9200      	str	r2, [sp, #0]
 80139b0:	4622      	mov	r2, r4
 80139b2:	f7ff fbc7 	bl	8013144 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         GetTensorData<float>(input), GetTensorShape(output),
 80139b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7fc f9c5 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 80139c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7fc f9c0 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
                         GetTensorData<float>(output));
}
 80139ca:	bf00      	nop
 80139cc:	377c      	adds	r7, #124	; 0x7c
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd90      	pop	{r4, r7, pc}

080139d2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:

void MaxEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                      TfLitePoolParams* params, OpData* data,
                      const TfLiteTensor* input, TfLiteTensor* output) {
 80139d2:	b590      	push	{r4, r7, lr}
 80139d4:	b0ad      	sub	sp, #180	; 0xb4
 80139d6:	af02      	add	r7, sp, #8
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	60b9      	str	r1, [r7, #8]
 80139dc:	607a      	str	r2, [r7, #4]
 80139de:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 80139e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	2b03      	cmp	r3, #3
 80139e8:	d006      	beq.n	80139f8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 80139ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	2b09      	cmp	r3, #9
 80139f2:	d001      	beq.n	80139f8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 80139f4:	f006 fba8 	bl	801a148 <abort>

  int32_t activation_min, activation_max;
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	7d19      	ldrb	r1, [r3, #20]
 80139fc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a04:	9300      	str	r3, [sp, #0]
 8013a06:	4613      	mov	r3, r2
 8013a08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8013a0c:	68f8      	ldr	r0, [r7, #12]
 8013a0e:	f7fc f89d 	bl	800fb4c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                          &activation_min, &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	689b      	ldr	r3, [r3, #8]
 8013a16:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	691b      	ldr	r3, [r3, #16]
 8013a22:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	b21b      	sxth	r3, r3
 8013a30:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	b21b      	sxth	r3, r3
 8013a38:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = activation_min;
 8013a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a3c:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = activation_max;
 8013a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a40:	637b      	str	r3, [r7, #52]	; 0x34

  if (input->type == kTfLiteUInt8) {
 8013a42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	2b03      	cmp	r3, #3
 8013a4a:	d12c      	bne.n	8013aa6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0xd4>
    reference_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8013a4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a50:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7fc fa4d 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 8013a5a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8013a5e:	f7fc f931 	bl	800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013a62:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8013a64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013a68:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7fc fa41 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 8013a72:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8013a76:	f7fc f936 	bl	800fce6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013a80:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8013a84:	f107 0014 	add.w	r0, r7, #20
 8013a88:	9200      	str	r2, [sp, #0]
 8013a8a:	4622      	mov	r2, r4
 8013a8c:	f7ff fc7e 	bl	801338c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8013a90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fc f958 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8013a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7fc f953 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    reference_integer_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
        GetTensorShape(output), GetTensorData<int8_t>(output));
  }
}
 8013aa4:	e02b      	b.n	8013afe <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x12c>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8013aa6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013aaa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7fc fa20 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 8013ab4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8013ab8:	f7fc fa5c 	bl	800ff74 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8013abc:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<int8_t>(output));
 8013abe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013ac2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fc fa14 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 8013acc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8013ad0:	f7fc fa61 	bl	800ff96 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013ada:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8013ade:	f107 0014 	add.w	r0, r7, #20
 8013ae2:	9200      	str	r2, [sp, #0]
 8013ae4:	4622      	mov	r2, r4
 8013ae6:	f7ff fd92 	bl	801360e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
        GetTensorShape(output), GetTensorData<int8_t>(output));
 8013aea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7fc f92b 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8013af4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7fc f926 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8013afe:	bf00      	nop
 8013b00:	37ac      	adds	r7, #172	; 0xac
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd90      	pop	{r4, r7, pc}
	...

08013b08 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8013b08:	b590      	push	{r4, r7, lr}
 8013b0a:	b08d      	sub	sp, #52	; 0x34
 8013b0c:	af02      	add	r7, sp, #8
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	695b      	ldr	r3, [r3, #20]
 8013b16:	627b      	str	r3, [r7, #36]	; 0x24
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013b18:	2200      	movs	r2, #0
 8013b1a:	6839      	ldr	r1, [r7, #0]
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f7fc f8a5 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013b22:	6238      	str	r0, [r7, #32]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013b24:	2200      	movs	r2, #0
 8013b26:	6839      	ldr	r1, [r7, #0]
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f7fc f8b5 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013b2e:	61f8      	str	r0, [r7, #28]

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
 8013b30:	f107 0308 	add.w	r3, r7, #8
 8013b34:	9300      	str	r3, [sp, #0]
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	6a3a      	ldr	r2, [r7, #32]
 8013b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f7ff feb1 	bl	80138a4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>
 8013b42:	4603      	mov	r3, r0
 8013b44:	76fb      	strb	r3, [r7, #27]
 8013b46:	7efb      	ldrb	r3, [r7, #27]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x48>
 8013b4c:	7efb      	ldrb	r3, [r7, #27]
 8013b4e:	e033      	b.n	8013bb8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>

  switch (input->type) {
 8013b50:	6a3b      	ldr	r3, [r7, #32]
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	2b09      	cmp	r3, #9
 8013b56:	d013      	beq.n	8013b80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
 8013b58:	2b09      	cmp	r3, #9
 8013b5a:	dc1e      	bgt.n	8013b9a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
 8013b5c:	2b01      	cmp	r3, #1
 8013b5e:	d002      	beq.n	8013b66 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e>
 8013b60:	2b03      	cmp	r3, #3
 8013b62:	d00d      	beq.n	8013b80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
 8013b64:	e019      	b.n	8013b9a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, &data, input, output);
 8013b66:	f107 0208 	add.w	r2, r7, #8
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	9301      	str	r3, [sp, #4]
 8013b6e:	6a3b      	ldr	r3, [r7, #32]
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	4613      	mov	r3, r2
 8013b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b76:	6839      	ldr	r1, [r7, #0]
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff fed2 	bl	8013922 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 8013b7e:	e01a      	b.n	8013bb6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      MaxEvalQuantized(context, node, params, &data, input, output);
 8013b80:	f107 0208 	add.w	r2, r7, #8
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	9301      	str	r3, [sp, #4]
 8013b88:	6a3b      	ldr	r3, [r7, #32]
 8013b8a:	9300      	str	r3, [sp, #0]
 8013b8c:	4613      	mov	r3, r2
 8013b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b90:	6839      	ldr	r1, [r7, #0]
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f7ff ff1d 	bl	80139d2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 8013b98:	e00d      	b.n	8013bb6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	695c      	ldr	r4, [r3, #20]
 8013b9e:	6a3b      	ldr	r3, [r7, #32]
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7fb f9cc 	bl	800ef40 <TfLiteTypeGetName>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	461a      	mov	r2, r3
 8013bac:	4904      	ldr	r1, [pc, #16]	; (8013bc0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e000      	b.n	8013bb8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
  }
  return kTfLiteOk;
 8013bb6:	2300      	movs	r3, #0
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	372c      	adds	r7, #44	; 0x2c
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd90      	pop	{r4, r7, pc}
 8013bc0:	0801ddb8 	.word	0x0801ddb8

08013bc4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}

TfLiteRegistration* Register_MAX_POOL_2D() {
 8013bc4:	b480      	push	{r7}
 8013bc6:	af00      	add	r7, sp, #0
                                 /*invoke=*/pooling::MaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8013bc8:	4b02      	ldr	r3, [pc, #8]	; (8013bd4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x10>)
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	200000a4 	.word	0x200000a4

08013bd8 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8013bd8:	b480      	push	{r7}
 8013bda:	b083      	sub	sp, #12
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	da01      	bge.n	8013bf2 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	e000      	b.n	8013bf4 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8013bf2:	687b      	ldr	r3, [r7, #4]
    }
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	370c      	adds	r7, #12
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr

08013c00 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	781a      	ldrb	r2, [r3, #0]
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	781b      	ldrb	r3, [r3, #0]
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d201      	bcs.n	8013c1a <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	e000      	b.n	8013c1c <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8013c1a:	687b      	ldr	r3, [r7, #4]
    }
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	370c      	adds	r7, #12
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr

08013c28 <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8013c28:	b480      	push	{r7}
 8013c2a:	b083      	sub	sp, #12
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	781a      	ldrb	r2, [r3, #0]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d201      	bcs.n	8013c42 <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	e000      	b.n	8013c44 <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 8013c42:	687b      	ldr	r3, [r7, #4]
    }
 8013c44:	4618      	mov	r0, r3
 8013c46:	370c      	adds	r7, #12
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4e:	4770      	bx	lr

08013c50 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8013c50:	b480      	push	{r7}
 8013c52:	b083      	sub	sp, #12
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f993 2000 	ldrsb.w	r2, [r3]
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	f993 3000 	ldrsb.w	r3, [r3]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	da01      	bge.n	8013c6e <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	e000      	b.n	8013c70 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8013c6e:	687b      	ldr	r3, [r7, #4]
    }
 8013c70:	4618      	mov	r0, r3
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <_ZSt3minIaERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	f993 2000 	ldrsb.w	r2, [r3]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	da01      	bge.n	8013c9a <_ZSt3minIaERKT_S2_S2_+0x1e>
	return __b;
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	e000      	b.n	8013c9c <_ZSt3minIaERKT_S2_S2_+0x20>
      return __a;
 8013c9a:	687b      	ldr	r3, [r7, #4]
    }
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr

08013ca8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8013ca8:	b5b0      	push	{r4, r5, r7, lr}
 8013caa:	b08e      	sub	sp, #56	; 0x38
 8013cac:	af04      	add	r7, sp, #16
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	6839      	ldr	r1, [r7, #0]
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f7fb ffd8 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013cbc:	61b8      	str	r0, [r7, #24]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	6839      	ldr	r1, [r7, #0]
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7fb ffe8 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013cc8:	6178      	str	r0, [r7, #20]
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8013cca:	69b8      	ldr	r0, [r7, #24]
 8013ccc:	f7fb fbf5 	bl	800f4ba <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 8013cd0:	4602      	mov	r2, r0
 8013cd2:	460b      	mov	r3, r1
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	689b      	ldr	r3, [r3, #8]
 8013cdc:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013cde:	6838      	ldr	r0, [r7, #0]
 8013ce0:	f7fc fbc4 	bl	801046c <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013ce4:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8013ce6:	2b01      	cmp	r3, #1
 8013ce8:	d109      	bne.n	8013cfe <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013cee:	2b01      	cmp	r3, #1
 8013cf0:	d105      	bne.n	8013cfe <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d101      	bne.n	8013cfe <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	e000      	b.n	8013d00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x58>
 8013cfe:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d002      	beq.n	8013d0a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x62>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2200      	movs	r2, #0
 8013d08:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 8013d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d12:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 8013d14:	2300      	movs	r3, #0
 8013d16:	61fb      	str	r3, [r7, #28]
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	69fa      	ldr	r2, [r7, #28]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	da2b      	bge.n	8013d7a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd2>
    int value = output_shape->data[i];
 8013d22:	68fa      	ldr	r2, [r7, #12]
 8013d24:	69fb      	ldr	r3, [r7, #28]
 8013d26:	009b      	lsls	r3, r3, #2
 8013d28:	4413      	add	r3, r2
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d34:	d118      	bne.n	8013d68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8013d36:	6a3b      	ldr	r3, [r7, #32]
 8013d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3c:	d011      	beq.n	8013d62 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	695c      	ldr	r4, [r3, #20]
 8013d42:	f04f 33ff 	mov.w	r3, #4294967295
 8013d46:	9303      	str	r3, [sp, #12]
 8013d48:	6a3b      	ldr	r3, [r7, #32]
 8013d4a:	9302      	str	r3, [sp, #8]
 8013d4c:	4b33      	ldr	r3, [pc, #204]	; (8013e1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
 8013d4e:	9301      	str	r3, [sp, #4]
 8013d50:	4b33      	ldr	r3, [pc, #204]	; (8013e20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 8013d52:	9300      	str	r3, [sp, #0]
 8013d54:	2335      	movs	r3, #53	; 0x35
 8013d56:	4a33      	ldr	r2, [pc, #204]	; (8013e24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8013d58:	4933      	ldr	r1, [pc, #204]	; (8013e28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	47a0      	blx	r4
 8013d5e:	2301      	movs	r3, #1
 8013d60:	e058      	b.n	8013e14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
      stretch_dim = i;
 8013d62:	69fb      	ldr	r3, [r7, #28]
 8013d64:	623b      	str	r3, [r7, #32]
 8013d66:	e004      	b.n	8013d72 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xca>
    } else {
      num_output_elements *= value;
 8013d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6a:	68ba      	ldr	r2, [r7, #8]
 8013d6c:	fb02 f303 	mul.w	r3, r2, r3
 8013d70:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	3301      	adds	r3, #1
 8013d76:	61fb      	str	r3, [r7, #28]
 8013d78:	e7ce      	b.n	8013d18 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
    }
  }
  if (stretch_dim != -1) {
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d80:	d011      	beq.n	8013da6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 8013d82:	693a      	ldr	r2, [r7, #16]
 8013d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d86:	fb92 f2f3 	sdiv	r2, r2, r3
 8013d8a:	68f9      	ldr	r1, [r7, #12]
 8013d8c:	6a3b      	ldr	r3, [r7, #32]
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	440b      	add	r3, r1
 8013d92:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 8013d94:	68fa      	ldr	r2, [r7, #12]
 8013d96:	6a3b      	ldr	r3, [r7, #32]
 8013d98:	009b      	lsls	r3, r3, #2
 8013d9a:	4413      	add	r3, r2
 8013d9c:	685a      	ldr	r2, [r3, #4]
 8013d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da0:	fb02 f303 	mul.w	r3, r2, r3
 8013da4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8013da6:	69bb      	ldr	r3, [r7, #24]
 8013da8:	781a      	ldrb	r2, [r3, #0]
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d01a      	beq.n	8013de8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	695c      	ldr	r4, [r3, #20]
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7fb f8c0 	bl	800ef40 <TfLiteTypeGetName>
 8013dc0:	4605      	mov	r5, r0
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7fb f8ba 	bl	800ef40 <TfLiteTypeGetName>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	9303      	str	r3, [sp, #12]
 8013dd0:	9502      	str	r5, [sp, #8]
 8013dd2:	4b16      	ldr	r3, [pc, #88]	; (8013e2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x184>)
 8013dd4:	9301      	str	r3, [sp, #4]
 8013dd6:	4b16      	ldr	r3, [pc, #88]	; (8013e30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x188>)
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	2340      	movs	r3, #64	; 0x40
 8013ddc:	4a11      	ldr	r2, [pc, #68]	; (8013e24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8013dde:	4915      	ldr	r1, [pc, #84]	; (8013e34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x18c>)
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	47a0      	blx	r4
 8013de4:	2301      	movs	r3, #1
 8013de6:	e015      	b.n	8013e14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8013de8:	693a      	ldr	r2, [r7, #16]
 8013dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d010      	beq.n	8013e12 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16a>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	695c      	ldr	r4, [r3, #20]
 8013df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df6:	9303      	str	r3, [sp, #12]
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	9302      	str	r3, [sp, #8]
 8013dfc:	4b0e      	ldr	r3, [pc, #56]	; (8013e38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x190>)
 8013dfe:	9301      	str	r3, [sp, #4]
 8013e00:	4b0e      	ldr	r3, [pc, #56]	; (8013e3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x194>)
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	2341      	movs	r3, #65	; 0x41
 8013e06:	4a07      	ldr	r2, [pc, #28]	; (8013e24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8013e08:	4907      	ldr	r1, [pc, #28]	; (8013e28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	47a0      	blx	r4
 8013e0e:	2301      	movs	r3, #1
 8013e10:	e000      	b.n	8013e14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  return kTfLiteOk;
 8013e12:	2300      	movs	r3, #0
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3728      	adds	r7, #40	; 0x28
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8013e1c:	0801de4c 	.word	0x0801de4c
 8013e20:	0801de50 	.word	0x0801de50
 8013e24:	0801dddc 	.word	0x0801dddc
 8013e28:	0801de30 	.word	0x0801de30
 8013e2c:	0801de78 	.word	0x0801de78
 8013e30:	0801de88 	.word	0x0801de88
 8013e34:	0801de5c 	.word	0x0801de5c
 8013e38:	0801de94 	.word	0x0801de94
 8013e3c:	0801dea8 	.word	0x0801dea8

08013e40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8013e40:	b590      	push	{r4, r7, lr}
 8013e42:	b087      	sub	sp, #28
 8013e44:	af04      	add	r7, sp, #16
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8013e4a:	6838      	ldr	r0, [r7, #0]
 8013e4c:	f7fc fb0e 	bl	801046c <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013e50:	4603      	mov	r3, r0
 8013e52:	2b01      	cmp	r3, #1
 8013e54:	d007      	beq.n	8013e66 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8013e56:	6838      	ldr	r0, [r7, #0]
 8013e58:	f7fc fb08 	bl	801046c <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b02      	cmp	r3, #2
 8013e60:	d001      	beq.n	8013e66 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8013e62:	2301      	movs	r3, #1
 8013e64:	e000      	b.n	8013e68 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8013e66:	2300      	movs	r3, #0
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d00a      	beq.n	8013e82 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	695c      	ldr	r4, [r3, #20]
 8013e70:	4b27      	ldr	r3, [pc, #156]	; (8013f10 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	2346      	movs	r3, #70	; 0x46
 8013e76:	4a27      	ldr	r2, [pc, #156]	; (8013f14 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013e78:	4927      	ldr	r1, [pc, #156]	; (8013f18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	47a0      	blx	r4
 8013e7e:	2301      	movs	r3, #1
 8013e80:	e041      	b.n	8013f06 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8013e82:	6838      	ldr	r0, [r7, #0]
 8013e84:	f7fc faff 	bl	8010486 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	2b01      	cmp	r3, #1
 8013e8c:	bf14      	ite	ne
 8013e8e:	2301      	movne	r3, #1
 8013e90:	2300      	moveq	r3, #0
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d013      	beq.n	8013ec0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	695c      	ldr	r4, [r3, #20]
 8013e9c:	6838      	ldr	r0, [r7, #0]
 8013e9e:	f7fc faf2 	bl	8010486 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2201      	movs	r2, #1
 8013ea6:	9203      	str	r2, [sp, #12]
 8013ea8:	9302      	str	r3, [sp, #8]
 8013eaa:	4b1c      	ldr	r3, [pc, #112]	; (8013f1c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8013eac:	9301      	str	r3, [sp, #4]
 8013eae:	4b1c      	ldr	r3, [pc, #112]	; (8013f20 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8013eb0:	9300      	str	r3, [sp, #0]
 8013eb2:	2347      	movs	r3, #71	; 0x47
 8013eb4:	4a17      	ldr	r2, [pc, #92]	; (8013f14 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013eb6:	491b      	ldr	r1, [pc, #108]	; (8013f24 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	47a0      	blx	r4
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	e022      	b.n	8013f06 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8013ec0:	6839      	ldr	r1, [r7, #0]
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f7ff fef0 	bl	8013ca8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	bf14      	ite	ne
 8013ece:	2301      	movne	r3, #1
 8013ed0:	2300      	moveq	r3, #0
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d015      	beq.n	8013f04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	695c      	ldr	r4, [r3, #20]
 8013edc:	6839      	ldr	r1, [r7, #0]
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f7ff fee2 	bl	8013ca8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	2300      	movs	r3, #0
 8013eea:	9303      	str	r3, [sp, #12]
 8013eec:	9202      	str	r2, [sp, #8]
 8013eee:	4b0e      	ldr	r3, [pc, #56]	; (8013f28 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8013ef0:	9301      	str	r3, [sp, #4]
 8013ef2:	4b0e      	ldr	r3, [pc, #56]	; (8013f2c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8013ef4:	9300      	str	r3, [sp, #0]
 8013ef6:	2348      	movs	r3, #72	; 0x48
 8013ef8:	4a06      	ldr	r2, [pc, #24]	; (8013f14 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013efa:	490a      	ldr	r1, [pc, #40]	; (8013f24 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	47a0      	blx	r4
 8013f00:	2301      	movs	r3, #1
 8013f02:	e000      	b.n	8013f06 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 8013f04:	2300      	movs	r3, #0
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	370c      	adds	r7, #12
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd90      	pop	{r4, r7, pc}
 8013f0e:	bf00      	nop
 8013f10:	0801ded4 	.word	0x0801ded4
 8013f14:	0801dddc 	.word	0x0801dddc
 8013f18:	0801debc 	.word	0x0801debc
 8013f1c:	0801df04 	.word	0x0801df04
 8013f20:	0801df08 	.word	0x0801df08
 8013f24:	0801de30 	.word	0x0801de30
 8013f28:	0801df1c 	.word	0x0801df1c
 8013f2c:	0801df28 	.word	0x0801df28

08013f30 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b086      	sub	sp, #24
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	6839      	ldr	r1, [r7, #0]
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7fb fe94 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013f44:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013f46:	2200      	movs	r2, #0
 8013f48:	6839      	ldr	r1, [r7, #0]
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f7fb fea4 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013f50:	60f8      	str	r0, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	685a      	ldr	r2, [r3, #4]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	429a      	cmp	r2, r3
 8013f5c:	d014      	beq.n	8013f88 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input->bytes; ++i) {
 8013f5e:	2300      	movs	r3, #0
 8013f60:	617b      	str	r3, [r7, #20]
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	699b      	ldr	r3, [r3, #24]
 8013f66:	697a      	ldr	r2, [r7, #20]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d20d      	bcs.n	8013f88 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
      output->data.raw[i] = input->data.raw[i];
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	685a      	ldr	r2, [r3, #4]
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	441a      	add	r2, r3
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	6859      	ldr	r1, [r3, #4]
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	440b      	add	r3, r1
 8013f7c:	7812      	ldrb	r2, [r2, #0]
 8013f7e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input->bytes; ++i) {
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	3301      	adds	r3, #1
 8013f84:	617b      	str	r3, [r7, #20]
 8013f86:	e7ec      	b.n	8013f62 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    }
  }
  return kTfLiteOk;
 8013f88:	2300      	movs	r3, #0
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3718      	adds	r7, #24
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
	...

08013f94 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration* Register_RESHAPE() {
 8013f94:	b480      	push	{r7}
 8013f96:	af00      	add	r7, sp, #0
                                 /*invoke=*/reshape::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8013f98:	4b02      	ldr	r3, [pc, #8]	; (8013fa4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x10>)
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr
 8013fa4:	200000c4 	.word	0x200000c4

08013fa8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b084      	sub	sp, #16
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8013fb4:	68fa      	ldr	r2, [r7, #12]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8013fbc:	68b9      	ldr	r1, [r7, #8]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fc f81e 	bl	8010000 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013fc4:	4603      	mov	r3, r0
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}

08013fce <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
 8013fce:	b580      	push	{r7, lr}
 8013fd0:	b088      	sub	sp, #32
 8013fd2:	af00      	add	r7, sp, #0
 8013fd4:	60f8      	str	r0, [r7, #12]
 8013fd6:	60b9      	str	r1, [r7, #8]
 8013fd8:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7fe fbcd 	bl	801277c <_ZN6tflite17CountLeadingZerosImEEiT_>
 8013fe2:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8013fe4:	68ba      	ldr	r2, [r7, #8]
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	1ad2      	subs	r2, r2, r3
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	601a      	str	r2, [r3, #0]
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ff6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 8013ffa:	61bb      	str	r3, [r7, #24]
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
 8013ffc:	69b8      	ldr	r0, [r7, #24]
 8013ffe:	f7fe fce0 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014002:	4603      	mov	r3, r0
 8014004:	4618      	mov	r0, r3
 8014006:	f7fe fced 	bl	80129e4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801400a:	4603      	mov	r3, r0
 801400c:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801400e:	f107 0314 	add.w	r3, r7, #20
 8014012:	4618      	mov	r0, r3
 8014014:	f7fe fbc4 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014018:	4603      	mov	r3, r0
 801401a:	681b      	ldr	r3, [r3, #0]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3720      	adds	r7, #32
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8014024:	b580      	push	{r7, lr}
 8014026:	ed2d 8b02 	vpush	{d8}
 801402a:	b08e      	sub	sp, #56	; 0x38
 801402c:	af00      	add	r7, sp, #0
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	60b9      	str	r1, [r7, #8]
 8014032:	607a      	str	r2, [r7, #4]
 8014034:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014036:	68b8      	ldr	r0, [r7, #8]
 8014038:	f7fb fe9d 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801403c:	4603      	mov	r3, r0
 801403e:	3b01      	subs	r3, #1
 8014040:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014042:	683a      	ldr	r2, [r7, #0]
 8014044:	6a39      	ldr	r1, [r7, #32]
 8014046:	68b8      	ldr	r0, [r7, #8]
 8014048:	f7fe fb69 	bl	801271e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801404c:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801404e:	6a3b      	ldr	r3, [r7, #32]
 8014050:	683a      	ldr	r2, [r7, #0]
 8014052:	6a39      	ldr	r1, [r7, #32]
 8014054:	68b8      	ldr	r0, [r7, #8]
 8014056:	f7fc fa23 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801405a:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 801405c:	2300      	movs	r3, #0
 801405e:	637b      	str	r3, [r7, #52]	; 0x34
 8014060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014062:	69fb      	ldr	r3, [r7, #28]
 8014064:	429a      	cmp	r2, r3
 8014066:	f280 808f 	bge.w	8014188 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x164>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 801406a:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801406e:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8014070:	2300      	movs	r3, #0
 8014072:	633b      	str	r3, [r7, #48]	; 0x30
 8014074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014076:	69bb      	ldr	r3, [r7, #24]
 8014078:	429a      	cmp	r2, r3
 801407a:	da15      	bge.n	80140a8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 801407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801407e:	69ba      	ldr	r2, [r7, #24]
 8014080:	fb02 f203 	mul.w	r2, r2, r3
 8014084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014086:	4413      	add	r3, r2
 8014088:	009b      	lsls	r3, r3, #2
 801408a:	687a      	ldr	r2, [r7, #4]
 801408c:	441a      	add	r2, r3
 801408e:	f107 0314 	add.w	r3, r7, #20
 8014092:	4611      	mov	r1, r2
 8014094:	4618      	mov	r0, r3
 8014096:	f7fb f94b 	bl	800f330 <_ZSt3maxIfERKT_S2_S2_>
 801409a:	4603      	mov	r3, r0
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 80140a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a2:	3301      	adds	r3, #1
 80140a4:	633b      	str	r3, [r7, #48]	; 0x30
 80140a6:	e7e5      	b.n	8014074 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 80140a8:	f04f 0300 	mov.w	r3, #0
 80140ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80140ae:	2300      	movs	r3, #0
 80140b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80140b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	da29      	bge.n	801410e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xea>
      sum += std::exp((input_data[i * depth + c] - max) *
 80140ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140bc:	69ba      	ldr	r2, [r7, #24]
 80140be:	fb02 f203 	mul.w	r2, r2, r3
 80140c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c4:	4413      	add	r3, r2
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	4413      	add	r3, r2
 80140cc:	ed93 7a00 	vldr	s14, [r3]
 80140d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80140d4:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140de:	4610      	mov	r0, r2
 80140e0:	4619      	mov	r1, r3
 80140e2:	f7ec fda1 	bl	8000c28 <__aeabi_d2f>
 80140e6:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 80140ea:	ee68 7a27 	vmul.f32	s15, s16, s15
 80140ee:	eeb0 0a67 	vmov.f32	s0, s15
 80140f2:	f7ed f888 	bl	8001206 <_ZSt3expf>
 80140f6:	eeb0 7a40 	vmov.f32	s14, s0
 80140fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80140fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014102:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8014106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014108:	3301      	adds	r3, #1
 801410a:	62bb      	str	r3, [r7, #40]	; 0x28
 801410c:	e7d1      	b.n	80140b2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 801410e:	2300      	movs	r3, #0
 8014110:	627b      	str	r3, [r7, #36]	; 0x24
 8014112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	429a      	cmp	r2, r3
 8014118:	da32      	bge.n	8014180 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801411c:	69ba      	ldr	r2, [r7, #24]
 801411e:	fb02 f203 	mul.w	r2, r2, r3
 8014122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014124:	4413      	add	r3, r2
 8014126:	009b      	lsls	r3, r3, #2
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	4413      	add	r3, r2
 801412c:	ed93 7a00 	vldr	s14, [r3]
 8014130:	edd7 7a05 	vldr	s15, [r7, #20]
 8014134:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801413e:	4610      	mov	r0, r2
 8014140:	4619      	mov	r1, r3
 8014142:	f7ec fd71 	bl	8000c28 <__aeabi_d2f>
 8014146:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801414a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801414e:	eeb0 0a67 	vmov.f32	s0, s15
 8014152:	f7ed f858 	bl	8001206 <_ZSt3expf>
 8014156:	eef0 6a40 	vmov.f32	s13, s0
 801415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801415c:	69ba      	ldr	r2, [r7, #24]
 801415e:	fb02 f203 	mul.w	r2, r2, r3
 8014162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014164:	4413      	add	r3, r2
 8014166:	009b      	lsls	r3, r3, #2
 8014168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801416a:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 801416c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014170:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8014174:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8014178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417a:	3301      	adds	r3, #1
 801417c:	627b      	str	r3, [r7, #36]	; 0x24
 801417e:	e7c8      	b.n	8014112 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
  for (int i = 0; i < outer_size; ++i) {
 8014180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014182:	3301      	adds	r3, #1
 8014184:	637b      	str	r3, [r7, #52]	; 0x34
 8014186:	e76b      	b.n	8014060 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
                                   sum;
    }
  }
}
 8014188:	bf00      	nop
 801418a:	3738      	adds	r7, #56	; 0x38
 801418c:	46bd      	mov	sp, r7
 801418e:	ecbd 8b02 	vpop	{d8}
 8014192:	bd80      	pop	{r7, pc}

08014194 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8014194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014198:	b08a      	sub	sp, #40	; 0x28
 801419a:	af04      	add	r7, sp, #16
 801419c:	60f8      	str	r0, [r7, #12]
 801419e:	60b9      	str	r1, [r7, #8]
 80141a0:	607a      	str	r2, [r7, #4]
 80141a2:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	781b      	ldrb	r3, [r3, #0]
 80141a8:	2b03      	cmp	r3, #3
 80141aa:	d004      	beq.n	80141b6 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	2b09      	cmp	r3, #9
 80141b2:	f040 80ef 	bne.w	8014394 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
    if (input->type == kTfLiteUInt8) {
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	2b03      	cmp	r3, #3
 80141bc:	d133      	bne.n	8014226 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x92>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	2b03      	cmp	r3, #3
 80141c4:	d018      	beq.n	80141f8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x64>
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	695c      	ldr	r4, [r3, #20]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7fa feb6 	bl	800ef40 <TfLiteTypeGetName>
 80141d4:	4605      	mov	r5, r0
 80141d6:	2003      	movs	r0, #3
 80141d8:	f7fa feb2 	bl	800ef40 <TfLiteTypeGetName>
 80141dc:	4603      	mov	r3, r0
 80141de:	9303      	str	r3, [sp, #12]
 80141e0:	9502      	str	r5, [sp, #8]
 80141e2:	4b91      	ldr	r3, [pc, #580]	; (8014428 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>)
 80141e4:	9301      	str	r3, [sp, #4]
 80141e6:	4b91      	ldr	r3, [pc, #580]	; (801442c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	23c2      	movs	r3, #194	; 0xc2
 80141ec:	4a90      	ldr	r2, [pc, #576]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80141ee:	4991      	ldr	r1, [pc, #580]	; (8014434 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	47a0      	blx	r4
 80141f4:	2301      	movs	r3, #1
 80141f6:	e112      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	691b      	ldr	r3, [r3, #16]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	f000 8094 	beq.w	801432a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	695c      	ldr	r4, [r3, #20]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	691b      	ldr	r3, [r3, #16]
 801420a:	2200      	movs	r2, #0
 801420c:	9203      	str	r2, [sp, #12]
 801420e:	9302      	str	r3, [sp, #8]
 8014210:	4b89      	ldr	r3, [pc, #548]	; (8014438 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 8014212:	9301      	str	r3, [sp, #4]
 8014214:	4b89      	ldr	r3, [pc, #548]	; (801443c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014216:	9300      	str	r3, [sp, #0]
 8014218:	23c3      	movs	r3, #195	; 0xc3
 801421a:	4a85      	ldr	r2, [pc, #532]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 801421c:	4988      	ldr	r1, [pc, #544]	; (8014440 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 801421e:	68f8      	ldr	r0, [r7, #12]
 8014220:	47a0      	blx	r4
 8014222:	2301      	movs	r3, #1
 8014224:	e0fb      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	781b      	ldrb	r3, [r3, #0]
 801422a:	2b09      	cmp	r3, #9
 801422c:	d018      	beq.n	8014260 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	695c      	ldr	r4, [r3, #20]
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	4618      	mov	r0, r3
 8014238:	f7fa fe82 	bl	800ef40 <TfLiteTypeGetName>
 801423c:	4605      	mov	r5, r0
 801423e:	2009      	movs	r0, #9
 8014240:	f7fa fe7e 	bl	800ef40 <TfLiteTypeGetName>
 8014244:	4603      	mov	r3, r0
 8014246:	9303      	str	r3, [sp, #12]
 8014248:	9502      	str	r5, [sp, #8]
 801424a:	4b7e      	ldr	r3, [pc, #504]	; (8014444 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 801424c:	9301      	str	r3, [sp, #4]
 801424e:	4b7e      	ldr	r3, [pc, #504]	; (8014448 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 8014250:	9300      	str	r3, [sp, #0]
 8014252:	23c5      	movs	r3, #197	; 0xc5
 8014254:	4a76      	ldr	r2, [pc, #472]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8014256:	4977      	ldr	r1, [pc, #476]	; (8014434 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	47a0      	blx	r4
 801425c:	2301      	movs	r3, #1
 801425e:	e0de      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      if (output->type == kTfLiteInt16) {
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	781b      	ldrb	r3, [r3, #0]
 8014264:	2b07      	cmp	r3, #7
 8014266:	d116      	bne.n	8014296 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	691b      	ldr	r3, [r3, #16]
 801426c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014270:	d05b      	beq.n	801432a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	695c      	ldr	r4, [r3, #20]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	691b      	ldr	r3, [r3, #16]
 801427a:	4a74      	ldr	r2, [pc, #464]	; (801444c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 801427c:	9203      	str	r2, [sp, #12]
 801427e:	9302      	str	r3, [sp, #8]
 8014280:	4b73      	ldr	r3, [pc, #460]	; (8014450 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8014282:	9301      	str	r3, [sp, #4]
 8014284:	4b6d      	ldr	r3, [pc, #436]	; (801443c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014286:	9300      	str	r3, [sp, #0]
 8014288:	23c7      	movs	r3, #199	; 0xc7
 801428a:	4a69      	ldr	r2, [pc, #420]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 801428c:	496c      	ldr	r1, [pc, #432]	; (8014440 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	47a0      	blx	r4
 8014292:	2301      	movs	r3, #1
 8014294:	e0c3      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	2b09      	cmp	r3, #9
 801429c:	d018      	beq.n	80142d0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x13c>
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	695c      	ldr	r4, [r3, #20]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	781b      	ldrb	r3, [r3, #0]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7fa fe4a 	bl	800ef40 <TfLiteTypeGetName>
 80142ac:	4605      	mov	r5, r0
 80142ae:	2009      	movs	r0, #9
 80142b0:	f7fa fe46 	bl	800ef40 <TfLiteTypeGetName>
 80142b4:	4603      	mov	r3, r0
 80142b6:	9303      	str	r3, [sp, #12]
 80142b8:	9502      	str	r5, [sp, #8]
 80142ba:	4b62      	ldr	r3, [pc, #392]	; (8014444 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 80142bc:	9301      	str	r3, [sp, #4]
 80142be:	4b5b      	ldr	r3, [pc, #364]	; (801442c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 80142c0:	9300      	str	r3, [sp, #0]
 80142c2:	23cb      	movs	r3, #203	; 0xcb
 80142c4:	4a5a      	ldr	r2, [pc, #360]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80142c6:	495b      	ldr	r1, [pc, #364]	; (8014434 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80142c8:	68f8      	ldr	r0, [r7, #12]
 80142ca:	47a0      	blx	r4
 80142cc:	2301      	movs	r3, #1
 80142ce:	e0a6      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	691b      	ldr	r3, [r3, #16]
 80142d4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80142d8:	d012      	beq.n	8014300 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	695c      	ldr	r4, [r3, #20]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	691b      	ldr	r3, [r3, #16]
 80142e2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80142e6:	9203      	str	r2, [sp, #12]
 80142e8:	9302      	str	r3, [sp, #8]
 80142ea:	4b5a      	ldr	r3, [pc, #360]	; (8014454 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 80142ec:	9301      	str	r3, [sp, #4]
 80142ee:	4b53      	ldr	r3, [pc, #332]	; (801443c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 80142f0:	9300      	str	r3, [sp, #0]
 80142f2:	23cc      	movs	r3, #204	; 0xcc
 80142f4:	4a4e      	ldr	r2, [pc, #312]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80142f6:	4952      	ldr	r1, [pc, #328]	; (8014440 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 80142f8:	68f8      	ldr	r0, [r7, #12]
 80142fa:	47a0      	blx	r4
 80142fc:	2301      	movs	r3, #1
 80142fe:	e08e      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	edd3 7a03 	vldr	s15, [r3, #12]
 8014306:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8014458 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>
 801430a:	eef4 7a47 	vcmp.f32	s15, s14
 801430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014312:	d00a      	beq.n	801432a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	695c      	ldr	r4, [r3, #20]
 8014318:	4b50      	ldr	r3, [pc, #320]	; (801445c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801431a:	9300      	str	r3, [sp, #0]
 801431c:	23cd      	movs	r3, #205	; 0xcd
 801431e:	4a44      	ldr	r2, [pc, #272]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8014320:	494f      	ldr	r1, [pc, #316]	; (8014460 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8014322:	68f8      	ldr	r0, [r7, #12]
 8014324:	47a0      	blx	r4
 8014326:	2301      	movs	r3, #1
 8014328:	e079      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 801432e:	4618      	mov	r0, r3
 8014330:	f7ec f92a 	bl	8000588 <__aeabi_f2d>
 8014334:	4680      	mov	r8, r0
 8014336:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 801433c:	4618      	mov	r0, r3
 801433e:	f7ec f923 	bl	8000588 <__aeabi_f2d>
 8014342:	4682      	mov	sl, r0
 8014344:	468b      	mov	fp, r1
 8014346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014348:	3308      	adds	r3, #8
 801434a:	f107 0214 	add.w	r2, r7, #20
 801434e:	4619      	mov	r1, r3
 8014350:	2005      	movs	r0, #5
 8014352:	ec4b ab11 	vmov	d1, sl, fp
 8014356:	ec49 8b10 	vmov	d0, r8, r9
 801435a:	f7fa ff21 	bl	800f1a0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 801435e:	697a      	ldr	r2, [r7, #20]
 8014360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014362:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 8014364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014366:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8014368:	221f      	movs	r2, #31
 801436a:	4619      	mov	r1, r3
 801436c:	2005      	movs	r0, #5
 801436e:	f7fa ff5f 	bl	800f230 <_ZN6tflite20CalculateInputRadiusEiii>
 8014372:	4603      	mov	r3, r0
 8014374:	4618      	mov	r0, r3
 8014376:	f7ec f8f5 	bl	8000564 <__aeabi_i2d>
 801437a:	4602      	mov	r2, r0
 801437c:	460b      	mov	r3, r1
 801437e:	4614      	mov	r4, r2
 8014380:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 8014384:	4620      	mov	r0, r4
 8014386:	4629      	mov	r1, r5
 8014388:	f7ec fc06 	bl	8000b98 <__aeabi_d2iz>
 801438c:	4602      	mov	r2, r0
 801438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014390:	619a      	str	r2, [r3, #24]
                                            op_data->input_left_shift);
 8014392:	e043      	b.n	801441c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x288>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d018      	beq.n	80143ce <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x23a>
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	695c      	ldr	r4, [r3, #20]
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7fa fdcb 	bl	800ef40 <TfLiteTypeGetName>
 80143aa:	4605      	mov	r5, r0
 80143ac:	2001      	movs	r0, #1
 80143ae:	f7fa fdc7 	bl	800ef40 <TfLiteTypeGetName>
 80143b2:	4603      	mov	r3, r0
 80143b4:	9303      	str	r3, [sp, #12]
 80143b6:	9502      	str	r5, [sp, #8]
 80143b8:	4b2a      	ldr	r3, [pc, #168]	; (8014464 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80143ba:	9301      	str	r3, [sp, #4]
 80143bc:	4b22      	ldr	r3, [pc, #136]	; (8014448 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 80143be:	9300      	str	r3, [sp, #0]
 80143c0:	23dd      	movs	r3, #221	; 0xdd
 80143c2:	4a1b      	ldr	r2, [pc, #108]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80143c4:	491b      	ldr	r1, [pc, #108]	; (8014434 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80143c6:	68f8      	ldr	r0, [r7, #12]
 80143c8:	47a0      	blx	r4
 80143ca:	2301      	movs	r3, #1
 80143cc:	e027      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	2b01      	cmp	r3, #1
 80143d4:	d018      	beq.n	8014408 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x274>
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	695c      	ldr	r4, [r3, #20]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	781b      	ldrb	r3, [r3, #0]
 80143de:	4618      	mov	r0, r3
 80143e0:	f7fa fdae 	bl	800ef40 <TfLiteTypeGetName>
 80143e4:	4605      	mov	r5, r0
 80143e6:	2001      	movs	r0, #1
 80143e8:	f7fa fdaa 	bl	800ef40 <TfLiteTypeGetName>
 80143ec:	4603      	mov	r3, r0
 80143ee:	9303      	str	r3, [sp, #12]
 80143f0:	9502      	str	r5, [sp, #8]
 80143f2:	4b1c      	ldr	r3, [pc, #112]	; (8014464 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80143f4:	9301      	str	r3, [sp, #4]
 80143f6:	4b0d      	ldr	r3, [pc, #52]	; (801442c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 80143f8:	9300      	str	r3, [sp, #0]
 80143fa:	23de      	movs	r3, #222	; 0xde
 80143fc:	4a0c      	ldr	r2, [pc, #48]	; (8014430 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80143fe:	490d      	ldr	r1, [pc, #52]	; (8014434 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8014400:	68f8      	ldr	r0, [r7, #12]
 8014402:	47a0      	blx	r4
 8014404:	2301      	movs	r3, #1
 8014406:	e00a      	b.n	801441e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    op_data->beta = static_cast<double>(params->beta);
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	4618      	mov	r0, r3
 801440e:	f7ec f8bb 	bl	8000588 <__aeabi_f2d>
 8014412:	4602      	mov	r2, r0
 8014414:	460b      	mov	r3, r1
 8014416:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014418:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801441c:	2300      	movs	r3, #0
}
 801441e:	4618      	mov	r0, r3
 8014420:	3718      	adds	r7, #24
 8014422:	46bd      	mov	sp, r7
 8014424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014428:	0801dfb8 	.word	0x0801dfb8
 801442c:	0801dfc8 	.word	0x0801dfc8
 8014430:	0801df48 	.word	0x0801df48
 8014434:	0801df9c 	.word	0x0801df9c
 8014438:	0801dff4 	.word	0x0801dff4
 801443c:	0801dff8 	.word	0x0801dff8
 8014440:	0801dfd8 	.word	0x0801dfd8
 8014444:	0801e014 	.word	0x0801e014
 8014448:	0801e020 	.word	0x0801e020
 801444c:	ffff8000 	.word	0xffff8000
 8014450:	0801e02c 	.word	0x0801e02c
 8014454:	0801e034 	.word	0x0801e034
 8014458:	3b800000 	.word	0x3b800000
 801445c:	0801e054 	.word	0x0801e054
 8014460:	0801e03c 	.word	0x0801e03c
 8014464:	0801e078 	.word	0x0801e078

08014468 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8014468:	b590      	push	{r4, r7, lr}
 801446a:	b089      	sub	sp, #36	; 0x24
 801446c:	af04      	add	r7, sp, #16
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8014472:	6838      	ldr	r0, [r7, #0]
 8014474:	f7fb fffa 	bl	801046c <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014478:	4603      	mov	r3, r0
 801447a:	2b01      	cmp	r3, #1
 801447c:	bf14      	ite	ne
 801447e:	2301      	movne	r3, #1
 8014480:	2300      	moveq	r3, #0
 8014482:	b2db      	uxtb	r3, r3
 8014484:	2b00      	cmp	r3, #0
 8014486:	d013      	beq.n	80144b0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	695c      	ldr	r4, [r3, #20]
 801448c:	6838      	ldr	r0, [r7, #0]
 801448e:	f7fb ffed 	bl	801046c <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014492:	4603      	mov	r3, r0
 8014494:	2201      	movs	r2, #1
 8014496:	9203      	str	r2, [sp, #12]
 8014498:	9302      	str	r3, [sp, #8]
 801449a:	4b25      	ldr	r3, [pc, #148]	; (8014530 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 801449c:	9301      	str	r3, [sp, #4]
 801449e:	4b25      	ldr	r3, [pc, #148]	; (8014534 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 80144a0:	9300      	str	r3, [sp, #0]
 80144a2:	23e7      	movs	r3, #231	; 0xe7
 80144a4:	4a24      	ldr	r2, [pc, #144]	; (8014538 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 80144a6:	4925      	ldr	r1, [pc, #148]	; (801453c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	47a0      	blx	r4
 80144ac:	2301      	movs	r3, #1
 80144ae:	e03b      	b.n	8014528 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80144b0:	6838      	ldr	r0, [r7, #0]
 80144b2:	f7fb ffe8 	bl	8010486 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80144b6:	4603      	mov	r3, r0
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	bf14      	ite	ne
 80144bc:	2301      	movne	r3, #1
 80144be:	2300      	moveq	r3, #0
 80144c0:	b2db      	uxtb	r3, r3
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d013      	beq.n	80144ee <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	695c      	ldr	r4, [r3, #20]
 80144ca:	6838      	ldr	r0, [r7, #0]
 80144cc:	f7fb ffdb 	bl	8010486 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80144d0:	4603      	mov	r3, r0
 80144d2:	2201      	movs	r2, #1
 80144d4:	9203      	str	r2, [sp, #12]
 80144d6:	9302      	str	r3, [sp, #8]
 80144d8:	4b15      	ldr	r3, [pc, #84]	; (8014530 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 80144da:	9301      	str	r3, [sp, #4]
 80144dc:	4b18      	ldr	r3, [pc, #96]	; (8014540 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	23e8      	movs	r3, #232	; 0xe8
 80144e2:	4a15      	ldr	r2, [pc, #84]	; (8014538 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 80144e4:	4915      	ldr	r1, [pc, #84]	; (801453c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80144e6:	6878      	ldr	r0, [r7, #4]
 80144e8:	47a0      	blx	r4
 80144ea:	2301      	movs	r3, #1
 80144ec:	e01c      	b.n	8014528 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  const TfLiteTensor* input = GetInput(context, node, 0);
 80144ee:	2200      	movs	r2, #0
 80144f0:	6839      	ldr	r1, [r7, #0]
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f7fb fbba 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80144f8:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80144fa:	68f8      	ldr	r0, [r7, #12]
 80144fc:	f7fa ff89 	bl	800f412 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8014500:	4603      	mov	r3, r0
 8014502:	2b00      	cmp	r3, #0
 8014504:	bfd4      	ite	le
 8014506:	2301      	movle	r3, #1
 8014508:	2300      	movgt	r3, #0
 801450a:	b2db      	uxtb	r3, r3
 801450c:	2b00      	cmp	r3, #0
 801450e:	d00a      	beq.n	8014526 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	695c      	ldr	r4, [r3, #20]
 8014514:	4b0b      	ldr	r3, [pc, #44]	; (8014544 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8014516:	9300      	str	r3, [sp, #0]
 8014518:	23ea      	movs	r3, #234	; 0xea
 801451a:	4a07      	ldr	r2, [pc, #28]	; (8014538 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 801451c:	490a      	ldr	r1, [pc, #40]	; (8014548 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	47a0      	blx	r4
 8014522:	2301      	movs	r3, #1
 8014524:	e000      	b.n	8014528 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>

  return kTfLiteOk;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3714      	adds	r7, #20
 801452c:	46bd      	mov	sp, r7
 801452e:	bd90      	pop	{r4, r7, pc}
 8014530:	0801e088 	.word	0x0801e088
 8014534:	0801e08c 	.word	0x0801e08c
 8014538:	0801df48 	.word	0x0801df48
 801453c:	0801dfd8 	.word	0x0801dfd8
 8014540:	0801e09c 	.word	0x0801e09c
 8014544:	0801e0b0 	.word	0x0801e0b0
 8014548:	0801e03c 	.word	0x0801e03c

0801454c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 801454c:	b590      	push	{r4, r7, lr}
 801454e:	b093      	sub	sp, #76	; 0x4c
 8014550:	af02      	add	r7, sp, #8
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8014558:	f107 0310 	add.w	r3, r7, #16
 801455c:	68f9      	ldr	r1, [r7, #12]
 801455e:	4618      	mov	r0, r3
 8014560:	f7fb fcc8 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f7fb fce3 	bl	800ff30 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801456a:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 801456c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014570:	68b9      	ldr	r1, [r7, #8]
 8014572:	4618      	mov	r0, r3
 8014574:	f7fb fcbe 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8014578:	68b8      	ldr	r0, [r7, #8]
 801457a:	f7fb fcea 	bl	800ff52 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801457e:	4602      	mov	r2, r0
 8014580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014584:	f107 0110 	add.w	r1, r7, #16
 8014588:	9200      	str	r2, [sp, #0]
 801458a:	4622      	mov	r2, r4
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f7ff fd49 	bl	8014024 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 8014592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014596:	4618      	mov	r0, r3
 8014598:	f7fb fbd7 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 801459c:	f107 0310 	add.w	r3, r7, #16
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fb fbd2 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80145a6:	bf00      	nop
 80145a8:	3744      	adds	r7, #68	; 0x44
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd90      	pop	{r4, r7, pc}

080145ae <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 80145ae:	b590      	push	{r4, r7, lr}
 80145b0:	b0ab      	sub	sp, #172	; 0xac
 80145b2:	af02      	add	r7, sp, #8
 80145b4:	60f8      	str	r0, [r7, #12]
 80145b6:	60b9      	str	r1, [r7, #8]
 80145b8:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	2b03      	cmp	r3, #3
 80145c0:	d127      	bne.n	8014612 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 80145c2:	f107 0310 	add.w	r3, r7, #16
 80145c6:	68f9      	ldr	r1, [r7, #12]
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7fb fc93 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 80145ce:	68f8      	ldr	r0, [r7, #12]
 80145d0:	f7fb fb78 	bl	800fcc4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80145d4:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 80145d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80145da:	68b9      	ldr	r1, [r7, #8]
 80145dc:	4618      	mov	r0, r3
 80145de:	f7fb fc89 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 80145e2:	68b8      	ldr	r0, [r7, #8]
 80145e4:	f7fb fb7f 	bl	800fce6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80145e8:	4602      	mov	r2, r0
 80145ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80145ee:	f107 0110 	add.w	r1, r7, #16
 80145f2:	9200      	str	r2, [sp, #0]
 80145f4:	4622      	mov	r2, r4
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 f8c4 	bl	8014784 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 80145fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014600:	4618      	mov	r0, r3
 8014602:	f7fb fba2 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8014606:	f107 0310 	add.w	r3, r7, #16
 801460a:	4618      	mov	r0, r3
 801460c:	f7fb fb9d 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}
 8014610:	e052      	b.n	80146b8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
    if (output->type == kTfLiteInt16) {
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	781b      	ldrb	r3, [r3, #0]
 8014616:	2b07      	cmp	r3, #7
 8014618:	d127      	bne.n	801466a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801461a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801461e:	68f9      	ldr	r1, [r7, #12]
 8014620:	4618      	mov	r0, r3
 8014622:	f7fb fc67 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8014626:	68f8      	ldr	r0, [r7, #12]
 8014628:	f7fb fca4 	bl	800ff74 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801462c:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 801462e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014632:	68b9      	ldr	r1, [r7, #8]
 8014634:	4618      	mov	r0, r3
 8014636:	f7fb fc5d 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801463a:	68b8      	ldr	r0, [r7, #8]
 801463c:	f7fe f85e 	bl	80126fc <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8014640:	4602      	mov	r2, r0
 8014642:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014646:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801464a:	9200      	str	r2, [sp, #0]
 801464c:	4622      	mov	r2, r4
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f000 f9b3 	bl	80149ba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8014654:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014658:	4618      	mov	r0, r3
 801465a:	f7fb fb76 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801465e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014662:	4618      	mov	r0, r3
 8014664:	f7fb fb71 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014668:	e026      	b.n	80146b8 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801466a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801466e:	68f9      	ldr	r1, [r7, #12]
 8014670:	4618      	mov	r0, r3
 8014672:	f7fb fc3f 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8014676:	68f8      	ldr	r0, [r7, #12]
 8014678:	f7fb fc7c 	bl	800ff74 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801467c:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int8_t>(output));
 801467e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014682:	68b9      	ldr	r1, [r7, #8]
 8014684:	4618      	mov	r0, r3
 8014686:	f7fb fc35 	bl	800fef4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801468a:	68b8      	ldr	r0, [r7, #8]
 801468c:	f7fb fc83 	bl	800ff96 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8014690:	4602      	mov	r2, r0
 8014692:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014696:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801469a:	9200      	str	r2, [sp, #0]
 801469c:	4622      	mov	r2, r4
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 faa9 	bl	8014bf6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
 80146a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7fb fb4e 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 80146ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7fb fb49 	bl	800fd4a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80146b8:	bf00      	nop
 80146ba:	37a4      	adds	r7, #164	; 0xa4
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd90      	pop	{r4, r7, pc}

080146c0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 80146c0:	b590      	push	{r4, r7, lr}
 80146c2:	b097      	sub	sp, #92	; 0x5c
 80146c4:	af02      	add	r7, sp, #8
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	695b      	ldr	r3, [r3, #20]
 80146ce:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 80146d0:	2200      	movs	r2, #0
 80146d2:	6839      	ldr	r1, [r7, #0]
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7fb fac9 	bl	800fc6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80146da:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 80146dc:	2200      	movs	r2, #0
 80146de:	6839      	ldr	r1, [r7, #0]
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7fb fad9 	bl	800fc98 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80146e6:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 80146e8:	f107 0308 	add.w	r3, r7, #8
 80146ec:	9300      	str	r3, [sp, #0]
 80146ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80146f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f7ff fd4d 	bl	8014194 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 80146fa:	4603      	mov	r3, r0
 80146fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014700:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014704:	2b00      	cmp	r3, #0
 8014706:	d002      	beq.n	801470e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
 8014708:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801470c:	e02a      	b.n	8014764 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 801470e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014710:	781b      	ldrb	r3, [r3, #0]
 8014712:	2b09      	cmp	r3, #9
 8014714:	d00f      	beq.n	8014736 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 8014716:	2b09      	cmp	r3, #9
 8014718:	dc16      	bgt.n	8014748 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 801471a:	2b01      	cmp	r3, #1
 801471c:	d002      	beq.n	8014724 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>
 801471e:	2b03      	cmp	r3, #3
 8014720:	d009      	beq.n	8014736 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 8014722:	e011      	b.n	8014748 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 8014724:	f107 0308 	add.w	r3, r7, #8
 8014728:	461a      	mov	r2, r3
 801472a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801472c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801472e:	f7ff ff0d 	bl	801454c <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8014732:	2300      	movs	r3, #0
 8014734:	e016      	b.n	8014764 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 8014736:	f107 0308 	add.w	r3, r7, #8
 801473a:	461a      	mov	r2, r3
 801473c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801473e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014740:	f7ff ff35 	bl	80145ae <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8014744:	2300      	movs	r3, #0
 8014746:	e00d      	b.n	8014764 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	695c      	ldr	r4, [r3, #20]
 801474c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	4618      	mov	r0, r3
 8014752:	f7fa fbf5 	bl	800ef40 <TfLiteTypeGetName>
 8014756:	4602      	mov	r2, r0
 8014758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	4903      	ldr	r1, [pc, #12]	; (801476c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014762:	2301      	movs	r3, #1
  }
}
 8014764:	4618      	mov	r0, r3
 8014766:	3754      	adds	r7, #84	; 0x54
 8014768:	46bd      	mov	sp, r7
 801476a:	bd90      	pop	{r4, r7, pc}
 801476c:	0801e0cc 	.word	0x0801e0cc

08014770 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration* Register_SOFTMAX() {
 8014770:	b480      	push	{r7}
 8014772:	af00      	add	r7, sp, #0
                                 /*invoke=*/activations::SoftmaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8014774:	4b02      	ldr	r3, [pc, #8]	; (8014780 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x10>)
}
 8014776:	4618      	mov	r0, r3
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	200000e4 	.word	0x200000e4

08014784 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 8014784:	b590      	push	{r4, r7, lr}
 8014786:	b09f      	sub	sp, #124	; 0x7c
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	60b9      	str	r1, [r7, #8]
 801478e:	607a      	str	r2, [r7, #4]
 8014790:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	689b      	ldr	r3, [r3, #8]
 8014796:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	699b      	ldr	r3, [r3, #24]
 80147a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80147a4:	68b8      	ldr	r0, [r7, #8]
 80147a6:	f7fb fae6 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80147aa:	4603      	mov	r3, r0
 80147ac:	3b01      	subs	r3, #1
 80147ae:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80147b0:	683a      	ldr	r2, [r7, #0]
 80147b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80147b4:	68b8      	ldr	r0, [r7, #8]
 80147b6:	f7fd ffb2 	bl	801271e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80147ba:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80147bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80147be:	683a      	ldr	r2, [r7, #0]
 80147c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80147c2:	68b8      	ldr	r0, [r7, #8]
 80147c4:	f7fb fe6c 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80147c8:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 80147ca:	2300      	movs	r3, #0
 80147cc:	677b      	str	r3, [r7, #116]	; 0x74
 80147ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80147d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147d2:	429a      	cmp	r2, r3
 80147d4:	f280 80ed 	bge.w	80149b2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80147d8:	2300      	movs	r3, #0
 80147da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80147de:	2300      	movs	r3, #0
 80147e0:	673b      	str	r3, [r7, #112]	; 0x70
 80147e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80147e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147e6:	429a      	cmp	r2, r3
 80147e8:	da16      	bge.n	8014818 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80147ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80147ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80147ee:	fb02 f203 	mul.w	r2, r2, r3
 80147f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80147f4:	4413      	add	r3, r2
 80147f6:	461a      	mov	r2, r3
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	441a      	add	r2, r3
 80147fc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8014800:	4611      	mov	r1, r2
 8014802:	4618      	mov	r0, r3
 8014804:	f7ff f9fc 	bl	8013c00 <_ZSt3maxIhERKT_S2_S2_>
 8014808:	4603      	mov	r3, r0
 801480a:	781b      	ldrb	r3, [r3, #0]
 801480c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8014810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014812:	3301      	adds	r3, #1
 8014814:	673b      	str	r3, [r7, #112]	; 0x70
 8014816:	e7e4      	b.n	80147e2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8014818:	f000 fb0b 	bl	8014e32 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801481c:	4603      	mov	r3, r0
 801481e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8014820:	2300      	movs	r3, #0
 8014822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014828:	429a      	cmp	r2, r3
 801482a:	da2f      	bge.n	801488c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801482c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801482e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014830:	fb02 f203 	mul.w	r2, r2, r3
 8014834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014836:	4413      	add	r3, r2
 8014838:	461a      	mov	r2, r3
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	4413      	add	r3, r2
 801483e:	781b      	ldrb	r3, [r3, #0]
 8014840:	461a      	mov	r2, r3
 8014842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8014846:	1ad3      	subs	r3, r2, r3
 8014848:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801484a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801484c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801484e:	429a      	cmp	r2, r3
 8014850:	db18      	blt.n	8014884 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8014852:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014854:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014856:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014858:	f7ff fba6 	bl	8013fa8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801485c:	64b8      	str	r0, [r7, #72]	; 0x48
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801485e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014860:	f000 faef 	bl	8014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8014864:	4603      	mov	r3, r0
 8014866:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8014868:	69f8      	ldr	r0, [r7, #28]
 801486a:	f000 fb19 	bl	8014ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801486e:	4603      	mov	r3, r0
 8014870:	4618      	mov	r0, r3
 8014872:	f000 fc5d 	bl	8015130 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8014876:	4603      	mov	r3, r0
 8014878:	4619      	mov	r1, r3
 801487a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801487c:	f000 faf2 	bl	8014e64 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014880:	4603      	mov	r3, r0
 8014882:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8014884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014886:	3301      	adds	r3, #1
 8014888:	66fb      	str	r3, [r7, #108]	; 0x6c
 801488a:	e7cb      	b.n	8014824 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801488c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014890:	4618      	mov	r0, r3
 8014892:	f000 fc67 	bl	8015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014896:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801489e:	210c      	movs	r1, #12
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7ff fb94 	bl	8013fce <_ZN6tflite13GetReciprocalEliPi>
 80148a6:	4603      	mov	r3, r0
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7fe f88a 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80148ae:	4603      	mov	r3, r0
 80148b0:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 80148b2:	2300      	movs	r3, #0
 80148b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80148b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80148b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148ba:	429a      	cmp	r2, r3
 80148bc:	da75      	bge.n	80149aa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80148be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80148c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148c2:	fb02 f203 	mul.w	r2, r2, r3
 80148c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80148c8:	4413      	add	r3, r2
 80148ca:	461a      	mov	r2, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	4413      	add	r3, r2
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	461a      	mov	r2, r3
 80148d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80148d8:	1ad3      	subs	r3, r2, r3
 80148da:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80148dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80148de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80148e0:	429a      	cmp	r2, r3
 80148e2:	db50      	blt.n	8014986 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80148e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80148e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80148e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80148ea:	f7ff fb5d 	bl	8013fa8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80148ee:	6438      	str	r0, [r7, #64]	; 0x40
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80148f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80148f2:	f000 faa6 	bl	8014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80148f6:	4603      	mov	r3, r0
 80148f8:	61bb      	str	r3, [r7, #24]

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80148fa:	69b8      	ldr	r0, [r7, #24]
 80148fc:	f000 fad0 	bl	8014ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8014900:	4603      	mov	r3, r0
 8014902:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 8014904:	6979      	ldr	r1, [r7, #20]
 8014906:	6a38      	ldr	r0, [r7, #32]
 8014908:	f7fe fb54 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801490c:	4603      	mov	r3, r0
 801490e:	633b      	str	r3, [r7, #48]	; 0x30
 8014910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014914:	4618      	mov	r0, r3
 8014916:	f7fd ff43 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801491a:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801491c:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014920:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8014922:	4611      	mov	r1, r2
 8014924:	4618      	mov	r0, r3
 8014926:	f7fb fc5f 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801492a:	63f8      	str	r0, [r7, #60]	; 0x3c

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 801492c:	f7fa fd4e 	bl	800f3cc <_ZNSt14numeric_limitsIhE3minEv>
 8014930:	4603      	mov	r3, r0
 8014932:	461a      	mov	r2, r3
            unsat_output +
 8014934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014936:	4413      	add	r3, r2
        const int32 shifted_output =
 8014938:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801493a:	f7fa fd4f 	bl	800f3dc <_ZNSt14numeric_limitsIhE3maxEv>
 801493e:	4603      	mov	r3, r0
 8014940:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8014942:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014946:	f107 0310 	add.w	r3, r7, #16
 801494a:	4611      	mov	r1, r2
 801494c:	4618      	mov	r0, r3
 801494e:	f7fb f979 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 8014952:	4604      	mov	r4, r0
 8014954:	f7fa fd3a 	bl	800f3cc <_ZNSt14numeric_limitsIhE3minEv>
 8014958:	4603      	mov	r3, r0
 801495a:	63bb      	str	r3, [r7, #56]	; 0x38
 801495c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014960:	4619      	mov	r1, r3
 8014962:	4620      	mov	r0, r4
 8014964:	f7fb f95a 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 8014968:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801496a:	6819      	ldr	r1, [r3, #0]
 801496c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801496e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014970:	fb02 f203 	mul.w	r2, r2, r3
 8014974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014976:	4413      	add	r3, r2
 8014978:	461a      	mov	r2, r3
 801497a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801497e:	4413      	add	r3, r2
 8014980:	b2ca      	uxtb	r2, r1
 8014982:	701a      	strb	r2, [r3, #0]
 8014984:	e00d      	b.n	80149a2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8014986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801498a:	fb02 f203 	mul.w	r2, r2, r3
 801498e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014990:	4413      	add	r3, r2
 8014992:	461a      	mov	r2, r3
 8014994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014998:	189c      	adds	r4, r3, r2
 801499a:	f7fa fd17 	bl	800f3cc <_ZNSt14numeric_limitsIhE3minEv>
 801499e:	4603      	mov	r3, r0
 80149a0:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80149a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80149a4:	3301      	adds	r3, #1
 80149a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80149a8:	e785      	b.n	80148b6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 80149aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80149ac:	3301      	adds	r3, #1
 80149ae:	677b      	str	r3, [r7, #116]	; 0x74
 80149b0:	e70d      	b.n	80147ce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
      }
    }
  }
}
 80149b2:	bf00      	nop
 80149b4:	377c      	adds	r7, #124	; 0x7c
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd90      	pop	{r4, r7, pc}

080149ba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80149ba:	b590      	push	{r4, r7, lr}
 80149bc:	b09f      	sub	sp, #124	; 0x7c
 80149be:	af00      	add	r7, sp, #0
 80149c0:	60f8      	str	r0, [r7, #12]
 80149c2:	60b9      	str	r1, [r7, #8]
 80149c4:	607a      	str	r2, [r7, #4]
 80149c6:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	689b      	ldr	r3, [r3, #8]
 80149cc:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	68db      	ldr	r3, [r3, #12]
 80149d2:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	699b      	ldr	r3, [r3, #24]
 80149d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80149da:	68b8      	ldr	r0, [r7, #8]
 80149dc:	f7fb f9cb 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80149e0:	4603      	mov	r3, r0
 80149e2:	3b01      	subs	r3, #1
 80149e4:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80149e6:	683a      	ldr	r2, [r7, #0]
 80149e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80149ea:	68b8      	ldr	r0, [r7, #8]
 80149ec:	f7fd fe97 	bl	801271e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80149f0:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80149f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80149f4:	683a      	ldr	r2, [r7, #0]
 80149f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80149f8:	68b8      	ldr	r0, [r7, #8]
 80149fa:	f7fb fd51 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80149fe:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8014a00:	2300      	movs	r3, #0
 8014a02:	677b      	str	r3, [r7, #116]	; 0x74
 8014a04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	f280 80f0 	bge.w	8014bee <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8014a0e:	2380      	movs	r3, #128	; 0x80
 8014a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8014a14:	2300      	movs	r3, #0
 8014a16:	673b      	str	r3, [r7, #112]	; 0x70
 8014a18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	da17      	bge.n	8014a50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a24:	fb02 f203 	mul.w	r2, r2, r3
 8014a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014a2a:	4413      	add	r3, r2
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	441a      	add	r2, r3
 8014a32:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8014a36:	4611      	mov	r1, r2
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7ff f909 	bl	8013c50 <_ZSt3maxIaERKT_S2_S2_>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	f993 3000 	ldrsb.w	r3, [r3]
 8014a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8014a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	673b      	str	r3, [r7, #112]	; 0x70
 8014a4e:	e7e3      	b.n	8014a18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8014a50:	f000 f9ef 	bl	8014e32 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8014a54:	4603      	mov	r3, r0
 8014a56:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8014a58:	2300      	movs	r3, #0
 8014a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a60:	429a      	cmp	r2, r3
 8014a62:	da30      	bge.n	8014ac6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8014a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a68:	fb02 f203 	mul.w	r2, r2, r3
 8014a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a6e:	4413      	add	r3, r2
 8014a70:	461a      	mov	r2, r3
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	4413      	add	r3, r2
 8014a76:	f993 3000 	ldrsb.w	r3, [r3]
 8014a7a:	461a      	mov	r2, r3
 8014a7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8014a80:	1ad3      	subs	r3, r2, r3
 8014a82:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8014a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	db18      	blt.n	8014abe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8014a8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014a8e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014a90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014a92:	f7ff fa89 	bl	8013fa8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8014a96:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8014a98:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014a9a:	f000 f9d2 	bl	8014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8014aa2:	69f8      	ldr	r0, [r7, #28]
 8014aa4:	f000 f9fc 	bl	8014ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f000 fb40 	bl	8015130 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ab6:	f000 f9d5 	bl	8014e64 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014aba:	4603      	mov	r3, r0
 8014abc:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8014abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014ac4:	e7ca      	b.n	8014a5c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8014ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014aca:	4618      	mov	r0, r3
 8014acc:	f000 fb4a 	bl	8015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014ad0:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014ad8:	210c      	movs	r1, #12
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7ff fa77 	bl	8013fce <_ZN6tflite13GetReciprocalEliPi>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fd ff6d 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8014aec:	2300      	movs	r3, #0
 8014aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8014af0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014af4:	429a      	cmp	r2, r3
 8014af6:	da76      	bge.n	8014be6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8014af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014afa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014afc:	fb02 f203 	mul.w	r2, r2, r3
 8014b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014b02:	4413      	add	r3, r2
 8014b04:	461a      	mov	r2, r3
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	4413      	add	r3, r2
 8014b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8014b0e:	461a      	mov	r2, r3
 8014b10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8014b14:	1ad3      	subs	r3, r2, r3
 8014b16:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8014b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	db50      	blt.n	8014bc2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8014b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014b22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014b24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014b26:	f7ff fa3f 	bl	8013fa8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8014b2a:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8014b2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014b2e:	f000 f988 	bl	8014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8014b32:	4603      	mov	r3, r0
 8014b34:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8014b36:	69b8      	ldr	r0, [r7, #24]
 8014b38:	f000 f9b2 	bl	8014ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8014b40:	6979      	ldr	r1, [r7, #20]
 8014b42:	6a38      	ldr	r0, [r7, #32]
 8014b44:	f7fe fa36 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8014b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7fd fe25 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014b56:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8014b58:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8014b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b5c:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8014b5e:	4611      	mov	r1, r2
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7fb fb41 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014b66:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8014b68:	f7fa fc40 	bl	800f3ec <_ZNSt14numeric_limitsIsE3minEv>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	461a      	mov	r2, r3
            unsat_output +
 8014b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b72:	4413      	add	r3, r2
        const int32 shifted_output =
 8014b74:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8014b76:	f7fa fc43 	bl	800f400 <_ZNSt14numeric_limitsIsE3maxEv>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8014b7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014b82:	f107 0310 	add.w	r3, r7, #16
 8014b86:	4611      	mov	r1, r2
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7fb f85b 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 8014b8e:	4604      	mov	r4, r0
 8014b90:	f7fa fc2c 	bl	800f3ec <_ZNSt14numeric_limitsIsE3minEv>
 8014b94:	4603      	mov	r3, r0
 8014b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8014b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014b9c:	4619      	mov	r1, r3
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f7fb f83c 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 8014ba4:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8014ba6:	6819      	ldr	r1, [r3, #0]
 8014ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014bac:	fb02 f203 	mul.w	r2, r2, r3
 8014bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bb2:	4413      	add	r3, r2
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014bba:	4413      	add	r3, r2
 8014bbc:	b20a      	sxth	r2, r1
 8014bbe:	801a      	strh	r2, [r3, #0]
 8014bc0:	e00d      	b.n	8014bde <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8014bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014bc6:	fb02 f203 	mul.w	r2, r2, r3
 8014bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bcc:	4413      	add	r3, r2
 8014bce:	005b      	lsls	r3, r3, #1
 8014bd0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014bd4:	18d4      	adds	r4, r2, r3
 8014bd6:	f7fa fc09 	bl	800f3ec <_ZNSt14numeric_limitsIsE3minEv>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8014bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014be0:	3301      	adds	r3, #1
 8014be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8014be4:	e784      	b.n	8014af0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8014be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014be8:	3301      	adds	r3, #1
 8014bea:	677b      	str	r3, [r7, #116]	; 0x74
 8014bec:	e70a      	b.n	8014a04 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8014bee:	bf00      	nop
 8014bf0:	377c      	adds	r7, #124	; 0x7c
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd90      	pop	{r4, r7, pc}

08014bf6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8014bf6:	b590      	push	{r4, r7, lr}
 8014bf8:	b09f      	sub	sp, #124	; 0x7c
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	60f8      	str	r0, [r7, #12]
 8014bfe:	60b9      	str	r1, [r7, #8]
 8014c00:	607a      	str	r2, [r7, #4]
 8014c02:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	689b      	ldr	r3, [r3, #8]
 8014c08:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	68db      	ldr	r3, [r3, #12]
 8014c0e:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	699b      	ldr	r3, [r3, #24]
 8014c14:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014c16:	68b8      	ldr	r0, [r7, #8]
 8014c18:	f7fb f8ad 	bl	800fd76 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	3b01      	subs	r3, #1
 8014c20:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014c22:	683a      	ldr	r2, [r7, #0]
 8014c24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c26:	68b8      	ldr	r0, [r7, #8]
 8014c28:	f7fd fd79 	bl	801271e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014c2c:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c30:	683a      	ldr	r2, [r7, #0]
 8014c32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c34:	68b8      	ldr	r0, [r7, #8]
 8014c36:	f7fb fc33 	bl	80104a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014c3a:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	677b      	str	r3, [r7, #116]	; 0x74
 8014c40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c44:	429a      	cmp	r2, r3
 8014c46:	f280 80f0 	bge.w	8014e2a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8014c4a:	2380      	movs	r3, #128	; 0x80
 8014c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8014c50:	2300      	movs	r3, #0
 8014c52:	673b      	str	r3, [r7, #112]	; 0x70
 8014c54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	da17      	bge.n	8014c8c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c60:	fb02 f203 	mul.w	r2, r2, r3
 8014c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c66:	4413      	add	r3, r2
 8014c68:	461a      	mov	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	441a      	add	r2, r3
 8014c6e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8014c72:	4611      	mov	r1, r2
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fe ffeb 	bl	8013c50 <_ZSt3maxIaERKT_S2_S2_>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8014c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8014c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c86:	3301      	adds	r3, #1
 8014c88:	673b      	str	r3, [r7, #112]	; 0x70
 8014c8a:	e7e3      	b.n	8014c54 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8014c8c:	f000 f8d1 	bl	8014e32 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8014c90:	4603      	mov	r3, r0
 8014c92:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8014c94:	2300      	movs	r3, #0
 8014c96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	da30      	bge.n	8014d02 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8014ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014ca4:	fb02 f203 	mul.w	r2, r2, r3
 8014ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014caa:	4413      	add	r3, r2
 8014cac:	461a      	mov	r2, r3
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	4413      	add	r3, r2
 8014cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8014cbc:	1ad3      	subs	r3, r2, r3
 8014cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8014cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	db18      	blt.n	8014cfa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8014cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014cca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014ccc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014cce:	f7ff f96b 	bl	8013fa8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8014cd2:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8014cd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014cd6:	f000 f8b4 	bl	8014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8014cde:	69f8      	ldr	r0, [r7, #28]
 8014ce0:	f000 f8de 	bl	8014ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f000 fa22 	bl	8015130 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8014cec:	4603      	mov	r3, r0
 8014cee:	4619      	mov	r1, r3
 8014cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014cf2:	f000 f8b7 	bl	8014e64 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8014cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cfc:	3301      	adds	r3, #1
 8014cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014d00:	e7ca      	b.n	8014c98 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8014d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d06:	4618      	mov	r0, r3
 8014d08:	f000 fa2c 	bl	8015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014d0c:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014d14:	210c      	movs	r1, #12
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7ff f959 	bl	8013fce <_ZN6tflite13GetReciprocalEliPi>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7fd fe4f 	bl	80129c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014d24:	4603      	mov	r3, r0
 8014d26:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8014d28:	2300      	movs	r3, #0
 8014d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8014d2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d30:	429a      	cmp	r2, r3
 8014d32:	da76      	bge.n	8014e22 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8014d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014d38:	fb02 f203 	mul.w	r2, r2, r3
 8014d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014d3e:	4413      	add	r3, r2
 8014d40:	461a      	mov	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	4413      	add	r3, r2
 8014d46:	f993 3000 	ldrsb.w	r3, [r3]
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8014d50:	1ad3      	subs	r3, r2, r3
 8014d52:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8014d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	db50      	blt.n	8014dfe <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8014d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014d5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014d60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014d62:	f7ff f921 	bl	8013fa8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8014d66:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8014d68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014d6a:	f000 f86a 	bl	8014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8014d72:	69b8      	ldr	r0, [r7, #24]
 8014d74:	f000 f894 	bl	8014ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8014d7c:	6979      	ldr	r1, [r7, #20]
 8014d7e:	6a38      	ldr	r0, [r7, #32]
 8014d80:	f7fe f918 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014d84:	4603      	mov	r3, r0
 8014d86:	633b      	str	r3, [r7, #48]	; 0x30
 8014d88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7fd fd07 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014d92:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8014d94:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8014d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d98:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8014d9a:	4611      	mov	r1, r2
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7fb fa23 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014da2:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8014da4:	f7fa fb01 	bl	800f3aa <_ZNSt14numeric_limitsIaE3minEv>
 8014da8:	4603      	mov	r3, r0
 8014daa:	461a      	mov	r2, r3
            unsat_output +
 8014dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dae:	4413      	add	r3, r2
        const int32 shifted_output =
 8014db0:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8014db2:	f7fa fb03 	bl	800f3bc <_ZNSt14numeric_limitsIaE3maxEv>
 8014db6:	4603      	mov	r3, r0
 8014db8:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8014dba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014dbe:	f107 0310 	add.w	r3, r7, #16
 8014dc2:	4611      	mov	r1, r2
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7fa ff3d 	bl	800fc44 <_ZSt3minIlERKT_S2_S2_>
 8014dca:	4604      	mov	r4, r0
 8014dcc:	f7fa faed 	bl	800f3aa <_ZNSt14numeric_limitsIaE3minEv>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8014dd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014dd8:	4619      	mov	r1, r3
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f7fa ff1e 	bl	800fc1c <_ZSt3maxIlERKT_S2_S2_>
 8014de0:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8014de2:	6819      	ldr	r1, [r3, #0]
 8014de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014de6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014de8:	fb02 f203 	mul.w	r2, r2, r3
 8014dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014dee:	4413      	add	r3, r2
 8014df0:	461a      	mov	r2, r3
 8014df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014df6:	4413      	add	r3, r2
 8014df8:	b24a      	sxtb	r2, r1
 8014dfa:	701a      	strb	r2, [r3, #0]
 8014dfc:	e00d      	b.n	8014e1a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8014dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014e00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014e02:	fb02 f203 	mul.w	r2, r2, r3
 8014e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014e08:	4413      	add	r3, r2
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e10:	189c      	adds	r4, r3, r2
 8014e12:	f7fa faca 	bl	800f3aa <_ZNSt14numeric_limitsIaE3minEv>
 8014e16:	4603      	mov	r3, r0
 8014e18:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8014e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8014e20:	e784      	b.n	8014d2c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8014e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014e24:	3301      	adds	r3, #1
 8014e26:	677b      	str	r3, [r7, #116]	; 0x74
 8014e28:	e70a      	b.n	8014c40 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8014e2a:	bf00      	nop
 8014e2c:	377c      	adds	r7, #124	; 0x7c
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd90      	pop	{r4, r7, pc}

08014e32 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8014e32:	b580      	push	{r7, lr}
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	2000      	movs	r0, #0
 8014e38:	f000 f99f 	bl	801517a <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	4618      	mov	r0, r3
 8014e40:	bd80      	pop	{r7, pc}

08014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8014e42:	b580      	push	{r7, lr}
 8014e44:	b084      	sub	sp, #16
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8014e4a:	f107 030c 	add.w	r3, r7, #12
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f000 f9a7 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8014e54:	4602      	mov	r2, r0
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6013      	str	r3, [r2, #0]
    return retval;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
  }
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3710      	adds	r7, #16
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8014e64:	b590      	push	{r4, r7, lr}
 8014e66:	b083      	sub	sp, #12
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
 8014e6e:	1d3b      	adds	r3, r7, #4
 8014e70:	4618      	mov	r0, r3
 8014e72:	f000 f977 	bl	8015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014e76:	4603      	mov	r3, r0
 8014e78:	681c      	ldr	r4, [r3, #0]
 8014e7a:	463b      	mov	r3, r7
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f000 f971 	bl	8015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014e82:	4603      	mov	r3, r0
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	4619      	mov	r1, r3
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f7fb fa9f 	bl	80103cc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	4618      	mov	r0, r3
 8014e92:	f000 f991 	bl	80151b8 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8014e96:	4603      	mov	r3, r0
 8014e98:	4618      	mov	r0, r3
 8014e9a:	370c      	adds	r7, #12
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd90      	pop	{r4, r7, pc}

08014ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8014ea0:	b590      	push	{r4, r7, lr}
 8014ea2:	b091      	sub	sp, #68	; 0x44
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8014ea8:	f000 f997 	bl	80151da <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8014eac:	4603      	mov	r3, r0
 8014eae:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8014eb0:	2001      	movs	r0, #1
 8014eb2:	f000 f99b 	bl	80151ec <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	4619      	mov	r1, r3
 8014eba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014ebc:	f000 f9aa 	bl	8015214 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8014ec4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f000 f9c2 	bl	8015250 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f000 f99f 	bl	8015214 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8014eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014edc:	f000 f9d6 	bl	801528c <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7fe f804 	bl	8012ef0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8014eec:	6879      	ldr	r1, [r7, #4]
 8014eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ef0:	f000 f990 	bl	8015214 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8014ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014efc:	4618      	mov	r0, r3
 8014efe:	f000 f950 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8014f02:	4603      	mov	r3, r0
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8014f08:	4883      	ldr	r0, [pc, #524]	; (8015118 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8014f0a:	f7fd fc68 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7fd fc50 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014f16:	4603      	mov	r3, r0
 8014f18:	627b      	str	r3, [r7, #36]	; 0x24
 8014f1a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8014f1e:	f7fb fa19 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014f22:	4603      	mov	r3, r0
 8014f24:	4619      	mov	r1, r3
 8014f26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014f28:	f7fb fa1f 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f7fb fa6e 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014f34:	4604      	mov	r4, r0
 8014f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f3a:	f7fe f83b 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f42:	4619      	mov	r1, r3
 8014f44:	4620      	mov	r0, r4
 8014f46:	f7fd fed5 	bl	8012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8014f4e:	4873      	ldr	r0, [pc, #460]	; (801511c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8014f50:	f7fd fc45 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014f54:	4603      	mov	r3, r0
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7fd fc2d 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	623b      	str	r3, [r7, #32]
 8014f60:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8014f64:	f7fb f9f6 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	4619      	mov	r1, r3
 8014f6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014f6e:	f7fb f9fc 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014f72:	4603      	mov	r3, r0
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7fb fa4b 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	6a39      	ldr	r1, [r7, #32]
 8014f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f80:	f7fe f818 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014f84:	4603      	mov	r3, r0
 8014f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f88:	4619      	mov	r1, r3
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f7fd feb2 	bl	8012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8014f90:	4603      	mov	r3, r0
 8014f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8014f94:	4862      	ldr	r0, [pc, #392]	; (8015120 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8014f96:	f7fd fc22 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f7fd fc0a 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	61fb      	str	r3, [r7, #28]
 8014fa6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8014faa:	f7fb f9d3 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014fb4:	f7fb f9d9 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7fb fa28 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014fc0:	4604      	mov	r4, r0
 8014fc2:	69f9      	ldr	r1, [r7, #28]
 8014fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014fc6:	f7fd fff5 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fce:	4619      	mov	r1, r3
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	f7fd fe8f 	bl	8012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8014fda:	4852      	ldr	r0, [pc, #328]	; (8015124 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8014fdc:	f7fd fbff 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7fd fbe7 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	61bb      	str	r3, [r7, #24]
 8014fec:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8014ff0:	f7fb f9b0 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014ffa:	f7fb f9b6 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014ffe:	4603      	mov	r3, r0
 8015000:	4618      	mov	r0, r3
 8015002:	f7fb fa05 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015006:	4604      	mov	r4, r0
 8015008:	69b9      	ldr	r1, [r7, #24]
 801500a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801500c:	f7fd ffd2 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015010:	4603      	mov	r3, r0
 8015012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015014:	4619      	mov	r1, r3
 8015016:	4620      	mov	r0, r4
 8015018:	f7fd fe6c 	bl	8012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801501c:	4603      	mov	r3, r0
 801501e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8015020:	4841      	ldr	r0, [pc, #260]	; (8015128 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8015022:	f7fd fbdc 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015026:	4603      	mov	r3, r0
 8015028:	4618      	mov	r0, r3
 801502a:	f7fd fbc4 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801502e:	4603      	mov	r3, r0
 8015030:	617b      	str	r3, [r7, #20]
 8015032:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8015036:	f7fb f98d 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801503a:	4603      	mov	r3, r0
 801503c:	4619      	mov	r1, r3
 801503e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015040:	f7fb f993 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015044:	4603      	mov	r3, r0
 8015046:	4618      	mov	r0, r3
 8015048:	f7fb f9e2 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801504c:	4604      	mov	r4, r0
 801504e:	6979      	ldr	r1, [r7, #20]
 8015050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015052:	f7fd ffaf 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015056:	4603      	mov	r3, r0
 8015058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801505a:	4619      	mov	r1, r3
 801505c:	4620      	mov	r0, r4
 801505e:	f7fd fe49 	bl	8012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015062:	4603      	mov	r3, r0
 8015064:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8015066:	4831      	ldr	r0, [pc, #196]	; (801512c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8015068:	f7fd fbb9 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801506c:	4603      	mov	r3, r0
 801506e:	4618      	mov	r0, r3
 8015070:	f7fd fba1 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015074:	4603      	mov	r3, r0
 8015076:	613b      	str	r3, [r7, #16]
 8015078:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801507c:	f7fb f96a 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015080:	4603      	mov	r3, r0
 8015082:	4619      	mov	r1, r3
 8015084:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015086:	f7fb f970 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801508a:	4603      	mov	r3, r0
 801508c:	4618      	mov	r0, r3
 801508e:	f7fb f9bf 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015092:	4604      	mov	r4, r0
 8015094:	6939      	ldr	r1, [r7, #16]
 8015096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015098:	f7fd ff8c 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801509c:	4603      	mov	r3, r0
 801509e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150a0:	4619      	mov	r1, r3
 80150a2:	4620      	mov	r0, r4
 80150a4:	f7fd fe26 	bl	8012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80150a8:	4603      	mov	r3, r0
 80150aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 80150ac:	20f2      	movs	r0, #242	; 0xf2
 80150ae:	f7fd fb96 	bl	80127de <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80150b2:	4603      	mov	r3, r0
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7fd fb7e 	bl	80127b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80150ba:	4603      	mov	r3, r0
 80150bc:	60fb      	str	r3, [r7, #12]
 80150be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80150c2:	f7fb f947 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80150c6:	4603      	mov	r3, r0
 80150c8:	4619      	mov	r1, r3
 80150ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80150cc:	f7fb f94d 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80150d0:	4603      	mov	r3, r0
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fb f99c 	bl	8010410 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80150d8:	4604      	mov	r4, r0
 80150da:	68f9      	ldr	r1, [r7, #12]
 80150dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150de:	f7fd ff69 	bl	8012fb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80150e2:	4603      	mov	r3, r0
 80150e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150e6:	4619      	mov	r1, r3
 80150e8:	4620      	mov	r0, r4
 80150ea:	f7fd fe03 	bl	8012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80150ee:	4603      	mov	r3, r0
 80150f0:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f000 f8e4 	bl	80152c0 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 80150f8:	4604      	mov	r4, r0
 80150fa:	f7fd fcd3 	bl	8012aa4 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 80150fe:	4603      	mov	r3, r0
 8015100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015102:	4619      	mov	r1, r3
 8015104:	4620      	mov	r0, r4
 8015106:	f7fd fdf5 	bl	8012cf4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801510a:	4603      	mov	r3, r0
 801510c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8015110:	4618      	mov	r0, r3
 8015112:	3744      	adds	r7, #68	; 0x44
 8015114:	46bd      	mov	sp, r7
 8015116:	bd90      	pop	{r4, r7, pc}
 8015118:	63afbe7b 	.word	0x63afbe7b
 801511c:	4da2cbf2 	.word	0x4da2cbf2
 8015120:	2f16ac6c 	.word	0x2f16ac6c
 8015124:	1152aaa4 	.word	0x1152aaa4
 8015128:	02582ab7 	.word	0x02582ab7
 801512c:	000afe11 	.word	0x000afe11

08015130 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015130:	b5b0      	push	{r4, r5, r7, lr}
 8015132:	b084      	sub	sp, #16
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015138:	1d3b      	adds	r3, r7, #4
 801513a:	4618      	mov	r0, r3
 801513c:	f7fd fb30 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015140:	4603      	mov	r3, r0
 8015142:	681d      	ldr	r5, [r3, #0]
 8015144:	f107 030c 	add.w	r3, r7, #12
 8015148:	4618      	mov	r0, r3
 801514a:	f000 f80b 	bl	8015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801514e:	4604      	mov	r4, r0
 8015150:	4628      	mov	r0, r5
 8015152:	f000 f8c7 	bl	80152e4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8015156:	4603      	mov	r3, r0
 8015158:	6023      	str	r3, [r4, #0]
  return result;
 801515a:	68fb      	ldr	r3, [r7, #12]
}
 801515c:	4618      	mov	r0, r3
 801515e:	3710      	adds	r7, #16
 8015160:	46bd      	mov	sp, r7
 8015162:	bdb0      	pop	{r4, r5, r7, pc}

08015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8015164:	b480      	push	{r7}
 8015166:	b083      	sub	sp, #12
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	4618      	mov	r0, r3
 8015170:	370c      	adds	r7, #12
 8015172:	46bd      	mov	sp, r7
 8015174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015178:	4770      	bx	lr

0801517a <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801517a:	b590      	push	{r4, r7, lr}
 801517c:	b085      	sub	sp, #20
 801517e:	af00      	add	r7, sp, #0
 8015180:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015182:	f107 030c 	add.w	r3, r7, #12
 8015186:	4618      	mov	r0, r3
 8015188:	f7ff ffec 	bl	8015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801518c:	4604      	mov	r4, r0
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f7fb f8e0 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015194:	4603      	mov	r3, r0
 8015196:	6023      	str	r3, [r4, #0]
    return retval;
 8015198:	68fb      	ldr	r3, [r7, #12]
  }
 801519a:	4618      	mov	r0, r3
 801519c:	3714      	adds	r7, #20
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd90      	pop	{r4, r7, pc}

080151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 80151a2:	b480      	push	{r7}
 80151a4:	b083      	sub	sp, #12
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	6078      	str	r0, [r7, #4]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	4618      	mov	r0, r3
 80151ae:	370c      	adds	r7, #12
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr

080151b8 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b084      	sub	sp, #16
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80151c0:	f107 030c 	add.w	r3, r7, #12
 80151c4:	4618      	mov	r0, r3
 80151c6:	f7ff ffcd 	bl	8015164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80151ca:	4602      	mov	r2, r0
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	6013      	str	r3, [r2, #0]
    return retval;
 80151d0:	68fb      	ldr	r3, [r7, #12]
  }
 80151d2:	4618      	mov	r0, r3
 80151d4:	3710      	adds	r7, #16
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}

080151da <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 80151da:	b580      	push	{r7, lr}
 80151dc:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80151de:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80151e2:	f000 f803 	bl	80151ec <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 80151e6:	4603      	mov	r3, r0
  }
 80151e8:	4618      	mov	r0, r3
 80151ea:	bd80      	pop	{r7, pc}

080151ec <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80151ec:	b590      	push	{r4, r7, lr}
 80151ee:	b085      	sub	sp, #20
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80151f4:	f107 030c 	add.w	r3, r7, #12
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7ff ffd2 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80151fe:	4604      	mov	r4, r0
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f7fb f8a7 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015206:	4603      	mov	r3, r0
 8015208:	6023      	str	r3, [r4, #0]
    return retval;
 801520a:	68fb      	ldr	r3, [r7, #12]
  }
 801520c:	4618      	mov	r0, r3
 801520e:	3714      	adds	r7, #20
 8015210:	46bd      	mov	sp, r7
 8015212:	bd90      	pop	{r4, r7, pc}

08015214 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8015214:	b590      	push	{r4, r7, lr}
 8015216:	b083      	sub	sp, #12
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
 801521c:	6039      	str	r1, [r7, #0]
 801521e:	1d3b      	adds	r3, r7, #4
 8015220:	4618      	mov	r0, r3
 8015222:	f7ff ffbe 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015226:	4603      	mov	r3, r0
 8015228:	681c      	ldr	r4, [r3, #0]
 801522a:	463b      	mov	r3, r7
 801522c:	4618      	mov	r0, r3
 801522e:	f7ff ffb8 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015232:	4603      	mov	r3, r0
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	4619      	mov	r1, r3
 8015238:	4620      	mov	r0, r4
 801523a:	f7fd fae9 	bl	8012810 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801523e:	4603      	mov	r3, r0
 8015240:	4618      	mov	r0, r3
 8015242:	f7ff fdfe 	bl	8014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015246:	4603      	mov	r3, r0
 8015248:	4618      	mov	r0, r3
 801524a:	370c      	adds	r7, #12
 801524c:	46bd      	mov	sp, r7
 801524e:	bd90      	pop	{r4, r7, pc}

08015250 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8015250:	b590      	push	{r4, r7, lr}
 8015252:	b083      	sub	sp, #12
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	6039      	str	r1, [r7, #0]
 801525a:	1d3b      	adds	r3, r7, #4
 801525c:	4618      	mov	r0, r3
 801525e:	f7ff ffa0 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015262:	4603      	mov	r3, r0
 8015264:	681c      	ldr	r4, [r3, #0]
 8015266:	463b      	mov	r3, r7
 8015268:	4618      	mov	r0, r3
 801526a:	f7ff ff9a 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801526e:	4603      	mov	r3, r0
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	4619      	mov	r1, r3
 8015274:	4620      	mov	r0, r4
 8015276:	f7fb f878 	bl	801036a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801527a:	4603      	mov	r3, r0
 801527c:	4618      	mov	r0, r3
 801527e:	f7ff fde0 	bl	8014e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015282:	4603      	mov	r3, r0
 8015284:	4618      	mov	r0, r3
 8015286:	370c      	adds	r7, #12
 8015288:	46bd      	mov	sp, r7
 801528a:	bd90      	pop	{r4, r7, pc}

0801528c <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801528c:	b5b0      	push	{r4, r5, r7, lr}
 801528e:	b084      	sub	sp, #16
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015294:	1d3b      	adds	r3, r7, #4
 8015296:	4618      	mov	r0, r3
 8015298:	f7ff ff83 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801529c:	4603      	mov	r3, r0
 801529e:	681d      	ldr	r5, [r3, #0]
 80152a0:	f107 030c 	add.w	r3, r7, #12
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7fd fa7b 	bl	80127a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80152aa:	4604      	mov	r4, r0
 80152ac:	4628      	mov	r0, r5
 80152ae:	f000 f825 	bl	80152fc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 80152b2:	4603      	mov	r3, r0
 80152b4:	6023      	str	r3, [r4, #0]
  return result;
 80152b6:	68fb      	ldr	r3, [r7, #12]
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3710      	adds	r7, #16
 80152bc:	46bd      	mov	sp, r7
 80152be:	bdb0      	pop	{r4, r5, r7, pc}

080152c0 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b082      	sub	sp, #8
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
 80152c8:	1d3b      	adds	r3, r7, #4
 80152ca:	4618      	mov	r0, r3
 80152cc:	f7ff ff69 	bl	80151a2 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80152d0:	4603      	mov	r3, r0
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7fd fd74 	bl	8012dc2 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 80152da:	4603      	mov	r3, r0
 80152dc:	4618      	mov	r0, r3
 80152de:	3708      	adds	r7, #8
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f000 f811 	bl	8015314 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 80152f2:	4603      	mov	r3, r0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}

080152fc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f000 f813 	bl	8015330 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801530a:	4603      	mov	r3, r0
}
 801530c:	4618      	mov	r0, r3
 801530e:	3708      	adds	r7, #8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801531c:	210c      	movs	r1, #12
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f7fa ff62 	bl	80101e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015324:	4603      	mov	r3, r0
  }
 8015326:	4618      	mov	r0, r3
 8015328:	3708      	adds	r7, #8
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
	...

08015330 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015330:	b580      	push	{r7, lr}
 8015332:	b08a      	sub	sp, #40	; 0x28
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8015338:	f7fa fe3e 	bl	800ffb8 <_ZNSt14numeric_limitsIlE3minEv>
 801533c:	4603      	mov	r3, r0
 801533e:	4618      	mov	r0, r3
 8015340:	f7fb f808 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015344:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8015346:	f7f9 fe59 	bl	800effc <_ZNSt14numeric_limitsIlE3maxEv>
 801534a:	4603      	mov	r3, r0
 801534c:	4618      	mov	r0, r3
 801534e:	f7fb f801 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015352:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8015354:	2320      	movs	r3, #32
 8015356:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8015358:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801535c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801535e:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8015362:	f7fa fff7 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015366:	4603      	mov	r3, r0
 8015368:	4619      	mov	r1, r3
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f7fb f83c 	bl	80103e8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8015370:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8015372:	480f      	ldr	r0, [pc, #60]	; (80153b0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8015374:	f7fa ffee 	bl	8010354 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015378:	4603      	mov	r3, r0
 801537a:	4619      	mov	r1, r3
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7fb f811 	bl	80103a4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8015382:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8015384:	2105      	movs	r1, #5
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	f7fd fa5d 	bl	8012846 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801538c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801538e:	68fa      	ldr	r2, [r7, #12]
 8015390:	6a39      	ldr	r1, [r7, #32]
 8015392:	6978      	ldr	r0, [r7, #20]
 8015394:	f7fd fa9d 	bl	80128d2 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015398:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801539a:	68fa      	ldr	r2, [r7, #12]
 801539c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801539e:	6938      	ldr	r0, [r7, #16]
 80153a0:	f7fd fa97 	bl	80128d2 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80153a4:	60f8      	str	r0, [r7, #12]
    return result;
 80153a6:	68fb      	ldr	r3, [r7, #12]
  }
 80153a8:	4618      	mov	r0, r3
 80153aa:	3728      	adds	r7, #40	; 0x28
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	fc000001 	.word	0xfc000001

080153b4 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f000 fb89 	bl	8015ad4 <_ZNSaIPvED1Ev>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	4618      	mov	r0, r3
 80153c6:	3708      	adds	r7, #8
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}

080153cc <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	4618      	mov	r0, r3
 80153d8:	f000 fb6c 	bl	8015ab4 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	4618      	mov	r0, r3
 80153e0:	3708      	adds	r7, #8
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bd80      	pop	{r7, pc}

080153e6 <_ZNSt6vectorIPvSaIS0_EEC1Ev>:
      vector() = default;
 80153e6:	b580      	push	{r7, lr}
 80153e8:	b082      	sub	sp, #8
 80153ea:	af00      	add	r7, sp, #0
 80153ec:	6078      	str	r0, [r7, #4]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7ff ffeb 	bl	80153cc <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	4618      	mov	r0, r3
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>:
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	60f8      	str	r0, [r7, #12]
 8015408:	60b9      	str	r1, [r7, #8]
 801540a:	607a      	str	r2, [r7, #4]
  if (current_location - bytes < tensor_boundary) {
 801540c:	4b18      	ldr	r3, [pc, #96]	; (8015470 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 801540e:	681a      	ldr	r2, [r3, #0]
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	425b      	negs	r3, r3
 8015414:	441a      	add	r2, r3
 8015416:	4b17      	ldr	r3, [pc, #92]	; (8015474 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x74>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	429a      	cmp	r2, r3
 801541c:	d217      	bcs.n	801544e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x4e>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
 801541e:	68b8      	ldr	r0, [r7, #8]
 8015420:	f004 ff88 	bl	801a334 <malloc>
 8015424:	4603      	mov	r3, r0
 8015426:	461a      	mov	r2, r3
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	601a      	str	r2, [r3, #0]
    if (*ptr == NULL) {
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d106      	bne.n	8015442 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x42>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	4619      	mov	r1, r3
 8015438:	480f      	ldr	r0, [pc, #60]	; (8015478 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x78>)
 801543a:	f005 fb63 	bl	801ab04 <iprintf>
      return kTfLiteError;
 801543e:	2301      	movs	r3, #1
 8015440:	e011      	b.n	8015466 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
    }
    overflow_buffers.push_back(*ptr);
 8015442:	6879      	ldr	r1, [r7, #4]
 8015444:	480d      	ldr	r0, [pc, #52]	; (801547c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x7c>)
 8015446:	f000 fb6a 	bl	8015b1e <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return kTfLiteOk;
 801544a:	2300      	movs	r3, #0
 801544c:	e00b      	b.n	8015466 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
  }

  current_location -= bytes;
 801544e:	4b08      	ldr	r3, [pc, #32]	; (8015470 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 8015450:	681a      	ldr	r2, [r3, #0]
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	425b      	negs	r3, r3
 8015456:	4413      	add	r3, r2
 8015458:	4a05      	ldr	r2, [pc, #20]	; (8015470 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 801545a:	6013      	str	r3, [r2, #0]

  *ptr = current_location;
 801545c:	4b04      	ldr	r3, [pc, #16]	; (8015470 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8015464:	2300      	movs	r3, #0
}
 8015466:	4618      	mov	r0, r3
 8015468:	3710      	adds	r7, #16
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
 801546e:	bf00      	nop
 8015470:	20006998 	.word	0x20006998
 8015474:	20006994 	.word	0x20006994
 8015478:	0801e1ec 	.word	0x0801e1ec
 801547c:	200071d8 	.word	0x200071d8

08015480 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f000 fb7d 	bl	8015b88 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	4618      	mov	r0, r3
 8015492:	3708      	adds	r7, #8
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}

08015498 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 8015498:	b580      	push	{r7, lr}
 801549a:	b082      	sub	sp, #8
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	4618      	mov	r0, r3
 80154a4:	f000 fb60 	bl	8015b68 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	4618      	mov	r0, r3
 80154ac:	3708      	adds	r7, #8
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}

080154b2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 80154b2:	b580      	push	{r7, lr}
 80154b4:	b082      	sub	sp, #8
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	4618      	mov	r0, r3
 80154be:	f7ff ffeb 	bl	8015498 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	4618      	mov	r0, r3
 80154c6:	3708      	adds	r7, #8
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b088      	sub	sp, #32
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	60f8      	str	r0, [r7, #12]
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	617b      	str	r3, [r7, #20]

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
 80154dc:	6979      	ldr	r1, [r7, #20]
 80154de:	f107 0314 	add.w	r3, r7, #20
 80154e2:	3304      	adds	r3, #4
 80154e4:	461a      	mov	r2, r3
 80154e6:	68f8      	ldr	r0, [r7, #12]
 80154e8:	f7ff ff8a 	bl	8015400 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>
 80154ec:	4603      	mov	r3, r0
 80154ee:	77fb      	strb	r3, [r7, #31]
  if (s != kTfLiteOk) {
 80154f0:	7ffb      	ldrb	r3, [r7, #31]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d001      	beq.n	80154fa <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2e>
    return s;
 80154f6:	7ffb      	ldrb	r3, [r7, #31]
 80154f8:	e00e      	b.n	8015518 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x4c>
  }

  scratch_buffers.push_back(b);
 80154fa:	f107 0314 	add.w	r3, r7, #20
 80154fe:	4619      	mov	r1, r3
 8015500:	4807      	ldr	r0, [pc, #28]	; (8015520 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 8015502:	f000 fb66 	bl	8015bd2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 8015506:	4806      	ldr	r0, [pc, #24]	; (8015520 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 8015508:	f000 fb89 	bl	8015c1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801550c:	4603      	mov	r3, r0
 801550e:	3b01      	subs	r3, #1
 8015510:	461a      	mov	r2, r3
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8015516:	2300      	movs	r3, #0
}
 8015518:	4618      	mov	r0, r3
 801551a:	3720      	adds	r7, #32
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	200071e4 	.word	0x200071e4

08015524 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8015524:	b580      	push	{r7, lr}
 8015526:	b082      	sub	sp, #8
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 801552e:	480d      	ldr	r0, [pc, #52]	; (8015564 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8015530:	f000 fb75 	bl	8015c1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8015534:	4603      	mov	r3, r0
 8015536:	461a      	mov	r2, r3
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	4293      	cmp	r3, r2
 801553c:	bfac      	ite	ge
 801553e:	2301      	movge	r3, #1
 8015540:	2300      	movlt	r3, #0
 8015542:	b2db      	uxtb	r3, r3
 8015544:	2b00      	cmp	r3, #0
 8015546:	d001      	beq.n	801554c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 8015548:	2300      	movs	r3, #0
 801554a:	e006      	b.n	801555a <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	4619      	mov	r1, r3
 8015550:	4804      	ldr	r0, [pc, #16]	; (8015564 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8015552:	f000 fb74 	bl	8015c3e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 8015556:	4603      	mov	r3, r0
 8015558:	685b      	ldr	r3, [r3, #4]
}
 801555a:	4618      	mov	r0, r3
 801555c:	3708      	adds	r7, #8
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}
 8015562:	bf00      	nop
 8015564:	200071e4 	.word	0x200071e4

08015568 <_Z18trained_model_initPFPvjjE>:
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8015568:	b5b0      	push	{r4, r5, r7, lr}
 801556a:	b08a      	sub	sp, #40	; 0x28
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	f44f 61ca 	mov.w	r1, #1616	; 0x650
 8015576:	2010      	movs	r0, #16
 8015578:	4798      	blx	r3
 801557a:	4603      	mov	r3, r0
 801557c:	4a80      	ldr	r2, [pc, #512]	; (8015780 <_Z18trained_model_initPFPvjjE+0x218>)
 801557e:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8015580:	4b7f      	ldr	r3, [pc, #508]	; (8015780 <_Z18trained_model_initPFPvjjE+0x218>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d104      	bne.n	8015592 <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 8015588:	487e      	ldr	r0, [pc, #504]	; (8015784 <_Z18trained_model_initPFPvjjE+0x21c>)
 801558a:	f005 fb41 	bl	801ac10 <puts>
    return kTfLiteError;
 801558e:	2301      	movs	r3, #1
 8015590:	e1f4      	b.n	801597c <_Z18trained_model_initPFPvjjE+0x414>
  }
#endif
  tensor_boundary = tensor_arena;
 8015592:	4b7b      	ldr	r3, [pc, #492]	; (8015780 <_Z18trained_model_initPFPvjjE+0x218>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	4a7c      	ldr	r2, [pc, #496]	; (8015788 <_Z18trained_model_initPFPvjjE+0x220>)
 8015598:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801559a:	4b79      	ldr	r3, [pc, #484]	; (8015780 <_Z18trained_model_initPFPvjjE+0x218>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80155a2:	4a7a      	ldr	r2, [pc, #488]	; (801578c <_Z18trained_model_initPFPvjjE+0x224>)
 80155a4:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 80155a6:	4b7a      	ldr	r3, [pc, #488]	; (8015790 <_Z18trained_model_initPFPvjjE+0x228>)
 80155a8:	4a7a      	ldr	r2, [pc, #488]	; (8015794 <_Z18trained_model_initPFPvjjE+0x22c>)
 80155aa:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 80155ac:	4b78      	ldr	r3, [pc, #480]	; (8015790 <_Z18trained_model_initPFPvjjE+0x228>)
 80155ae:	4a7a      	ldr	r2, [pc, #488]	; (8015798 <_Z18trained_model_initPFPvjjE+0x230>)
 80155b0:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 80155b2:	4b77      	ldr	r3, [pc, #476]	; (8015790 <_Z18trained_model_initPFPvjjE+0x228>)
 80155b4:	4a79      	ldr	r2, [pc, #484]	; (801579c <_Z18trained_model_initPFPvjjE+0x234>)
 80155b6:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.tensors = tflTensors;
 80155b8:	4b75      	ldr	r3, [pc, #468]	; (8015790 <_Z18trained_model_initPFPvjjE+0x228>)
 80155ba:	4a79      	ldr	r2, [pc, #484]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80155bc:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 23;
 80155be:	4b74      	ldr	r3, [pc, #464]	; (8015790 <_Z18trained_model_initPFPvjjE+0x228>)
 80155c0:	2217      	movs	r2, #23
 80155c2:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 23; ++i) {
 80155c4:	2300      	movs	r3, #0
 80155c6:	627b      	str	r3, [r7, #36]	; 0x24
 80155c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ca:	2b16      	cmp	r3, #22
 80155cc:	f200 80cd 	bhi.w	801576a <_Z18trained_model_initPFPvjjE+0x202>
    tflTensors[i].type = tensorData[i].type;
 80155d0:	4974      	ldr	r1, [pc, #464]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 80155d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155d4:	4613      	mov	r3, r2
 80155d6:	005b      	lsls	r3, r3, #1
 80155d8:	4413      	add	r3, r2
 80155da:	00db      	lsls	r3, r3, #3
 80155dc:	440b      	add	r3, r1
 80155de:	3301      	adds	r3, #1
 80155e0:	7819      	ldrb	r1, [r3, #0]
 80155e2:	4a6f      	ldr	r2, [pc, #444]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80155e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e6:	019b      	lsls	r3, r3, #6
 80155e8:	4413      	add	r3, r2
 80155ea:	460a      	mov	r2, r1
 80155ec:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 80155ee:	4a6c      	ldr	r2, [pc, #432]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80155f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f2:	019b      	lsls	r3, r3, #6
 80155f4:	4413      	add	r3, r2
 80155f6:	332d      	adds	r3, #45	; 0x2d
 80155f8:	2200      	movs	r2, #0
 80155fa:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 80155fc:	4969      	ldr	r1, [pc, #420]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 80155fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015600:	4613      	mov	r3, r2
 8015602:	005b      	lsls	r3, r3, #1
 8015604:	4413      	add	r3, r2
 8015606:	00db      	lsls	r3, r3, #3
 8015608:	440b      	add	r3, r1
 801560a:	7819      	ldrb	r1, [r3, #0]
 801560c:	4a64      	ldr	r2, [pc, #400]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 801560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015610:	019b      	lsls	r3, r3, #6
 8015612:	4413      	add	r3, r2
 8015614:	3314      	adds	r3, #20
 8015616:	460a      	mov	r2, r1
 8015618:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801561a:	4962      	ldr	r1, [pc, #392]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 801561c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801561e:	4613      	mov	r3, r2
 8015620:	005b      	lsls	r3, r3, #1
 8015622:	4413      	add	r3, r2
 8015624:	00db      	lsls	r3, r3, #3
 8015626:	440b      	add	r3, r1
 8015628:	330c      	adds	r3, #12
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	495c      	ldr	r1, [pc, #368]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 801562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015630:	019b      	lsls	r3, r3, #6
 8015632:	440b      	add	r3, r1
 8015634:	3318      	adds	r3, #24
 8015636:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8015638:	495a      	ldr	r1, [pc, #360]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 801563a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801563c:	4613      	mov	r3, r2
 801563e:	005b      	lsls	r3, r3, #1
 8015640:	4413      	add	r3, r2
 8015642:	00db      	lsls	r3, r3, #3
 8015644:	440b      	add	r3, r1
 8015646:	3308      	adds	r3, #8
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	4955      	ldr	r1, [pc, #340]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 801564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564e:	019b      	lsls	r3, r3, #6
 8015650:	440b      	add	r3, r1
 8015652:	3308      	adds	r3, #8
 8015654:	601a      	str	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8015656:	4a52      	ldr	r2, [pc, #328]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8015658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801565a:	019b      	lsls	r3, r3, #6
 801565c:	4413      	add	r3, r2
 801565e:	3314      	adds	r3, #20
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	2b02      	cmp	r3, #2
 8015664:	d115      	bne.n	8015692 <_Z18trained_model_initPFPvjjE+0x12a>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8015666:	494f      	ldr	r1, [pc, #316]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 8015668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801566a:	4613      	mov	r3, r2
 801566c:	005b      	lsls	r3, r3, #1
 801566e:	4413      	add	r3, r2
 8015670:	00db      	lsls	r3, r3, #3
 8015672:	440b      	add	r3, r1
 8015674:	3304      	adds	r3, #4
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	461a      	mov	r2, r3
 801567a:	4b41      	ldr	r3, [pc, #260]	; (8015780 <_Z18trained_model_initPFPvjjE+0x218>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	4413      	add	r3, r2
 8015680:	61bb      	str	r3, [r7, #24]

     tflTensors[i].data.data =  start;
 8015682:	4a47      	ldr	r2, [pc, #284]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8015684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015686:	019b      	lsls	r3, r3, #6
 8015688:	4413      	add	r3, r2
 801568a:	3304      	adds	r3, #4
 801568c:	69ba      	ldr	r2, [r7, #24]
 801568e:	601a      	str	r2, [r3, #0]
 8015690:	e00e      	b.n	80156b0 <_Z18trained_model_initPFPvjjE+0x148>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 8015692:	4944      	ldr	r1, [pc, #272]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 8015694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015696:	4613      	mov	r3, r2
 8015698:	005b      	lsls	r3, r3, #1
 801569a:	4413      	add	r3, r2
 801569c:	00db      	lsls	r3, r3, #3
 801569e:	440b      	add	r3, r1
 80156a0:	3304      	adds	r3, #4
 80156a2:	681a      	ldr	r2, [r3, #0]
 80156a4:	493e      	ldr	r1, [pc, #248]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80156a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a8:	019b      	lsls	r3, r3, #6
 80156aa:	440b      	add	r3, r1
 80156ac:	3304      	adds	r3, #4
 80156ae:	601a      	str	r2, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 80156b0:	4a3b      	ldr	r2, [pc, #236]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80156b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b4:	019b      	lsls	r3, r3, #6
 80156b6:	4413      	add	r3, r2
 80156b8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80156bc:	4939      	ldr	r1, [pc, #228]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 80156be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156c0:	4613      	mov	r3, r2
 80156c2:	005b      	lsls	r3, r3, #1
 80156c4:	4413      	add	r3, r2
 80156c6:	00db      	lsls	r3, r3, #3
 80156c8:	440b      	add	r3, r1
 80156ca:	f103 0210 	add.w	r2, r3, #16
 80156ce:	4603      	mov	r3, r0
 80156d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80156d4:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 80156d8:	4a31      	ldr	r2, [pc, #196]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80156da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156dc:	019b      	lsls	r3, r3, #6
 80156de:	4413      	add	r3, r2
 80156e0:	3330      	adds	r3, #48	; 0x30
 80156e2:	781b      	ldrb	r3, [r3, #0]
 80156e4:	2b01      	cmp	r3, #1
 80156e6:	d11b      	bne.n	8015720 <_Z18trained_model_initPFPvjjE+0x1b8>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 80156e8:	492e      	ldr	r1, [pc, #184]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 80156ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156ec:	4613      	mov	r3, r2
 80156ee:	005b      	lsls	r3, r3, #1
 80156f0:	4413      	add	r3, r2
 80156f2:	00db      	lsls	r3, r3, #3
 80156f4:	440b      	add	r3, r1
 80156f6:	3314      	adds	r3, #20
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	617b      	str	r3, [r7, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	685a      	ldr	r2, [r3, #4]
 8015702:	4927      	ldr	r1, [pc, #156]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8015704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015706:	019b      	lsls	r3, r3, #6
 8015708:	440b      	add	r3, r1
 801570a:	330c      	adds	r3, #12
 801570c:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	685a      	ldr	r2, [r3, #4]
 8015714:	4922      	ldr	r1, [pc, #136]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8015716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015718:	019b      	lsls	r3, r3, #6
 801571a:	440b      	add	r3, r1
 801571c:	3310      	adds	r3, #16
 801571e:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8015720:	4a1f      	ldr	r2, [pc, #124]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8015722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015724:	019b      	lsls	r3, r3, #6
 8015726:	4413      	add	r3, r2
 8015728:	3314      	adds	r3, #20
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	2b02      	cmp	r3, #2
 801572e:	d118      	bne.n	8015762 <_Z18trained_model_initPFPvjjE+0x1fa>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 8015730:	4a1b      	ldr	r2, [pc, #108]	; (80157a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8015732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015734:	019b      	lsls	r3, r3, #6
 8015736:	4413      	add	r3, r2
 8015738:	3304      	adds	r3, #4
 801573a:	6819      	ldr	r1, [r3, #0]
 801573c:	4819      	ldr	r0, [pc, #100]	; (80157a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 801573e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015740:	4613      	mov	r3, r2
 8015742:	005b      	lsls	r3, r3, #1
 8015744:	4413      	add	r3, r2
 8015746:	00db      	lsls	r3, r3, #3
 8015748:	4403      	add	r3, r0
 801574a:	330c      	adds	r3, #12
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	440b      	add	r3, r1
 8015750:	613b      	str	r3, [r7, #16]
      if (data_end_ptr > tensor_boundary) {
 8015752:	4b0d      	ldr	r3, [pc, #52]	; (8015788 <_Z18trained_model_initPFPvjjE+0x220>)
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	693a      	ldr	r2, [r7, #16]
 8015758:	429a      	cmp	r2, r3
 801575a:	d902      	bls.n	8015762 <_Z18trained_model_initPFPvjjE+0x1fa>
        tensor_boundary = data_end_ptr;
 801575c:	4a0a      	ldr	r2, [pc, #40]	; (8015788 <_Z18trained_model_initPFPvjjE+0x220>)
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 23; ++i) {
 8015762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015764:	3301      	adds	r3, #1
 8015766:	627b      	str	r3, [r7, #36]	; 0x24
 8015768:	e72e      	b.n	80155c8 <_Z18trained_model_initPFPvjjE+0x60>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801576a:	4b07      	ldr	r3, [pc, #28]	; (8015788 <_Z18trained_model_initPFPvjjE+0x220>)
 801576c:	681a      	ldr	r2, [r3, #0]
 801576e:	4b07      	ldr	r3, [pc, #28]	; (801578c <_Z18trained_model_initPFPvjjE+0x224>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	429a      	cmp	r2, r3
 8015774:	d91a      	bls.n	80157ac <_Z18trained_model_initPFPvjjE+0x244>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8015776:	480c      	ldr	r0, [pc, #48]	; (80157a8 <_Z18trained_model_initPFPvjjE+0x240>)
 8015778:	f005 fa4a 	bl	801ac10 <puts>
    return kTfLiteError;
 801577c:	2301      	movs	r3, #1
 801577e:	e0fd      	b.n	801597c <_Z18trained_model_initPFPvjjE+0x414>
 8015780:	20006990 	.word	0x20006990
 8015784:	0801e224 	.word	0x0801e224
 8015788:	20006994 	.word	0x20006994
 801578c:	20006998 	.word	0x20006998
 8015790:	2000699c 	.word	0x2000699c
 8015794:	08015401 	.word	0x08015401
 8015798:	080154cd 	.word	0x080154cd
 801579c:	08015525 	.word	0x08015525
 80157a0:	200069ec 	.word	0x200069ec
 80157a4:	20000104 	.word	0x20000104
 80157a8:	0801e24c 	.word	0x0801e24c
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
 80157ac:	f7fe fbf2 	bl	8013f94 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 80157b0:	4603      	mov	r3, r0
 80157b2:	4a74      	ldr	r2, [pc, #464]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 80157b4:	4614      	mov	r4, r2
 80157b6:	461d      	mov	r5, r3
 80157b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80157c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
 80157c4:	f7fc f8e6 	bl	8011994 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
 80157c8:	4602      	mov	r2, r0
 80157ca:	4b6e      	ldr	r3, [pc, #440]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 80157cc:	f103 0420 	add.w	r4, r3, #32
 80157d0:	4615      	mov	r5, r2
 80157d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80157da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
 80157de:	f7fe f9f1 	bl	8013bc4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 80157e2:	4602      	mov	r2, r0
 80157e4:	4b67      	ldr	r3, [pc, #412]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 80157e6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80157ea:	4615      	mov	r5, r2
 80157ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80157f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
 80157f8:	f7fc ff76 	bl	80126e8 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 80157fc:	4602      	mov	r2, r0
 80157fe:	4b61      	ldr	r3, [pc, #388]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 8015800:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8015804:	4615      	mov	r5, r2
 8015806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801580a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801580e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();
 8015812:	f7fe ffad 	bl	8014770 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
 8015816:	4602      	mov	r2, r0
 8015818:	4b5a      	ldr	r3, [pc, #360]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 801581a:	f103 0480 	add.w	r4, r3, #128	; 0x80
 801581e:	4615      	mov	r5, r2
 8015820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 11; ++i) {
 801582c:	2300      	movs	r3, #0
 801582e:	623b      	str	r3, [r7, #32]
 8015830:	6a3b      	ldr	r3, [r7, #32]
 8015832:	2b0a      	cmp	r3, #10
 8015834:	d86f      	bhi.n	8015916 <_Z18trained_model_initPFPvjjE+0x3ae>
    tflNodes[i].inputs = nodeData[i].inputs;
 8015836:	4a54      	ldr	r2, [pc, #336]	; (8015988 <_Z18trained_model_initPFPvjjE+0x420>)
 8015838:	6a3b      	ldr	r3, [r7, #32]
 801583a:	011b      	lsls	r3, r3, #4
 801583c:	4413      	add	r3, r2
 801583e:	6819      	ldr	r1, [r3, #0]
 8015840:	4852      	ldr	r0, [pc, #328]	; (801598c <_Z18trained_model_initPFPvjjE+0x424>)
 8015842:	6a3a      	ldr	r2, [r7, #32]
 8015844:	4613      	mov	r3, r2
 8015846:	00db      	lsls	r3, r3, #3
 8015848:	4413      	add	r3, r2
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	4403      	add	r3, r0
 801584e:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8015850:	4a4d      	ldr	r2, [pc, #308]	; (8015988 <_Z18trained_model_initPFPvjjE+0x420>)
 8015852:	6a3b      	ldr	r3, [r7, #32]
 8015854:	011b      	lsls	r3, r3, #4
 8015856:	4413      	add	r3, r2
 8015858:	3304      	adds	r3, #4
 801585a:	6819      	ldr	r1, [r3, #0]
 801585c:	484b      	ldr	r0, [pc, #300]	; (801598c <_Z18trained_model_initPFPvjjE+0x424>)
 801585e:	6a3a      	ldr	r2, [r7, #32]
 8015860:	4613      	mov	r3, r2
 8015862:	00db      	lsls	r3, r3, #3
 8015864:	4413      	add	r3, r2
 8015866:	009b      	lsls	r3, r3, #2
 8015868:	4403      	add	r3, r0
 801586a:	3304      	adds	r3, #4
 801586c:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801586e:	4a46      	ldr	r2, [pc, #280]	; (8015988 <_Z18trained_model_initPFPvjjE+0x420>)
 8015870:	6a3b      	ldr	r3, [r7, #32]
 8015872:	011b      	lsls	r3, r3, #4
 8015874:	4413      	add	r3, r2
 8015876:	3308      	adds	r3, #8
 8015878:	6819      	ldr	r1, [r3, #0]
 801587a:	4844      	ldr	r0, [pc, #272]	; (801598c <_Z18trained_model_initPFPvjjE+0x424>)
 801587c:	6a3a      	ldr	r2, [r7, #32]
 801587e:	4613      	mov	r3, r2
 8015880:	00db      	lsls	r3, r3, #3
 8015882:	4413      	add	r3, r2
 8015884:	009b      	lsls	r3, r3, #2
 8015886:	4403      	add	r3, r0
 8015888:	3314      	adds	r3, #20
 801588a:	6019      	str	r1, [r3, #0]
    tflNodes[i].custom_initial_data = nullptr;
 801588c:	493f      	ldr	r1, [pc, #252]	; (801598c <_Z18trained_model_initPFPvjjE+0x424>)
 801588e:	6a3a      	ldr	r2, [r7, #32]
 8015890:	4613      	mov	r3, r2
 8015892:	00db      	lsls	r3, r3, #3
 8015894:	4413      	add	r3, r2
 8015896:	009b      	lsls	r3, r3, #2
 8015898:	440b      	add	r3, r1
 801589a:	3318      	adds	r3, #24
 801589c:	2200      	movs	r2, #0
 801589e:	601a      	str	r2, [r3, #0]
    tflNodes[i].custom_initial_data_size = 0;
 80158a0:	493a      	ldr	r1, [pc, #232]	; (801598c <_Z18trained_model_initPFPvjjE+0x424>)
 80158a2:	6a3a      	ldr	r2, [r7, #32]
 80158a4:	4613      	mov	r3, r2
 80158a6:	00db      	lsls	r3, r3, #3
 80158a8:	4413      	add	r3, r2
 80158aa:	009b      	lsls	r3, r3, #2
 80158ac:	440b      	add	r3, r1
 80158ae:	331c      	adds	r3, #28
 80158b0:	2200      	movs	r2, #0
 80158b2:	601a      	str	r2, [r3, #0]
    if (registrations[nodeData[i].used_op_index].init) {
 80158b4:	4a34      	ldr	r2, [pc, #208]	; (8015988 <_Z18trained_model_initPFPvjjE+0x420>)
 80158b6:	6a3b      	ldr	r3, [r7, #32]
 80158b8:	011b      	lsls	r3, r3, #4
 80158ba:	4413      	add	r3, r2
 80158bc:	330c      	adds	r3, #12
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	4a30      	ldr	r2, [pc, #192]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 80158c2:	015b      	lsls	r3, r3, #5
 80158c4:	4413      	add	r3, r2
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d020      	beq.n	801590e <_Z18trained_model_initPFPvjjE+0x3a6>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80158cc:	4a2e      	ldr	r2, [pc, #184]	; (8015988 <_Z18trained_model_initPFPvjjE+0x420>)
 80158ce:	6a3b      	ldr	r3, [r7, #32]
 80158d0:	011b      	lsls	r3, r3, #4
 80158d2:	4413      	add	r3, r2
 80158d4:	330c      	adds	r3, #12
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	4a2a      	ldr	r2, [pc, #168]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 80158da:	015b      	lsls	r3, r3, #5
 80158dc:	4413      	add	r3, r2
 80158de:	681c      	ldr	r4, [r3, #0]
 80158e0:	492a      	ldr	r1, [pc, #168]	; (801598c <_Z18trained_model_initPFPvjjE+0x424>)
 80158e2:	6a3a      	ldr	r2, [r7, #32]
 80158e4:	4613      	mov	r3, r2
 80158e6:	00db      	lsls	r3, r3, #3
 80158e8:	4413      	add	r3, r2
 80158ea:	009b      	lsls	r3, r3, #2
 80158ec:	440b      	add	r3, r1
 80158ee:	3314      	adds	r3, #20
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2200      	movs	r2, #0
 80158f4:	4619      	mov	r1, r3
 80158f6:	4826      	ldr	r0, [pc, #152]	; (8015990 <_Z18trained_model_initPFPvjjE+0x428>)
 80158f8:	47a0      	blx	r4
 80158fa:	4601      	mov	r1, r0
 80158fc:	4823      	ldr	r0, [pc, #140]	; (801598c <_Z18trained_model_initPFPvjjE+0x424>)
 80158fe:	6a3a      	ldr	r2, [r7, #32]
 8015900:	4613      	mov	r3, r2
 8015902:	00db      	lsls	r3, r3, #3
 8015904:	4413      	add	r3, r2
 8015906:	009b      	lsls	r3, r3, #2
 8015908:	4403      	add	r3, r0
 801590a:	3310      	adds	r3, #16
 801590c:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 11; ++i) {
 801590e:	6a3b      	ldr	r3, [r7, #32]
 8015910:	3301      	adds	r3, #1
 8015912:	623b      	str	r3, [r7, #32]
 8015914:	e78c      	b.n	8015830 <_Z18trained_model_initPFPvjjE+0x2c8>
    }
  }
  for(size_t i = 0; i < 11; ++i) {
 8015916:	2300      	movs	r3, #0
 8015918:	61fb      	str	r3, [r7, #28]
 801591a:	69fb      	ldr	r3, [r7, #28]
 801591c:	2b0a      	cmp	r3, #10
 801591e:	d82c      	bhi.n	801597a <_Z18trained_model_initPFPvjjE+0x412>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8015920:	4a19      	ldr	r2, [pc, #100]	; (8015988 <_Z18trained_model_initPFPvjjE+0x420>)
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	011b      	lsls	r3, r3, #4
 8015926:	4413      	add	r3, r2
 8015928:	330c      	adds	r3, #12
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	4a15      	ldr	r2, [pc, #84]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 801592e:	015b      	lsls	r3, r3, #5
 8015930:	4413      	add	r3, r2
 8015932:	3308      	adds	r3, #8
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d01b      	beq.n	8015972 <_Z18trained_model_initPFPvjjE+0x40a>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801593a:	4a13      	ldr	r2, [pc, #76]	; (8015988 <_Z18trained_model_initPFPvjjE+0x420>)
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	011b      	lsls	r3, r3, #4
 8015940:	4413      	add	r3, r2
 8015942:	330c      	adds	r3, #12
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	4a0f      	ldr	r2, [pc, #60]	; (8015984 <_Z18trained_model_initPFPvjjE+0x41c>)
 8015948:	015b      	lsls	r3, r3, #5
 801594a:	4413      	add	r3, r2
 801594c:	3308      	adds	r3, #8
 801594e:	681c      	ldr	r4, [r3, #0]
 8015950:	69fa      	ldr	r2, [r7, #28]
 8015952:	4613      	mov	r3, r2
 8015954:	00db      	lsls	r3, r3, #3
 8015956:	4413      	add	r3, r2
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	4a0c      	ldr	r2, [pc, #48]	; (801598c <_Z18trained_model_initPFPvjjE+0x424>)
 801595c:	4413      	add	r3, r2
 801595e:	4619      	mov	r1, r3
 8015960:	480b      	ldr	r0, [pc, #44]	; (8015990 <_Z18trained_model_initPFPvjjE+0x428>)
 8015962:	47a0      	blx	r4
 8015964:	4603      	mov	r3, r0
 8015966:	73fb      	strb	r3, [r7, #15]
      if (status != kTfLiteOk) {
 8015968:	7bfb      	ldrb	r3, [r7, #15]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d001      	beq.n	8015972 <_Z18trained_model_initPFPvjjE+0x40a>
        return status;
 801596e:	7bfb      	ldrb	r3, [r7, #15]
 8015970:	e004      	b.n	801597c <_Z18trained_model_initPFPvjjE+0x414>
  for(size_t i = 0; i < 11; ++i) {
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	3301      	adds	r3, #1
 8015976:	61fb      	str	r3, [r7, #28]
 8015978:	e7cf      	b.n	801591a <_Z18trained_model_initPFPvjjE+0x3b2>
      }
    }
  }
  return kTfLiteOk;
 801597a:	2300      	movs	r3, #0
}
 801597c:	4618      	mov	r0, r3
 801597e:	3728      	adds	r7, #40	; 0x28
 8015980:	46bd      	mov	sp, r7
 8015982:	bdb0      	pop	{r4, r5, r7, pc}
 8015984:	20006fac 	.word	0x20006fac
 8015988:	0803c9f8 	.word	0x0803c9f8
 801598c:	2000704c 	.word	0x2000704c
 8015990:	2000699c 	.word	0x2000699c

08015994 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 8015994:	b480      	push	{r7}
 8015996:	b083      	sub	sp, #12
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801599c:	4b05      	ldr	r3, [pc, #20]	; (80159b4 <_Z19trained_model_inputi+0x20>)
 801599e:	689a      	ldr	r2, [r3, #8]
 80159a0:	2300      	movs	r3, #0
 80159a2:	019b      	lsls	r3, r3, #6
 80159a4:	4413      	add	r3, r2
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	370c      	adds	r7, #12
 80159aa:	46bd      	mov	sp, r7
 80159ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b0:	4770      	bx	lr
 80159b2:	bf00      	nop
 80159b4:	2000699c 	.word	0x2000699c

080159b8 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
 80159b8:	b480      	push	{r7}
 80159ba:	b083      	sub	sp, #12
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80159c0:	4b05      	ldr	r3, [pc, #20]	; (80159d8 <_Z20trained_model_outputi+0x20>)
 80159c2:	689a      	ldr	r2, [r3, #8]
 80159c4:	2316      	movs	r3, #22
 80159c6:	019b      	lsls	r3, r3, #6
 80159c8:	4413      	add	r3, r2
}
 80159ca:	4618      	mov	r0, r3
 80159cc:	370c      	adds	r7, #12
 80159ce:	46bd      	mov	sp, r7
 80159d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d4:	4770      	bx	lr
 80159d6:	bf00      	nop
 80159d8:	2000699c 	.word	0x2000699c

080159dc <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 80159dc:	b590      	push	{r4, r7, lr}
 80159de:	b083      	sub	sp, #12
 80159e0:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 11; ++i) {
 80159e2:	2300      	movs	r3, #0
 80159e4:	607b      	str	r3, [r7, #4]
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2b0a      	cmp	r3, #10
 80159ea:	d81f      	bhi.n	8015a2c <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 80159ec:	4a12      	ldr	r2, [pc, #72]	; (8015a38 <_Z20trained_model_invokev+0x5c>)
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	011b      	lsls	r3, r3, #4
 80159f2:	4413      	add	r3, r2
 80159f4:	330c      	adds	r3, #12
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	4a10      	ldr	r2, [pc, #64]	; (8015a3c <_Z20trained_model_invokev+0x60>)
 80159fa:	015b      	lsls	r3, r3, #5
 80159fc:	4413      	add	r3, r2
 80159fe:	330c      	adds	r3, #12
 8015a00:	681c      	ldr	r4, [r3, #0]
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	4613      	mov	r3, r2
 8015a06:	00db      	lsls	r3, r3, #3
 8015a08:	4413      	add	r3, r2
 8015a0a:	009b      	lsls	r3, r3, #2
 8015a0c:	4a0c      	ldr	r2, [pc, #48]	; (8015a40 <_Z20trained_model_invokev+0x64>)
 8015a0e:	4413      	add	r3, r2
 8015a10:	4619      	mov	r1, r3
 8015a12:	480c      	ldr	r0, [pc, #48]	; (8015a44 <_Z20trained_model_invokev+0x68>)
 8015a14:	47a0      	blx	r4
 8015a16:	4603      	mov	r3, r0
 8015a18:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8015a1a:	78fb      	ldrb	r3, [r7, #3]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d001      	beq.n	8015a24 <_Z20trained_model_invokev+0x48>
      return status;
 8015a20:	78fb      	ldrb	r3, [r7, #3]
 8015a22:	e004      	b.n	8015a2e <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 11; ++i) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	3301      	adds	r3, #1
 8015a28:	607b      	str	r3, [r7, #4]
 8015a2a:	e7dc      	b.n	80159e6 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8015a2c:	2300      	movs	r3, #0
}
 8015a2e:	4618      	mov	r0, r3
 8015a30:	370c      	adds	r7, #12
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bd90      	pop	{r4, r7, pc}
 8015a36:	bf00      	nop
 8015a38:	0803c9f8 	.word	0x0803c9f8
 8015a3c:	20006fac 	.word	0x20006fac
 8015a40:	2000704c 	.word	0x2000704c
 8015a44:	2000699c 	.word	0x2000699c

08015a48 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b084      	sub	sp, #16
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8015a50:	4b15      	ldr	r3, [pc, #84]	; (8015aa8 <_Z19trained_model_resetPFvPvE+0x60>)
 8015a52:	681a      	ldr	r2, [r3, #0]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	4610      	mov	r0, r2
 8015a58:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 8015a5a:	4814      	ldr	r0, [pc, #80]	; (8015aac <_Z19trained_model_resetPFvPvE+0x64>)
 8015a5c:	f000 f8ff 	bl	8015c5e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8015a60:	2300      	movs	r3, #0
 8015a62:	60fb      	str	r3, [r7, #12]
 8015a64:	4812      	ldr	r0, [pc, #72]	; (8015ab0 <_Z19trained_model_resetPFvPvE+0x68>)
 8015a66:	f000 f908 	bl	8015c7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8015a6a:	4602      	mov	r2, r0
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	4293      	cmp	r3, r2
 8015a70:	bf34      	ite	cc
 8015a72:	2301      	movcc	r3, #1
 8015a74:	2300      	movcs	r3, #0
 8015a76:	b2db      	uxtb	r3, r3
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d00c      	beq.n	8015a96 <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 8015a7c:	68f9      	ldr	r1, [r7, #12]
 8015a7e:	480c      	ldr	r0, [pc, #48]	; (8015ab0 <_Z19trained_model_resetPFvPvE+0x68>)
 8015a80:	f000 f90b 	bl	8015c9a <_ZNSt6vectorIPvSaIS0_EEixEj>
 8015a84:	4603      	mov	r3, r0
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f004 fc5b 	bl	801a344 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	3301      	adds	r3, #1
 8015a92:	60fb      	str	r3, [r7, #12]
 8015a94:	e7e6      	b.n	8015a64 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 8015a96:	4806      	ldr	r0, [pc, #24]	; (8015ab0 <_Z19trained_model_resetPFvPvE+0x68>)
 8015a98:	f000 f90f 	bl	8015cba <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 8015a9c:	2300      	movs	r3, #0
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3710      	adds	r7, #16
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	20006990 	.word	0x20006990
 8015aac:	200071e4 	.word	0x200071e4
 8015ab0:	200071d8 	.word	0x200071d8

08015ab4 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 f90a 	bl	8015cd6 <_ZNSaIPvEC1Ev>
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f000 f912 	bl	8015cee <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	4618      	mov	r0, r3
 8015ace:	3708      	adds	r7, #8
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <_ZNSaIPvED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b082      	sub	sp, #8
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f000 f91a 	bl	8015d16 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	3708      	adds	r7, #8
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	689a      	ldr	r2, [r3, #8]
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	1ad3      	subs	r3, r2, r3
 8015b02:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8015b04:	461a      	mov	r2, r3
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 f910 	bl	8015d2c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7ff fc50 	bl	80153b4 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	4618      	mov	r0, r3
 8015b18:	3708      	adds	r7, #8
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}

08015b1e <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8015b1e:	b580      	push	{r7, lr}
 8015b20:	b082      	sub	sp, #8
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	6078      	str	r0, [r7, #4]
 8015b26:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	685a      	ldr	r2, [r3, #4]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	689b      	ldr	r3, [r3, #8]
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d00c      	beq.n	8015b4e <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	685b      	ldr	r3, [r3, #4]
 8015b3a:	683a      	ldr	r2, [r7, #0]
 8015b3c:	4619      	mov	r1, r3
 8015b3e:	f000 f908 	bl	8015d52 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	1d1a      	adds	r2, r3, #4
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	605a      	str	r2, [r3, #4]
      }
 8015b4c:	e008      	b.n	8015b60 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f000 f912 	bl	8015d78 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 8015b54:	4603      	mov	r3, r0
 8015b56:	683a      	ldr	r2, [r7, #0]
 8015b58:	4619      	mov	r1, r3
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f000 f934 	bl	8015dc8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8015b60:	bf00      	nop
 8015b62:	3708      	adds	r7, #8
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}

08015b68 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	f000 f9e5 	bl	8015f40 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f000 f9ed 	bl	8015f58 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	4618      	mov	r0, r3
 8015b82:	3708      	adds	r7, #8
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b082      	sub	sp, #8
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f000 f9f5 	bl	8015f80 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	689a      	ldr	r2, [r3, #8]
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	1ad3      	subs	r3, r2, r3
 8015bb6:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8015bb8:	461a      	mov	r2, r3
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f000 f9eb 	bl	8015f96 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7ff fc5c 	bl	8015480 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3708      	adds	r7, #8
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}

08015bd2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8015bd2:	b580      	push	{r7, lr}
 8015bd4:	b082      	sub	sp, #8
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	6078      	str	r0, [r7, #4]
 8015bda:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	685a      	ldr	r2, [r3, #4]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	689b      	ldr	r3, [r3, #8]
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d00d      	beq.n	8015c04 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	685b      	ldr	r3, [r3, #4]
 8015bee:	683a      	ldr	r2, [r7, #0]
 8015bf0:	4619      	mov	r1, r3
 8015bf2:	f000 f9e3 	bl	8015fbc <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	f103 0208 	add.w	r2, r3, #8
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	605a      	str	r2, [r3, #4]
      }
 8015c02:	e008      	b.n	8015c16 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f000 f9ec 	bl	8015fe2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	683a      	ldr	r2, [r7, #0]
 8015c0e:	4619      	mov	r1, r3
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 fa0d 	bl	8016030 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8015c16:	bf00      	nop
 8015c18:	3708      	adds	r7, #8
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8015c1e:	b480      	push	{r7}
 8015c20:	b083      	sub	sp, #12
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	685a      	ldr	r2, [r3, #4]
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	1ad3      	subs	r3, r2, r3
 8015c30:	10db      	asrs	r3, r3, #3
 8015c32:	4618      	mov	r0, r3
 8015c34:	370c      	adds	r7, #12
 8015c36:	46bd      	mov	sp, r7
 8015c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3c:	4770      	bx	lr

08015c3e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8015c3e:	b480      	push	{r7}
 8015c40:	b083      	sub	sp, #12
 8015c42:	af00      	add	r7, sp, #0
 8015c44:	6078      	str	r0, [r7, #4]
 8015c46:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681a      	ldr	r2, [r3, #0]
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	00db      	lsls	r3, r3, #3
 8015c50:	4413      	add	r3, r2
      }
 8015c52:	4618      	mov	r0, r3
 8015c54:	370c      	adds	r7, #12
 8015c56:	46bd      	mov	sp, r7
 8015c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5c:	4770      	bx	lr

08015c5e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8015c5e:	b580      	push	{r7, lr}
 8015c60:	b082      	sub	sp, #8
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f000 fa9b 	bl	80161a8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 8015c72:	bf00      	nop
 8015c74:	3708      	adds	r7, #8
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}

08015c7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8015c7a:	b480      	push	{r7}
 8015c7c:	b083      	sub	sp, #12
 8015c7e:	af00      	add	r7, sp, #0
 8015c80:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	685a      	ldr	r2, [r3, #4]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	1ad3      	subs	r3, r2, r3
 8015c8c:	109b      	asrs	r3, r3, #2
 8015c8e:	4618      	mov	r0, r3
 8015c90:	370c      	adds	r7, #12
 8015c92:	46bd      	mov	sp, r7
 8015c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c98:	4770      	bx	lr

08015c9a <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8015c9a:	b480      	push	{r7}
 8015c9c:	b083      	sub	sp, #12
 8015c9e:	af00      	add	r7, sp, #0
 8015ca0:	6078      	str	r0, [r7, #4]
 8015ca2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681a      	ldr	r2, [r3, #0]
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	009b      	lsls	r3, r3, #2
 8015cac:	4413      	add	r3, r2
      }
 8015cae:	4618      	mov	r0, r3
 8015cb0:	370c      	adds	r7, #12
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb8:	4770      	bx	lr

08015cba <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8015cba:	b580      	push	{r7, lr}
 8015cbc:	b082      	sub	sp, #8
 8015cbe:	af00      	add	r7, sp, #0
 8015cc0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f000 fa8e 	bl	80161ea <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 8015cce:	bf00      	nop
 8015cd0:	3708      	adds	r7, #8
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}

08015cd6 <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b082      	sub	sp, #8
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	6078      	str	r0, [r7, #4]
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f000 faa4 	bl	801622c <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	3708      	adds	r7, #8
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}

08015cee <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8015cee:	b480      	push	{r7}
 8015cf0:	b083      	sub	sp, #12
 8015cf2:	af00      	add	r7, sp, #0
 8015cf4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	601a      	str	r2, [r3, #0]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	605a      	str	r2, [r3, #4]
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2200      	movs	r2, #0
 8015d06:	609a      	str	r2, [r3, #8]
	{ }
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	370c      	adds	r7, #12
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d14:	4770      	bx	lr

08015d16 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015d16:	b480      	push	{r7}
 8015d18:	b083      	sub	sp, #12
 8015d1a:	af00      	add	r7, sp, #0
 8015d1c:	6078      	str	r0, [r7, #4]
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	4618      	mov	r0, r3
 8015d22:	370c      	adds	r7, #12
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr

08015d2c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b084      	sub	sp, #16
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	60f8      	str	r0, [r7, #12]
 8015d34:	60b9      	str	r1, [r7, #8]
 8015d36:	607a      	str	r2, [r7, #4]
	if (__p)
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d005      	beq.n	8015d4a <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	687a      	ldr	r2, [r7, #4]
 8015d42:	68b9      	ldr	r1, [r7, #8]
 8015d44:	4618      	mov	r0, r3
 8015d46:	f000 fa7c 	bl	8016242 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8015d4a:	bf00      	nop
 8015d4c:	3710      	adds	r7, #16
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}

08015d52 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8015d52:	b580      	push	{r7, lr}
 8015d54:	b084      	sub	sp, #16
 8015d56:	af00      	add	r7, sp, #0
 8015d58:	60f8      	str	r0, [r7, #12]
 8015d5a:	60b9      	str	r1, [r7, #8]
 8015d5c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f000 fa7e 	bl	8016260 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8015d64:	4603      	mov	r3, r0
 8015d66:	461a      	mov	r2, r3
 8015d68:	68b9      	ldr	r1, [r7, #8]
 8015d6a:	68f8      	ldr	r0, [r7, #12]
 8015d6c:	f000 fa83 	bl	8016276 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8015d70:	bf00      	nop
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b084      	sub	sp, #16
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	1d1a      	adds	r2, r3, #4
 8015d84:	f107 030c 	add.w	r3, r7, #12
 8015d88:	4611      	mov	r1, r2
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f000 fa89 	bl	80162a2 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	4618      	mov	r0, r3
 8015d94:	3710      	adds	r7, #16
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}

08015d9a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8015d9a:	b580      	push	{r7, lr}
 8015d9c:	b082      	sub	sp, #8
 8015d9e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8015da0:	4618      	mov	r0, r3
 8015da2:	f000 f805 	bl	8015db0 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8015da6:	4603      	mov	r3, r0
      }
 8015da8:	4618      	mov	r0, r3
 8015daa:	3708      	adds	r7, #8
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8015db0:	b480      	push	{r7}
 8015db2:	b083      	sub	sp, #12
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8015db8:	2301      	movs	r3, #1
      }
 8015dba:	4618      	mov	r0, r3
 8015dbc:	370c      	adds	r7, #12
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc4:	4770      	bx	lr
	...

08015dc8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8015dc8:	b5b0      	push	{r4, r5, r7, lr}
 8015dca:	b08c      	sub	sp, #48	; 0x30
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	60b9      	str	r1, [r7, #8]
 8015dd2:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8015dd4:	4a59      	ldr	r2, [pc, #356]	; (8015f3c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8015dd6:	2101      	movs	r1, #1
 8015dd8:	68f8      	ldr	r0, [r7, #12]
 8015dda:	f000 fa72 	bl	80162c2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 8015dde:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	685b      	ldr	r3, [r3, #4]
 8015dea:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8015dec:	68f8      	ldr	r0, [r7, #12]
 8015dee:	f000 faaf 	bl	8016350 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 8015df2:	4603      	mov	r3, r0
 8015df4:	617b      	str	r3, [r7, #20]
 8015df6:	f107 0214 	add.w	r2, r7, #20
 8015dfa:	f107 0308 	add.w	r3, r7, #8
 8015dfe:	4611      	mov	r1, r2
 8015e00:	4618      	mov	r0, r3
 8015e02:	f000 fab5 	bl	8016370 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8015e06:	4603      	mov	r3, r0
 8015e08:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f000 fac3 	bl	801639a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8015e14:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8015e16:	69bb      	ldr	r3, [r7, #24]
 8015e18:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8015e1a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8015e1c:	69fb      	ldr	r3, [r7, #28]
 8015e1e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8015e20:	69ba      	ldr	r2, [r7, #24]
 8015e22:	18d5      	adds	r5, r2, r3
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f000 fa1b 	bl	8016260 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	461a      	mov	r2, r3
 8015e2e:	4629      	mov	r1, r5
 8015e30:	4620      	mov	r0, r4
 8015e32:	f7ff ff8e 	bl	8015d52 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8015e36:	2300      	movs	r3, #0
 8015e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8015e3a:	f7ff ffae 	bl	8015d9a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d027      	beq.n	8015e94 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8015e44:	f107 0308 	add.w	r3, r7, #8
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f000 face 	bl	80163ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	4618      	mov	r0, r3
 8015e56:	f000 fad3 	bl	8016400 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8015e5a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8015e5c:	69ba      	ldr	r2, [r7, #24]
 8015e5e:	4621      	mov	r1, r4
 8015e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e62:	f000 faae 	bl	80163c2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8015e66:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8015e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6a:	3304      	adds	r3, #4
 8015e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8015e6e:	f107 0308 	add.w	r3, r7, #8
 8015e72:	4618      	mov	r0, r3
 8015e74:	f000 fab9 	bl	80163ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f000 fabe 	bl	8016400 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8015e84:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8015e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e88:	6a39      	ldr	r1, [r7, #32]
 8015e8a:	4620      	mov	r0, r4
 8015e8c:	f000 fa99 	bl	80163c2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8015e90:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015e92:	e026      	b.n	8015ee2 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8015e94:	f107 0308 	add.w	r3, r7, #8
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f000 faa6 	bl	80163ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f000 faab 	bl	8016400 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8015eaa:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8015eac:	69ba      	ldr	r2, [r7, #24]
 8015eae:	4621      	mov	r1, r4
 8015eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015eb2:	f000 fab0 	bl	8016416 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8015eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8015eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eba:	3304      	adds	r3, #4
 8015ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8015ebe:	f107 0308 	add.w	r3, r7, #8
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f000 fa91 	bl	80163ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f000 fa96 	bl	8016400 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8015ed4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8015ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ed8:	6a39      	ldr	r1, [r7, #32]
 8015eda:	4620      	mov	r0, r4
 8015edc:	f000 fa9b 	bl	8016416 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8015ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8015ee2:	f7ff ff5a 	bl	8015d9a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	f083 0301 	eor.w	r3, r3, #1
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d009      	beq.n	8015f06 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f000 fa83 	bl	8016400 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8015efa:	4603      	mov	r3, r0
 8015efc:	461a      	mov	r2, r3
 8015efe:	6a39      	ldr	r1, [r7, #32]
 8015f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f02:	f000 faa1 	bl	8016448 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 8015f06:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	689a      	ldr	r2, [r3, #8]
 8015f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0e:	1ad3      	subs	r3, r2, r3
 8015f10:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8015f12:	461a      	mov	r2, r3
 8015f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f16:	f7ff ff09 	bl	8015d2c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	69ba      	ldr	r2, [r7, #24]
 8015f1e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f24:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f28:	009b      	lsls	r3, r3, #2
 8015f2a:	69ba      	ldr	r2, [r7, #24]
 8015f2c:	441a      	add	r2, r3
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	609a      	str	r2, [r3, #8]
    }
 8015f32:	bf00      	nop
 8015f34:	3730      	adds	r7, #48	; 0x30
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bdb0      	pop	{r4, r5, r7, pc}
 8015f3a:	bf00      	nop
 8015f3c:	0801e2a0 	.word	0x0801e2a0

08015f40 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f000 fa8b 	bl	8016464 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	4618      	mov	r0, r3
 8015f52:	3708      	adds	r7, #8
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}

08015f58 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8015f58:	b480      	push	{r7}
 8015f5a:	b083      	sub	sp, #12
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2200      	movs	r2, #0
 8015f64:	601a      	str	r2, [r3, #0]
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	605a      	str	r2, [r3, #4]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	609a      	str	r2, [r3, #8]
	{ }
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	4618      	mov	r0, r3
 8015f76:	370c      	adds	r7, #12
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7e:	4770      	bx	lr

08015f80 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8015f80:	b480      	push	{r7}
 8015f82:	b083      	sub	sp, #12
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	370c      	adds	r7, #12
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f94:	4770      	bx	lr

08015f96 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8015f96:	b580      	push	{r7, lr}
 8015f98:	b084      	sub	sp, #16
 8015f9a:	af00      	add	r7, sp, #0
 8015f9c:	60f8      	str	r0, [r7, #12]
 8015f9e:	60b9      	str	r1, [r7, #8]
 8015fa0:	607a      	str	r2, [r7, #4]
	if (__p)
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d005      	beq.n	8015fb4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	68b9      	ldr	r1, [r7, #8]
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f000 fa63 	bl	801647a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8015fb4:	bf00      	nop
 8015fb6:	3710      	adds	r7, #16
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}

08015fbc <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b084      	sub	sp, #16
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f000 fa65 	bl	8016498 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	461a      	mov	r2, r3
 8015fd2:	68b9      	ldr	r1, [r7, #8]
 8015fd4:	68f8      	ldr	r0, [r7, #12]
 8015fd6:	f000 fa6a 	bl	80164ae <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8015fda:	bf00      	nop
 8015fdc:	3710      	adds	r7, #16
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}

08015fe2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8015fe2:	b580      	push	{r7, lr}
 8015fe4:	b084      	sub	sp, #16
 8015fe6:	af00      	add	r7, sp, #0
 8015fe8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	1d1a      	adds	r2, r3, #4
 8015fee:	f107 030c 	add.w	r3, r7, #12
 8015ff2:	4611      	mov	r1, r2
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f000 fa73 	bl	80164e0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	3710      	adds	r7, #16
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}

08016004 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8016004:	b580      	push	{r7, lr}
 8016006:	b082      	sub	sp, #8
 8016008:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 801600a:	4618      	mov	r0, r3
 801600c:	f000 f805 	bl	801601a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8016010:	4603      	mov	r3, r0
      }
 8016012:	4618      	mov	r0, r3
 8016014:	3708      	adds	r7, #8
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}

0801601a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 801601a:	b480      	push	{r7}
 801601c:	b083      	sub	sp, #12
 801601e:	af00      	add	r7, sp, #0
 8016020:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8016022:	2301      	movs	r3, #1
      }
 8016024:	4618      	mov	r0, r3
 8016026:	370c      	adds	r7, #12
 8016028:	46bd      	mov	sp, r7
 801602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602e:	4770      	bx	lr

08016030 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016030:	b5b0      	push	{r4, r5, r7, lr}
 8016032:	b08c      	sub	sp, #48	; 0x30
 8016034:	af00      	add	r7, sp, #0
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 801603c:	4a59      	ldr	r2, [pc, #356]	; (80161a4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 801603e:	2101      	movs	r1, #1
 8016040:	68f8      	ldr	r0, [r7, #12]
 8016042:	f000 fa5d 	bl	8016500 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 8016046:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8016054:	68f8      	ldr	r0, [r7, #12]
 8016056:	f000 fa9a 	bl	801658e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 801605a:	4603      	mov	r3, r0
 801605c:	617b      	str	r3, [r7, #20]
 801605e:	f107 0214 	add.w	r2, r7, #20
 8016062:	f107 0308 	add.w	r3, r7, #8
 8016066:	4611      	mov	r1, r2
 8016068:	4618      	mov	r0, r3
 801606a:	f000 faa0 	bl	80165ae <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801606e:	4603      	mov	r3, r0
 8016070:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016076:	4618      	mov	r0, r3
 8016078:	f000 faae 	bl	80165d8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 801607c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8016082:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8016084:	69fb      	ldr	r3, [r7, #28]
 8016086:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8016088:	69ba      	ldr	r2, [r7, #24]
 801608a:	18d5      	adds	r5, r2, r3
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f000 fa03 	bl	8016498 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8016092:	4603      	mov	r3, r0
 8016094:	461a      	mov	r2, r3
 8016096:	4629      	mov	r1, r5
 8016098:	4620      	mov	r0, r4
 801609a:	f7ff ff8f 	bl	8015fbc <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801609e:	2300      	movs	r3, #0
 80160a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80160a2:	f7ff ffaf 	bl	8016004 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d027      	beq.n	80160fc <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80160ac:	f107 0308 	add.w	r3, r7, #8
 80160b0:	4618      	mov	r0, r3
 80160b2:	f000 fab9 	bl	8016628 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80160b6:	4603      	mov	r3, r0
 80160b8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	4618      	mov	r0, r3
 80160be:	f000 fabe 	bl	801663e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80160c2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80160c4:	69ba      	ldr	r2, [r7, #24]
 80160c6:	4621      	mov	r1, r4
 80160c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160ca:	f000 fa99 	bl	8016600 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80160ce:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80160d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d2:	3308      	adds	r3, #8
 80160d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80160d6:	f107 0308 	add.w	r3, r7, #8
 80160da:	4618      	mov	r0, r3
 80160dc:	f000 faa4 	bl	8016628 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80160e0:	4603      	mov	r3, r0
 80160e2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	4618      	mov	r0, r3
 80160e8:	f000 faa9 	bl	801663e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80160ec:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80160ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160f0:	6a39      	ldr	r1, [r7, #32]
 80160f2:	4620      	mov	r0, r4
 80160f4:	f000 fa84 	bl	8016600 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80160f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80160fa:	e026      	b.n	801614a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 80160fc:	f107 0308 	add.w	r3, r7, #8
 8016100:	4618      	mov	r0, r3
 8016102:	f000 fa91 	bl	8016628 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016106:	4603      	mov	r3, r0
 8016108:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	4618      	mov	r0, r3
 801610e:	f000 fa96 	bl	801663e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016112:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8016114:	69ba      	ldr	r2, [r7, #24]
 8016116:	4621      	mov	r1, r4
 8016118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801611a:	f000 fa9b 	bl	8016654 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 801611e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016122:	3308      	adds	r3, #8
 8016124:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8016126:	f107 0308 	add.w	r3, r7, #8
 801612a:	4618      	mov	r0, r3
 801612c:	f000 fa7c 	bl	8016628 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016130:	4603      	mov	r3, r0
 8016132:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	4618      	mov	r0, r3
 8016138:	f000 fa81 	bl	801663e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801613c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 801613e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016140:	6a39      	ldr	r1, [r7, #32]
 8016142:	4620      	mov	r0, r4
 8016144:	f000 fa86 	bl	8016654 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8016148:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 801614a:	f7ff ff5b 	bl	8016004 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 801614e:	4603      	mov	r3, r0
 8016150:	f083 0301 	eor.w	r3, r3, #1
 8016154:	b2db      	uxtb	r3, r3
 8016156:	2b00      	cmp	r3, #0
 8016158:	d009      	beq.n	801616e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	4618      	mov	r0, r3
 801615e:	f000 fa6e 	bl	801663e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016162:	4603      	mov	r3, r0
 8016164:	461a      	mov	r2, r3
 8016166:	6a39      	ldr	r1, [r7, #32]
 8016168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801616a:	f000 fa8c 	bl	8016686 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 801616e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	689a      	ldr	r2, [r3, #8]
 8016174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016176:	1ad3      	subs	r3, r2, r3
 8016178:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 801617a:	461a      	mov	r2, r3
 801617c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801617e:	f7ff ff0a 	bl	8015f96 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	69ba      	ldr	r2, [r7, #24]
 8016186:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801618c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016190:	00db      	lsls	r3, r3, #3
 8016192:	69ba      	ldr	r2, [r7, #24]
 8016194:	441a      	add	r2, r3
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	609a      	str	r2, [r3, #8]
    }
 801619a:	bf00      	nop
 801619c:	3730      	adds	r7, #48	; 0x30
 801619e:	46bd      	mov	sp, r7
 80161a0:	bdb0      	pop	{r4, r5, r7, pc}
 80161a2:	bf00      	nop
 80161a4:	0801e2a0 	.word	0x0801e2a0

080161a8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80161a8:	b590      	push	{r4, r7, lr}
 80161aa:	b085      	sub	sp, #20
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	685a      	ldr	r2, [r3, #4]
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	1ad3      	subs	r3, r2, r3
 80161ba:	10db      	asrs	r3, r3, #3
 80161bc:	60fb      	str	r3, [r7, #12]
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d00e      	beq.n	80161e2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	4618      	mov	r0, r3
 80161cc:	f000 fa37 	bl	801663e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80161d0:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80161d2:	461a      	mov	r2, r3
 80161d4:	4621      	mov	r1, r4
 80161d6:	6838      	ldr	r0, [r7, #0]
 80161d8:	f000 fa55 	bl	8016686 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	683a      	ldr	r2, [r7, #0]
 80161e0:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80161e2:	bf00      	nop
 80161e4:	3714      	adds	r7, #20
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd90      	pop	{r4, r7, pc}

080161ea <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80161ea:	b590      	push	{r4, r7, lr}
 80161ec:	b085      	sub	sp, #20
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	6078      	str	r0, [r7, #4]
 80161f2:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	685a      	ldr	r2, [r3, #4]
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	1ad3      	subs	r3, r2, r3
 80161fc:	109b      	asrs	r3, r3, #2
 80161fe:	60fb      	str	r3, [r7, #12]
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d00e      	beq.n	8016224 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	4618      	mov	r0, r3
 801620e:	f000 f8f7 	bl	8016400 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016212:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8016214:	461a      	mov	r2, r3
 8016216:	4621      	mov	r1, r4
 8016218:	6838      	ldr	r0, [r7, #0]
 801621a:	f000 f915 	bl	8016448 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	683a      	ldr	r2, [r7, #0]
 8016222:	605a      	str	r2, [r3, #4]
      }
 8016224:	bf00      	nop
 8016226:	3714      	adds	r7, #20
 8016228:	46bd      	mov	sp, r7
 801622a:	bd90      	pop	{r4, r7, pc}

0801622c <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	4618      	mov	r0, r3
 8016238:	370c      	adds	r7, #12
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr

08016242 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8016242:	b580      	push	{r7, lr}
 8016244:	b084      	sub	sp, #16
 8016246:	af00      	add	r7, sp, #0
 8016248:	60f8      	str	r0, [r7, #12]
 801624a:	60b9      	str	r1, [r7, #8]
 801624c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801624e:	687a      	ldr	r2, [r7, #4]
 8016250:	68b9      	ldr	r1, [r7, #8]
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	f000 fa25 	bl	80166a2 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 8016258:	bf00      	nop
 801625a:	3710      	adds	r7, #16
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}

08016260 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016260:	b480      	push	{r7}
 8016262:	b083      	sub	sp, #12
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	4618      	mov	r0, r3
 801626c:	370c      	adds	r7, #12
 801626e:	46bd      	mov	sp, r7
 8016270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016274:	4770      	bx	lr

08016276 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8016276:	b590      	push	{r4, r7, lr}
 8016278:	b085      	sub	sp, #20
 801627a:	af00      	add	r7, sp, #0
 801627c:	60f8      	str	r0, [r7, #12]
 801627e:	60b9      	str	r1, [r7, #8]
 8016280:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f7ff ffec 	bl	8016260 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016288:	4603      	mov	r3, r0
 801628a:	681c      	ldr	r4, [r3, #0]
 801628c:	68bb      	ldr	r3, [r7, #8]
 801628e:	4619      	mov	r1, r3
 8016290:	2004      	movs	r0, #4
 8016292:	f7ea fecb 	bl	800102c <_ZnwjPv>
 8016296:	4603      	mov	r3, r0
 8016298:	601c      	str	r4, [r3, #0]
 801629a:	bf00      	nop
 801629c:	3714      	adds	r7, #20
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd90      	pop	{r4, r7, pc}

080162a2 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80162a2:	b480      	push	{r7}
 80162a4:	b083      	sub	sp, #12
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	6078      	str	r0, [r7, #4]
 80162aa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	681a      	ldr	r2, [r3, #0]
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	601a      	str	r2, [r3, #0]
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	4618      	mov	r0, r3
 80162b8:	370c      	adds	r7, #12
 80162ba:	46bd      	mov	sp, r7
 80162bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c0:	4770      	bx	lr

080162c2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80162c2:	b590      	push	{r4, r7, lr}
 80162c4:	b087      	sub	sp, #28
 80162c6:	af00      	add	r7, sp, #0
 80162c8:	60f8      	str	r0, [r7, #12]
 80162ca:	60b9      	str	r1, [r7, #8]
 80162cc:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80162ce:	68f8      	ldr	r0, [r7, #12]
 80162d0:	f000 f9f4 	bl	80166bc <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 80162d4:	4604      	mov	r4, r0
 80162d6:	68f8      	ldr	r0, [r7, #12]
 80162d8:	f7ff fccf 	bl	8015c7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80162dc:	4603      	mov	r3, r0
 80162de:	1ae2      	subs	r2, r4, r3
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	bf34      	ite	cc
 80162e6:	2301      	movcc	r3, #1
 80162e8:	2300      	movcs	r3, #0
 80162ea:	b2db      	uxtb	r3, r3
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d002      	beq.n	80162f6 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f000 fe8d 	bl	8017010 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80162f6:	68f8      	ldr	r0, [r7, #12]
 80162f8:	f7ff fcbf 	bl	8015c7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80162fc:	4604      	mov	r4, r0
 80162fe:	68f8      	ldr	r0, [r7, #12]
 8016300:	f7ff fcbb 	bl	8015c7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8016304:	4603      	mov	r3, r0
 8016306:	613b      	str	r3, [r7, #16]
 8016308:	f107 0208 	add.w	r2, r7, #8
 801630c:	f107 0310 	add.w	r3, r7, #16
 8016310:	4611      	mov	r1, r2
 8016312:	4618      	mov	r0, r3
 8016314:	f7f0 fad4 	bl	80068c0 <_ZSt3maxIjERKT_S2_S2_>
 8016318:	4603      	mov	r3, r0
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	4423      	add	r3, r4
 801631e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	f7ff fcaa 	bl	8015c7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8016326:	4602      	mov	r2, r0
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	4293      	cmp	r3, r2
 801632c:	d306      	bcc.n	801633c <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 801632e:	68f8      	ldr	r0, [r7, #12]
 8016330:	f000 f9c4 	bl	80166bc <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8016334:	4602      	mov	r2, r0
 8016336:	697b      	ldr	r3, [r7, #20]
 8016338:	4293      	cmp	r3, r2
 801633a:	d904      	bls.n	8016346 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 801633c:	68f8      	ldr	r0, [r7, #12]
 801633e:	f000 f9bd 	bl	80166bc <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8016342:	4603      	mov	r3, r0
 8016344:	e000      	b.n	8016348 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 8016346:	697b      	ldr	r3, [r7, #20]
      }
 8016348:	4618      	mov	r0, r3
 801634a:	371c      	adds	r7, #28
 801634c:	46bd      	mov	sp, r7
 801634e:	bd90      	pop	{r4, r7, pc}

08016350 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8016350:	b580      	push	{r7, lr}
 8016352:	b084      	sub	sp, #16
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8016358:	687a      	ldr	r2, [r7, #4]
 801635a:	f107 030c 	add.w	r3, r7, #12
 801635e:	4611      	mov	r1, r2
 8016360:	4618      	mov	r0, r3
 8016362:	f7ff ff9e 	bl	80162a2 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	4618      	mov	r0, r3
 801636a:	3710      	adds	r7, #16
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}

08016370 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8016370:	b590      	push	{r4, r7, lr}
 8016372:	b083      	sub	sp, #12
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
 8016378:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f000 f835 	bl	80163ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016380:	4603      	mov	r3, r0
 8016382:	681c      	ldr	r4, [r3, #0]
 8016384:	6838      	ldr	r0, [r7, #0]
 8016386:	f000 f830 	bl	80163ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801638a:	4603      	mov	r3, r0
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	1ae3      	subs	r3, r4, r3
 8016390:	109b      	asrs	r3, r3, #2
 8016392:	4618      	mov	r0, r3
 8016394:	370c      	adds	r7, #12
 8016396:	46bd      	mov	sp, r7
 8016398:	bd90      	pop	{r4, r7, pc}

0801639a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801639a:	b580      	push	{r7, lr}
 801639c:	b082      	sub	sp, #8
 801639e:	af00      	add	r7, sp, #0
 80163a0:	6078      	str	r0, [r7, #4]
 80163a2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d006      	beq.n	80163b8 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	6839      	ldr	r1, [r7, #0]
 80163ae:	4618      	mov	r0, r3
 80163b0:	f000 f995 	bl	80166de <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 80163b4:	4603      	mov	r3, r0
 80163b6:	e000      	b.n	80163ba <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 80163b8:	2300      	movs	r3, #0
      }
 80163ba:	4618      	mov	r0, r3
 80163bc:	3708      	adds	r7, #8
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}

080163c2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80163c2:	b590      	push	{r4, r7, lr}
 80163c4:	b089      	sub	sp, #36	; 0x24
 80163c6:	af02      	add	r7, sp, #8
 80163c8:	60f8      	str	r0, [r7, #12]
 80163ca:	60b9      	str	r1, [r7, #8]
 80163cc:	607a      	str	r2, [r7, #4]
 80163ce:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80163d0:	f88d 4000 	strb.w	r4, [sp]
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	687a      	ldr	r2, [r7, #4]
 80163d8:	68b9      	ldr	r1, [r7, #8]
 80163da:	68f8      	ldr	r0, [r7, #12]
 80163dc:	f000 f98e 	bl	80166fc <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80163e0:	4603      	mov	r3, r0
      }
 80163e2:	4618      	mov	r0, r3
 80163e4:	371c      	adds	r7, #28
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd90      	pop	{r4, r7, pc}

080163ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80163ea:	b480      	push	{r7}
 80163ec:	b083      	sub	sp, #12
 80163ee:	af00      	add	r7, sp, #0
 80163f0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4618      	mov	r0, r3
 80163f6:	370c      	adds	r7, #12
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr

08016400 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8016400:	b480      	push	{r7}
 8016402:	b083      	sub	sp, #12
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	4618      	mov	r0, r3
 801640c:	370c      	adds	r7, #12
 801640e:	46bd      	mov	sp, r7
 8016410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016414:	4770      	bx	lr

08016416 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8016416:	b590      	push	{r4, r7, lr}
 8016418:	b085      	sub	sp, #20
 801641a:	af00      	add	r7, sp, #0
 801641c:	60f8      	str	r0, [r7, #12]
 801641e:	60b9      	str	r1, [r7, #8]
 8016420:	607a      	str	r2, [r7, #4]
 8016422:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8016424:	68f8      	ldr	r0, [r7, #12]
 8016426:	f000 f97b 	bl	8016720 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 801642a:	4604      	mov	r4, r0
 801642c:	68b8      	ldr	r0, [r7, #8]
 801642e:	f000 f977 	bl	8016720 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8016432:	4601      	mov	r1, r0
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	4620      	mov	r0, r4
 801643a:	f000 f980 	bl	801673e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 801643e:	4603      	mov	r3, r0
    }
 8016440:	4618      	mov	r0, r3
 8016442:	3714      	adds	r7, #20
 8016444:	46bd      	mov	sp, r7
 8016446:	bd90      	pop	{r4, r7, pc}

08016448 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	60f8      	str	r0, [r7, #12]
 8016450:	60b9      	str	r1, [r7, #8]
 8016452:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8016454:	68b9      	ldr	r1, [r7, #8]
 8016456:	68f8      	ldr	r0, [r7, #12]
 8016458:	f000 f982 	bl	8016760 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 801645c:	bf00      	nop
 801645e:	3710      	adds	r7, #16
 8016460:	46bd      	mov	sp, r7
 8016462:	bd80      	pop	{r7, pc}

08016464 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016464:	b480      	push	{r7}
 8016466:	b083      	sub	sp, #12
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	4618      	mov	r0, r3
 8016470:	370c      	adds	r7, #12
 8016472:	46bd      	mov	sp, r7
 8016474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016478:	4770      	bx	lr

0801647a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801647a:	b580      	push	{r7, lr}
 801647c:	b084      	sub	sp, #16
 801647e:	af00      	add	r7, sp, #0
 8016480:	60f8      	str	r0, [r7, #12]
 8016482:	60b9      	str	r1, [r7, #8]
 8016484:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8016486:	687a      	ldr	r2, [r7, #4]
 8016488:	68b9      	ldr	r1, [r7, #8]
 801648a:	68f8      	ldr	r0, [r7, #12]
 801648c:	f000 f975 	bl	801677a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 8016490:	bf00      	nop
 8016492:	3710      	adds	r7, #16
 8016494:	46bd      	mov	sp, r7
 8016496:	bd80      	pop	{r7, pc}

08016498 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016498:	b480      	push	{r7}
 801649a:	b083      	sub	sp, #12
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	4618      	mov	r0, r3
 80164a4:	370c      	adds	r7, #12
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr

080164ae <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80164ae:	b590      	push	{r4, r7, lr}
 80164b0:	b085      	sub	sp, #20
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	60f8      	str	r0, [r7, #12]
 80164b6:	60b9      	str	r1, [r7, #8]
 80164b8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f7ff ffec 	bl	8016498 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 80164c0:	4604      	mov	r4, r0
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	4619      	mov	r1, r3
 80164c6:	2008      	movs	r0, #8
 80164c8:	f7ea fdb0 	bl	800102c <_ZnwjPv>
 80164cc:	4603      	mov	r3, r0
 80164ce:	4622      	mov	r2, r4
 80164d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80164d8:	bf00      	nop
 80164da:	3714      	adds	r7, #20
 80164dc:	46bd      	mov	sp, r7
 80164de:	bd90      	pop	{r4, r7, pc}

080164e0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80164e0:	b480      	push	{r7}
 80164e2:	b083      	sub	sp, #12
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	681a      	ldr	r2, [r3, #0]
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	601a      	str	r2, [r3, #0]
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	4618      	mov	r0, r3
 80164f6:	370c      	adds	r7, #12
 80164f8:	46bd      	mov	sp, r7
 80164fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fe:	4770      	bx	lr

08016500 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8016500:	b590      	push	{r4, r7, lr}
 8016502:	b087      	sub	sp, #28
 8016504:	af00      	add	r7, sp, #0
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801650c:	68f8      	ldr	r0, [r7, #12]
 801650e:	f000 f941 	bl	8016794 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8016512:	4604      	mov	r4, r0
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	f7ff fb82 	bl	8015c1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801651a:	4603      	mov	r3, r0
 801651c:	1ae2      	subs	r2, r4, r3
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	429a      	cmp	r2, r3
 8016522:	bf34      	ite	cc
 8016524:	2301      	movcc	r3, #1
 8016526:	2300      	movcs	r3, #0
 8016528:	b2db      	uxtb	r3, r3
 801652a:	2b00      	cmp	r3, #0
 801652c:	d002      	beq.n	8016534 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f000 fd6e 	bl	8017010 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8016534:	68f8      	ldr	r0, [r7, #12]
 8016536:	f7ff fb72 	bl	8015c1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801653a:	4604      	mov	r4, r0
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	f7ff fb6e 	bl	8015c1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8016542:	4603      	mov	r3, r0
 8016544:	613b      	str	r3, [r7, #16]
 8016546:	f107 0208 	add.w	r2, r7, #8
 801654a:	f107 0310 	add.w	r3, r7, #16
 801654e:	4611      	mov	r1, r2
 8016550:	4618      	mov	r0, r3
 8016552:	f7f0 f9b5 	bl	80068c0 <_ZSt3maxIjERKT_S2_S2_>
 8016556:	4603      	mov	r3, r0
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	4423      	add	r3, r4
 801655c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801655e:	68f8      	ldr	r0, [r7, #12]
 8016560:	f7ff fb5d 	bl	8015c1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8016564:	4602      	mov	r2, r0
 8016566:	697b      	ldr	r3, [r7, #20]
 8016568:	4293      	cmp	r3, r2
 801656a:	d306      	bcc.n	801657a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 801656c:	68f8      	ldr	r0, [r7, #12]
 801656e:	f000 f911 	bl	8016794 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8016572:	4602      	mov	r2, r0
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	4293      	cmp	r3, r2
 8016578:	d904      	bls.n	8016584 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 801657a:	68f8      	ldr	r0, [r7, #12]
 801657c:	f000 f90a 	bl	8016794 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8016580:	4603      	mov	r3, r0
 8016582:	e000      	b.n	8016586 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 8016584:	697b      	ldr	r3, [r7, #20]
      }
 8016586:	4618      	mov	r0, r3
 8016588:	371c      	adds	r7, #28
 801658a:	46bd      	mov	sp, r7
 801658c:	bd90      	pop	{r4, r7, pc}

0801658e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801658e:	b580      	push	{r7, lr}
 8016590:	b084      	sub	sp, #16
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8016596:	687a      	ldr	r2, [r7, #4]
 8016598:	f107 030c 	add.w	r3, r7, #12
 801659c:	4611      	mov	r1, r2
 801659e:	4618      	mov	r0, r3
 80165a0:	f7ff ff9e 	bl	80164e0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	4618      	mov	r0, r3
 80165a8:	3710      	adds	r7, #16
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80165ae:	b590      	push	{r4, r7, lr}
 80165b0:	b083      	sub	sp, #12
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
 80165b6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f000 f835 	bl	8016628 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80165be:	4603      	mov	r3, r0
 80165c0:	681c      	ldr	r4, [r3, #0]
 80165c2:	6838      	ldr	r0, [r7, #0]
 80165c4:	f000 f830 	bl	8016628 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80165c8:	4603      	mov	r3, r0
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	1ae3      	subs	r3, r4, r3
 80165ce:	10db      	asrs	r3, r3, #3
 80165d0:	4618      	mov	r0, r3
 80165d2:	370c      	adds	r7, #12
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd90      	pop	{r4, r7, pc}

080165d8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80165d8:	b580      	push	{r7, lr}
 80165da:	b082      	sub	sp, #8
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
 80165e0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d006      	beq.n	80165f6 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	6839      	ldr	r1, [r7, #0]
 80165ec:	4618      	mov	r0, r3
 80165ee:	f000 f8e2 	bl	80167b6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 80165f2:	4603      	mov	r3, r0
 80165f4:	e000      	b.n	80165f8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 80165f6:	2300      	movs	r3, #0
      }
 80165f8:	4618      	mov	r0, r3
 80165fa:	3708      	adds	r7, #8
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}

08016600 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8016600:	b590      	push	{r4, r7, lr}
 8016602:	b089      	sub	sp, #36	; 0x24
 8016604:	af02      	add	r7, sp, #8
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	607a      	str	r2, [r7, #4]
 801660c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801660e:	f88d 4000 	strb.w	r4, [sp]
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	68b9      	ldr	r1, [r7, #8]
 8016618:	68f8      	ldr	r0, [r7, #12]
 801661a:	f000 f8db 	bl	80167d4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801661e:	4603      	mov	r3, r0
      }
 8016620:	4618      	mov	r0, r3
 8016622:	371c      	adds	r7, #28
 8016624:	46bd      	mov	sp, r7
 8016626:	bd90      	pop	{r4, r7, pc}

08016628 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8016628:	b480      	push	{r7}
 801662a:	b083      	sub	sp, #12
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	4618      	mov	r0, r3
 8016634:	370c      	adds	r7, #12
 8016636:	46bd      	mov	sp, r7
 8016638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663c:	4770      	bx	lr

0801663e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801663e:	b480      	push	{r7}
 8016640:	b083      	sub	sp, #12
 8016642:	af00      	add	r7, sp, #0
 8016644:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	4618      	mov	r0, r3
 801664a:	370c      	adds	r7, #12
 801664c:	46bd      	mov	sp, r7
 801664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016652:	4770      	bx	lr

08016654 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8016654:	b590      	push	{r4, r7, lr}
 8016656:	b085      	sub	sp, #20
 8016658:	af00      	add	r7, sp, #0
 801665a:	60f8      	str	r0, [r7, #12]
 801665c:	60b9      	str	r1, [r7, #8]
 801665e:	607a      	str	r2, [r7, #4]
 8016660:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8016662:	68f8      	ldr	r0, [r7, #12]
 8016664:	f000 f8c8 	bl	80167f8 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8016668:	4604      	mov	r4, r0
 801666a:	68b8      	ldr	r0, [r7, #8]
 801666c:	f000 f8c4 	bl	80167f8 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8016670:	4601      	mov	r1, r0
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	687a      	ldr	r2, [r7, #4]
 8016676:	4620      	mov	r0, r4
 8016678:	f000 f8cd 	bl	8016816 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 801667c:	4603      	mov	r3, r0
    }
 801667e:	4618      	mov	r0, r3
 8016680:	3714      	adds	r7, #20
 8016682:	46bd      	mov	sp, r7
 8016684:	bd90      	pop	{r4, r7, pc}

08016686 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8016686:	b580      	push	{r7, lr}
 8016688:	b084      	sub	sp, #16
 801668a:	af00      	add	r7, sp, #0
 801668c:	60f8      	str	r0, [r7, #12]
 801668e:	60b9      	str	r1, [r7, #8]
 8016690:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8016692:	68b9      	ldr	r1, [r7, #8]
 8016694:	68f8      	ldr	r0, [r7, #12]
 8016696:	f000 f8cf 	bl	8016838 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 801669a:	bf00      	nop
 801669c:	3710      	adds	r7, #16
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80166a2:	b580      	push	{r7, lr}
 80166a4:	b084      	sub	sp, #16
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	60f8      	str	r0, [r7, #12]
 80166aa:	60b9      	str	r1, [r7, #8]
 80166ac:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80166ae:	68b8      	ldr	r0, [r7, #8]
 80166b0:	f000 fc80 	bl	8016fb4 <_ZdlPv>
      }
 80166b4:	bf00      	nop
 80166b6:	3710      	adds	r7, #16
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}

080166bc <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80166bc:	b580      	push	{r7, lr}
 80166be:	b082      	sub	sp, #8
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	4618      	mov	r0, r3
 80166c8:	f000 f8dd 	bl	8016886 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80166cc:	4603      	mov	r3, r0
 80166ce:	4618      	mov	r0, r3
 80166d0:	f000 f8bf 	bl	8016852 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 80166d4:	4603      	mov	r3, r0
 80166d6:	4618      	mov	r0, r3
 80166d8:	3708      	adds	r7, #8
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}

080166de <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80166de:	b580      	push	{r7, lr}
 80166e0:	b082      	sub	sp, #8
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	6078      	str	r0, [r7, #4]
 80166e6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80166e8:	2200      	movs	r2, #0
 80166ea:	6839      	ldr	r1, [r7, #0]
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	f000 f8d5 	bl	801689c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 80166f2:	4603      	mov	r3, r0
 80166f4:	4618      	mov	r0, r3
 80166f6:	3708      	adds	r7, #8
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b084      	sub	sp, #16
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	607a      	str	r2, [r7, #4]
 8016708:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	687a      	ldr	r2, [r7, #4]
 801670e:	68b9      	ldr	r1, [r7, #8]
 8016710:	68f8      	ldr	r0, [r7, #12]
 8016712:	f000 f8e1 	bl	80168d8 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8016716:	4603      	mov	r3, r0
      }
 8016718:	4618      	mov	r0, r3
 801671a:	3710      	adds	r7, #16
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}

08016720 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8016720:	b580      	push	{r7, lr}
 8016722:	b084      	sub	sp, #16
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8016728:	f107 030c 	add.w	r3, r7, #12
 801672c:	6879      	ldr	r1, [r7, #4]
 801672e:	4618      	mov	r0, r3
 8016730:	f000 f8ef 	bl	8016912 <_ZNSt13move_iteratorIPPvEC1ES1_>
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	4618      	mov	r0, r3
 8016738:	3710      	adds	r7, #16
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}

0801673e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801673e:	b580      	push	{r7, lr}
 8016740:	b084      	sub	sp, #16
 8016742:	af00      	add	r7, sp, #0
 8016744:	60f8      	str	r0, [r7, #12]
 8016746:	60b9      	str	r1, [r7, #8]
 8016748:	607a      	str	r2, [r7, #4]
 801674a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	68b9      	ldr	r1, [r7, #8]
 8016750:	68f8      	ldr	r0, [r7, #12]
 8016752:	f000 f8ed 	bl	8016930 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8016756:	4603      	mov	r3, r0
 8016758:	4618      	mov	r0, r3
 801675a:	3710      	adds	r7, #16
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}

08016760 <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 801676a:	6839      	ldr	r1, [r7, #0]
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f000 f8f1 	bl	8016954 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 8016772:	bf00      	nop
 8016774:	3708      	adds	r7, #8
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}

0801677a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 801677a:	b580      	push	{r7, lr}
 801677c:	b084      	sub	sp, #16
 801677e:	af00      	add	r7, sp, #0
 8016780:	60f8      	str	r0, [r7, #12]
 8016782:	60b9      	str	r1, [r7, #8]
 8016784:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8016786:	68b8      	ldr	r0, [r7, #8]
 8016788:	f000 fc14 	bl	8016fb4 <_ZdlPv>
      }
 801678c:	bf00      	nop
 801678e:	3710      	adds	r7, #16
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	4618      	mov	r0, r3
 80167a0:	f000 f8fd 	bl	801699e <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80167a4:	4603      	mov	r3, r0
 80167a6:	4618      	mov	r0, r3
 80167a8:	f000 f8df 	bl	801696a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 80167ac:	4603      	mov	r3, r0
 80167ae:	4618      	mov	r0, r3
 80167b0:	3708      	adds	r7, #8
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80167b6:	b580      	push	{r7, lr}
 80167b8:	b082      	sub	sp, #8
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
 80167be:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80167c0:	2200      	movs	r2, #0
 80167c2:	6839      	ldr	r1, [r7, #0]
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f000 f8f5 	bl	80169b4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 80167ca:	4603      	mov	r3, r0
 80167cc:	4618      	mov	r0, r3
 80167ce:	3708      	adds	r7, #8
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}

080167d4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	60f8      	str	r0, [r7, #12]
 80167dc:	60b9      	str	r1, [r7, #8]
 80167de:	607a      	str	r2, [r7, #4]
 80167e0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	68b9      	ldr	r1, [r7, #8]
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	f000 f901 	bl	80169f0 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 80167ee:	4603      	mov	r3, r0
      }
 80167f0:	4618      	mov	r0, r3
 80167f2:	3710      	adds	r7, #16
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}

080167f8 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b084      	sub	sp, #16
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8016800:	f107 030c 	add.w	r3, r7, #12
 8016804:	6879      	ldr	r1, [r7, #4]
 8016806:	4618      	mov	r0, r3
 8016808:	f000 f90f 	bl	8016a2a <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	4618      	mov	r0, r3
 8016810:	3710      	adds	r7, #16
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}

08016816 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8016816:	b580      	push	{r7, lr}
 8016818:	b084      	sub	sp, #16
 801681a:	af00      	add	r7, sp, #0
 801681c:	60f8      	str	r0, [r7, #12]
 801681e:	60b9      	str	r1, [r7, #8]
 8016820:	607a      	str	r2, [r7, #4]
 8016822:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8016824:	687a      	ldr	r2, [r7, #4]
 8016826:	68b9      	ldr	r1, [r7, #8]
 8016828:	68f8      	ldr	r0, [r7, #12]
 801682a:	f000 f90d 	bl	8016a48 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 801682e:	4603      	mov	r3, r0
 8016830:	4618      	mov	r0, r3
 8016832:	3710      	adds	r7, #16
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
 8016840:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8016842:	6839      	ldr	r1, [r7, #0]
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f000 f911 	bl	8016a6c <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 801684a:	bf00      	nop
 801684c:	3708      	adds	r7, #8
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}

08016852 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8016852:	b580      	push	{r7, lr}
 8016854:	b084      	sub	sp, #16
 8016856:	af00      	add	r7, sp, #0
 8016858:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801685a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801685e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f000 f90e 	bl	8016a82 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 8016866:	4603      	mov	r3, r0
 8016868:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801686a:	f107 0208 	add.w	r2, r7, #8
 801686e:	f107 030c 	add.w	r3, r7, #12
 8016872:	4611      	mov	r1, r2
 8016874:	4618      	mov	r0, r3
 8016876:	f7f0 f9fd 	bl	8006c74 <_ZSt3minIjERKT_S2_S2_>
 801687a:	4603      	mov	r3, r0
 801687c:	681b      	ldr	r3, [r3, #0]
      }
 801687e:	4618      	mov	r0, r3
 8016880:	3710      	adds	r7, #16
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}

08016886 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8016886:	b480      	push	{r7}
 8016888:	b083      	sub	sp, #12
 801688a:	af00      	add	r7, sp, #0
 801688c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	4618      	mov	r0, r3
 8016892:	370c      	adds	r7, #12
 8016894:	46bd      	mov	sp, r7
 8016896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689a:	4770      	bx	lr

0801689c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801689c:	b580      	push	{r7, lr}
 801689e:	b084      	sub	sp, #16
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	60f8      	str	r0, [r7, #12]
 80168a4:	60b9      	str	r1, [r7, #8]
 80168a6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80168a8:	68f8      	ldr	r0, [r7, #12]
 80168aa:	f000 f8f6 	bl	8016a9a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 80168ae:	4602      	mov	r2, r0
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	4293      	cmp	r3, r2
 80168b4:	bf8c      	ite	hi
 80168b6:	2301      	movhi	r3, #1
 80168b8:	2300      	movls	r3, #0
 80168ba:	b2db      	uxtb	r3, r3
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d001      	beq.n	80168c4 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80168c0:	f000 fba0 	bl	8017004 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	009b      	lsls	r3, r3, #2
 80168c8:	4618      	mov	r0, r3
 80168ca:	f000 fb88 	bl	8016fde <_Znwj>
 80168ce:	4603      	mov	r3, r0
      }
 80168d0:	4618      	mov	r0, r3
 80168d2:	3710      	adds	r7, #16
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}

080168d8 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80168d8:	b5b0      	push	{r4, r5, r7, lr}
 80168da:	b084      	sub	sp, #16
 80168dc:	af00      	add	r7, sp, #0
 80168de:	60f8      	str	r0, [r7, #12]
 80168e0:	60b9      	str	r1, [r7, #8]
 80168e2:	607a      	str	r2, [r7, #4]
 80168e4:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80168e6:	68f8      	ldr	r0, [r7, #12]
 80168e8:	f000 f8e3 	bl	8016ab2 <_ZSt12__niter_baseIPPvET_S2_>
 80168ec:	4604      	mov	r4, r0
 80168ee:	68b8      	ldr	r0, [r7, #8]
 80168f0:	f000 f8df 	bl	8016ab2 <_ZSt12__niter_baseIPPvET_S2_>
 80168f4:	4605      	mov	r5, r0
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f000 f8db 	bl	8016ab2 <_ZSt12__niter_baseIPPvET_S2_>
 80168fc:	4602      	mov	r2, r0
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	4629      	mov	r1, r5
 8016902:	4620      	mov	r0, r4
 8016904:	f000 f8e0 	bl	8016ac8 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8016908:	4603      	mov	r3, r0
    }
 801690a:	4618      	mov	r0, r3
 801690c:	3710      	adds	r7, #16
 801690e:	46bd      	mov	sp, r7
 8016910:	bdb0      	pop	{r4, r5, r7, pc}

08016912 <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 8016912:	b480      	push	{r7}
 8016914:	b083      	sub	sp, #12
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
 801691a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	683a      	ldr	r2, [r7, #0]
 8016920:	601a      	str	r2, [r3, #0]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	4618      	mov	r0, r3
 8016926:	370c      	adds	r7, #12
 8016928:	46bd      	mov	sp, r7
 801692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692e:	4770      	bx	lr

08016930 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8016930:	b580      	push	{r7, lr}
 8016932:	b086      	sub	sp, #24
 8016934:	af00      	add	r7, sp, #0
 8016936:	60f8      	str	r0, [r7, #12]
 8016938:	60b9      	str	r1, [r7, #8]
 801693a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801693c:	2301      	movs	r3, #1
 801693e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8016940:	687a      	ldr	r2, [r7, #4]
 8016942:	68b9      	ldr	r1, [r7, #8]
 8016944:	68f8      	ldr	r0, [r7, #12]
 8016946:	f000 f8dd 	bl	8016b04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 801694a:	4603      	mov	r3, r0
    }
 801694c:	4618      	mov	r0, r3
 801694e:	3718      	adds	r7, #24
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8016954:	b480      	push	{r7}
 8016956:	b083      	sub	sp, #12
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	6039      	str	r1, [r7, #0]
 801695e:	bf00      	nop
 8016960:	370c      	adds	r7, #12
 8016962:	46bd      	mov	sp, r7
 8016964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016968:	4770      	bx	lr

0801696a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801696a:	b580      	push	{r7, lr}
 801696c:	b084      	sub	sp, #16
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8016972:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8016976:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8016978:	6878      	ldr	r0, [r7, #4]
 801697a:	f000 f8d3 	bl	8016b24 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 801697e:	4603      	mov	r3, r0
 8016980:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8016982:	f107 0208 	add.w	r2, r7, #8
 8016986:	f107 030c 	add.w	r3, r7, #12
 801698a:	4611      	mov	r1, r2
 801698c:	4618      	mov	r0, r3
 801698e:	f7f0 f971 	bl	8006c74 <_ZSt3minIjERKT_S2_S2_>
 8016992:	4603      	mov	r3, r0
 8016994:	681b      	ldr	r3, [r3, #0]
      }
 8016996:	4618      	mov	r0, r3
 8016998:	3710      	adds	r7, #16
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}

0801699e <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801699e:	b480      	push	{r7}
 80169a0:	b083      	sub	sp, #12
 80169a2:	af00      	add	r7, sp, #0
 80169a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	4618      	mov	r0, r3
 80169aa:	370c      	adds	r7, #12
 80169ac:	46bd      	mov	sp, r7
 80169ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b2:	4770      	bx	lr

080169b4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80169c0:	68f8      	ldr	r0, [r7, #12]
 80169c2:	f000 f8bb 	bl	8016b3c <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 80169c6:	4602      	mov	r2, r0
 80169c8:	68bb      	ldr	r3, [r7, #8]
 80169ca:	4293      	cmp	r3, r2
 80169cc:	bf8c      	ite	hi
 80169ce:	2301      	movhi	r3, #1
 80169d0:	2300      	movls	r3, #0
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d001      	beq.n	80169dc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80169d8:	f000 fb14 	bl	8017004 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	00db      	lsls	r3, r3, #3
 80169e0:	4618      	mov	r0, r3
 80169e2:	f000 fafc 	bl	8016fde <_Znwj>
 80169e6:	4603      	mov	r3, r0
      }
 80169e8:	4618      	mov	r0, r3
 80169ea:	3710      	adds	r7, #16
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}

080169f0 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80169f0:	b5b0      	push	{r4, r5, r7, lr}
 80169f2:	b084      	sub	sp, #16
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	60f8      	str	r0, [r7, #12]
 80169f8:	60b9      	str	r1, [r7, #8]
 80169fa:	607a      	str	r2, [r7, #4]
 80169fc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80169fe:	68f8      	ldr	r0, [r7, #12]
 8016a00:	f000 f8a8 	bl	8016b54 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8016a04:	4604      	mov	r4, r0
 8016a06:	68b8      	ldr	r0, [r7, #8]
 8016a08:	f000 f8a4 	bl	8016b54 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8016a0c:	4605      	mov	r5, r0
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 f8a0 	bl	8016b54 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8016a14:	4602      	mov	r2, r0
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	4629      	mov	r1, r5
 8016a1a:	4620      	mov	r0, r4
 8016a1c:	f000 f8a5 	bl	8016b6a <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8016a20:	4603      	mov	r3, r0
    }
 8016a22:	4618      	mov	r0, r3
 8016a24:	3710      	adds	r7, #16
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bdb0      	pop	{r4, r5, r7, pc}

08016a2a <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 8016a2a:	b480      	push	{r7}
 8016a2c:	b083      	sub	sp, #12
 8016a2e:	af00      	add	r7, sp, #0
 8016a30:	6078      	str	r0, [r7, #4]
 8016a32:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	683a      	ldr	r2, [r7, #0]
 8016a38:	601a      	str	r2, [r3, #0]
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	370c      	adds	r7, #12
 8016a40:	46bd      	mov	sp, r7
 8016a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a46:	4770      	bx	lr

08016a48 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b086      	sub	sp, #24
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	60f8      	str	r0, [r7, #12]
 8016a50:	60b9      	str	r1, [r7, #8]
 8016a52:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8016a54:	2301      	movs	r3, #1
 8016a56:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8016a58:	687a      	ldr	r2, [r7, #4]
 8016a5a:	68b9      	ldr	r1, [r7, #8]
 8016a5c:	68f8      	ldr	r0, [r7, #12]
 8016a5e:	f000 f8a2 	bl	8016ba6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 8016a62:	4603      	mov	r3, r0
    }
 8016a64:	4618      	mov	r0, r3
 8016a66:	3718      	adds	r7, #24
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}

08016a6c <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 8016a6c:	b480      	push	{r7}
 8016a6e:	b083      	sub	sp, #12
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
 8016a74:	6039      	str	r1, [r7, #0]
 8016a76:	bf00      	nop
 8016a78:	370c      	adds	r7, #12
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a80:	4770      	bx	lr

08016a82 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8016a82:	b580      	push	{r7, lr}
 8016a84:	b082      	sub	sp, #8
 8016a86:	af00      	add	r7, sp, #0
 8016a88:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	f000 f805 	bl	8016a9a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 8016a90:	4603      	mov	r3, r0
 8016a92:	4618      	mov	r0, r3
 8016a94:	3708      	adds	r7, #8
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}

08016a9a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8016a9a:	b480      	push	{r7}
 8016a9c:	b083      	sub	sp, #12
 8016a9e:	af00      	add	r7, sp, #0
 8016aa0:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8016aa2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	370c      	adds	r7, #12
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab0:	4770      	bx	lr

08016ab2 <_ZSt12__niter_baseIPPvET_S2_>:
    __niter_base(_Iterator __it)
 8016ab2:	b480      	push	{r7}
 8016ab4:	b083      	sub	sp, #12
 8016ab6:	af00      	add	r7, sp, #0
 8016ab8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	4618      	mov	r0, r3
 8016abe:	370c      	adds	r7, #12
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b086      	sub	sp, #24
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	60f8      	str	r0, [r7, #12]
 8016ad0:	60b9      	str	r1, [r7, #8]
 8016ad2:	607a      	str	r2, [r7, #4]
 8016ad4:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8016ad6:	68ba      	ldr	r2, [r7, #8]
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	1ad3      	subs	r3, r2, r3
 8016adc:	109b      	asrs	r3, r3, #2
 8016ade:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	dd06      	ble.n	8016af4 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	461a      	mov	r2, r3
 8016aec:	68f9      	ldr	r1, [r7, #12]
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f003 fc3e 	bl	801a370 <memmove>
      return __result + __count;
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	009b      	lsls	r3, r3, #2
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	4413      	add	r3, r2
    }
 8016afc:	4618      	mov	r0, r3
 8016afe:	3718      	adds	r7, #24
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}

08016b04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b084      	sub	sp, #16
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8016b10:	687a      	ldr	r2, [r7, #4]
 8016b12:	68b9      	ldr	r1, [r7, #8]
 8016b14:	68f8      	ldr	r0, [r7, #12]
 8016b16:	f000 f856 	bl	8016bc6 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3710      	adds	r7, #16
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}

08016b24 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b082      	sub	sp, #8
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f000 f805 	bl	8016b3c <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 8016b32:	4603      	mov	r3, r0
 8016b34:	4618      	mov	r0, r3
 8016b36:	3708      	adds	r7, #8
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8016b3c:	b480      	push	{r7}
 8016b3e:	b083      	sub	sp, #12
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8016b44:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8016b48:	4618      	mov	r0, r3
 8016b4a:	370c      	adds	r7, #12
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr

08016b54 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 8016b54:	b480      	push	{r7}
 8016b56:	b083      	sub	sp, #12
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	4618      	mov	r0, r3
 8016b60:	370c      	adds	r7, #12
 8016b62:	46bd      	mov	sp, r7
 8016b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b68:	4770      	bx	lr

08016b6a <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8016b6a:	b580      	push	{r7, lr}
 8016b6c:	b086      	sub	sp, #24
 8016b6e:	af00      	add	r7, sp, #0
 8016b70:	60f8      	str	r0, [r7, #12]
 8016b72:	60b9      	str	r1, [r7, #8]
 8016b74:	607a      	str	r2, [r7, #4]
 8016b76:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8016b78:	68ba      	ldr	r2, [r7, #8]
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	1ad3      	subs	r3, r2, r3
 8016b7e:	10db      	asrs	r3, r3, #3
 8016b80:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8016b82:	697b      	ldr	r3, [r7, #20]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	dd06      	ble.n	8016b96 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016b88:	697b      	ldr	r3, [r7, #20]
 8016b8a:	00db      	lsls	r3, r3, #3
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	68f9      	ldr	r1, [r7, #12]
 8016b90:	6878      	ldr	r0, [r7, #4]
 8016b92:	f003 fbed 	bl	801a370 <memmove>
      return __result + __count;
 8016b96:	697b      	ldr	r3, [r7, #20]
 8016b98:	00db      	lsls	r3, r3, #3
 8016b9a:	687a      	ldr	r2, [r7, #4]
 8016b9c:	4413      	add	r3, r2
    }
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3718      	adds	r7, #24
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}

08016ba6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b084      	sub	sp, #16
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	60f8      	str	r0, [r7, #12]
 8016bae:	60b9      	str	r1, [r7, #8]
 8016bb0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8016bb2:	687a      	ldr	r2, [r7, #4]
 8016bb4:	68b9      	ldr	r1, [r7, #8]
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	f000 f81d 	bl	8016bf6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3710      	adds	r7, #16
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}

08016bc6 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8016bc6:	b590      	push	{r4, r7, lr}
 8016bc8:	b085      	sub	sp, #20
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	60f8      	str	r0, [r7, #12]
 8016bce:	60b9      	str	r1, [r7, #8]
 8016bd0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8016bd2:	68f8      	ldr	r0, [r7, #12]
 8016bd4:	f000 f827 	bl	8016c26 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8016bd8:	4604      	mov	r4, r0
 8016bda:	68b8      	ldr	r0, [r7, #8]
 8016bdc:	f000 f823 	bl	8016c26 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8016be0:	4603      	mov	r3, r0
 8016be2:	687a      	ldr	r2, [r7, #4]
 8016be4:	4619      	mov	r1, r3
 8016be6:	4620      	mov	r0, r4
 8016be8:	f000 f82e 	bl	8016c48 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 8016bec:	4603      	mov	r3, r0
    }
 8016bee:	4618      	mov	r0, r3
 8016bf0:	3714      	adds	r7, #20
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd90      	pop	{r4, r7, pc}

08016bf6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8016bf6:	b590      	push	{r4, r7, lr}
 8016bf8:	b085      	sub	sp, #20
 8016bfa:	af00      	add	r7, sp, #0
 8016bfc:	60f8      	str	r0, [r7, #12]
 8016bfe:	60b9      	str	r1, [r7, #8]
 8016c00:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8016c02:	68f8      	ldr	r0, [r7, #12]
 8016c04:	f000 f843 	bl	8016c8e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8016c08:	4604      	mov	r4, r0
 8016c0a:	68b8      	ldr	r0, [r7, #8]
 8016c0c:	f000 f83f 	bl	8016c8e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8016c10:	4603      	mov	r3, r0
 8016c12:	687a      	ldr	r2, [r7, #4]
 8016c14:	4619      	mov	r1, r3
 8016c16:	4620      	mov	r0, r4
 8016c18:	f000 f84a 	bl	8016cb0 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8016c1c:	4603      	mov	r3, r0
    }
 8016c1e:	4618      	mov	r0, r3
 8016c20:	3714      	adds	r7, #20
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bd90      	pop	{r4, r7, pc}

08016c26 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8016c26:	b580      	push	{r7, lr}
 8016c28:	b082      	sub	sp, #8
 8016c2a:	af00      	add	r7, sp, #0
 8016c2c:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8016c2e:	1d3b      	adds	r3, r7, #4
 8016c30:	4618      	mov	r0, r3
 8016c32:	f000 f860 	bl	8016cf6 <_ZNKSt13move_iteratorIPPvE4baseEv>
 8016c36:	4603      	mov	r3, r0
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f000 f868 	bl	8016d0e <_ZSt12__miter_baseIPPvET_S2_>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	4618      	mov	r0, r3
 8016c42:	3708      	adds	r7, #8
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd80      	pop	{r7, pc}

08016c48 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8016c48:	b5b0      	push	{r4, r5, r7, lr}
 8016c4a:	b084      	sub	sp, #16
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	60f8      	str	r0, [r7, #12]
 8016c50:	60b9      	str	r1, [r7, #8]
 8016c52:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8016c54:	68f8      	ldr	r0, [r7, #12]
 8016c56:	f7ff ff2c 	bl	8016ab2 <_ZSt12__niter_baseIPPvET_S2_>
 8016c5a:	4604      	mov	r4, r0
 8016c5c:	68b8      	ldr	r0, [r7, #8]
 8016c5e:	f7ff ff28 	bl	8016ab2 <_ZSt12__niter_baseIPPvET_S2_>
 8016c62:	4605      	mov	r5, r0
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7ff ff23 	bl	8016ab2 <_ZSt12__niter_baseIPPvET_S2_>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	461a      	mov	r2, r3
 8016c70:	4629      	mov	r1, r5
 8016c72:	4620      	mov	r0, r4
 8016c74:	f000 f856 	bl	8016d24 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8016c78:	4602      	mov	r2, r0
 8016c7a:	1d3b      	adds	r3, r7, #4
 8016c7c:	4611      	mov	r1, r2
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f000 f862 	bl	8016d48 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 8016c84:	4603      	mov	r3, r0
    }
 8016c86:	4618      	mov	r0, r3
 8016c88:	3710      	adds	r7, #16
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bdb0      	pop	{r4, r5, r7, pc}

08016c8e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8016c8e:	b580      	push	{r7, lr}
 8016c90:	b082      	sub	sp, #8
 8016c92:	af00      	add	r7, sp, #0
 8016c94:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8016c96:	1d3b      	adds	r3, r7, #4
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f000 f861 	bl	8016d60 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f000 f869 	bl	8016d78 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3708      	adds	r7, #8
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8016cb0:	b5b0      	push	{r4, r5, r7, lr}
 8016cb2:	b084      	sub	sp, #16
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	60f8      	str	r0, [r7, #12]
 8016cb8:	60b9      	str	r1, [r7, #8]
 8016cba:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8016cbc:	68f8      	ldr	r0, [r7, #12]
 8016cbe:	f7ff ff49 	bl	8016b54 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	68b8      	ldr	r0, [r7, #8]
 8016cc6:	f7ff ff45 	bl	8016b54 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8016cca:	4605      	mov	r5, r0
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7ff ff40 	bl	8016b54 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	4629      	mov	r1, r5
 8016cda:	4620      	mov	r0, r4
 8016cdc:	f000 f857 	bl	8016d8e <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8016ce0:	4602      	mov	r2, r0
 8016ce2:	1d3b      	adds	r3, r7, #4
 8016ce4:	4611      	mov	r1, r2
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f000 f863 	bl	8016db2 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 8016cec:	4603      	mov	r3, r0
    }
 8016cee:	4618      	mov	r0, r3
 8016cf0:	3710      	adds	r7, #16
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bdb0      	pop	{r4, r5, r7, pc}

08016cf6 <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 8016cf6:	b480      	push	{r7}
 8016cf8:	b083      	sub	sp, #12
 8016cfa:	af00      	add	r7, sp, #0
 8016cfc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	4618      	mov	r0, r3
 8016d04:	370c      	adds	r7, #12
 8016d06:	46bd      	mov	sp, r7
 8016d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0c:	4770      	bx	lr

08016d0e <_ZSt12__miter_baseIPPvET_S2_>:
    __miter_base(_Iterator __it)
 8016d0e:	b480      	push	{r7}
 8016d10:	b083      	sub	sp, #12
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	6078      	str	r0, [r7, #4]
    { return __it; }
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	370c      	adds	r7, #12
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d22:	4770      	bx	lr

08016d24 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b086      	sub	sp, #24
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	60f8      	str	r0, [r7, #12]
 8016d2c:	60b9      	str	r1, [r7, #8]
 8016d2e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8016d30:	2301      	movs	r3, #1
 8016d32:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	68b9      	ldr	r1, [r7, #8]
 8016d38:	68f8      	ldr	r0, [r7, #12]
 8016d3a:	f000 f846 	bl	8016dca <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8016d3e:	4603      	mov	r3, r0
    }
 8016d40:	4618      	mov	r0, r3
 8016d42:	3718      	adds	r7, #24
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}

08016d48 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8016d48:	b480      	push	{r7}
 8016d4a:	b083      	sub	sp, #12
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
 8016d50:	6039      	str	r1, [r7, #0]
    { return __res; }
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	4618      	mov	r0, r3
 8016d56:	370c      	adds	r7, #12
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5e:	4770      	bx	lr

08016d60 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 8016d60:	b480      	push	{r7}
 8016d62:	b083      	sub	sp, #12
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	370c      	adds	r7, #12
 8016d70:	46bd      	mov	sp, r7
 8016d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d76:	4770      	bx	lr

08016d78 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8016d78:	b480      	push	{r7}
 8016d7a:	b083      	sub	sp, #12
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	4618      	mov	r0, r3
 8016d84:	370c      	adds	r7, #12
 8016d86:	46bd      	mov	sp, r7
 8016d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8c:	4770      	bx	lr

08016d8e <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8016d8e:	b580      	push	{r7, lr}
 8016d90:	b086      	sub	sp, #24
 8016d92:	af00      	add	r7, sp, #0
 8016d94:	60f8      	str	r0, [r7, #12]
 8016d96:	60b9      	str	r1, [r7, #8]
 8016d98:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8016d9e:	687a      	ldr	r2, [r7, #4]
 8016da0:	68b9      	ldr	r1, [r7, #8]
 8016da2:	68f8      	ldr	r0, [r7, #12]
 8016da4:	f000 f82e 	bl	8016e04 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 8016da8:	4603      	mov	r3, r0
    }
 8016daa:	4618      	mov	r0, r3
 8016dac:	3718      	adds	r7, #24
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}

08016db2 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8016db2:	b480      	push	{r7}
 8016db4:	b083      	sub	sp, #12
 8016db6:	af00      	add	r7, sp, #0
 8016db8:	6078      	str	r0, [r7, #4]
 8016dba:	6039      	str	r1, [r7, #0]
    { return __res; }
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	370c      	adds	r7, #12
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc8:	4770      	bx	lr

08016dca <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b086      	sub	sp, #24
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	60f8      	str	r0, [r7, #12]
 8016dd2:	60b9      	str	r1, [r7, #8]
 8016dd4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8016dd6:	68ba      	ldr	r2, [r7, #8]
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	1ad3      	subs	r3, r2, r3
 8016ddc:	109b      	asrs	r3, r3, #2
 8016dde:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d006      	beq.n	8016df4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	009b      	lsls	r3, r3, #2
 8016dea:	461a      	mov	r2, r3
 8016dec:	68f9      	ldr	r1, [r7, #12]
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f003 fabe 	bl	801a370 <memmove>
	  return __result + _Num;
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	009b      	lsls	r3, r3, #2
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	4413      	add	r3, r2
	}
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	3718      	adds	r7, #24
 8016e00:	46bd      	mov	sp, r7
 8016e02:	bd80      	pop	{r7, pc}

08016e04 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b086      	sub	sp, #24
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	60b9      	str	r1, [r7, #8]
 8016e0e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8016e10:	68ba      	ldr	r2, [r7, #8]
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	1ad3      	subs	r3, r2, r3
 8016e16:	10db      	asrs	r3, r3, #3
 8016e18:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8016e1a:	697b      	ldr	r3, [r7, #20]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d006      	beq.n	8016e2e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016e20:	697b      	ldr	r3, [r7, #20]
 8016e22:	00db      	lsls	r3, r3, #3
 8016e24:	461a      	mov	r2, r3
 8016e26:	68f9      	ldr	r1, [r7, #12]
 8016e28:	6878      	ldr	r0, [r7, #4]
 8016e2a:	f003 faa1 	bl	801a370 <memmove>
	  return __result + _Num;
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	00db      	lsls	r3, r3, #3
 8016e32:	687a      	ldr	r2, [r7, #4]
 8016e34:	4413      	add	r3, r2
	}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3718      	adds	r7, #24
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
	...

08016e40 <_Z41__static_initialization_and_destruction_0ii>:
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b082      	sub	sp, #8
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	6078      	str	r0, [r7, #4]
 8016e48:	6039      	str	r1, [r7, #0]
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2b01      	cmp	r3, #1
 8016e4e:	d150      	bne.n	8016ef2 <_Z41__static_initialization_and_destruction_0ii+0xb2>
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d14b      	bne.n	8016ef2 <_Z41__static_initialization_and_destruction_0ii+0xb2>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 8016e5a:	4b2f      	ldr	r3, [pc, #188]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	f503 7324 	add.w	r3, r3, #656	; 0x290
};const NodeInfo_t nodeData[] = {
 8016e62:	4a2e      	ldr	r2, [pc, #184]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016e64:	6053      	str	r3, [r2, #4]
 8016e66:	4b2c      	ldr	r3, [pc, #176]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	4a2c      	ldr	r2, [pc, #176]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016e6c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
 8016e70:	4b29      	ldr	r3, [pc, #164]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	f503 7324 	add.w	r3, r3, #656	; 0x290
};const NodeInfo_t nodeData[] = {
 8016e78:	4a28      	ldr	r2, [pc, #160]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016e7a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8016e7e:	4b26      	ldr	r3, [pc, #152]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	4a26      	ldr	r2, [pc, #152]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016e84:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 8016e88:	4b23      	ldr	r3, [pc, #140]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8016e90:	4a22      	ldr	r2, [pc, #136]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016e92:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 8016e96:	4b20      	ldr	r3, [pc, #128]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	4a20      	ldr	r2, [pc, #128]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016e9c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
 8016ea0:	4b1d      	ldr	r3, [pc, #116]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8016ea8:	4a1c      	ldr	r2, [pc, #112]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016eaa:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 8016eae:	4b1a      	ldr	r3, [pc, #104]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4a1a      	ldr	r2, [pc, #104]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016eb4:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
 8016eb8:	4b17      	ldr	r3, [pc, #92]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8016ec0:	4a16      	ldr	r2, [pc, #88]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016ec2:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 8016ec6:	4b14      	ldr	r3, [pc, #80]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	4a14      	ldr	r2, [pc, #80]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016ecc:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 8016ed0:	4b11      	ldr	r3, [pc, #68]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	33d0      	adds	r3, #208	; 0xd0
};const NodeInfo_t nodeData[] = {
 8016ed6:	4a11      	ldr	r2, [pc, #68]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016ed8:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 8016edc:	4b0e      	ldr	r3, [pc, #56]	; (8016f18 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	4a0e      	ldr	r2, [pc, #56]	; (8016f1c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016ee2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
static std::vector<void*> overflow_buffers;
 8016ee6:	480e      	ldr	r0, [pc, #56]	; (8016f20 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016ee8:	f7fe fa7d 	bl	80153e6 <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8016eec:	480d      	ldr	r0, [pc, #52]	; (8016f24 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8016eee:	f7fe fae0 	bl	80154b2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d10a      	bne.n	8016f0e <_Z41__static_initialization_and_destruction_0ii+0xce>
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016efe:	4293      	cmp	r3, r2
 8016f00:	d105      	bne.n	8016f0e <_Z41__static_initialization_and_destruction_0ii+0xce>
 8016f02:	4808      	ldr	r0, [pc, #32]	; (8016f24 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8016f04:	f000 f810 	bl	8016f28 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8016f08:	4805      	ldr	r0, [pc, #20]	; (8016f20 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016f0a:	f000 f828 	bl	8016f5e <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8016f0e:	bf00      	nop
 8016f10:	3708      	adds	r7, #8
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}
 8016f16:	bf00      	nop
 8016f18:	20006990 	.word	0x20006990
 8016f1c:	20000104 	.word	0x20000104
 8016f20:	200071d8 	.word	0x200071d8
 8016f24:	200071e4 	.word	0x200071e4

08016f28 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8016f28:	b5b0      	push	{r4, r5, r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	681c      	ldr	r4, [r3, #0]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7ff fb7f 	bl	801663e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016f40:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8016f42:	461a      	mov	r2, r3
 8016f44:	4629      	mov	r1, r5
 8016f46:	4620      	mov	r0, r4
 8016f48:	f7ff fb9d 	bl	8016686 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f7fe fe26 	bl	8015ba0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	4618      	mov	r0, r3
 8016f58:	3708      	adds	r7, #8
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bdb0      	pop	{r4, r5, r7, pc}

08016f5e <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8016f5e:	b5b0      	push	{r4, r5, r7, lr}
 8016f60:	b082      	sub	sp, #8
 8016f62:	af00      	add	r7, sp, #0
 8016f64:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681c      	ldr	r4, [r3, #0]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7ff fa45 	bl	8016400 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016f76:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8016f78:	461a      	mov	r2, r3
 8016f7a:	4629      	mov	r1, r5
 8016f7c:	4620      	mov	r0, r4
 8016f7e:	f7ff fa63 	bl	8016448 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	4618      	mov	r0, r3
 8016f86:	f7fe fdb1 	bl	8015aec <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	3708      	adds	r7, #8
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bdb0      	pop	{r4, r5, r7, pc}

08016f94 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8016f94:	b580      	push	{r7, lr}
 8016f96:	af00      	add	r7, sp, #0
 8016f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016f9c:	2001      	movs	r0, #1
 8016f9e:	f7ff ff4f 	bl	8016e40 <_Z41__static_initialization_and_destruction_0ii>
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016fac:	2000      	movs	r0, #0
 8016fae:	f7ff ff47 	bl	8016e40 <_Z41__static_initialization_and_destruction_0ii>
 8016fb2:	bd80      	pop	{r7, pc}

08016fb4 <_ZdlPv>:
 8016fb4:	f003 b9c6 	b.w	801a344 <free>

08016fb8 <_ZdlPvj>:
 8016fb8:	f7ff bffc 	b.w	8016fb4 <_ZdlPv>

08016fbc <_ZdaPv>:
 8016fbc:	f7ff bffa 	b.w	8016fb4 <_ZdlPv>

08016fc0 <__cxa_guard_acquire>:
 8016fc0:	6803      	ldr	r3, [r0, #0]
 8016fc2:	07db      	lsls	r3, r3, #31
 8016fc4:	d406      	bmi.n	8016fd4 <__cxa_guard_acquire+0x14>
 8016fc6:	7843      	ldrb	r3, [r0, #1]
 8016fc8:	b103      	cbz	r3, 8016fcc <__cxa_guard_acquire+0xc>
 8016fca:	deff      	udf	#255	; 0xff
 8016fcc:	2301      	movs	r3, #1
 8016fce:	7043      	strb	r3, [r0, #1]
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	4770      	bx	lr
 8016fd4:	2000      	movs	r0, #0
 8016fd6:	4770      	bx	lr

08016fd8 <__cxa_guard_release>:
 8016fd8:	2301      	movs	r3, #1
 8016fda:	6003      	str	r3, [r0, #0]
 8016fdc:	4770      	bx	lr

08016fde <_Znwj>:
 8016fde:	2801      	cmp	r0, #1
 8016fe0:	bf38      	it	cc
 8016fe2:	2001      	movcc	r0, #1
 8016fe4:	b510      	push	{r4, lr}
 8016fe6:	4604      	mov	r4, r0
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f003 f9a3 	bl	801a334 <malloc>
 8016fee:	b930      	cbnz	r0, 8016ffe <_Znwj+0x20>
 8016ff0:	f000 f8c2 	bl	8017178 <_ZSt15get_new_handlerv>
 8016ff4:	b908      	cbnz	r0, 8016ffa <_Znwj+0x1c>
 8016ff6:	f003 f8a7 	bl	801a148 <abort>
 8016ffa:	4780      	blx	r0
 8016ffc:	e7f4      	b.n	8016fe8 <_Znwj+0xa>
 8016ffe:	bd10      	pop	{r4, pc}

08017000 <_Znaj>:
 8017000:	f7ff bfed 	b.w	8016fde <_Znwj>

08017004 <_ZSt17__throw_bad_allocv>:
 8017004:	b508      	push	{r3, lr}
 8017006:	f003 f89f 	bl	801a148 <abort>

0801700a <_ZSt19__throw_logic_errorPKc>:
 801700a:	b508      	push	{r3, lr}
 801700c:	f003 f89c 	bl	801a148 <abort>

08017010 <_ZSt20__throw_length_errorPKc>:
 8017010:	b508      	push	{r3, lr}
 8017012:	f003 f899 	bl	801a148 <abort>

08017016 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8017016:	b40f      	push	{r0, r1, r2, r3}
 8017018:	b580      	push	{r7, lr}
 801701a:	b084      	sub	sp, #16
 801701c:	af00      	add	r7, sp, #0
 801701e:	f107 0418 	add.w	r4, r7, #24
 8017022:	f854 2b04 	ldr.w	r2, [r4], #4
 8017026:	607a      	str	r2, [r7, #4]
 8017028:	4610      	mov	r0, r2
 801702a:	f7e9 f8f1 	bl	8000210 <strlen>
 801702e:	f200 2307 	addw	r3, r0, #519	; 0x207
 8017032:	f023 0307 	bic.w	r3, r3, #7
 8017036:	ebad 0d03 	sub.w	sp, sp, r3
 801703a:	f500 7100 	add.w	r1, r0, #512	; 0x200
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	60fc      	str	r4, [r7, #12]
 8017042:	4623      	mov	r3, r4
 8017044:	4668      	mov	r0, sp
 8017046:	f000 f855 	bl	80170f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801704a:	f003 f87d 	bl	801a148 <abort>
	...

08017050 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8017050:	b580      	push	{r7, lr}
 8017052:	b09c      	sub	sp, #112	; 0x70
 8017054:	4606      	mov	r6, r0
 8017056:	af00      	add	r7, sp, #0
 8017058:	460c      	mov	r4, r1
 801705a:	1ba4      	subs	r4, r4, r6
 801705c:	490e      	ldr	r1, [pc, #56]	; (8017098 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801705e:	2269      	movs	r2, #105	; 0x69
 8017060:	1d38      	adds	r0, r7, #4
 8017062:	f003 f977 	bl	801a354 <memcpy>
 8017066:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801706a:	f023 0307 	bic.w	r3, r3, #7
 801706e:	ebad 0d03 	sub.w	sp, sp, r3
 8017072:	466d      	mov	r5, sp
 8017074:	2268      	movs	r2, #104	; 0x68
 8017076:	1d39      	adds	r1, r7, #4
 8017078:	4628      	mov	r0, r5
 801707a:	f003 f96b 	bl	801a354 <memcpy>
 801707e:	4622      	mov	r2, r4
 8017080:	4631      	mov	r1, r6
 8017082:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8017086:	442c      	add	r4, r5
 8017088:	f003 f964 	bl	801a354 <memcpy>
 801708c:	2300      	movs	r3, #0
 801708e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8017092:	4628      	mov	r0, r5
 8017094:	f7ff ffb9 	bl	801700a <_ZSt19__throw_logic_errorPKc>
 8017098:	0803caa8 	.word	0x0803caa8

0801709c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	b084      	sub	sp, #16
 80170a4:	466d      	mov	r5, sp
 80170a6:	f105 040c 	add.w	r4, r5, #12
 80170aa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80170f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 80170ae:	4623      	mov	r3, r4
 80170b0:	f04f 0c0a 	mov.w	ip, #10
 80170b4:	fbb2 f6fc 	udiv	r6, r2, ip
 80170b8:	fb0c 2e16 	mls	lr, ip, r6, r2
 80170bc:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80170c0:	f803 ed01 	strb.w	lr, [r3, #-1]!
 80170c4:	4696      	mov	lr, r2
 80170c6:	f1be 0f09 	cmp.w	lr, #9
 80170ca:	4632      	mov	r2, r6
 80170cc:	d8f2      	bhi.n	80170b4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80170ce:	1ae4      	subs	r4, r4, r3
 80170d0:	428c      	cmp	r4, r1
 80170d2:	d809      	bhi.n	80170e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80170d4:	f1c4 010c 	rsb	r1, r4, #12
 80170d8:	4622      	mov	r2, r4
 80170da:	4429      	add	r1, r5
 80170dc:	f003 f93a 	bl	801a354 <memcpy>
 80170e0:	4620      	mov	r0, r4
 80170e2:	46bd      	mov	sp, r7
 80170e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170e8:	f04f 34ff 	mov.w	r4, #4294967295
 80170ec:	e7f8      	b.n	80170e0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80170ee:	bf00      	nop
 80170f0:	0803cb11 	.word	0x0803cb11

080170f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80170f4:	3901      	subs	r1, #1
 80170f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170fa:	4607      	mov	r7, r0
 80170fc:	4615      	mov	r5, r2
 80170fe:	eb00 0801 	add.w	r8, r0, r1
 8017102:	4604      	mov	r4, r0
 8017104:	782a      	ldrb	r2, [r5, #0]
 8017106:	b362      	cbz	r2, 8017162 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8017108:	4544      	cmp	r4, r8
 801710a:	d22e      	bcs.n	801716a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 801710c:	2a25      	cmp	r2, #37	; 0x25
 801710e:	d107      	bne.n	8017120 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8017110:	786a      	ldrb	r2, [r5, #1]
 8017112:	2a73      	cmp	r2, #115	; 0x73
 8017114:	d009      	beq.n	801712a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8017116:	2a7a      	cmp	r2, #122	; 0x7a
 8017118:	d012      	beq.n	8017140 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 801711a:	2a25      	cmp	r2, #37	; 0x25
 801711c:	d100      	bne.n	8017120 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801711e:	3501      	adds	r5, #1
 8017120:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017124:	f804 2b01 	strb.w	r2, [r4], #1
 8017128:	e7ec      	b.n	8017104 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801712a:	f853 2b04 	ldr.w	r2, [r3], #4
 801712e:	3a01      	subs	r2, #1
 8017130:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8017134:	b1e9      	cbz	r1, 8017172 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 8017136:	4544      	cmp	r4, r8
 8017138:	d017      	beq.n	801716a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 801713a:	f804 1b01 	strb.w	r1, [r4], #1
 801713e:	e7f7      	b.n	8017130 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8017140:	78aa      	ldrb	r2, [r5, #2]
 8017142:	2a75      	cmp	r2, #117	; 0x75
 8017144:	d1ec      	bne.n	8017120 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8017146:	461e      	mov	r6, r3
 8017148:	eba8 0104 	sub.w	r1, r8, r4
 801714c:	f856 2b04 	ldr.w	r2, [r6], #4
 8017150:	4620      	mov	r0, r4
 8017152:	f7ff ffa3 	bl	801709c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8017156:	2800      	cmp	r0, #0
 8017158:	dd07      	ble.n	801716a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 801715a:	4404      	add	r4, r0
 801715c:	3503      	adds	r5, #3
 801715e:	4633      	mov	r3, r6
 8017160:	e7d0      	b.n	8017104 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8017162:	7022      	strb	r2, [r4, #0]
 8017164:	1be0      	subs	r0, r4, r7
 8017166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801716a:	4621      	mov	r1, r4
 801716c:	4638      	mov	r0, r7
 801716e:	f7ff ff6f 	bl	8017050 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8017172:	3502      	adds	r5, #2
 8017174:	e7c6      	b.n	8017104 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
	...

08017178 <_ZSt15get_new_handlerv>:
 8017178:	4b02      	ldr	r3, [pc, #8]	; (8017184 <_ZSt15get_new_handlerv+0xc>)
 801717a:	6818      	ldr	r0, [r3, #0]
 801717c:	f3bf 8f5b 	dmb	ish
 8017180:	4770      	bx	lr
 8017182:	bf00      	nop
 8017184:	200071f0 	.word	0x200071f0

08017188 <cos>:
 8017188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801718a:	ec53 2b10 	vmov	r2, r3, d0
 801718e:	4824      	ldr	r0, [pc, #144]	; (8017220 <cos+0x98>)
 8017190:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017194:	4281      	cmp	r1, r0
 8017196:	dc06      	bgt.n	80171a6 <cos+0x1e>
 8017198:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8017218 <cos+0x90>
 801719c:	f001 fe28 	bl	8018df0 <__kernel_cos>
 80171a0:	ec51 0b10 	vmov	r0, r1, d0
 80171a4:	e007      	b.n	80171b6 <cos+0x2e>
 80171a6:	481f      	ldr	r0, [pc, #124]	; (8017224 <cos+0x9c>)
 80171a8:	4281      	cmp	r1, r0
 80171aa:	dd09      	ble.n	80171c0 <cos+0x38>
 80171ac:	ee10 0a10 	vmov	r0, s0
 80171b0:	4619      	mov	r1, r3
 80171b2:	f7e9 f889 	bl	80002c8 <__aeabi_dsub>
 80171b6:	ec41 0b10 	vmov	d0, r0, r1
 80171ba:	b005      	add	sp, #20
 80171bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80171c0:	4668      	mov	r0, sp
 80171c2:	f001 f941 	bl	8018448 <__ieee754_rem_pio2>
 80171c6:	f000 0003 	and.w	r0, r0, #3
 80171ca:	2801      	cmp	r0, #1
 80171cc:	d007      	beq.n	80171de <cos+0x56>
 80171ce:	2802      	cmp	r0, #2
 80171d0:	d012      	beq.n	80171f8 <cos+0x70>
 80171d2:	b9c0      	cbnz	r0, 8017206 <cos+0x7e>
 80171d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80171d8:	ed9d 0b00 	vldr	d0, [sp]
 80171dc:	e7de      	b.n	801719c <cos+0x14>
 80171de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80171e2:	ed9d 0b00 	vldr	d0, [sp]
 80171e6:	f002 fa0b 	bl	8019600 <__kernel_sin>
 80171ea:	ec53 2b10 	vmov	r2, r3, d0
 80171ee:	ee10 0a10 	vmov	r0, s0
 80171f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80171f6:	e7de      	b.n	80171b6 <cos+0x2e>
 80171f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80171fc:	ed9d 0b00 	vldr	d0, [sp]
 8017200:	f001 fdf6 	bl	8018df0 <__kernel_cos>
 8017204:	e7f1      	b.n	80171ea <cos+0x62>
 8017206:	ed9d 1b02 	vldr	d1, [sp, #8]
 801720a:	ed9d 0b00 	vldr	d0, [sp]
 801720e:	2001      	movs	r0, #1
 8017210:	f002 f9f6 	bl	8019600 <__kernel_sin>
 8017214:	e7c4      	b.n	80171a0 <cos+0x18>
 8017216:	bf00      	nop
	...
 8017220:	3fe921fb 	.word	0x3fe921fb
 8017224:	7fefffff 	.word	0x7fefffff

08017228 <floor>:
 8017228:	ec51 0b10 	vmov	r0, r1, d0
 801722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017230:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017234:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017238:	2e13      	cmp	r6, #19
 801723a:	ee10 5a10 	vmov	r5, s0
 801723e:	ee10 8a10 	vmov	r8, s0
 8017242:	460c      	mov	r4, r1
 8017244:	dc32      	bgt.n	80172ac <floor+0x84>
 8017246:	2e00      	cmp	r6, #0
 8017248:	da14      	bge.n	8017274 <floor+0x4c>
 801724a:	a333      	add	r3, pc, #204	; (adr r3, 8017318 <floor+0xf0>)
 801724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017250:	f7e9 f83c 	bl	80002cc <__adddf3>
 8017254:	2200      	movs	r2, #0
 8017256:	2300      	movs	r3, #0
 8017258:	f7e9 fc7e 	bl	8000b58 <__aeabi_dcmpgt>
 801725c:	b138      	cbz	r0, 801726e <floor+0x46>
 801725e:	2c00      	cmp	r4, #0
 8017260:	da57      	bge.n	8017312 <floor+0xea>
 8017262:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017266:	431d      	orrs	r5, r3
 8017268:	d001      	beq.n	801726e <floor+0x46>
 801726a:	4c2d      	ldr	r4, [pc, #180]	; (8017320 <floor+0xf8>)
 801726c:	2500      	movs	r5, #0
 801726e:	4621      	mov	r1, r4
 8017270:	4628      	mov	r0, r5
 8017272:	e025      	b.n	80172c0 <floor+0x98>
 8017274:	4f2b      	ldr	r7, [pc, #172]	; (8017324 <floor+0xfc>)
 8017276:	4137      	asrs	r7, r6
 8017278:	ea01 0307 	and.w	r3, r1, r7
 801727c:	4303      	orrs	r3, r0
 801727e:	d01f      	beq.n	80172c0 <floor+0x98>
 8017280:	a325      	add	r3, pc, #148	; (adr r3, 8017318 <floor+0xf0>)
 8017282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017286:	f7e9 f821 	bl	80002cc <__adddf3>
 801728a:	2200      	movs	r2, #0
 801728c:	2300      	movs	r3, #0
 801728e:	f7e9 fc63 	bl	8000b58 <__aeabi_dcmpgt>
 8017292:	2800      	cmp	r0, #0
 8017294:	d0eb      	beq.n	801726e <floor+0x46>
 8017296:	2c00      	cmp	r4, #0
 8017298:	bfbe      	ittt	lt
 801729a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801729e:	fa43 f606 	asrlt.w	r6, r3, r6
 80172a2:	19a4      	addlt	r4, r4, r6
 80172a4:	ea24 0407 	bic.w	r4, r4, r7
 80172a8:	2500      	movs	r5, #0
 80172aa:	e7e0      	b.n	801726e <floor+0x46>
 80172ac:	2e33      	cmp	r6, #51	; 0x33
 80172ae:	dd0b      	ble.n	80172c8 <floor+0xa0>
 80172b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80172b4:	d104      	bne.n	80172c0 <floor+0x98>
 80172b6:	ee10 2a10 	vmov	r2, s0
 80172ba:	460b      	mov	r3, r1
 80172bc:	f7e9 f806 	bl	80002cc <__adddf3>
 80172c0:	ec41 0b10 	vmov	d0, r0, r1
 80172c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80172cc:	f04f 33ff 	mov.w	r3, #4294967295
 80172d0:	fa23 f707 	lsr.w	r7, r3, r7
 80172d4:	4207      	tst	r7, r0
 80172d6:	d0f3      	beq.n	80172c0 <floor+0x98>
 80172d8:	a30f      	add	r3, pc, #60	; (adr r3, 8017318 <floor+0xf0>)
 80172da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172de:	f7e8 fff5 	bl	80002cc <__adddf3>
 80172e2:	2200      	movs	r2, #0
 80172e4:	2300      	movs	r3, #0
 80172e6:	f7e9 fc37 	bl	8000b58 <__aeabi_dcmpgt>
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d0bf      	beq.n	801726e <floor+0x46>
 80172ee:	2c00      	cmp	r4, #0
 80172f0:	da02      	bge.n	80172f8 <floor+0xd0>
 80172f2:	2e14      	cmp	r6, #20
 80172f4:	d103      	bne.n	80172fe <floor+0xd6>
 80172f6:	3401      	adds	r4, #1
 80172f8:	ea25 0507 	bic.w	r5, r5, r7
 80172fc:	e7b7      	b.n	801726e <floor+0x46>
 80172fe:	2301      	movs	r3, #1
 8017300:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017304:	fa03 f606 	lsl.w	r6, r3, r6
 8017308:	4435      	add	r5, r6
 801730a:	4545      	cmp	r5, r8
 801730c:	bf38      	it	cc
 801730e:	18e4      	addcc	r4, r4, r3
 8017310:	e7f2      	b.n	80172f8 <floor+0xd0>
 8017312:	2500      	movs	r5, #0
 8017314:	462c      	mov	r4, r5
 8017316:	e7aa      	b.n	801726e <floor+0x46>
 8017318:	8800759c 	.word	0x8800759c
 801731c:	7e37e43c 	.word	0x7e37e43c
 8017320:	bff00000 	.word	0xbff00000
 8017324:	000fffff 	.word	0x000fffff

08017328 <frexp>:
 8017328:	b570      	push	{r4, r5, r6, lr}
 801732a:	2100      	movs	r1, #0
 801732c:	ec55 4b10 	vmov	r4, r5, d0
 8017330:	6001      	str	r1, [r0, #0]
 8017332:	4916      	ldr	r1, [pc, #88]	; (801738c <frexp+0x64>)
 8017334:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8017338:	428a      	cmp	r2, r1
 801733a:	4606      	mov	r6, r0
 801733c:	462b      	mov	r3, r5
 801733e:	dc22      	bgt.n	8017386 <frexp+0x5e>
 8017340:	ee10 1a10 	vmov	r1, s0
 8017344:	4311      	orrs	r1, r2
 8017346:	d01e      	beq.n	8017386 <frexp+0x5e>
 8017348:	4911      	ldr	r1, [pc, #68]	; (8017390 <frexp+0x68>)
 801734a:	4029      	ands	r1, r5
 801734c:	b969      	cbnz	r1, 801736a <frexp+0x42>
 801734e:	4b11      	ldr	r3, [pc, #68]	; (8017394 <frexp+0x6c>)
 8017350:	2200      	movs	r2, #0
 8017352:	ee10 0a10 	vmov	r0, s0
 8017356:	4629      	mov	r1, r5
 8017358:	f7e9 f96e 	bl	8000638 <__aeabi_dmul>
 801735c:	460b      	mov	r3, r1
 801735e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017362:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8017366:	4604      	mov	r4, r0
 8017368:	6031      	str	r1, [r6, #0]
 801736a:	6831      	ldr	r1, [r6, #0]
 801736c:	1512      	asrs	r2, r2, #20
 801736e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017372:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8017376:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801737a:	440a      	add	r2, r1
 801737c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8017380:	6032      	str	r2, [r6, #0]
 8017382:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8017386:	ec45 4b10 	vmov	d0, r4, r5
 801738a:	bd70      	pop	{r4, r5, r6, pc}
 801738c:	7fefffff 	.word	0x7fefffff
 8017390:	7ff00000 	.word	0x7ff00000
 8017394:	43500000 	.word	0x43500000

08017398 <round>:
 8017398:	ec51 0b10 	vmov	r0, r1, d0
 801739c:	b570      	push	{r4, r5, r6, lr}
 801739e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80173a2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80173a6:	2c13      	cmp	r4, #19
 80173a8:	ee10 2a10 	vmov	r2, s0
 80173ac:	460b      	mov	r3, r1
 80173ae:	dc19      	bgt.n	80173e4 <round+0x4c>
 80173b0:	2c00      	cmp	r4, #0
 80173b2:	da09      	bge.n	80173c8 <round+0x30>
 80173b4:	3401      	adds	r4, #1
 80173b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80173ba:	d103      	bne.n	80173c4 <round+0x2c>
 80173bc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80173c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80173c4:	2100      	movs	r1, #0
 80173c6:	e028      	b.n	801741a <round+0x82>
 80173c8:	4d15      	ldr	r5, [pc, #84]	; (8017420 <round+0x88>)
 80173ca:	4125      	asrs	r5, r4
 80173cc:	ea01 0605 	and.w	r6, r1, r5
 80173d0:	4332      	orrs	r2, r6
 80173d2:	d00e      	beq.n	80173f2 <round+0x5a>
 80173d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80173d8:	fa42 f404 	asr.w	r4, r2, r4
 80173dc:	4423      	add	r3, r4
 80173de:	ea23 0305 	bic.w	r3, r3, r5
 80173e2:	e7ef      	b.n	80173c4 <round+0x2c>
 80173e4:	2c33      	cmp	r4, #51	; 0x33
 80173e6:	dd07      	ble.n	80173f8 <round+0x60>
 80173e8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80173ec:	d101      	bne.n	80173f2 <round+0x5a>
 80173ee:	f7e8 ff6d 	bl	80002cc <__adddf3>
 80173f2:	ec41 0b10 	vmov	d0, r0, r1
 80173f6:	bd70      	pop	{r4, r5, r6, pc}
 80173f8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80173fc:	f04f 35ff 	mov.w	r5, #4294967295
 8017400:	40f5      	lsrs	r5, r6
 8017402:	4228      	tst	r0, r5
 8017404:	d0f5      	beq.n	80173f2 <round+0x5a>
 8017406:	2101      	movs	r1, #1
 8017408:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801740c:	fa01 f404 	lsl.w	r4, r1, r4
 8017410:	1912      	adds	r2, r2, r4
 8017412:	bf28      	it	cs
 8017414:	185b      	addcs	r3, r3, r1
 8017416:	ea22 0105 	bic.w	r1, r2, r5
 801741a:	4608      	mov	r0, r1
 801741c:	4619      	mov	r1, r3
 801741e:	e7e8      	b.n	80173f2 <round+0x5a>
 8017420:	000fffff 	.word	0x000fffff
 8017424:	00000000 	.word	0x00000000

08017428 <sin>:
 8017428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801742a:	ec53 2b10 	vmov	r2, r3, d0
 801742e:	4826      	ldr	r0, [pc, #152]	; (80174c8 <sin+0xa0>)
 8017430:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017434:	4281      	cmp	r1, r0
 8017436:	dc07      	bgt.n	8017448 <sin+0x20>
 8017438:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80174c0 <sin+0x98>
 801743c:	2000      	movs	r0, #0
 801743e:	f002 f8df 	bl	8019600 <__kernel_sin>
 8017442:	ec51 0b10 	vmov	r0, r1, d0
 8017446:	e007      	b.n	8017458 <sin+0x30>
 8017448:	4820      	ldr	r0, [pc, #128]	; (80174cc <sin+0xa4>)
 801744a:	4281      	cmp	r1, r0
 801744c:	dd09      	ble.n	8017462 <sin+0x3a>
 801744e:	ee10 0a10 	vmov	r0, s0
 8017452:	4619      	mov	r1, r3
 8017454:	f7e8 ff38 	bl	80002c8 <__aeabi_dsub>
 8017458:	ec41 0b10 	vmov	d0, r0, r1
 801745c:	b005      	add	sp, #20
 801745e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017462:	4668      	mov	r0, sp
 8017464:	f000 fff0 	bl	8018448 <__ieee754_rem_pio2>
 8017468:	f000 0003 	and.w	r0, r0, #3
 801746c:	2801      	cmp	r0, #1
 801746e:	d008      	beq.n	8017482 <sin+0x5a>
 8017470:	2802      	cmp	r0, #2
 8017472:	d00d      	beq.n	8017490 <sin+0x68>
 8017474:	b9d0      	cbnz	r0, 80174ac <sin+0x84>
 8017476:	ed9d 1b02 	vldr	d1, [sp, #8]
 801747a:	ed9d 0b00 	vldr	d0, [sp]
 801747e:	2001      	movs	r0, #1
 8017480:	e7dd      	b.n	801743e <sin+0x16>
 8017482:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017486:	ed9d 0b00 	vldr	d0, [sp]
 801748a:	f001 fcb1 	bl	8018df0 <__kernel_cos>
 801748e:	e7d8      	b.n	8017442 <sin+0x1a>
 8017490:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017494:	ed9d 0b00 	vldr	d0, [sp]
 8017498:	2001      	movs	r0, #1
 801749a:	f002 f8b1 	bl	8019600 <__kernel_sin>
 801749e:	ec53 2b10 	vmov	r2, r3, d0
 80174a2:	ee10 0a10 	vmov	r0, s0
 80174a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80174aa:	e7d5      	b.n	8017458 <sin+0x30>
 80174ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80174b0:	ed9d 0b00 	vldr	d0, [sp]
 80174b4:	f001 fc9c 	bl	8018df0 <__kernel_cos>
 80174b8:	e7f1      	b.n	801749e <sin+0x76>
 80174ba:	bf00      	nop
 80174bc:	f3af 8000 	nop.w
	...
 80174c8:	3fe921fb 	.word	0x3fe921fb
 80174cc:	7fefffff 	.word	0x7fefffff

080174d0 <ceilf>:
 80174d0:	ee10 3a10 	vmov	r3, s0
 80174d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80174d8:	3a7f      	subs	r2, #127	; 0x7f
 80174da:	2a16      	cmp	r2, #22
 80174dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80174e0:	dc2a      	bgt.n	8017538 <ceilf+0x68>
 80174e2:	2a00      	cmp	r2, #0
 80174e4:	da11      	bge.n	801750a <ceilf+0x3a>
 80174e6:	eddf 7a19 	vldr	s15, [pc, #100]	; 801754c <ceilf+0x7c>
 80174ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80174ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80174f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f6:	dd05      	ble.n	8017504 <ceilf+0x34>
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	db23      	blt.n	8017544 <ceilf+0x74>
 80174fc:	2900      	cmp	r1, #0
 80174fe:	bf18      	it	ne
 8017500:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8017504:	ee00 3a10 	vmov	s0, r3
 8017508:	4770      	bx	lr
 801750a:	4911      	ldr	r1, [pc, #68]	; (8017550 <ceilf+0x80>)
 801750c:	4111      	asrs	r1, r2
 801750e:	420b      	tst	r3, r1
 8017510:	d0fa      	beq.n	8017508 <ceilf+0x38>
 8017512:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801754c <ceilf+0x7c>
 8017516:	ee30 0a27 	vadd.f32	s0, s0, s15
 801751a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801751e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017522:	ddef      	ble.n	8017504 <ceilf+0x34>
 8017524:	2b00      	cmp	r3, #0
 8017526:	bfc2      	ittt	gt
 8017528:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801752c:	fa40 f202 	asrgt.w	r2, r0, r2
 8017530:	189b      	addgt	r3, r3, r2
 8017532:	ea23 0301 	bic.w	r3, r3, r1
 8017536:	e7e5      	b.n	8017504 <ceilf+0x34>
 8017538:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801753c:	d3e4      	bcc.n	8017508 <ceilf+0x38>
 801753e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017542:	4770      	bx	lr
 8017544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017548:	e7dc      	b.n	8017504 <ceilf+0x34>
 801754a:	bf00      	nop
 801754c:	7149f2ca 	.word	0x7149f2ca
 8017550:	007fffff 	.word	0x007fffff

08017554 <cosf>:
 8017554:	ee10 3a10 	vmov	r3, s0
 8017558:	b507      	push	{r0, r1, r2, lr}
 801755a:	4a1c      	ldr	r2, [pc, #112]	; (80175cc <cosf+0x78>)
 801755c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017560:	4293      	cmp	r3, r2
 8017562:	dc04      	bgt.n	801756e <cosf+0x1a>
 8017564:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80175d0 <cosf+0x7c>
 8017568:	f002 f908 	bl	801977c <__kernel_cosf>
 801756c:	e004      	b.n	8017578 <cosf+0x24>
 801756e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017572:	db04      	blt.n	801757e <cosf+0x2a>
 8017574:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017578:	b003      	add	sp, #12
 801757a:	f85d fb04 	ldr.w	pc, [sp], #4
 801757e:	4668      	mov	r0, sp
 8017580:	f001 faf4 	bl	8018b6c <__ieee754_rem_pio2f>
 8017584:	f000 0003 	and.w	r0, r0, #3
 8017588:	2801      	cmp	r0, #1
 801758a:	d007      	beq.n	801759c <cosf+0x48>
 801758c:	2802      	cmp	r0, #2
 801758e:	d00e      	beq.n	80175ae <cosf+0x5a>
 8017590:	b9a0      	cbnz	r0, 80175bc <cosf+0x68>
 8017592:	eddd 0a01 	vldr	s1, [sp, #4]
 8017596:	ed9d 0a00 	vldr	s0, [sp]
 801759a:	e7e5      	b.n	8017568 <cosf+0x14>
 801759c:	eddd 0a01 	vldr	s1, [sp, #4]
 80175a0:	ed9d 0a00 	vldr	s0, [sp]
 80175a4:	f002 fbd4 	bl	8019d50 <__kernel_sinf>
 80175a8:	eeb1 0a40 	vneg.f32	s0, s0
 80175ac:	e7e4      	b.n	8017578 <cosf+0x24>
 80175ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80175b2:	ed9d 0a00 	vldr	s0, [sp]
 80175b6:	f002 f8e1 	bl	801977c <__kernel_cosf>
 80175ba:	e7f5      	b.n	80175a8 <cosf+0x54>
 80175bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80175c0:	ed9d 0a00 	vldr	s0, [sp]
 80175c4:	2001      	movs	r0, #1
 80175c6:	f002 fbc3 	bl	8019d50 <__kernel_sinf>
 80175ca:	e7d5      	b.n	8017578 <cosf+0x24>
 80175cc:	3f490fd8 	.word	0x3f490fd8
 80175d0:	00000000 	.word	0x00000000

080175d4 <floorf>:
 80175d4:	ee10 3a10 	vmov	r3, s0
 80175d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80175dc:	3a7f      	subs	r2, #127	; 0x7f
 80175de:	2a16      	cmp	r2, #22
 80175e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80175e4:	dc2a      	bgt.n	801763c <floorf+0x68>
 80175e6:	2a00      	cmp	r2, #0
 80175e8:	da11      	bge.n	801760e <floorf+0x3a>
 80175ea:	eddf 7a18 	vldr	s15, [pc, #96]	; 801764c <floorf+0x78>
 80175ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80175f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80175f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175fa:	dd05      	ble.n	8017608 <floorf+0x34>
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	da23      	bge.n	8017648 <floorf+0x74>
 8017600:	4a13      	ldr	r2, [pc, #76]	; (8017650 <floorf+0x7c>)
 8017602:	2900      	cmp	r1, #0
 8017604:	bf18      	it	ne
 8017606:	4613      	movne	r3, r2
 8017608:	ee00 3a10 	vmov	s0, r3
 801760c:	4770      	bx	lr
 801760e:	4911      	ldr	r1, [pc, #68]	; (8017654 <floorf+0x80>)
 8017610:	4111      	asrs	r1, r2
 8017612:	420b      	tst	r3, r1
 8017614:	d0fa      	beq.n	801760c <floorf+0x38>
 8017616:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801764c <floorf+0x78>
 801761a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801761e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017626:	ddef      	ble.n	8017608 <floorf+0x34>
 8017628:	2b00      	cmp	r3, #0
 801762a:	bfbe      	ittt	lt
 801762c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017630:	fa40 f202 	asrlt.w	r2, r0, r2
 8017634:	189b      	addlt	r3, r3, r2
 8017636:	ea23 0301 	bic.w	r3, r3, r1
 801763a:	e7e5      	b.n	8017608 <floorf+0x34>
 801763c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017640:	d3e4      	bcc.n	801760c <floorf+0x38>
 8017642:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017646:	4770      	bx	lr
 8017648:	2300      	movs	r3, #0
 801764a:	e7dd      	b.n	8017608 <floorf+0x34>
 801764c:	7149f2ca 	.word	0x7149f2ca
 8017650:	bf800000 	.word	0xbf800000
 8017654:	007fffff 	.word	0x007fffff

08017658 <fmaf>:
 8017658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801765a:	ee10 0a10 	vmov	r0, s0
 801765e:	ee10 7a90 	vmov	r7, s1
 8017662:	ee11 6a10 	vmov	r6, s2
 8017666:	f7e8 ff8f 	bl	8000588 <__aeabi_f2d>
 801766a:	4604      	mov	r4, r0
 801766c:	4638      	mov	r0, r7
 801766e:	460d      	mov	r5, r1
 8017670:	f7e8 ff8a 	bl	8000588 <__aeabi_f2d>
 8017674:	4602      	mov	r2, r0
 8017676:	460b      	mov	r3, r1
 8017678:	4620      	mov	r0, r4
 801767a:	4629      	mov	r1, r5
 801767c:	f7e8 ffdc 	bl	8000638 <__aeabi_dmul>
 8017680:	4604      	mov	r4, r0
 8017682:	4630      	mov	r0, r6
 8017684:	460d      	mov	r5, r1
 8017686:	f7e8 ff7f 	bl	8000588 <__aeabi_f2d>
 801768a:	4602      	mov	r2, r0
 801768c:	460b      	mov	r3, r1
 801768e:	4620      	mov	r0, r4
 8017690:	4629      	mov	r1, r5
 8017692:	f7e8 fe1b 	bl	80002cc <__adddf3>
 8017696:	f7e9 fac7 	bl	8000c28 <__aeabi_d2f>
 801769a:	ee00 0a10 	vmov	s0, r0
 801769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080176a0 <roundf>:
 80176a0:	ee10 0a10 	vmov	r0, s0
 80176a4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80176a8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80176ac:	2a16      	cmp	r2, #22
 80176ae:	dc15      	bgt.n	80176dc <roundf+0x3c>
 80176b0:	2a00      	cmp	r2, #0
 80176b2:	da08      	bge.n	80176c6 <roundf+0x26>
 80176b4:	3201      	adds	r2, #1
 80176b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80176ba:	d101      	bne.n	80176c0 <roundf+0x20>
 80176bc:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80176c0:	ee00 3a10 	vmov	s0, r3
 80176c4:	4770      	bx	lr
 80176c6:	4908      	ldr	r1, [pc, #32]	; (80176e8 <roundf+0x48>)
 80176c8:	4111      	asrs	r1, r2
 80176ca:	4208      	tst	r0, r1
 80176cc:	d0fa      	beq.n	80176c4 <roundf+0x24>
 80176ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80176d2:	4113      	asrs	r3, r2
 80176d4:	4403      	add	r3, r0
 80176d6:	ea23 0301 	bic.w	r3, r3, r1
 80176da:	e7f1      	b.n	80176c0 <roundf+0x20>
 80176dc:	2a80      	cmp	r2, #128	; 0x80
 80176de:	d1f1      	bne.n	80176c4 <roundf+0x24>
 80176e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80176e4:	4770      	bx	lr
 80176e6:	bf00      	nop
 80176e8:	007fffff 	.word	0x007fffff

080176ec <sinf>:
 80176ec:	ee10 3a10 	vmov	r3, s0
 80176f0:	b507      	push	{r0, r1, r2, lr}
 80176f2:	4a1d      	ldr	r2, [pc, #116]	; (8017768 <sinf+0x7c>)
 80176f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80176f8:	4293      	cmp	r3, r2
 80176fa:	dc05      	bgt.n	8017708 <sinf+0x1c>
 80176fc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801776c <sinf+0x80>
 8017700:	2000      	movs	r0, #0
 8017702:	f002 fb25 	bl	8019d50 <__kernel_sinf>
 8017706:	e004      	b.n	8017712 <sinf+0x26>
 8017708:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801770c:	db04      	blt.n	8017718 <sinf+0x2c>
 801770e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017712:	b003      	add	sp, #12
 8017714:	f85d fb04 	ldr.w	pc, [sp], #4
 8017718:	4668      	mov	r0, sp
 801771a:	f001 fa27 	bl	8018b6c <__ieee754_rem_pio2f>
 801771e:	f000 0003 	and.w	r0, r0, #3
 8017722:	2801      	cmp	r0, #1
 8017724:	d008      	beq.n	8017738 <sinf+0x4c>
 8017726:	2802      	cmp	r0, #2
 8017728:	d00d      	beq.n	8017746 <sinf+0x5a>
 801772a:	b9b0      	cbnz	r0, 801775a <sinf+0x6e>
 801772c:	eddd 0a01 	vldr	s1, [sp, #4]
 8017730:	ed9d 0a00 	vldr	s0, [sp]
 8017734:	2001      	movs	r0, #1
 8017736:	e7e4      	b.n	8017702 <sinf+0x16>
 8017738:	eddd 0a01 	vldr	s1, [sp, #4]
 801773c:	ed9d 0a00 	vldr	s0, [sp]
 8017740:	f002 f81c 	bl	801977c <__kernel_cosf>
 8017744:	e7e5      	b.n	8017712 <sinf+0x26>
 8017746:	eddd 0a01 	vldr	s1, [sp, #4]
 801774a:	ed9d 0a00 	vldr	s0, [sp]
 801774e:	2001      	movs	r0, #1
 8017750:	f002 fafe 	bl	8019d50 <__kernel_sinf>
 8017754:	eeb1 0a40 	vneg.f32	s0, s0
 8017758:	e7db      	b.n	8017712 <sinf+0x26>
 801775a:	eddd 0a01 	vldr	s1, [sp, #4]
 801775e:	ed9d 0a00 	vldr	s0, [sp]
 8017762:	f002 f80b 	bl	801977c <__kernel_cosf>
 8017766:	e7f5      	b.n	8017754 <sinf+0x68>
 8017768:	3f490fd8 	.word	0x3f490fd8
 801776c:	00000000 	.word	0x00000000

08017770 <pow>:
 8017770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017774:	ec59 8b10 	vmov	r8, r9, d0
 8017778:	ec57 6b11 	vmov	r6, r7, d1
 801777c:	f000 f940 	bl	8017a00 <__ieee754_pow>
 8017780:	4b4e      	ldr	r3, [pc, #312]	; (80178bc <pow+0x14c>)
 8017782:	f993 3000 	ldrsb.w	r3, [r3]
 8017786:	3301      	adds	r3, #1
 8017788:	ec55 4b10 	vmov	r4, r5, d0
 801778c:	d015      	beq.n	80177ba <pow+0x4a>
 801778e:	4632      	mov	r2, r6
 8017790:	463b      	mov	r3, r7
 8017792:	4630      	mov	r0, r6
 8017794:	4639      	mov	r1, r7
 8017796:	f7e9 f9e9 	bl	8000b6c <__aeabi_dcmpun>
 801779a:	b970      	cbnz	r0, 80177ba <pow+0x4a>
 801779c:	4642      	mov	r2, r8
 801779e:	464b      	mov	r3, r9
 80177a0:	4640      	mov	r0, r8
 80177a2:	4649      	mov	r1, r9
 80177a4:	f7e9 f9e2 	bl	8000b6c <__aeabi_dcmpun>
 80177a8:	2200      	movs	r2, #0
 80177aa:	2300      	movs	r3, #0
 80177ac:	b148      	cbz	r0, 80177c2 <pow+0x52>
 80177ae:	4630      	mov	r0, r6
 80177b0:	4639      	mov	r1, r7
 80177b2:	f7e9 f9a9 	bl	8000b08 <__aeabi_dcmpeq>
 80177b6:	2800      	cmp	r0, #0
 80177b8:	d17d      	bne.n	80178b6 <pow+0x146>
 80177ba:	ec45 4b10 	vmov	d0, r4, r5
 80177be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177c2:	4640      	mov	r0, r8
 80177c4:	4649      	mov	r1, r9
 80177c6:	f7e9 f99f 	bl	8000b08 <__aeabi_dcmpeq>
 80177ca:	b1e0      	cbz	r0, 8017806 <pow+0x96>
 80177cc:	2200      	movs	r2, #0
 80177ce:	2300      	movs	r3, #0
 80177d0:	4630      	mov	r0, r6
 80177d2:	4639      	mov	r1, r7
 80177d4:	f7e9 f998 	bl	8000b08 <__aeabi_dcmpeq>
 80177d8:	2800      	cmp	r0, #0
 80177da:	d16c      	bne.n	80178b6 <pow+0x146>
 80177dc:	ec47 6b10 	vmov	d0, r6, r7
 80177e0:	f002 fb07 	bl	8019df2 <finite>
 80177e4:	2800      	cmp	r0, #0
 80177e6:	d0e8      	beq.n	80177ba <pow+0x4a>
 80177e8:	2200      	movs	r2, #0
 80177ea:	2300      	movs	r3, #0
 80177ec:	4630      	mov	r0, r6
 80177ee:	4639      	mov	r1, r7
 80177f0:	f7e9 f994 	bl	8000b1c <__aeabi_dcmplt>
 80177f4:	2800      	cmp	r0, #0
 80177f6:	d0e0      	beq.n	80177ba <pow+0x4a>
 80177f8:	f002 fcda 	bl	801a1b0 <__errno>
 80177fc:	2321      	movs	r3, #33	; 0x21
 80177fe:	6003      	str	r3, [r0, #0]
 8017800:	2400      	movs	r4, #0
 8017802:	4d2f      	ldr	r5, [pc, #188]	; (80178c0 <pow+0x150>)
 8017804:	e7d9      	b.n	80177ba <pow+0x4a>
 8017806:	ec45 4b10 	vmov	d0, r4, r5
 801780a:	f002 faf2 	bl	8019df2 <finite>
 801780e:	bbb8      	cbnz	r0, 8017880 <pow+0x110>
 8017810:	ec49 8b10 	vmov	d0, r8, r9
 8017814:	f002 faed 	bl	8019df2 <finite>
 8017818:	b390      	cbz	r0, 8017880 <pow+0x110>
 801781a:	ec47 6b10 	vmov	d0, r6, r7
 801781e:	f002 fae8 	bl	8019df2 <finite>
 8017822:	b368      	cbz	r0, 8017880 <pow+0x110>
 8017824:	4622      	mov	r2, r4
 8017826:	462b      	mov	r3, r5
 8017828:	4620      	mov	r0, r4
 801782a:	4629      	mov	r1, r5
 801782c:	f7e9 f99e 	bl	8000b6c <__aeabi_dcmpun>
 8017830:	b160      	cbz	r0, 801784c <pow+0xdc>
 8017832:	f002 fcbd 	bl	801a1b0 <__errno>
 8017836:	2321      	movs	r3, #33	; 0x21
 8017838:	6003      	str	r3, [r0, #0]
 801783a:	2200      	movs	r2, #0
 801783c:	2300      	movs	r3, #0
 801783e:	4610      	mov	r0, r2
 8017840:	4619      	mov	r1, r3
 8017842:	f7e9 f823 	bl	800088c <__aeabi_ddiv>
 8017846:	4604      	mov	r4, r0
 8017848:	460d      	mov	r5, r1
 801784a:	e7b6      	b.n	80177ba <pow+0x4a>
 801784c:	f002 fcb0 	bl	801a1b0 <__errno>
 8017850:	2322      	movs	r3, #34	; 0x22
 8017852:	6003      	str	r3, [r0, #0]
 8017854:	2200      	movs	r2, #0
 8017856:	2300      	movs	r3, #0
 8017858:	4640      	mov	r0, r8
 801785a:	4649      	mov	r1, r9
 801785c:	f7e9 f95e 	bl	8000b1c <__aeabi_dcmplt>
 8017860:	2400      	movs	r4, #0
 8017862:	b158      	cbz	r0, 801787c <pow+0x10c>
 8017864:	ec47 6b10 	vmov	d0, r6, r7
 8017868:	f002 fad6 	bl	8019e18 <rint>
 801786c:	4632      	mov	r2, r6
 801786e:	ec51 0b10 	vmov	r0, r1, d0
 8017872:	463b      	mov	r3, r7
 8017874:	f7e9 f948 	bl	8000b08 <__aeabi_dcmpeq>
 8017878:	2800      	cmp	r0, #0
 801787a:	d0c2      	beq.n	8017802 <pow+0x92>
 801787c:	4d11      	ldr	r5, [pc, #68]	; (80178c4 <pow+0x154>)
 801787e:	e79c      	b.n	80177ba <pow+0x4a>
 8017880:	2200      	movs	r2, #0
 8017882:	2300      	movs	r3, #0
 8017884:	4620      	mov	r0, r4
 8017886:	4629      	mov	r1, r5
 8017888:	f7e9 f93e 	bl	8000b08 <__aeabi_dcmpeq>
 801788c:	2800      	cmp	r0, #0
 801788e:	d094      	beq.n	80177ba <pow+0x4a>
 8017890:	ec49 8b10 	vmov	d0, r8, r9
 8017894:	f002 faad 	bl	8019df2 <finite>
 8017898:	2800      	cmp	r0, #0
 801789a:	d08e      	beq.n	80177ba <pow+0x4a>
 801789c:	ec47 6b10 	vmov	d0, r6, r7
 80178a0:	f002 faa7 	bl	8019df2 <finite>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d088      	beq.n	80177ba <pow+0x4a>
 80178a8:	f002 fc82 	bl	801a1b0 <__errno>
 80178ac:	2322      	movs	r3, #34	; 0x22
 80178ae:	6003      	str	r3, [r0, #0]
 80178b0:	2400      	movs	r4, #0
 80178b2:	2500      	movs	r5, #0
 80178b4:	e781      	b.n	80177ba <pow+0x4a>
 80178b6:	4d04      	ldr	r5, [pc, #16]	; (80178c8 <pow+0x158>)
 80178b8:	2400      	movs	r4, #0
 80178ba:	e77e      	b.n	80177ba <pow+0x4a>
 80178bc:	2000032c 	.word	0x2000032c
 80178c0:	fff00000 	.word	0xfff00000
 80178c4:	7ff00000 	.word	0x7ff00000
 80178c8:	3ff00000 	.word	0x3ff00000

080178cc <sqrt>:
 80178cc:	b538      	push	{r3, r4, r5, lr}
 80178ce:	ed2d 8b02 	vpush	{d8}
 80178d2:	ec55 4b10 	vmov	r4, r5, d0
 80178d6:	f000 ffc1 	bl	801885c <__ieee754_sqrt>
 80178da:	4b15      	ldr	r3, [pc, #84]	; (8017930 <sqrt+0x64>)
 80178dc:	eeb0 8a40 	vmov.f32	s16, s0
 80178e0:	eef0 8a60 	vmov.f32	s17, s1
 80178e4:	f993 3000 	ldrsb.w	r3, [r3]
 80178e8:	3301      	adds	r3, #1
 80178ea:	d019      	beq.n	8017920 <sqrt+0x54>
 80178ec:	4622      	mov	r2, r4
 80178ee:	462b      	mov	r3, r5
 80178f0:	4620      	mov	r0, r4
 80178f2:	4629      	mov	r1, r5
 80178f4:	f7e9 f93a 	bl	8000b6c <__aeabi_dcmpun>
 80178f8:	b990      	cbnz	r0, 8017920 <sqrt+0x54>
 80178fa:	2200      	movs	r2, #0
 80178fc:	2300      	movs	r3, #0
 80178fe:	4620      	mov	r0, r4
 8017900:	4629      	mov	r1, r5
 8017902:	f7e9 f90b 	bl	8000b1c <__aeabi_dcmplt>
 8017906:	b158      	cbz	r0, 8017920 <sqrt+0x54>
 8017908:	f002 fc52 	bl	801a1b0 <__errno>
 801790c:	2321      	movs	r3, #33	; 0x21
 801790e:	6003      	str	r3, [r0, #0]
 8017910:	2200      	movs	r2, #0
 8017912:	2300      	movs	r3, #0
 8017914:	4610      	mov	r0, r2
 8017916:	4619      	mov	r1, r3
 8017918:	f7e8 ffb8 	bl	800088c <__aeabi_ddiv>
 801791c:	ec41 0b18 	vmov	d8, r0, r1
 8017920:	eeb0 0a48 	vmov.f32	s0, s16
 8017924:	eef0 0a68 	vmov.f32	s1, s17
 8017928:	ecbd 8b02 	vpop	{d8}
 801792c:	bd38      	pop	{r3, r4, r5, pc}
 801792e:	bf00      	nop
 8017930:	2000032c 	.word	0x2000032c

08017934 <expf>:
 8017934:	b508      	push	{r3, lr}
 8017936:	ed2d 8b02 	vpush	{d8}
 801793a:	eef0 8a40 	vmov.f32	s17, s0
 801793e:	f001 f841 	bl	80189c4 <__ieee754_expf>
 8017942:	4b16      	ldr	r3, [pc, #88]	; (801799c <expf+0x68>)
 8017944:	f993 3000 	ldrsb.w	r3, [r3]
 8017948:	3301      	adds	r3, #1
 801794a:	eeb0 8a40 	vmov.f32	s16, s0
 801794e:	d011      	beq.n	8017974 <expf+0x40>
 8017950:	eeb0 0a68 	vmov.f32	s0, s17
 8017954:	f002 fb79 	bl	801a04a <finitef>
 8017958:	b160      	cbz	r0, 8017974 <expf+0x40>
 801795a:	eddf 7a11 	vldr	s15, [pc, #68]	; 80179a0 <expf+0x6c>
 801795e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017966:	dd0a      	ble.n	801797e <expf+0x4a>
 8017968:	f002 fc22 	bl	801a1b0 <__errno>
 801796c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80179a4 <expf+0x70>
 8017970:	2322      	movs	r3, #34	; 0x22
 8017972:	6003      	str	r3, [r0, #0]
 8017974:	eeb0 0a48 	vmov.f32	s0, s16
 8017978:	ecbd 8b02 	vpop	{d8}
 801797c:	bd08      	pop	{r3, pc}
 801797e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80179a8 <expf+0x74>
 8017982:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801798a:	d5f3      	bpl.n	8017974 <expf+0x40>
 801798c:	f002 fc10 	bl	801a1b0 <__errno>
 8017990:	2322      	movs	r3, #34	; 0x22
 8017992:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80179ac <expf+0x78>
 8017996:	6003      	str	r3, [r0, #0]
 8017998:	e7ec      	b.n	8017974 <expf+0x40>
 801799a:	bf00      	nop
 801799c:	2000032c 	.word	0x2000032c
 80179a0:	42b17180 	.word	0x42b17180
 80179a4:	7f800000 	.word	0x7f800000
 80179a8:	c2cff1b5 	.word	0xc2cff1b5
 80179ac:	00000000 	.word	0x00000000

080179b0 <sqrtf>:
 80179b0:	b508      	push	{r3, lr}
 80179b2:	ed2d 8b02 	vpush	{d8}
 80179b6:	eeb0 8a40 	vmov.f32	s16, s0
 80179ba:	f001 fa13 	bl	8018de4 <__ieee754_sqrtf>
 80179be:	4b0d      	ldr	r3, [pc, #52]	; (80179f4 <sqrtf+0x44>)
 80179c0:	f993 3000 	ldrsb.w	r3, [r3]
 80179c4:	3301      	adds	r3, #1
 80179c6:	d011      	beq.n	80179ec <sqrtf+0x3c>
 80179c8:	eeb4 8a48 	vcmp.f32	s16, s16
 80179cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179d0:	d60c      	bvs.n	80179ec <sqrtf+0x3c>
 80179d2:	eddf 8a09 	vldr	s17, [pc, #36]	; 80179f8 <sqrtf+0x48>
 80179d6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80179da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179de:	d505      	bpl.n	80179ec <sqrtf+0x3c>
 80179e0:	f002 fbe6 	bl	801a1b0 <__errno>
 80179e4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80179e8:	2321      	movs	r3, #33	; 0x21
 80179ea:	6003      	str	r3, [r0, #0]
 80179ec:	ecbd 8b02 	vpop	{d8}
 80179f0:	bd08      	pop	{r3, pc}
 80179f2:	bf00      	nop
 80179f4:	2000032c 	.word	0x2000032c
	...

08017a00 <__ieee754_pow>:
 8017a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a04:	ed2d 8b06 	vpush	{d8-d10}
 8017a08:	b08d      	sub	sp, #52	; 0x34
 8017a0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8017a0e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8017a12:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8017a16:	ea56 0100 	orrs.w	r1, r6, r0
 8017a1a:	ec53 2b10 	vmov	r2, r3, d0
 8017a1e:	f000 84d1 	beq.w	80183c4 <__ieee754_pow+0x9c4>
 8017a22:	497f      	ldr	r1, [pc, #508]	; (8017c20 <__ieee754_pow+0x220>)
 8017a24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017a28:	428c      	cmp	r4, r1
 8017a2a:	ee10 8a10 	vmov	r8, s0
 8017a2e:	4699      	mov	r9, r3
 8017a30:	dc09      	bgt.n	8017a46 <__ieee754_pow+0x46>
 8017a32:	d103      	bne.n	8017a3c <__ieee754_pow+0x3c>
 8017a34:	b97a      	cbnz	r2, 8017a56 <__ieee754_pow+0x56>
 8017a36:	42a6      	cmp	r6, r4
 8017a38:	dd02      	ble.n	8017a40 <__ieee754_pow+0x40>
 8017a3a:	e00c      	b.n	8017a56 <__ieee754_pow+0x56>
 8017a3c:	428e      	cmp	r6, r1
 8017a3e:	dc02      	bgt.n	8017a46 <__ieee754_pow+0x46>
 8017a40:	428e      	cmp	r6, r1
 8017a42:	d110      	bne.n	8017a66 <__ieee754_pow+0x66>
 8017a44:	b178      	cbz	r0, 8017a66 <__ieee754_pow+0x66>
 8017a46:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017a4a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017a4e:	ea54 0308 	orrs.w	r3, r4, r8
 8017a52:	f000 84b7 	beq.w	80183c4 <__ieee754_pow+0x9c4>
 8017a56:	4873      	ldr	r0, [pc, #460]	; (8017c24 <__ieee754_pow+0x224>)
 8017a58:	b00d      	add	sp, #52	; 0x34
 8017a5a:	ecbd 8b06 	vpop	{d8-d10}
 8017a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a62:	f002 b9d1 	b.w	8019e08 <nan>
 8017a66:	f1b9 0f00 	cmp.w	r9, #0
 8017a6a:	da36      	bge.n	8017ada <__ieee754_pow+0xda>
 8017a6c:	496e      	ldr	r1, [pc, #440]	; (8017c28 <__ieee754_pow+0x228>)
 8017a6e:	428e      	cmp	r6, r1
 8017a70:	dc51      	bgt.n	8017b16 <__ieee754_pow+0x116>
 8017a72:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8017a76:	428e      	cmp	r6, r1
 8017a78:	f340 84af 	ble.w	80183da <__ieee754_pow+0x9da>
 8017a7c:	1531      	asrs	r1, r6, #20
 8017a7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017a82:	2914      	cmp	r1, #20
 8017a84:	dd0f      	ble.n	8017aa6 <__ieee754_pow+0xa6>
 8017a86:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8017a8a:	fa20 fc01 	lsr.w	ip, r0, r1
 8017a8e:	fa0c f101 	lsl.w	r1, ip, r1
 8017a92:	4281      	cmp	r1, r0
 8017a94:	f040 84a1 	bne.w	80183da <__ieee754_pow+0x9da>
 8017a98:	f00c 0c01 	and.w	ip, ip, #1
 8017a9c:	f1cc 0102 	rsb	r1, ip, #2
 8017aa0:	9100      	str	r1, [sp, #0]
 8017aa2:	b180      	cbz	r0, 8017ac6 <__ieee754_pow+0xc6>
 8017aa4:	e059      	b.n	8017b5a <__ieee754_pow+0x15a>
 8017aa6:	2800      	cmp	r0, #0
 8017aa8:	d155      	bne.n	8017b56 <__ieee754_pow+0x156>
 8017aaa:	f1c1 0114 	rsb	r1, r1, #20
 8017aae:	fa46 fc01 	asr.w	ip, r6, r1
 8017ab2:	fa0c f101 	lsl.w	r1, ip, r1
 8017ab6:	42b1      	cmp	r1, r6
 8017ab8:	f040 848c 	bne.w	80183d4 <__ieee754_pow+0x9d4>
 8017abc:	f00c 0c01 	and.w	ip, ip, #1
 8017ac0:	f1cc 0102 	rsb	r1, ip, #2
 8017ac4:	9100      	str	r1, [sp, #0]
 8017ac6:	4959      	ldr	r1, [pc, #356]	; (8017c2c <__ieee754_pow+0x22c>)
 8017ac8:	428e      	cmp	r6, r1
 8017aca:	d12d      	bne.n	8017b28 <__ieee754_pow+0x128>
 8017acc:	2f00      	cmp	r7, #0
 8017ace:	da79      	bge.n	8017bc4 <__ieee754_pow+0x1c4>
 8017ad0:	4956      	ldr	r1, [pc, #344]	; (8017c2c <__ieee754_pow+0x22c>)
 8017ad2:	2000      	movs	r0, #0
 8017ad4:	f7e8 feda 	bl	800088c <__aeabi_ddiv>
 8017ad8:	e016      	b.n	8017b08 <__ieee754_pow+0x108>
 8017ada:	2100      	movs	r1, #0
 8017adc:	9100      	str	r1, [sp, #0]
 8017ade:	2800      	cmp	r0, #0
 8017ae0:	d13b      	bne.n	8017b5a <__ieee754_pow+0x15a>
 8017ae2:	494f      	ldr	r1, [pc, #316]	; (8017c20 <__ieee754_pow+0x220>)
 8017ae4:	428e      	cmp	r6, r1
 8017ae6:	d1ee      	bne.n	8017ac6 <__ieee754_pow+0xc6>
 8017ae8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017aec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017af0:	ea53 0308 	orrs.w	r3, r3, r8
 8017af4:	f000 8466 	beq.w	80183c4 <__ieee754_pow+0x9c4>
 8017af8:	4b4d      	ldr	r3, [pc, #308]	; (8017c30 <__ieee754_pow+0x230>)
 8017afa:	429c      	cmp	r4, r3
 8017afc:	dd0d      	ble.n	8017b1a <__ieee754_pow+0x11a>
 8017afe:	2f00      	cmp	r7, #0
 8017b00:	f280 8464 	bge.w	80183cc <__ieee754_pow+0x9cc>
 8017b04:	2000      	movs	r0, #0
 8017b06:	2100      	movs	r1, #0
 8017b08:	ec41 0b10 	vmov	d0, r0, r1
 8017b0c:	b00d      	add	sp, #52	; 0x34
 8017b0e:	ecbd 8b06 	vpop	{d8-d10}
 8017b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b16:	2102      	movs	r1, #2
 8017b18:	e7e0      	b.n	8017adc <__ieee754_pow+0xdc>
 8017b1a:	2f00      	cmp	r7, #0
 8017b1c:	daf2      	bge.n	8017b04 <__ieee754_pow+0x104>
 8017b1e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8017b22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017b26:	e7ef      	b.n	8017b08 <__ieee754_pow+0x108>
 8017b28:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8017b2c:	d104      	bne.n	8017b38 <__ieee754_pow+0x138>
 8017b2e:	4610      	mov	r0, r2
 8017b30:	4619      	mov	r1, r3
 8017b32:	f7e8 fd81 	bl	8000638 <__aeabi_dmul>
 8017b36:	e7e7      	b.n	8017b08 <__ieee754_pow+0x108>
 8017b38:	493e      	ldr	r1, [pc, #248]	; (8017c34 <__ieee754_pow+0x234>)
 8017b3a:	428f      	cmp	r7, r1
 8017b3c:	d10d      	bne.n	8017b5a <__ieee754_pow+0x15a>
 8017b3e:	f1b9 0f00 	cmp.w	r9, #0
 8017b42:	db0a      	blt.n	8017b5a <__ieee754_pow+0x15a>
 8017b44:	ec43 2b10 	vmov	d0, r2, r3
 8017b48:	b00d      	add	sp, #52	; 0x34
 8017b4a:	ecbd 8b06 	vpop	{d8-d10}
 8017b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b52:	f000 be83 	b.w	801885c <__ieee754_sqrt>
 8017b56:	2100      	movs	r1, #0
 8017b58:	9100      	str	r1, [sp, #0]
 8017b5a:	ec43 2b10 	vmov	d0, r2, r3
 8017b5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017b62:	f002 f93d 	bl	8019de0 <fabs>
 8017b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017b6a:	ec51 0b10 	vmov	r0, r1, d0
 8017b6e:	f1b8 0f00 	cmp.w	r8, #0
 8017b72:	d12a      	bne.n	8017bca <__ieee754_pow+0x1ca>
 8017b74:	b12c      	cbz	r4, 8017b82 <__ieee754_pow+0x182>
 8017b76:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8017c2c <__ieee754_pow+0x22c>
 8017b7a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8017b7e:	45e6      	cmp	lr, ip
 8017b80:	d123      	bne.n	8017bca <__ieee754_pow+0x1ca>
 8017b82:	2f00      	cmp	r7, #0
 8017b84:	da05      	bge.n	8017b92 <__ieee754_pow+0x192>
 8017b86:	4602      	mov	r2, r0
 8017b88:	460b      	mov	r3, r1
 8017b8a:	2000      	movs	r0, #0
 8017b8c:	4927      	ldr	r1, [pc, #156]	; (8017c2c <__ieee754_pow+0x22c>)
 8017b8e:	f7e8 fe7d 	bl	800088c <__aeabi_ddiv>
 8017b92:	f1b9 0f00 	cmp.w	r9, #0
 8017b96:	dab7      	bge.n	8017b08 <__ieee754_pow+0x108>
 8017b98:	9b00      	ldr	r3, [sp, #0]
 8017b9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017b9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017ba2:	4323      	orrs	r3, r4
 8017ba4:	d108      	bne.n	8017bb8 <__ieee754_pow+0x1b8>
 8017ba6:	4602      	mov	r2, r0
 8017ba8:	460b      	mov	r3, r1
 8017baa:	4610      	mov	r0, r2
 8017bac:	4619      	mov	r1, r3
 8017bae:	f7e8 fb8b 	bl	80002c8 <__aeabi_dsub>
 8017bb2:	4602      	mov	r2, r0
 8017bb4:	460b      	mov	r3, r1
 8017bb6:	e78d      	b.n	8017ad4 <__ieee754_pow+0xd4>
 8017bb8:	9b00      	ldr	r3, [sp, #0]
 8017bba:	2b01      	cmp	r3, #1
 8017bbc:	d1a4      	bne.n	8017b08 <__ieee754_pow+0x108>
 8017bbe:	4602      	mov	r2, r0
 8017bc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017bc4:	4610      	mov	r0, r2
 8017bc6:	4619      	mov	r1, r3
 8017bc8:	e79e      	b.n	8017b08 <__ieee754_pow+0x108>
 8017bca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8017bce:	f10c 35ff 	add.w	r5, ip, #4294967295
 8017bd2:	950a      	str	r5, [sp, #40]	; 0x28
 8017bd4:	9d00      	ldr	r5, [sp, #0]
 8017bd6:	46ac      	mov	ip, r5
 8017bd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017bda:	ea5c 0505 	orrs.w	r5, ip, r5
 8017bde:	d0e4      	beq.n	8017baa <__ieee754_pow+0x1aa>
 8017be0:	4b15      	ldr	r3, [pc, #84]	; (8017c38 <__ieee754_pow+0x238>)
 8017be2:	429e      	cmp	r6, r3
 8017be4:	f340 80fc 	ble.w	8017de0 <__ieee754_pow+0x3e0>
 8017be8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017bec:	429e      	cmp	r6, r3
 8017bee:	4b10      	ldr	r3, [pc, #64]	; (8017c30 <__ieee754_pow+0x230>)
 8017bf0:	dd07      	ble.n	8017c02 <__ieee754_pow+0x202>
 8017bf2:	429c      	cmp	r4, r3
 8017bf4:	dc0a      	bgt.n	8017c0c <__ieee754_pow+0x20c>
 8017bf6:	2f00      	cmp	r7, #0
 8017bf8:	da84      	bge.n	8017b04 <__ieee754_pow+0x104>
 8017bfa:	a307      	add	r3, pc, #28	; (adr r3, 8017c18 <__ieee754_pow+0x218>)
 8017bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c00:	e795      	b.n	8017b2e <__ieee754_pow+0x12e>
 8017c02:	429c      	cmp	r4, r3
 8017c04:	dbf7      	blt.n	8017bf6 <__ieee754_pow+0x1f6>
 8017c06:	4b09      	ldr	r3, [pc, #36]	; (8017c2c <__ieee754_pow+0x22c>)
 8017c08:	429c      	cmp	r4, r3
 8017c0a:	dd17      	ble.n	8017c3c <__ieee754_pow+0x23c>
 8017c0c:	2f00      	cmp	r7, #0
 8017c0e:	dcf4      	bgt.n	8017bfa <__ieee754_pow+0x1fa>
 8017c10:	e778      	b.n	8017b04 <__ieee754_pow+0x104>
 8017c12:	bf00      	nop
 8017c14:	f3af 8000 	nop.w
 8017c18:	8800759c 	.word	0x8800759c
 8017c1c:	7e37e43c 	.word	0x7e37e43c
 8017c20:	7ff00000 	.word	0x7ff00000
 8017c24:	0803d15b 	.word	0x0803d15b
 8017c28:	433fffff 	.word	0x433fffff
 8017c2c:	3ff00000 	.word	0x3ff00000
 8017c30:	3fefffff 	.word	0x3fefffff
 8017c34:	3fe00000 	.word	0x3fe00000
 8017c38:	41e00000 	.word	0x41e00000
 8017c3c:	4b64      	ldr	r3, [pc, #400]	; (8017dd0 <__ieee754_pow+0x3d0>)
 8017c3e:	2200      	movs	r2, #0
 8017c40:	f7e8 fb42 	bl	80002c8 <__aeabi_dsub>
 8017c44:	a356      	add	r3, pc, #344	; (adr r3, 8017da0 <__ieee754_pow+0x3a0>)
 8017c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	460d      	mov	r5, r1
 8017c4e:	f7e8 fcf3 	bl	8000638 <__aeabi_dmul>
 8017c52:	a355      	add	r3, pc, #340	; (adr r3, 8017da8 <__ieee754_pow+0x3a8>)
 8017c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c58:	4606      	mov	r6, r0
 8017c5a:	460f      	mov	r7, r1
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	4629      	mov	r1, r5
 8017c60:	f7e8 fcea 	bl	8000638 <__aeabi_dmul>
 8017c64:	4b5b      	ldr	r3, [pc, #364]	; (8017dd4 <__ieee754_pow+0x3d4>)
 8017c66:	4682      	mov	sl, r0
 8017c68:	468b      	mov	fp, r1
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	4629      	mov	r1, r5
 8017c70:	f7e8 fce2 	bl	8000638 <__aeabi_dmul>
 8017c74:	4602      	mov	r2, r0
 8017c76:	460b      	mov	r3, r1
 8017c78:	a14d      	add	r1, pc, #308	; (adr r1, 8017db0 <__ieee754_pow+0x3b0>)
 8017c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c7e:	f7e8 fb23 	bl	80002c8 <__aeabi_dsub>
 8017c82:	4622      	mov	r2, r4
 8017c84:	462b      	mov	r3, r5
 8017c86:	f7e8 fcd7 	bl	8000638 <__aeabi_dmul>
 8017c8a:	4602      	mov	r2, r0
 8017c8c:	460b      	mov	r3, r1
 8017c8e:	2000      	movs	r0, #0
 8017c90:	4951      	ldr	r1, [pc, #324]	; (8017dd8 <__ieee754_pow+0x3d8>)
 8017c92:	f7e8 fb19 	bl	80002c8 <__aeabi_dsub>
 8017c96:	4622      	mov	r2, r4
 8017c98:	4680      	mov	r8, r0
 8017c9a:	4689      	mov	r9, r1
 8017c9c:	462b      	mov	r3, r5
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	4629      	mov	r1, r5
 8017ca2:	f7e8 fcc9 	bl	8000638 <__aeabi_dmul>
 8017ca6:	4602      	mov	r2, r0
 8017ca8:	460b      	mov	r3, r1
 8017caa:	4640      	mov	r0, r8
 8017cac:	4649      	mov	r1, r9
 8017cae:	f7e8 fcc3 	bl	8000638 <__aeabi_dmul>
 8017cb2:	a341      	add	r3, pc, #260	; (adr r3, 8017db8 <__ieee754_pow+0x3b8>)
 8017cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cb8:	f7e8 fcbe 	bl	8000638 <__aeabi_dmul>
 8017cbc:	4602      	mov	r2, r0
 8017cbe:	460b      	mov	r3, r1
 8017cc0:	4650      	mov	r0, sl
 8017cc2:	4659      	mov	r1, fp
 8017cc4:	f7e8 fb00 	bl	80002c8 <__aeabi_dsub>
 8017cc8:	4602      	mov	r2, r0
 8017cca:	460b      	mov	r3, r1
 8017ccc:	4680      	mov	r8, r0
 8017cce:	4689      	mov	r9, r1
 8017cd0:	4630      	mov	r0, r6
 8017cd2:	4639      	mov	r1, r7
 8017cd4:	f7e8 fafa 	bl	80002cc <__adddf3>
 8017cd8:	2400      	movs	r4, #0
 8017cda:	4632      	mov	r2, r6
 8017cdc:	463b      	mov	r3, r7
 8017cde:	4620      	mov	r0, r4
 8017ce0:	460d      	mov	r5, r1
 8017ce2:	f7e8 faf1 	bl	80002c8 <__aeabi_dsub>
 8017ce6:	4602      	mov	r2, r0
 8017ce8:	460b      	mov	r3, r1
 8017cea:	4640      	mov	r0, r8
 8017cec:	4649      	mov	r1, r9
 8017cee:	f7e8 faeb 	bl	80002c8 <__aeabi_dsub>
 8017cf2:	9b00      	ldr	r3, [sp, #0]
 8017cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cf6:	3b01      	subs	r3, #1
 8017cf8:	4313      	orrs	r3, r2
 8017cfa:	4682      	mov	sl, r0
 8017cfc:	468b      	mov	fp, r1
 8017cfe:	f040 81f1 	bne.w	80180e4 <__ieee754_pow+0x6e4>
 8017d02:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8017dc0 <__ieee754_pow+0x3c0>
 8017d06:	eeb0 8a47 	vmov.f32	s16, s14
 8017d0a:	eef0 8a67 	vmov.f32	s17, s15
 8017d0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017d12:	2600      	movs	r6, #0
 8017d14:	4632      	mov	r2, r6
 8017d16:	463b      	mov	r3, r7
 8017d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017d1c:	f7e8 fad4 	bl	80002c8 <__aeabi_dsub>
 8017d20:	4622      	mov	r2, r4
 8017d22:	462b      	mov	r3, r5
 8017d24:	f7e8 fc88 	bl	8000638 <__aeabi_dmul>
 8017d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d2c:	4680      	mov	r8, r0
 8017d2e:	4689      	mov	r9, r1
 8017d30:	4650      	mov	r0, sl
 8017d32:	4659      	mov	r1, fp
 8017d34:	f7e8 fc80 	bl	8000638 <__aeabi_dmul>
 8017d38:	4602      	mov	r2, r0
 8017d3a:	460b      	mov	r3, r1
 8017d3c:	4640      	mov	r0, r8
 8017d3e:	4649      	mov	r1, r9
 8017d40:	f7e8 fac4 	bl	80002cc <__adddf3>
 8017d44:	4632      	mov	r2, r6
 8017d46:	463b      	mov	r3, r7
 8017d48:	4680      	mov	r8, r0
 8017d4a:	4689      	mov	r9, r1
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	4629      	mov	r1, r5
 8017d50:	f7e8 fc72 	bl	8000638 <__aeabi_dmul>
 8017d54:	460b      	mov	r3, r1
 8017d56:	4604      	mov	r4, r0
 8017d58:	460d      	mov	r5, r1
 8017d5a:	4602      	mov	r2, r0
 8017d5c:	4649      	mov	r1, r9
 8017d5e:	4640      	mov	r0, r8
 8017d60:	f7e8 fab4 	bl	80002cc <__adddf3>
 8017d64:	4b1d      	ldr	r3, [pc, #116]	; (8017ddc <__ieee754_pow+0x3dc>)
 8017d66:	4299      	cmp	r1, r3
 8017d68:	ec45 4b19 	vmov	d9, r4, r5
 8017d6c:	4606      	mov	r6, r0
 8017d6e:	460f      	mov	r7, r1
 8017d70:	468b      	mov	fp, r1
 8017d72:	f340 82fe 	ble.w	8018372 <__ieee754_pow+0x972>
 8017d76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017d7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017d7e:	4303      	orrs	r3, r0
 8017d80:	f000 81f0 	beq.w	8018164 <__ieee754_pow+0x764>
 8017d84:	a310      	add	r3, pc, #64	; (adr r3, 8017dc8 <__ieee754_pow+0x3c8>)
 8017d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d8a:	ec51 0b18 	vmov	r0, r1, d8
 8017d8e:	f7e8 fc53 	bl	8000638 <__aeabi_dmul>
 8017d92:	a30d      	add	r3, pc, #52	; (adr r3, 8017dc8 <__ieee754_pow+0x3c8>)
 8017d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d98:	e6cb      	b.n	8017b32 <__ieee754_pow+0x132>
 8017d9a:	bf00      	nop
 8017d9c:	f3af 8000 	nop.w
 8017da0:	60000000 	.word	0x60000000
 8017da4:	3ff71547 	.word	0x3ff71547
 8017da8:	f85ddf44 	.word	0xf85ddf44
 8017dac:	3e54ae0b 	.word	0x3e54ae0b
 8017db0:	55555555 	.word	0x55555555
 8017db4:	3fd55555 	.word	0x3fd55555
 8017db8:	652b82fe 	.word	0x652b82fe
 8017dbc:	3ff71547 	.word	0x3ff71547
 8017dc0:	00000000 	.word	0x00000000
 8017dc4:	bff00000 	.word	0xbff00000
 8017dc8:	8800759c 	.word	0x8800759c
 8017dcc:	7e37e43c 	.word	0x7e37e43c
 8017dd0:	3ff00000 	.word	0x3ff00000
 8017dd4:	3fd00000 	.word	0x3fd00000
 8017dd8:	3fe00000 	.word	0x3fe00000
 8017ddc:	408fffff 	.word	0x408fffff
 8017de0:	4bd7      	ldr	r3, [pc, #860]	; (8018140 <__ieee754_pow+0x740>)
 8017de2:	ea03 0309 	and.w	r3, r3, r9
 8017de6:	2200      	movs	r2, #0
 8017de8:	b92b      	cbnz	r3, 8017df6 <__ieee754_pow+0x3f6>
 8017dea:	4bd6      	ldr	r3, [pc, #856]	; (8018144 <__ieee754_pow+0x744>)
 8017dec:	f7e8 fc24 	bl	8000638 <__aeabi_dmul>
 8017df0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017df4:	460c      	mov	r4, r1
 8017df6:	1523      	asrs	r3, r4, #20
 8017df8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017dfc:	4413      	add	r3, r2
 8017dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8017e00:	4bd1      	ldr	r3, [pc, #836]	; (8018148 <__ieee754_pow+0x748>)
 8017e02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017e06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017e0a:	429c      	cmp	r4, r3
 8017e0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017e10:	dd08      	ble.n	8017e24 <__ieee754_pow+0x424>
 8017e12:	4bce      	ldr	r3, [pc, #824]	; (801814c <__ieee754_pow+0x74c>)
 8017e14:	429c      	cmp	r4, r3
 8017e16:	f340 8163 	ble.w	80180e0 <__ieee754_pow+0x6e0>
 8017e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8017e20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017e24:	2400      	movs	r4, #0
 8017e26:	00e3      	lsls	r3, r4, #3
 8017e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e2a:	4bc9      	ldr	r3, [pc, #804]	; (8018150 <__ieee754_pow+0x750>)
 8017e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017e30:	ed93 7b00 	vldr	d7, [r3]
 8017e34:	4629      	mov	r1, r5
 8017e36:	ec53 2b17 	vmov	r2, r3, d7
 8017e3a:	eeb0 8a47 	vmov.f32	s16, s14
 8017e3e:	eef0 8a67 	vmov.f32	s17, s15
 8017e42:	4682      	mov	sl, r0
 8017e44:	f7e8 fa40 	bl	80002c8 <__aeabi_dsub>
 8017e48:	4652      	mov	r2, sl
 8017e4a:	4606      	mov	r6, r0
 8017e4c:	460f      	mov	r7, r1
 8017e4e:	462b      	mov	r3, r5
 8017e50:	ec51 0b18 	vmov	r0, r1, d8
 8017e54:	f7e8 fa3a 	bl	80002cc <__adddf3>
 8017e58:	4602      	mov	r2, r0
 8017e5a:	460b      	mov	r3, r1
 8017e5c:	2000      	movs	r0, #0
 8017e5e:	49bd      	ldr	r1, [pc, #756]	; (8018154 <__ieee754_pow+0x754>)
 8017e60:	f7e8 fd14 	bl	800088c <__aeabi_ddiv>
 8017e64:	ec41 0b19 	vmov	d9, r0, r1
 8017e68:	4602      	mov	r2, r0
 8017e6a:	460b      	mov	r3, r1
 8017e6c:	4630      	mov	r0, r6
 8017e6e:	4639      	mov	r1, r7
 8017e70:	f7e8 fbe2 	bl	8000638 <__aeabi_dmul>
 8017e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017e7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017e80:	2300      	movs	r3, #0
 8017e82:	9304      	str	r3, [sp, #16]
 8017e84:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8017e88:	46ab      	mov	fp, r5
 8017e8a:	106d      	asrs	r5, r5, #1
 8017e8c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017e90:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017e94:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8017e98:	2200      	movs	r2, #0
 8017e9a:	4640      	mov	r0, r8
 8017e9c:	4649      	mov	r1, r9
 8017e9e:	4614      	mov	r4, r2
 8017ea0:	461d      	mov	r5, r3
 8017ea2:	f7e8 fbc9 	bl	8000638 <__aeabi_dmul>
 8017ea6:	4602      	mov	r2, r0
 8017ea8:	460b      	mov	r3, r1
 8017eaa:	4630      	mov	r0, r6
 8017eac:	4639      	mov	r1, r7
 8017eae:	f7e8 fa0b 	bl	80002c8 <__aeabi_dsub>
 8017eb2:	ec53 2b18 	vmov	r2, r3, d8
 8017eb6:	4606      	mov	r6, r0
 8017eb8:	460f      	mov	r7, r1
 8017eba:	4620      	mov	r0, r4
 8017ebc:	4629      	mov	r1, r5
 8017ebe:	f7e8 fa03 	bl	80002c8 <__aeabi_dsub>
 8017ec2:	4602      	mov	r2, r0
 8017ec4:	460b      	mov	r3, r1
 8017ec6:	4650      	mov	r0, sl
 8017ec8:	4659      	mov	r1, fp
 8017eca:	f7e8 f9fd 	bl	80002c8 <__aeabi_dsub>
 8017ece:	4642      	mov	r2, r8
 8017ed0:	464b      	mov	r3, r9
 8017ed2:	f7e8 fbb1 	bl	8000638 <__aeabi_dmul>
 8017ed6:	4602      	mov	r2, r0
 8017ed8:	460b      	mov	r3, r1
 8017eda:	4630      	mov	r0, r6
 8017edc:	4639      	mov	r1, r7
 8017ede:	f7e8 f9f3 	bl	80002c8 <__aeabi_dsub>
 8017ee2:	ec53 2b19 	vmov	r2, r3, d9
 8017ee6:	f7e8 fba7 	bl	8000638 <__aeabi_dmul>
 8017eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017eee:	ec41 0b18 	vmov	d8, r0, r1
 8017ef2:	4610      	mov	r0, r2
 8017ef4:	4619      	mov	r1, r3
 8017ef6:	f7e8 fb9f 	bl	8000638 <__aeabi_dmul>
 8017efa:	a37d      	add	r3, pc, #500	; (adr r3, 80180f0 <__ieee754_pow+0x6f0>)
 8017efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f00:	4604      	mov	r4, r0
 8017f02:	460d      	mov	r5, r1
 8017f04:	f7e8 fb98 	bl	8000638 <__aeabi_dmul>
 8017f08:	a37b      	add	r3, pc, #492	; (adr r3, 80180f8 <__ieee754_pow+0x6f8>)
 8017f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f0e:	f7e8 f9dd 	bl	80002cc <__adddf3>
 8017f12:	4622      	mov	r2, r4
 8017f14:	462b      	mov	r3, r5
 8017f16:	f7e8 fb8f 	bl	8000638 <__aeabi_dmul>
 8017f1a:	a379      	add	r3, pc, #484	; (adr r3, 8018100 <__ieee754_pow+0x700>)
 8017f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f20:	f7e8 f9d4 	bl	80002cc <__adddf3>
 8017f24:	4622      	mov	r2, r4
 8017f26:	462b      	mov	r3, r5
 8017f28:	f7e8 fb86 	bl	8000638 <__aeabi_dmul>
 8017f2c:	a376      	add	r3, pc, #472	; (adr r3, 8018108 <__ieee754_pow+0x708>)
 8017f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f32:	f7e8 f9cb 	bl	80002cc <__adddf3>
 8017f36:	4622      	mov	r2, r4
 8017f38:	462b      	mov	r3, r5
 8017f3a:	f7e8 fb7d 	bl	8000638 <__aeabi_dmul>
 8017f3e:	a374      	add	r3, pc, #464	; (adr r3, 8018110 <__ieee754_pow+0x710>)
 8017f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f44:	f7e8 f9c2 	bl	80002cc <__adddf3>
 8017f48:	4622      	mov	r2, r4
 8017f4a:	462b      	mov	r3, r5
 8017f4c:	f7e8 fb74 	bl	8000638 <__aeabi_dmul>
 8017f50:	a371      	add	r3, pc, #452	; (adr r3, 8018118 <__ieee754_pow+0x718>)
 8017f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f56:	f7e8 f9b9 	bl	80002cc <__adddf3>
 8017f5a:	4622      	mov	r2, r4
 8017f5c:	4606      	mov	r6, r0
 8017f5e:	460f      	mov	r7, r1
 8017f60:	462b      	mov	r3, r5
 8017f62:	4620      	mov	r0, r4
 8017f64:	4629      	mov	r1, r5
 8017f66:	f7e8 fb67 	bl	8000638 <__aeabi_dmul>
 8017f6a:	4602      	mov	r2, r0
 8017f6c:	460b      	mov	r3, r1
 8017f6e:	4630      	mov	r0, r6
 8017f70:	4639      	mov	r1, r7
 8017f72:	f7e8 fb61 	bl	8000638 <__aeabi_dmul>
 8017f76:	4642      	mov	r2, r8
 8017f78:	4604      	mov	r4, r0
 8017f7a:	460d      	mov	r5, r1
 8017f7c:	464b      	mov	r3, r9
 8017f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017f82:	f7e8 f9a3 	bl	80002cc <__adddf3>
 8017f86:	ec53 2b18 	vmov	r2, r3, d8
 8017f8a:	f7e8 fb55 	bl	8000638 <__aeabi_dmul>
 8017f8e:	4622      	mov	r2, r4
 8017f90:	462b      	mov	r3, r5
 8017f92:	f7e8 f99b 	bl	80002cc <__adddf3>
 8017f96:	4642      	mov	r2, r8
 8017f98:	4682      	mov	sl, r0
 8017f9a:	468b      	mov	fp, r1
 8017f9c:	464b      	mov	r3, r9
 8017f9e:	4640      	mov	r0, r8
 8017fa0:	4649      	mov	r1, r9
 8017fa2:	f7e8 fb49 	bl	8000638 <__aeabi_dmul>
 8017fa6:	4b6c      	ldr	r3, [pc, #432]	; (8018158 <__ieee754_pow+0x758>)
 8017fa8:	2200      	movs	r2, #0
 8017faa:	4606      	mov	r6, r0
 8017fac:	460f      	mov	r7, r1
 8017fae:	f7e8 f98d 	bl	80002cc <__adddf3>
 8017fb2:	4652      	mov	r2, sl
 8017fb4:	465b      	mov	r3, fp
 8017fb6:	f7e8 f989 	bl	80002cc <__adddf3>
 8017fba:	9c04      	ldr	r4, [sp, #16]
 8017fbc:	460d      	mov	r5, r1
 8017fbe:	4622      	mov	r2, r4
 8017fc0:	460b      	mov	r3, r1
 8017fc2:	4640      	mov	r0, r8
 8017fc4:	4649      	mov	r1, r9
 8017fc6:	f7e8 fb37 	bl	8000638 <__aeabi_dmul>
 8017fca:	4b63      	ldr	r3, [pc, #396]	; (8018158 <__ieee754_pow+0x758>)
 8017fcc:	4680      	mov	r8, r0
 8017fce:	4689      	mov	r9, r1
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	4629      	mov	r1, r5
 8017fd6:	f7e8 f977 	bl	80002c8 <__aeabi_dsub>
 8017fda:	4632      	mov	r2, r6
 8017fdc:	463b      	mov	r3, r7
 8017fde:	f7e8 f973 	bl	80002c8 <__aeabi_dsub>
 8017fe2:	4602      	mov	r2, r0
 8017fe4:	460b      	mov	r3, r1
 8017fe6:	4650      	mov	r0, sl
 8017fe8:	4659      	mov	r1, fp
 8017fea:	f7e8 f96d 	bl	80002c8 <__aeabi_dsub>
 8017fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017ff2:	f7e8 fb21 	bl	8000638 <__aeabi_dmul>
 8017ff6:	4622      	mov	r2, r4
 8017ff8:	4606      	mov	r6, r0
 8017ffa:	460f      	mov	r7, r1
 8017ffc:	462b      	mov	r3, r5
 8017ffe:	ec51 0b18 	vmov	r0, r1, d8
 8018002:	f7e8 fb19 	bl	8000638 <__aeabi_dmul>
 8018006:	4602      	mov	r2, r0
 8018008:	460b      	mov	r3, r1
 801800a:	4630      	mov	r0, r6
 801800c:	4639      	mov	r1, r7
 801800e:	f7e8 f95d 	bl	80002cc <__adddf3>
 8018012:	4606      	mov	r6, r0
 8018014:	460f      	mov	r7, r1
 8018016:	4602      	mov	r2, r0
 8018018:	460b      	mov	r3, r1
 801801a:	4640      	mov	r0, r8
 801801c:	4649      	mov	r1, r9
 801801e:	f7e8 f955 	bl	80002cc <__adddf3>
 8018022:	9c04      	ldr	r4, [sp, #16]
 8018024:	a33e      	add	r3, pc, #248	; (adr r3, 8018120 <__ieee754_pow+0x720>)
 8018026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802a:	4620      	mov	r0, r4
 801802c:	460d      	mov	r5, r1
 801802e:	f7e8 fb03 	bl	8000638 <__aeabi_dmul>
 8018032:	4642      	mov	r2, r8
 8018034:	ec41 0b18 	vmov	d8, r0, r1
 8018038:	464b      	mov	r3, r9
 801803a:	4620      	mov	r0, r4
 801803c:	4629      	mov	r1, r5
 801803e:	f7e8 f943 	bl	80002c8 <__aeabi_dsub>
 8018042:	4602      	mov	r2, r0
 8018044:	460b      	mov	r3, r1
 8018046:	4630      	mov	r0, r6
 8018048:	4639      	mov	r1, r7
 801804a:	f7e8 f93d 	bl	80002c8 <__aeabi_dsub>
 801804e:	a336      	add	r3, pc, #216	; (adr r3, 8018128 <__ieee754_pow+0x728>)
 8018050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018054:	f7e8 faf0 	bl	8000638 <__aeabi_dmul>
 8018058:	a335      	add	r3, pc, #212	; (adr r3, 8018130 <__ieee754_pow+0x730>)
 801805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805e:	4606      	mov	r6, r0
 8018060:	460f      	mov	r7, r1
 8018062:	4620      	mov	r0, r4
 8018064:	4629      	mov	r1, r5
 8018066:	f7e8 fae7 	bl	8000638 <__aeabi_dmul>
 801806a:	4602      	mov	r2, r0
 801806c:	460b      	mov	r3, r1
 801806e:	4630      	mov	r0, r6
 8018070:	4639      	mov	r1, r7
 8018072:	f7e8 f92b 	bl	80002cc <__adddf3>
 8018076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018078:	4b38      	ldr	r3, [pc, #224]	; (801815c <__ieee754_pow+0x75c>)
 801807a:	4413      	add	r3, r2
 801807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018080:	f7e8 f924 	bl	80002cc <__adddf3>
 8018084:	4682      	mov	sl, r0
 8018086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018088:	468b      	mov	fp, r1
 801808a:	f7e8 fa6b 	bl	8000564 <__aeabi_i2d>
 801808e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018090:	4b33      	ldr	r3, [pc, #204]	; (8018160 <__ieee754_pow+0x760>)
 8018092:	4413      	add	r3, r2
 8018094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018098:	4606      	mov	r6, r0
 801809a:	460f      	mov	r7, r1
 801809c:	4652      	mov	r2, sl
 801809e:	465b      	mov	r3, fp
 80180a0:	ec51 0b18 	vmov	r0, r1, d8
 80180a4:	f7e8 f912 	bl	80002cc <__adddf3>
 80180a8:	4642      	mov	r2, r8
 80180aa:	464b      	mov	r3, r9
 80180ac:	f7e8 f90e 	bl	80002cc <__adddf3>
 80180b0:	4632      	mov	r2, r6
 80180b2:	463b      	mov	r3, r7
 80180b4:	f7e8 f90a 	bl	80002cc <__adddf3>
 80180b8:	9c04      	ldr	r4, [sp, #16]
 80180ba:	4632      	mov	r2, r6
 80180bc:	463b      	mov	r3, r7
 80180be:	4620      	mov	r0, r4
 80180c0:	460d      	mov	r5, r1
 80180c2:	f7e8 f901 	bl	80002c8 <__aeabi_dsub>
 80180c6:	4642      	mov	r2, r8
 80180c8:	464b      	mov	r3, r9
 80180ca:	f7e8 f8fd 	bl	80002c8 <__aeabi_dsub>
 80180ce:	ec53 2b18 	vmov	r2, r3, d8
 80180d2:	f7e8 f8f9 	bl	80002c8 <__aeabi_dsub>
 80180d6:	4602      	mov	r2, r0
 80180d8:	460b      	mov	r3, r1
 80180da:	4650      	mov	r0, sl
 80180dc:	4659      	mov	r1, fp
 80180de:	e606      	b.n	8017cee <__ieee754_pow+0x2ee>
 80180e0:	2401      	movs	r4, #1
 80180e2:	e6a0      	b.n	8017e26 <__ieee754_pow+0x426>
 80180e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018138 <__ieee754_pow+0x738>
 80180e8:	e60d      	b.n	8017d06 <__ieee754_pow+0x306>
 80180ea:	bf00      	nop
 80180ec:	f3af 8000 	nop.w
 80180f0:	4a454eef 	.word	0x4a454eef
 80180f4:	3fca7e28 	.word	0x3fca7e28
 80180f8:	93c9db65 	.word	0x93c9db65
 80180fc:	3fcd864a 	.word	0x3fcd864a
 8018100:	a91d4101 	.word	0xa91d4101
 8018104:	3fd17460 	.word	0x3fd17460
 8018108:	518f264d 	.word	0x518f264d
 801810c:	3fd55555 	.word	0x3fd55555
 8018110:	db6fabff 	.word	0xdb6fabff
 8018114:	3fdb6db6 	.word	0x3fdb6db6
 8018118:	33333303 	.word	0x33333303
 801811c:	3fe33333 	.word	0x3fe33333
 8018120:	e0000000 	.word	0xe0000000
 8018124:	3feec709 	.word	0x3feec709
 8018128:	dc3a03fd 	.word	0xdc3a03fd
 801812c:	3feec709 	.word	0x3feec709
 8018130:	145b01f5 	.word	0x145b01f5
 8018134:	be3e2fe0 	.word	0xbe3e2fe0
 8018138:	00000000 	.word	0x00000000
 801813c:	3ff00000 	.word	0x3ff00000
 8018140:	7ff00000 	.word	0x7ff00000
 8018144:	43400000 	.word	0x43400000
 8018148:	0003988e 	.word	0x0003988e
 801814c:	000bb679 	.word	0x000bb679
 8018150:	0803cb20 	.word	0x0803cb20
 8018154:	3ff00000 	.word	0x3ff00000
 8018158:	40080000 	.word	0x40080000
 801815c:	0803cb40 	.word	0x0803cb40
 8018160:	0803cb30 	.word	0x0803cb30
 8018164:	a3b5      	add	r3, pc, #724	; (adr r3, 801843c <__ieee754_pow+0xa3c>)
 8018166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801816a:	4640      	mov	r0, r8
 801816c:	4649      	mov	r1, r9
 801816e:	f7e8 f8ad 	bl	80002cc <__adddf3>
 8018172:	4622      	mov	r2, r4
 8018174:	ec41 0b1a 	vmov	d10, r0, r1
 8018178:	462b      	mov	r3, r5
 801817a:	4630      	mov	r0, r6
 801817c:	4639      	mov	r1, r7
 801817e:	f7e8 f8a3 	bl	80002c8 <__aeabi_dsub>
 8018182:	4602      	mov	r2, r0
 8018184:	460b      	mov	r3, r1
 8018186:	ec51 0b1a 	vmov	r0, r1, d10
 801818a:	f7e8 fce5 	bl	8000b58 <__aeabi_dcmpgt>
 801818e:	2800      	cmp	r0, #0
 8018190:	f47f adf8 	bne.w	8017d84 <__ieee754_pow+0x384>
 8018194:	4aa4      	ldr	r2, [pc, #656]	; (8018428 <__ieee754_pow+0xa28>)
 8018196:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801819a:	4293      	cmp	r3, r2
 801819c:	f340 810b 	ble.w	80183b6 <__ieee754_pow+0x9b6>
 80181a0:	151b      	asrs	r3, r3, #20
 80181a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80181a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80181aa:	fa4a f303 	asr.w	r3, sl, r3
 80181ae:	445b      	add	r3, fp
 80181b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80181b4:	4e9d      	ldr	r6, [pc, #628]	; (801842c <__ieee754_pow+0xa2c>)
 80181b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80181ba:	4116      	asrs	r6, r2
 80181bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80181c0:	2000      	movs	r0, #0
 80181c2:	ea23 0106 	bic.w	r1, r3, r6
 80181c6:	f1c2 0214 	rsb	r2, r2, #20
 80181ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80181ce:	fa4a fa02 	asr.w	sl, sl, r2
 80181d2:	f1bb 0f00 	cmp.w	fp, #0
 80181d6:	4602      	mov	r2, r0
 80181d8:	460b      	mov	r3, r1
 80181da:	4620      	mov	r0, r4
 80181dc:	4629      	mov	r1, r5
 80181de:	bfb8      	it	lt
 80181e0:	f1ca 0a00 	rsblt	sl, sl, #0
 80181e4:	f7e8 f870 	bl	80002c8 <__aeabi_dsub>
 80181e8:	ec41 0b19 	vmov	d9, r0, r1
 80181ec:	4642      	mov	r2, r8
 80181ee:	464b      	mov	r3, r9
 80181f0:	ec51 0b19 	vmov	r0, r1, d9
 80181f4:	f7e8 f86a 	bl	80002cc <__adddf3>
 80181f8:	2400      	movs	r4, #0
 80181fa:	a379      	add	r3, pc, #484	; (adr r3, 80183e0 <__ieee754_pow+0x9e0>)
 80181fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018200:	4620      	mov	r0, r4
 8018202:	460d      	mov	r5, r1
 8018204:	f7e8 fa18 	bl	8000638 <__aeabi_dmul>
 8018208:	ec53 2b19 	vmov	r2, r3, d9
 801820c:	4606      	mov	r6, r0
 801820e:	460f      	mov	r7, r1
 8018210:	4620      	mov	r0, r4
 8018212:	4629      	mov	r1, r5
 8018214:	f7e8 f858 	bl	80002c8 <__aeabi_dsub>
 8018218:	4602      	mov	r2, r0
 801821a:	460b      	mov	r3, r1
 801821c:	4640      	mov	r0, r8
 801821e:	4649      	mov	r1, r9
 8018220:	f7e8 f852 	bl	80002c8 <__aeabi_dsub>
 8018224:	a370      	add	r3, pc, #448	; (adr r3, 80183e8 <__ieee754_pow+0x9e8>)
 8018226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801822a:	f7e8 fa05 	bl	8000638 <__aeabi_dmul>
 801822e:	a370      	add	r3, pc, #448	; (adr r3, 80183f0 <__ieee754_pow+0x9f0>)
 8018230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018234:	4680      	mov	r8, r0
 8018236:	4689      	mov	r9, r1
 8018238:	4620      	mov	r0, r4
 801823a:	4629      	mov	r1, r5
 801823c:	f7e8 f9fc 	bl	8000638 <__aeabi_dmul>
 8018240:	4602      	mov	r2, r0
 8018242:	460b      	mov	r3, r1
 8018244:	4640      	mov	r0, r8
 8018246:	4649      	mov	r1, r9
 8018248:	f7e8 f840 	bl	80002cc <__adddf3>
 801824c:	4604      	mov	r4, r0
 801824e:	460d      	mov	r5, r1
 8018250:	4602      	mov	r2, r0
 8018252:	460b      	mov	r3, r1
 8018254:	4630      	mov	r0, r6
 8018256:	4639      	mov	r1, r7
 8018258:	f7e8 f838 	bl	80002cc <__adddf3>
 801825c:	4632      	mov	r2, r6
 801825e:	463b      	mov	r3, r7
 8018260:	4680      	mov	r8, r0
 8018262:	4689      	mov	r9, r1
 8018264:	f7e8 f830 	bl	80002c8 <__aeabi_dsub>
 8018268:	4602      	mov	r2, r0
 801826a:	460b      	mov	r3, r1
 801826c:	4620      	mov	r0, r4
 801826e:	4629      	mov	r1, r5
 8018270:	f7e8 f82a 	bl	80002c8 <__aeabi_dsub>
 8018274:	4642      	mov	r2, r8
 8018276:	4606      	mov	r6, r0
 8018278:	460f      	mov	r7, r1
 801827a:	464b      	mov	r3, r9
 801827c:	4640      	mov	r0, r8
 801827e:	4649      	mov	r1, r9
 8018280:	f7e8 f9da 	bl	8000638 <__aeabi_dmul>
 8018284:	a35c      	add	r3, pc, #368	; (adr r3, 80183f8 <__ieee754_pow+0x9f8>)
 8018286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801828a:	4604      	mov	r4, r0
 801828c:	460d      	mov	r5, r1
 801828e:	f7e8 f9d3 	bl	8000638 <__aeabi_dmul>
 8018292:	a35b      	add	r3, pc, #364	; (adr r3, 8018400 <__ieee754_pow+0xa00>)
 8018294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018298:	f7e8 f816 	bl	80002c8 <__aeabi_dsub>
 801829c:	4622      	mov	r2, r4
 801829e:	462b      	mov	r3, r5
 80182a0:	f7e8 f9ca 	bl	8000638 <__aeabi_dmul>
 80182a4:	a358      	add	r3, pc, #352	; (adr r3, 8018408 <__ieee754_pow+0xa08>)
 80182a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182aa:	f7e8 f80f 	bl	80002cc <__adddf3>
 80182ae:	4622      	mov	r2, r4
 80182b0:	462b      	mov	r3, r5
 80182b2:	f7e8 f9c1 	bl	8000638 <__aeabi_dmul>
 80182b6:	a356      	add	r3, pc, #344	; (adr r3, 8018410 <__ieee754_pow+0xa10>)
 80182b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182bc:	f7e8 f804 	bl	80002c8 <__aeabi_dsub>
 80182c0:	4622      	mov	r2, r4
 80182c2:	462b      	mov	r3, r5
 80182c4:	f7e8 f9b8 	bl	8000638 <__aeabi_dmul>
 80182c8:	a353      	add	r3, pc, #332	; (adr r3, 8018418 <__ieee754_pow+0xa18>)
 80182ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ce:	f7e7 fffd 	bl	80002cc <__adddf3>
 80182d2:	4622      	mov	r2, r4
 80182d4:	462b      	mov	r3, r5
 80182d6:	f7e8 f9af 	bl	8000638 <__aeabi_dmul>
 80182da:	4602      	mov	r2, r0
 80182dc:	460b      	mov	r3, r1
 80182de:	4640      	mov	r0, r8
 80182e0:	4649      	mov	r1, r9
 80182e2:	f7e7 fff1 	bl	80002c8 <__aeabi_dsub>
 80182e6:	4604      	mov	r4, r0
 80182e8:	460d      	mov	r5, r1
 80182ea:	4602      	mov	r2, r0
 80182ec:	460b      	mov	r3, r1
 80182ee:	4640      	mov	r0, r8
 80182f0:	4649      	mov	r1, r9
 80182f2:	f7e8 f9a1 	bl	8000638 <__aeabi_dmul>
 80182f6:	2200      	movs	r2, #0
 80182f8:	ec41 0b19 	vmov	d9, r0, r1
 80182fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018300:	4620      	mov	r0, r4
 8018302:	4629      	mov	r1, r5
 8018304:	f7e7 ffe0 	bl	80002c8 <__aeabi_dsub>
 8018308:	4602      	mov	r2, r0
 801830a:	460b      	mov	r3, r1
 801830c:	ec51 0b19 	vmov	r0, r1, d9
 8018310:	f7e8 fabc 	bl	800088c <__aeabi_ddiv>
 8018314:	4632      	mov	r2, r6
 8018316:	4604      	mov	r4, r0
 8018318:	460d      	mov	r5, r1
 801831a:	463b      	mov	r3, r7
 801831c:	4640      	mov	r0, r8
 801831e:	4649      	mov	r1, r9
 8018320:	f7e8 f98a 	bl	8000638 <__aeabi_dmul>
 8018324:	4632      	mov	r2, r6
 8018326:	463b      	mov	r3, r7
 8018328:	f7e7 ffd0 	bl	80002cc <__adddf3>
 801832c:	4602      	mov	r2, r0
 801832e:	460b      	mov	r3, r1
 8018330:	4620      	mov	r0, r4
 8018332:	4629      	mov	r1, r5
 8018334:	f7e7 ffc8 	bl	80002c8 <__aeabi_dsub>
 8018338:	4642      	mov	r2, r8
 801833a:	464b      	mov	r3, r9
 801833c:	f7e7 ffc4 	bl	80002c8 <__aeabi_dsub>
 8018340:	460b      	mov	r3, r1
 8018342:	4602      	mov	r2, r0
 8018344:	493a      	ldr	r1, [pc, #232]	; (8018430 <__ieee754_pow+0xa30>)
 8018346:	2000      	movs	r0, #0
 8018348:	f7e7 ffbe 	bl	80002c8 <__aeabi_dsub>
 801834c:	e9cd 0100 	strd	r0, r1, [sp]
 8018350:	9b01      	ldr	r3, [sp, #4]
 8018352:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801835a:	da2f      	bge.n	80183bc <__ieee754_pow+0x9bc>
 801835c:	4650      	mov	r0, sl
 801835e:	ed9d 0b00 	vldr	d0, [sp]
 8018362:	f001 fde5 	bl	8019f30 <scalbn>
 8018366:	ec51 0b10 	vmov	r0, r1, d0
 801836a:	ec53 2b18 	vmov	r2, r3, d8
 801836e:	f7ff bbe0 	b.w	8017b32 <__ieee754_pow+0x132>
 8018372:	4b30      	ldr	r3, [pc, #192]	; (8018434 <__ieee754_pow+0xa34>)
 8018374:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018378:	429e      	cmp	r6, r3
 801837a:	f77f af0b 	ble.w	8018194 <__ieee754_pow+0x794>
 801837e:	4b2e      	ldr	r3, [pc, #184]	; (8018438 <__ieee754_pow+0xa38>)
 8018380:	440b      	add	r3, r1
 8018382:	4303      	orrs	r3, r0
 8018384:	d00b      	beq.n	801839e <__ieee754_pow+0x99e>
 8018386:	a326      	add	r3, pc, #152	; (adr r3, 8018420 <__ieee754_pow+0xa20>)
 8018388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801838c:	ec51 0b18 	vmov	r0, r1, d8
 8018390:	f7e8 f952 	bl	8000638 <__aeabi_dmul>
 8018394:	a322      	add	r3, pc, #136	; (adr r3, 8018420 <__ieee754_pow+0xa20>)
 8018396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801839a:	f7ff bbca 	b.w	8017b32 <__ieee754_pow+0x132>
 801839e:	4622      	mov	r2, r4
 80183a0:	462b      	mov	r3, r5
 80183a2:	f7e7 ff91 	bl	80002c8 <__aeabi_dsub>
 80183a6:	4642      	mov	r2, r8
 80183a8:	464b      	mov	r3, r9
 80183aa:	f7e8 fbcb 	bl	8000b44 <__aeabi_dcmpge>
 80183ae:	2800      	cmp	r0, #0
 80183b0:	f43f aef0 	beq.w	8018194 <__ieee754_pow+0x794>
 80183b4:	e7e7      	b.n	8018386 <__ieee754_pow+0x986>
 80183b6:	f04f 0a00 	mov.w	sl, #0
 80183ba:	e717      	b.n	80181ec <__ieee754_pow+0x7ec>
 80183bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183c0:	4619      	mov	r1, r3
 80183c2:	e7d2      	b.n	801836a <__ieee754_pow+0x96a>
 80183c4:	491a      	ldr	r1, [pc, #104]	; (8018430 <__ieee754_pow+0xa30>)
 80183c6:	2000      	movs	r0, #0
 80183c8:	f7ff bb9e 	b.w	8017b08 <__ieee754_pow+0x108>
 80183cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183d0:	f7ff bb9a 	b.w	8017b08 <__ieee754_pow+0x108>
 80183d4:	9000      	str	r0, [sp, #0]
 80183d6:	f7ff bb76 	b.w	8017ac6 <__ieee754_pow+0xc6>
 80183da:	2100      	movs	r1, #0
 80183dc:	f7ff bb60 	b.w	8017aa0 <__ieee754_pow+0xa0>
 80183e0:	00000000 	.word	0x00000000
 80183e4:	3fe62e43 	.word	0x3fe62e43
 80183e8:	fefa39ef 	.word	0xfefa39ef
 80183ec:	3fe62e42 	.word	0x3fe62e42
 80183f0:	0ca86c39 	.word	0x0ca86c39
 80183f4:	be205c61 	.word	0xbe205c61
 80183f8:	72bea4d0 	.word	0x72bea4d0
 80183fc:	3e663769 	.word	0x3e663769
 8018400:	c5d26bf1 	.word	0xc5d26bf1
 8018404:	3ebbbd41 	.word	0x3ebbbd41
 8018408:	af25de2c 	.word	0xaf25de2c
 801840c:	3f11566a 	.word	0x3f11566a
 8018410:	16bebd93 	.word	0x16bebd93
 8018414:	3f66c16c 	.word	0x3f66c16c
 8018418:	5555553e 	.word	0x5555553e
 801841c:	3fc55555 	.word	0x3fc55555
 8018420:	c2f8f359 	.word	0xc2f8f359
 8018424:	01a56e1f 	.word	0x01a56e1f
 8018428:	3fe00000 	.word	0x3fe00000
 801842c:	000fffff 	.word	0x000fffff
 8018430:	3ff00000 	.word	0x3ff00000
 8018434:	4090cbff 	.word	0x4090cbff
 8018438:	3f6f3400 	.word	0x3f6f3400
 801843c:	652b82fe 	.word	0x652b82fe
 8018440:	3c971547 	.word	0x3c971547
 8018444:	00000000 	.word	0x00000000

08018448 <__ieee754_rem_pio2>:
 8018448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801844c:	ed2d 8b02 	vpush	{d8}
 8018450:	ec55 4b10 	vmov	r4, r5, d0
 8018454:	4bca      	ldr	r3, [pc, #808]	; (8018780 <__ieee754_rem_pio2+0x338>)
 8018456:	b08b      	sub	sp, #44	; 0x2c
 8018458:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801845c:	4598      	cmp	r8, r3
 801845e:	4682      	mov	sl, r0
 8018460:	9502      	str	r5, [sp, #8]
 8018462:	dc08      	bgt.n	8018476 <__ieee754_rem_pio2+0x2e>
 8018464:	2200      	movs	r2, #0
 8018466:	2300      	movs	r3, #0
 8018468:	ed80 0b00 	vstr	d0, [r0]
 801846c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018470:	f04f 0b00 	mov.w	fp, #0
 8018474:	e028      	b.n	80184c8 <__ieee754_rem_pio2+0x80>
 8018476:	4bc3      	ldr	r3, [pc, #780]	; (8018784 <__ieee754_rem_pio2+0x33c>)
 8018478:	4598      	cmp	r8, r3
 801847a:	dc78      	bgt.n	801856e <__ieee754_rem_pio2+0x126>
 801847c:	9b02      	ldr	r3, [sp, #8]
 801847e:	4ec2      	ldr	r6, [pc, #776]	; (8018788 <__ieee754_rem_pio2+0x340>)
 8018480:	2b00      	cmp	r3, #0
 8018482:	ee10 0a10 	vmov	r0, s0
 8018486:	a3b0      	add	r3, pc, #704	; (adr r3, 8018748 <__ieee754_rem_pio2+0x300>)
 8018488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801848c:	4629      	mov	r1, r5
 801848e:	dd39      	ble.n	8018504 <__ieee754_rem_pio2+0xbc>
 8018490:	f7e7 ff1a 	bl	80002c8 <__aeabi_dsub>
 8018494:	45b0      	cmp	r8, r6
 8018496:	4604      	mov	r4, r0
 8018498:	460d      	mov	r5, r1
 801849a:	d01b      	beq.n	80184d4 <__ieee754_rem_pio2+0x8c>
 801849c:	a3ac      	add	r3, pc, #688	; (adr r3, 8018750 <__ieee754_rem_pio2+0x308>)
 801849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184a2:	f7e7 ff11 	bl	80002c8 <__aeabi_dsub>
 80184a6:	4602      	mov	r2, r0
 80184a8:	460b      	mov	r3, r1
 80184aa:	e9ca 2300 	strd	r2, r3, [sl]
 80184ae:	4620      	mov	r0, r4
 80184b0:	4629      	mov	r1, r5
 80184b2:	f7e7 ff09 	bl	80002c8 <__aeabi_dsub>
 80184b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8018750 <__ieee754_rem_pio2+0x308>)
 80184b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184bc:	f7e7 ff04 	bl	80002c8 <__aeabi_dsub>
 80184c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80184c4:	f04f 0b01 	mov.w	fp, #1
 80184c8:	4658      	mov	r0, fp
 80184ca:	b00b      	add	sp, #44	; 0x2c
 80184cc:	ecbd 8b02 	vpop	{d8}
 80184d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8018758 <__ieee754_rem_pio2+0x310>)
 80184d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184da:	f7e7 fef5 	bl	80002c8 <__aeabi_dsub>
 80184de:	a3a0      	add	r3, pc, #640	; (adr r3, 8018760 <__ieee754_rem_pio2+0x318>)
 80184e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184e4:	4604      	mov	r4, r0
 80184e6:	460d      	mov	r5, r1
 80184e8:	f7e7 feee 	bl	80002c8 <__aeabi_dsub>
 80184ec:	4602      	mov	r2, r0
 80184ee:	460b      	mov	r3, r1
 80184f0:	e9ca 2300 	strd	r2, r3, [sl]
 80184f4:	4620      	mov	r0, r4
 80184f6:	4629      	mov	r1, r5
 80184f8:	f7e7 fee6 	bl	80002c8 <__aeabi_dsub>
 80184fc:	a398      	add	r3, pc, #608	; (adr r3, 8018760 <__ieee754_rem_pio2+0x318>)
 80184fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018502:	e7db      	b.n	80184bc <__ieee754_rem_pio2+0x74>
 8018504:	f7e7 fee2 	bl	80002cc <__adddf3>
 8018508:	45b0      	cmp	r8, r6
 801850a:	4604      	mov	r4, r0
 801850c:	460d      	mov	r5, r1
 801850e:	d016      	beq.n	801853e <__ieee754_rem_pio2+0xf6>
 8018510:	a38f      	add	r3, pc, #572	; (adr r3, 8018750 <__ieee754_rem_pio2+0x308>)
 8018512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018516:	f7e7 fed9 	bl	80002cc <__adddf3>
 801851a:	4602      	mov	r2, r0
 801851c:	460b      	mov	r3, r1
 801851e:	e9ca 2300 	strd	r2, r3, [sl]
 8018522:	4620      	mov	r0, r4
 8018524:	4629      	mov	r1, r5
 8018526:	f7e7 fecf 	bl	80002c8 <__aeabi_dsub>
 801852a:	a389      	add	r3, pc, #548	; (adr r3, 8018750 <__ieee754_rem_pio2+0x308>)
 801852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018530:	f7e7 fecc 	bl	80002cc <__adddf3>
 8018534:	f04f 3bff 	mov.w	fp, #4294967295
 8018538:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801853c:	e7c4      	b.n	80184c8 <__ieee754_rem_pio2+0x80>
 801853e:	a386      	add	r3, pc, #536	; (adr r3, 8018758 <__ieee754_rem_pio2+0x310>)
 8018540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018544:	f7e7 fec2 	bl	80002cc <__adddf3>
 8018548:	a385      	add	r3, pc, #532	; (adr r3, 8018760 <__ieee754_rem_pio2+0x318>)
 801854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801854e:	4604      	mov	r4, r0
 8018550:	460d      	mov	r5, r1
 8018552:	f7e7 febb 	bl	80002cc <__adddf3>
 8018556:	4602      	mov	r2, r0
 8018558:	460b      	mov	r3, r1
 801855a:	e9ca 2300 	strd	r2, r3, [sl]
 801855e:	4620      	mov	r0, r4
 8018560:	4629      	mov	r1, r5
 8018562:	f7e7 feb1 	bl	80002c8 <__aeabi_dsub>
 8018566:	a37e      	add	r3, pc, #504	; (adr r3, 8018760 <__ieee754_rem_pio2+0x318>)
 8018568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801856c:	e7e0      	b.n	8018530 <__ieee754_rem_pio2+0xe8>
 801856e:	4b87      	ldr	r3, [pc, #540]	; (801878c <__ieee754_rem_pio2+0x344>)
 8018570:	4598      	cmp	r8, r3
 8018572:	f300 80d9 	bgt.w	8018728 <__ieee754_rem_pio2+0x2e0>
 8018576:	f001 fc33 	bl	8019de0 <fabs>
 801857a:	ec55 4b10 	vmov	r4, r5, d0
 801857e:	ee10 0a10 	vmov	r0, s0
 8018582:	a379      	add	r3, pc, #484	; (adr r3, 8018768 <__ieee754_rem_pio2+0x320>)
 8018584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018588:	4629      	mov	r1, r5
 801858a:	f7e8 f855 	bl	8000638 <__aeabi_dmul>
 801858e:	4b80      	ldr	r3, [pc, #512]	; (8018790 <__ieee754_rem_pio2+0x348>)
 8018590:	2200      	movs	r2, #0
 8018592:	f7e7 fe9b 	bl	80002cc <__adddf3>
 8018596:	f7e8 faff 	bl	8000b98 <__aeabi_d2iz>
 801859a:	4683      	mov	fp, r0
 801859c:	f7e7 ffe2 	bl	8000564 <__aeabi_i2d>
 80185a0:	4602      	mov	r2, r0
 80185a2:	460b      	mov	r3, r1
 80185a4:	ec43 2b18 	vmov	d8, r2, r3
 80185a8:	a367      	add	r3, pc, #412	; (adr r3, 8018748 <__ieee754_rem_pio2+0x300>)
 80185aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ae:	f7e8 f843 	bl	8000638 <__aeabi_dmul>
 80185b2:	4602      	mov	r2, r0
 80185b4:	460b      	mov	r3, r1
 80185b6:	4620      	mov	r0, r4
 80185b8:	4629      	mov	r1, r5
 80185ba:	f7e7 fe85 	bl	80002c8 <__aeabi_dsub>
 80185be:	a364      	add	r3, pc, #400	; (adr r3, 8018750 <__ieee754_rem_pio2+0x308>)
 80185c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185c4:	4606      	mov	r6, r0
 80185c6:	460f      	mov	r7, r1
 80185c8:	ec51 0b18 	vmov	r0, r1, d8
 80185cc:	f7e8 f834 	bl	8000638 <__aeabi_dmul>
 80185d0:	f1bb 0f1f 	cmp.w	fp, #31
 80185d4:	4604      	mov	r4, r0
 80185d6:	460d      	mov	r5, r1
 80185d8:	dc0d      	bgt.n	80185f6 <__ieee754_rem_pio2+0x1ae>
 80185da:	4b6e      	ldr	r3, [pc, #440]	; (8018794 <__ieee754_rem_pio2+0x34c>)
 80185dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80185e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185e4:	4543      	cmp	r3, r8
 80185e6:	d006      	beq.n	80185f6 <__ieee754_rem_pio2+0x1ae>
 80185e8:	4622      	mov	r2, r4
 80185ea:	462b      	mov	r3, r5
 80185ec:	4630      	mov	r0, r6
 80185ee:	4639      	mov	r1, r7
 80185f0:	f7e7 fe6a 	bl	80002c8 <__aeabi_dsub>
 80185f4:	e00f      	b.n	8018616 <__ieee754_rem_pio2+0x1ce>
 80185f6:	462b      	mov	r3, r5
 80185f8:	4622      	mov	r2, r4
 80185fa:	4630      	mov	r0, r6
 80185fc:	4639      	mov	r1, r7
 80185fe:	f7e7 fe63 	bl	80002c8 <__aeabi_dsub>
 8018602:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018606:	9303      	str	r3, [sp, #12]
 8018608:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801860c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8018610:	f1b8 0f10 	cmp.w	r8, #16
 8018614:	dc02      	bgt.n	801861c <__ieee754_rem_pio2+0x1d4>
 8018616:	e9ca 0100 	strd	r0, r1, [sl]
 801861a:	e039      	b.n	8018690 <__ieee754_rem_pio2+0x248>
 801861c:	a34e      	add	r3, pc, #312	; (adr r3, 8018758 <__ieee754_rem_pio2+0x310>)
 801861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018622:	ec51 0b18 	vmov	r0, r1, d8
 8018626:	f7e8 f807 	bl	8000638 <__aeabi_dmul>
 801862a:	4604      	mov	r4, r0
 801862c:	460d      	mov	r5, r1
 801862e:	4602      	mov	r2, r0
 8018630:	460b      	mov	r3, r1
 8018632:	4630      	mov	r0, r6
 8018634:	4639      	mov	r1, r7
 8018636:	f7e7 fe47 	bl	80002c8 <__aeabi_dsub>
 801863a:	4602      	mov	r2, r0
 801863c:	460b      	mov	r3, r1
 801863e:	4680      	mov	r8, r0
 8018640:	4689      	mov	r9, r1
 8018642:	4630      	mov	r0, r6
 8018644:	4639      	mov	r1, r7
 8018646:	f7e7 fe3f 	bl	80002c8 <__aeabi_dsub>
 801864a:	4622      	mov	r2, r4
 801864c:	462b      	mov	r3, r5
 801864e:	f7e7 fe3b 	bl	80002c8 <__aeabi_dsub>
 8018652:	a343      	add	r3, pc, #268	; (adr r3, 8018760 <__ieee754_rem_pio2+0x318>)
 8018654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018658:	4604      	mov	r4, r0
 801865a:	460d      	mov	r5, r1
 801865c:	ec51 0b18 	vmov	r0, r1, d8
 8018660:	f7e7 ffea 	bl	8000638 <__aeabi_dmul>
 8018664:	4622      	mov	r2, r4
 8018666:	462b      	mov	r3, r5
 8018668:	f7e7 fe2e 	bl	80002c8 <__aeabi_dsub>
 801866c:	4602      	mov	r2, r0
 801866e:	460b      	mov	r3, r1
 8018670:	4604      	mov	r4, r0
 8018672:	460d      	mov	r5, r1
 8018674:	4640      	mov	r0, r8
 8018676:	4649      	mov	r1, r9
 8018678:	f7e7 fe26 	bl	80002c8 <__aeabi_dsub>
 801867c:	9a03      	ldr	r2, [sp, #12]
 801867e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018682:	1ad3      	subs	r3, r2, r3
 8018684:	2b31      	cmp	r3, #49	; 0x31
 8018686:	dc24      	bgt.n	80186d2 <__ieee754_rem_pio2+0x28a>
 8018688:	e9ca 0100 	strd	r0, r1, [sl]
 801868c:	4646      	mov	r6, r8
 801868e:	464f      	mov	r7, r9
 8018690:	e9da 8900 	ldrd	r8, r9, [sl]
 8018694:	4630      	mov	r0, r6
 8018696:	4642      	mov	r2, r8
 8018698:	464b      	mov	r3, r9
 801869a:	4639      	mov	r1, r7
 801869c:	f7e7 fe14 	bl	80002c8 <__aeabi_dsub>
 80186a0:	462b      	mov	r3, r5
 80186a2:	4622      	mov	r2, r4
 80186a4:	f7e7 fe10 	bl	80002c8 <__aeabi_dsub>
 80186a8:	9b02      	ldr	r3, [sp, #8]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80186b0:	f6bf af0a 	bge.w	80184c8 <__ieee754_rem_pio2+0x80>
 80186b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80186b8:	f8ca 3004 	str.w	r3, [sl, #4]
 80186bc:	f8ca 8000 	str.w	r8, [sl]
 80186c0:	f8ca 0008 	str.w	r0, [sl, #8]
 80186c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80186c8:	f8ca 300c 	str.w	r3, [sl, #12]
 80186cc:	f1cb 0b00 	rsb	fp, fp, #0
 80186d0:	e6fa      	b.n	80184c8 <__ieee754_rem_pio2+0x80>
 80186d2:	a327      	add	r3, pc, #156	; (adr r3, 8018770 <__ieee754_rem_pio2+0x328>)
 80186d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186d8:	ec51 0b18 	vmov	r0, r1, d8
 80186dc:	f7e7 ffac 	bl	8000638 <__aeabi_dmul>
 80186e0:	4604      	mov	r4, r0
 80186e2:	460d      	mov	r5, r1
 80186e4:	4602      	mov	r2, r0
 80186e6:	460b      	mov	r3, r1
 80186e8:	4640      	mov	r0, r8
 80186ea:	4649      	mov	r1, r9
 80186ec:	f7e7 fdec 	bl	80002c8 <__aeabi_dsub>
 80186f0:	4602      	mov	r2, r0
 80186f2:	460b      	mov	r3, r1
 80186f4:	4606      	mov	r6, r0
 80186f6:	460f      	mov	r7, r1
 80186f8:	4640      	mov	r0, r8
 80186fa:	4649      	mov	r1, r9
 80186fc:	f7e7 fde4 	bl	80002c8 <__aeabi_dsub>
 8018700:	4622      	mov	r2, r4
 8018702:	462b      	mov	r3, r5
 8018704:	f7e7 fde0 	bl	80002c8 <__aeabi_dsub>
 8018708:	a31b      	add	r3, pc, #108	; (adr r3, 8018778 <__ieee754_rem_pio2+0x330>)
 801870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801870e:	4604      	mov	r4, r0
 8018710:	460d      	mov	r5, r1
 8018712:	ec51 0b18 	vmov	r0, r1, d8
 8018716:	f7e7 ff8f 	bl	8000638 <__aeabi_dmul>
 801871a:	4622      	mov	r2, r4
 801871c:	462b      	mov	r3, r5
 801871e:	f7e7 fdd3 	bl	80002c8 <__aeabi_dsub>
 8018722:	4604      	mov	r4, r0
 8018724:	460d      	mov	r5, r1
 8018726:	e75f      	b.n	80185e8 <__ieee754_rem_pio2+0x1a0>
 8018728:	4b1b      	ldr	r3, [pc, #108]	; (8018798 <__ieee754_rem_pio2+0x350>)
 801872a:	4598      	cmp	r8, r3
 801872c:	dd36      	ble.n	801879c <__ieee754_rem_pio2+0x354>
 801872e:	ee10 2a10 	vmov	r2, s0
 8018732:	462b      	mov	r3, r5
 8018734:	4620      	mov	r0, r4
 8018736:	4629      	mov	r1, r5
 8018738:	f7e7 fdc6 	bl	80002c8 <__aeabi_dsub>
 801873c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018740:	e9ca 0100 	strd	r0, r1, [sl]
 8018744:	e694      	b.n	8018470 <__ieee754_rem_pio2+0x28>
 8018746:	bf00      	nop
 8018748:	54400000 	.word	0x54400000
 801874c:	3ff921fb 	.word	0x3ff921fb
 8018750:	1a626331 	.word	0x1a626331
 8018754:	3dd0b461 	.word	0x3dd0b461
 8018758:	1a600000 	.word	0x1a600000
 801875c:	3dd0b461 	.word	0x3dd0b461
 8018760:	2e037073 	.word	0x2e037073
 8018764:	3ba3198a 	.word	0x3ba3198a
 8018768:	6dc9c883 	.word	0x6dc9c883
 801876c:	3fe45f30 	.word	0x3fe45f30
 8018770:	2e000000 	.word	0x2e000000
 8018774:	3ba3198a 	.word	0x3ba3198a
 8018778:	252049c1 	.word	0x252049c1
 801877c:	397b839a 	.word	0x397b839a
 8018780:	3fe921fb 	.word	0x3fe921fb
 8018784:	4002d97b 	.word	0x4002d97b
 8018788:	3ff921fb 	.word	0x3ff921fb
 801878c:	413921fb 	.word	0x413921fb
 8018790:	3fe00000 	.word	0x3fe00000
 8018794:	0803cb50 	.word	0x0803cb50
 8018798:	7fefffff 	.word	0x7fefffff
 801879c:	ea4f 5428 	mov.w	r4, r8, asr #20
 80187a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80187a4:	ee10 0a10 	vmov	r0, s0
 80187a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80187ac:	ee10 6a10 	vmov	r6, s0
 80187b0:	460f      	mov	r7, r1
 80187b2:	f7e8 f9f1 	bl	8000b98 <__aeabi_d2iz>
 80187b6:	f7e7 fed5 	bl	8000564 <__aeabi_i2d>
 80187ba:	4602      	mov	r2, r0
 80187bc:	460b      	mov	r3, r1
 80187be:	4630      	mov	r0, r6
 80187c0:	4639      	mov	r1, r7
 80187c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80187c6:	f7e7 fd7f 	bl	80002c8 <__aeabi_dsub>
 80187ca:	4b22      	ldr	r3, [pc, #136]	; (8018854 <__ieee754_rem_pio2+0x40c>)
 80187cc:	2200      	movs	r2, #0
 80187ce:	f7e7 ff33 	bl	8000638 <__aeabi_dmul>
 80187d2:	460f      	mov	r7, r1
 80187d4:	4606      	mov	r6, r0
 80187d6:	f7e8 f9df 	bl	8000b98 <__aeabi_d2iz>
 80187da:	f7e7 fec3 	bl	8000564 <__aeabi_i2d>
 80187de:	4602      	mov	r2, r0
 80187e0:	460b      	mov	r3, r1
 80187e2:	4630      	mov	r0, r6
 80187e4:	4639      	mov	r1, r7
 80187e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80187ea:	f7e7 fd6d 	bl	80002c8 <__aeabi_dsub>
 80187ee:	4b19      	ldr	r3, [pc, #100]	; (8018854 <__ieee754_rem_pio2+0x40c>)
 80187f0:	2200      	movs	r2, #0
 80187f2:	f7e7 ff21 	bl	8000638 <__aeabi_dmul>
 80187f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80187fa:	ad04      	add	r5, sp, #16
 80187fc:	f04f 0803 	mov.w	r8, #3
 8018800:	46a9      	mov	r9, r5
 8018802:	2600      	movs	r6, #0
 8018804:	2700      	movs	r7, #0
 8018806:	4632      	mov	r2, r6
 8018808:	463b      	mov	r3, r7
 801880a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801880e:	46c3      	mov	fp, r8
 8018810:	3d08      	subs	r5, #8
 8018812:	f108 38ff 	add.w	r8, r8, #4294967295
 8018816:	f7e8 f977 	bl	8000b08 <__aeabi_dcmpeq>
 801881a:	2800      	cmp	r0, #0
 801881c:	d1f3      	bne.n	8018806 <__ieee754_rem_pio2+0x3be>
 801881e:	4b0e      	ldr	r3, [pc, #56]	; (8018858 <__ieee754_rem_pio2+0x410>)
 8018820:	9301      	str	r3, [sp, #4]
 8018822:	2302      	movs	r3, #2
 8018824:	9300      	str	r3, [sp, #0]
 8018826:	4622      	mov	r2, r4
 8018828:	465b      	mov	r3, fp
 801882a:	4651      	mov	r1, sl
 801882c:	4648      	mov	r0, r9
 801882e:	f000 fba7 	bl	8018f80 <__kernel_rem_pio2>
 8018832:	9b02      	ldr	r3, [sp, #8]
 8018834:	2b00      	cmp	r3, #0
 8018836:	4683      	mov	fp, r0
 8018838:	f6bf ae46 	bge.w	80184c8 <__ieee754_rem_pio2+0x80>
 801883c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018840:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018844:	f8ca 3004 	str.w	r3, [sl, #4]
 8018848:	f8da 300c 	ldr.w	r3, [sl, #12]
 801884c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018850:	e73a      	b.n	80186c8 <__ieee754_rem_pio2+0x280>
 8018852:	bf00      	nop
 8018854:	41700000 	.word	0x41700000
 8018858:	0803cbd0 	.word	0x0803cbd0

0801885c <__ieee754_sqrt>:
 801885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018860:	ec55 4b10 	vmov	r4, r5, d0
 8018864:	4e56      	ldr	r6, [pc, #344]	; (80189c0 <__ieee754_sqrt+0x164>)
 8018866:	43ae      	bics	r6, r5
 8018868:	ee10 0a10 	vmov	r0, s0
 801886c:	ee10 3a10 	vmov	r3, s0
 8018870:	4629      	mov	r1, r5
 8018872:	462a      	mov	r2, r5
 8018874:	d110      	bne.n	8018898 <__ieee754_sqrt+0x3c>
 8018876:	ee10 2a10 	vmov	r2, s0
 801887a:	462b      	mov	r3, r5
 801887c:	f7e7 fedc 	bl	8000638 <__aeabi_dmul>
 8018880:	4602      	mov	r2, r0
 8018882:	460b      	mov	r3, r1
 8018884:	4620      	mov	r0, r4
 8018886:	4629      	mov	r1, r5
 8018888:	f7e7 fd20 	bl	80002cc <__adddf3>
 801888c:	4604      	mov	r4, r0
 801888e:	460d      	mov	r5, r1
 8018890:	ec45 4b10 	vmov	d0, r4, r5
 8018894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018898:	2d00      	cmp	r5, #0
 801889a:	dc10      	bgt.n	80188be <__ieee754_sqrt+0x62>
 801889c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80188a0:	4330      	orrs	r0, r6
 80188a2:	d0f5      	beq.n	8018890 <__ieee754_sqrt+0x34>
 80188a4:	b15d      	cbz	r5, 80188be <__ieee754_sqrt+0x62>
 80188a6:	ee10 2a10 	vmov	r2, s0
 80188aa:	462b      	mov	r3, r5
 80188ac:	ee10 0a10 	vmov	r0, s0
 80188b0:	f7e7 fd0a 	bl	80002c8 <__aeabi_dsub>
 80188b4:	4602      	mov	r2, r0
 80188b6:	460b      	mov	r3, r1
 80188b8:	f7e7 ffe8 	bl	800088c <__aeabi_ddiv>
 80188bc:	e7e6      	b.n	801888c <__ieee754_sqrt+0x30>
 80188be:	1509      	asrs	r1, r1, #20
 80188c0:	d076      	beq.n	80189b0 <__ieee754_sqrt+0x154>
 80188c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80188c6:	07ce      	lsls	r6, r1, #31
 80188c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80188cc:	bf5e      	ittt	pl
 80188ce:	0fda      	lsrpl	r2, r3, #31
 80188d0:	005b      	lslpl	r3, r3, #1
 80188d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80188d6:	0fda      	lsrs	r2, r3, #31
 80188d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80188dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80188e0:	2000      	movs	r0, #0
 80188e2:	106d      	asrs	r5, r5, #1
 80188e4:	005b      	lsls	r3, r3, #1
 80188e6:	f04f 0e16 	mov.w	lr, #22
 80188ea:	4684      	mov	ip, r0
 80188ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80188f0:	eb0c 0401 	add.w	r4, ip, r1
 80188f4:	4294      	cmp	r4, r2
 80188f6:	bfde      	ittt	le
 80188f8:	1b12      	suble	r2, r2, r4
 80188fa:	eb04 0c01 	addle.w	ip, r4, r1
 80188fe:	1840      	addle	r0, r0, r1
 8018900:	0052      	lsls	r2, r2, #1
 8018902:	f1be 0e01 	subs.w	lr, lr, #1
 8018906:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801890a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801890e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018912:	d1ed      	bne.n	80188f0 <__ieee754_sqrt+0x94>
 8018914:	4671      	mov	r1, lr
 8018916:	2720      	movs	r7, #32
 8018918:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801891c:	4562      	cmp	r2, ip
 801891e:	eb04 060e 	add.w	r6, r4, lr
 8018922:	dc02      	bgt.n	801892a <__ieee754_sqrt+0xce>
 8018924:	d113      	bne.n	801894e <__ieee754_sqrt+0xf2>
 8018926:	429e      	cmp	r6, r3
 8018928:	d811      	bhi.n	801894e <__ieee754_sqrt+0xf2>
 801892a:	2e00      	cmp	r6, #0
 801892c:	eb06 0e04 	add.w	lr, r6, r4
 8018930:	da43      	bge.n	80189ba <__ieee754_sqrt+0x15e>
 8018932:	f1be 0f00 	cmp.w	lr, #0
 8018936:	db40      	blt.n	80189ba <__ieee754_sqrt+0x15e>
 8018938:	f10c 0801 	add.w	r8, ip, #1
 801893c:	eba2 020c 	sub.w	r2, r2, ip
 8018940:	429e      	cmp	r6, r3
 8018942:	bf88      	it	hi
 8018944:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018948:	1b9b      	subs	r3, r3, r6
 801894a:	4421      	add	r1, r4
 801894c:	46c4      	mov	ip, r8
 801894e:	0052      	lsls	r2, r2, #1
 8018950:	3f01      	subs	r7, #1
 8018952:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018956:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801895a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801895e:	d1dd      	bne.n	801891c <__ieee754_sqrt+0xc0>
 8018960:	4313      	orrs	r3, r2
 8018962:	d006      	beq.n	8018972 <__ieee754_sqrt+0x116>
 8018964:	1c4c      	adds	r4, r1, #1
 8018966:	bf13      	iteet	ne
 8018968:	3101      	addne	r1, #1
 801896a:	3001      	addeq	r0, #1
 801896c:	4639      	moveq	r1, r7
 801896e:	f021 0101 	bicne.w	r1, r1, #1
 8018972:	1043      	asrs	r3, r0, #1
 8018974:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018978:	0849      	lsrs	r1, r1, #1
 801897a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801897e:	07c2      	lsls	r2, r0, #31
 8018980:	bf48      	it	mi
 8018982:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8018986:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801898a:	460c      	mov	r4, r1
 801898c:	463d      	mov	r5, r7
 801898e:	e77f      	b.n	8018890 <__ieee754_sqrt+0x34>
 8018990:	0ada      	lsrs	r2, r3, #11
 8018992:	3815      	subs	r0, #21
 8018994:	055b      	lsls	r3, r3, #21
 8018996:	2a00      	cmp	r2, #0
 8018998:	d0fa      	beq.n	8018990 <__ieee754_sqrt+0x134>
 801899a:	02d7      	lsls	r7, r2, #11
 801899c:	d50a      	bpl.n	80189b4 <__ieee754_sqrt+0x158>
 801899e:	f1c1 0420 	rsb	r4, r1, #32
 80189a2:	fa23 f404 	lsr.w	r4, r3, r4
 80189a6:	1e4d      	subs	r5, r1, #1
 80189a8:	408b      	lsls	r3, r1
 80189aa:	4322      	orrs	r2, r4
 80189ac:	1b41      	subs	r1, r0, r5
 80189ae:	e788      	b.n	80188c2 <__ieee754_sqrt+0x66>
 80189b0:	4608      	mov	r0, r1
 80189b2:	e7f0      	b.n	8018996 <__ieee754_sqrt+0x13a>
 80189b4:	0052      	lsls	r2, r2, #1
 80189b6:	3101      	adds	r1, #1
 80189b8:	e7ef      	b.n	801899a <__ieee754_sqrt+0x13e>
 80189ba:	46e0      	mov	r8, ip
 80189bc:	e7be      	b.n	801893c <__ieee754_sqrt+0xe0>
 80189be:	bf00      	nop
 80189c0:	7ff00000 	.word	0x7ff00000

080189c4 <__ieee754_expf>:
 80189c4:	ee10 2a10 	vmov	r2, s0
 80189c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80189cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80189d0:	d902      	bls.n	80189d8 <__ieee754_expf+0x14>
 80189d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80189d6:	4770      	bx	lr
 80189d8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80189dc:	d106      	bne.n	80189ec <__ieee754_expf+0x28>
 80189de:	eddf 7a51 	vldr	s15, [pc, #324]	; 8018b24 <__ieee754_expf+0x160>
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	bf18      	it	ne
 80189e6:	eeb0 0a67 	vmovne.f32	s0, s15
 80189ea:	4770      	bx	lr
 80189ec:	484e      	ldr	r0, [pc, #312]	; (8018b28 <__ieee754_expf+0x164>)
 80189ee:	4282      	cmp	r2, r0
 80189f0:	dd04      	ble.n	80189fc <__ieee754_expf+0x38>
 80189f2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8018b2c <__ieee754_expf+0x168>
 80189f6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80189fa:	4770      	bx	lr
 80189fc:	2a00      	cmp	r2, #0
 80189fe:	da03      	bge.n	8018a08 <__ieee754_expf+0x44>
 8018a00:	4a4b      	ldr	r2, [pc, #300]	; (8018b30 <__ieee754_expf+0x16c>)
 8018a02:	4291      	cmp	r1, r2
 8018a04:	f200 808a 	bhi.w	8018b1c <__ieee754_expf+0x158>
 8018a08:	4a4a      	ldr	r2, [pc, #296]	; (8018b34 <__ieee754_expf+0x170>)
 8018a0a:	4291      	cmp	r1, r2
 8018a0c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018a10:	d954      	bls.n	8018abc <__ieee754_expf+0xf8>
 8018a12:	4a49      	ldr	r2, [pc, #292]	; (8018b38 <__ieee754_expf+0x174>)
 8018a14:	4291      	cmp	r1, r2
 8018a16:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8018a1a:	d836      	bhi.n	8018a8a <__ieee754_expf+0xc6>
 8018a1c:	4947      	ldr	r1, [pc, #284]	; (8018b3c <__ieee754_expf+0x178>)
 8018a1e:	4411      	add	r1, r2
 8018a20:	ed91 7a00 	vldr	s14, [r1]
 8018a24:	4946      	ldr	r1, [pc, #280]	; (8018b40 <__ieee754_expf+0x17c>)
 8018a26:	440a      	add	r2, r1
 8018a28:	edd2 7a00 	vldr	s15, [r2]
 8018a2c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8018a30:	f1c3 0201 	rsb	r2, r3, #1
 8018a34:	1ad2      	subs	r2, r2, r3
 8018a36:	ee37 0a67 	vsub.f32	s0, s14, s15
 8018a3a:	ee60 6a00 	vmul.f32	s13, s0, s0
 8018a3e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8018b44 <__ieee754_expf+0x180>
 8018a42:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8018b48 <__ieee754_expf+0x184>
 8018a46:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8018a4a:	eddf 5a40 	vldr	s11, [pc, #256]	; 8018b4c <__ieee754_expf+0x188>
 8018a4e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8018a52:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8018b50 <__ieee754_expf+0x18c>
 8018a56:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8018a5a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8018b54 <__ieee754_expf+0x190>
 8018a5e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8018a62:	eeb0 5a40 	vmov.f32	s10, s0
 8018a66:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8018a6a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8018a6e:	eef0 6a45 	vmov.f32	s13, s10
 8018a72:	ee20 5a05 	vmul.f32	s10, s0, s10
 8018a76:	bb92      	cbnz	r2, 8018ade <__ieee754_expf+0x11a>
 8018a78:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8018a7c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8018a80:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018a84:	ee36 0a40 	vsub.f32	s0, s12, s0
 8018a88:	4770      	bx	lr
 8018a8a:	4b33      	ldr	r3, [pc, #204]	; (8018b58 <__ieee754_expf+0x194>)
 8018a8c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8018b5c <__ieee754_expf+0x198>
 8018a90:	4413      	add	r3, r2
 8018a92:	edd3 7a00 	vldr	s15, [r3]
 8018a96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018a9a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8018b60 <__ieee754_expf+0x19c>
 8018a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018aa2:	ee17 2a90 	vmov	r2, s15
 8018aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018aaa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018aae:	eeb0 7a40 	vmov.f32	s14, s0
 8018ab2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8018b64 <__ieee754_expf+0x1a0>
 8018ab6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018aba:	e7bc      	b.n	8018a36 <__ieee754_expf+0x72>
 8018abc:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8018ac0:	d20b      	bcs.n	8018ada <__ieee754_expf+0x116>
 8018ac2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8018b2c <__ieee754_expf+0x168>
 8018ac6:	ee70 6a26 	vadd.f32	s13, s0, s13
 8018aca:	eef4 6ac6 	vcmpe.f32	s13, s12
 8018ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ad2:	dd02      	ble.n	8018ada <__ieee754_expf+0x116>
 8018ad4:	ee30 0a06 	vadd.f32	s0, s0, s12
 8018ad8:	4770      	bx	lr
 8018ada:	2200      	movs	r2, #0
 8018adc:	e7ad      	b.n	8018a3a <__ieee754_expf+0x76>
 8018ade:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8018ae2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8018ae6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8018aea:	bfb8      	it	lt
 8018aec:	3264      	addlt	r2, #100	; 0x64
 8018aee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018af2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8018af6:	ee76 7a40 	vsub.f32	s15, s12, s0
 8018afa:	ee17 3a90 	vmov	r3, s15
 8018afe:	bfab      	itete	ge
 8018b00:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8018b04:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8018b08:	ee00 3a10 	vmovge	s0, r3
 8018b0c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8018b68 <__ieee754_expf+0x1a4>
 8018b10:	bfbc      	itt	lt
 8018b12:	ee00 3a10 	vmovlt	s0, r3
 8018b16:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8018b1a:	4770      	bx	lr
 8018b1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018b24 <__ieee754_expf+0x160>
 8018b20:	4770      	bx	lr
 8018b22:	bf00      	nop
 8018b24:	00000000 	.word	0x00000000
 8018b28:	42b17217 	.word	0x42b17217
 8018b2c:	7149f2ca 	.word	0x7149f2ca
 8018b30:	42cff1b5 	.word	0x42cff1b5
 8018b34:	3eb17218 	.word	0x3eb17218
 8018b38:	3f851591 	.word	0x3f851591
 8018b3c:	0803cce0 	.word	0x0803cce0
 8018b40:	0803cce8 	.word	0x0803cce8
 8018b44:	3331bb4c 	.word	0x3331bb4c
 8018b48:	b5ddea0e 	.word	0xb5ddea0e
 8018b4c:	388ab355 	.word	0x388ab355
 8018b50:	bb360b61 	.word	0xbb360b61
 8018b54:	3e2aaaab 	.word	0x3e2aaaab
 8018b58:	0803ccd8 	.word	0x0803ccd8
 8018b5c:	3fb8aa3b 	.word	0x3fb8aa3b
 8018b60:	3f317180 	.word	0x3f317180
 8018b64:	3717f7d1 	.word	0x3717f7d1
 8018b68:	0d800000 	.word	0x0d800000

08018b6c <__ieee754_rem_pio2f>:
 8018b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b6e:	ee10 6a10 	vmov	r6, s0
 8018b72:	4b8e      	ldr	r3, [pc, #568]	; (8018dac <__ieee754_rem_pio2f+0x240>)
 8018b74:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8018b78:	429d      	cmp	r5, r3
 8018b7a:	b087      	sub	sp, #28
 8018b7c:	eef0 7a40 	vmov.f32	s15, s0
 8018b80:	4604      	mov	r4, r0
 8018b82:	dc05      	bgt.n	8018b90 <__ieee754_rem_pio2f+0x24>
 8018b84:	2300      	movs	r3, #0
 8018b86:	ed80 0a00 	vstr	s0, [r0]
 8018b8a:	6043      	str	r3, [r0, #4]
 8018b8c:	2000      	movs	r0, #0
 8018b8e:	e01a      	b.n	8018bc6 <__ieee754_rem_pio2f+0x5a>
 8018b90:	4b87      	ldr	r3, [pc, #540]	; (8018db0 <__ieee754_rem_pio2f+0x244>)
 8018b92:	429d      	cmp	r5, r3
 8018b94:	dc46      	bgt.n	8018c24 <__ieee754_rem_pio2f+0xb8>
 8018b96:	2e00      	cmp	r6, #0
 8018b98:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8018db4 <__ieee754_rem_pio2f+0x248>
 8018b9c:	4b86      	ldr	r3, [pc, #536]	; (8018db8 <__ieee754_rem_pio2f+0x24c>)
 8018b9e:	f025 050f 	bic.w	r5, r5, #15
 8018ba2:	dd1f      	ble.n	8018be4 <__ieee754_rem_pio2f+0x78>
 8018ba4:	429d      	cmp	r5, r3
 8018ba6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018baa:	d00e      	beq.n	8018bca <__ieee754_rem_pio2f+0x5e>
 8018bac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8018dbc <__ieee754_rem_pio2f+0x250>
 8018bb0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8018bb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018bb8:	ed80 0a00 	vstr	s0, [r0]
 8018bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018bc0:	2001      	movs	r0, #1
 8018bc2:	edc4 7a01 	vstr	s15, [r4, #4]
 8018bc6:	b007      	add	sp, #28
 8018bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bca:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8018dc0 <__ieee754_rem_pio2f+0x254>
 8018bce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8018dc4 <__ieee754_rem_pio2f+0x258>
 8018bd2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018bd6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8018bda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018bde:	edc0 6a00 	vstr	s13, [r0]
 8018be2:	e7eb      	b.n	8018bbc <__ieee754_rem_pio2f+0x50>
 8018be4:	429d      	cmp	r5, r3
 8018be6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018bea:	d00e      	beq.n	8018c0a <__ieee754_rem_pio2f+0x9e>
 8018bec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8018dbc <__ieee754_rem_pio2f+0x250>
 8018bf0:	ee37 0a87 	vadd.f32	s0, s15, s14
 8018bf4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018bf8:	ed80 0a00 	vstr	s0, [r0]
 8018bfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018c00:	f04f 30ff 	mov.w	r0, #4294967295
 8018c04:	edc4 7a01 	vstr	s15, [r4, #4]
 8018c08:	e7dd      	b.n	8018bc6 <__ieee754_rem_pio2f+0x5a>
 8018c0a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8018dc0 <__ieee754_rem_pio2f+0x254>
 8018c0e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8018dc4 <__ieee754_rem_pio2f+0x258>
 8018c12:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018c16:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018c1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018c1e:	edc0 6a00 	vstr	s13, [r0]
 8018c22:	e7eb      	b.n	8018bfc <__ieee754_rem_pio2f+0x90>
 8018c24:	4b68      	ldr	r3, [pc, #416]	; (8018dc8 <__ieee754_rem_pio2f+0x25c>)
 8018c26:	429d      	cmp	r5, r3
 8018c28:	dc72      	bgt.n	8018d10 <__ieee754_rem_pio2f+0x1a4>
 8018c2a:	f001 fa07 	bl	801a03c <fabsf>
 8018c2e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8018dcc <__ieee754_rem_pio2f+0x260>
 8018c32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018c36:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018c42:	ee17 0a90 	vmov	r0, s15
 8018c46:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8018db4 <__ieee754_rem_pio2f+0x248>
 8018c4a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8018c4e:	281f      	cmp	r0, #31
 8018c50:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8018dbc <__ieee754_rem_pio2f+0x250>
 8018c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018c58:	eeb1 6a47 	vneg.f32	s12, s14
 8018c5c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018c60:	ee16 2a90 	vmov	r2, s13
 8018c64:	dc1c      	bgt.n	8018ca0 <__ieee754_rem_pio2f+0x134>
 8018c66:	495a      	ldr	r1, [pc, #360]	; (8018dd0 <__ieee754_rem_pio2f+0x264>)
 8018c68:	1e47      	subs	r7, r0, #1
 8018c6a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8018c6e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8018c72:	428b      	cmp	r3, r1
 8018c74:	d014      	beq.n	8018ca0 <__ieee754_rem_pio2f+0x134>
 8018c76:	6022      	str	r2, [r4, #0]
 8018c78:	ed94 7a00 	vldr	s14, [r4]
 8018c7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018c80:	2e00      	cmp	r6, #0
 8018c82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018c86:	ed84 0a01 	vstr	s0, [r4, #4]
 8018c8a:	da9c      	bge.n	8018bc6 <__ieee754_rem_pio2f+0x5a>
 8018c8c:	eeb1 7a47 	vneg.f32	s14, s14
 8018c90:	eeb1 0a40 	vneg.f32	s0, s0
 8018c94:	ed84 7a00 	vstr	s14, [r4]
 8018c98:	ed84 0a01 	vstr	s0, [r4, #4]
 8018c9c:	4240      	negs	r0, r0
 8018c9e:	e792      	b.n	8018bc6 <__ieee754_rem_pio2f+0x5a>
 8018ca0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018ca4:	15eb      	asrs	r3, r5, #23
 8018ca6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8018caa:	2d08      	cmp	r5, #8
 8018cac:	dde3      	ble.n	8018c76 <__ieee754_rem_pio2f+0x10a>
 8018cae:	eddf 7a44 	vldr	s15, [pc, #272]	; 8018dc0 <__ieee754_rem_pio2f+0x254>
 8018cb2:	eef0 6a40 	vmov.f32	s13, s0
 8018cb6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018cba:	ee30 0a66 	vsub.f32	s0, s0, s13
 8018cbe:	eea6 0a27 	vfma.f32	s0, s12, s15
 8018cc2:	eddf 7a40 	vldr	s15, [pc, #256]	; 8018dc4 <__ieee754_rem_pio2f+0x258>
 8018cc6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8018cca:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8018cce:	eef0 7a40 	vmov.f32	s15, s0
 8018cd2:	ee15 2a90 	vmov	r2, s11
 8018cd6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018cda:	1a5b      	subs	r3, r3, r1
 8018cdc:	2b19      	cmp	r3, #25
 8018cde:	dc04      	bgt.n	8018cea <__ieee754_rem_pio2f+0x17e>
 8018ce0:	edc4 5a00 	vstr	s11, [r4]
 8018ce4:	eeb0 0a66 	vmov.f32	s0, s13
 8018ce8:	e7c6      	b.n	8018c78 <__ieee754_rem_pio2f+0x10c>
 8018cea:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8018dd4 <__ieee754_rem_pio2f+0x268>
 8018cee:	eeb0 0a66 	vmov.f32	s0, s13
 8018cf2:	eea6 0a25 	vfma.f32	s0, s12, s11
 8018cf6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018cfa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8018dd8 <__ieee754_rem_pio2f+0x26c>
 8018cfe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018d02:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8018d06:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018d0a:	ed84 7a00 	vstr	s14, [r4]
 8018d0e:	e7b3      	b.n	8018c78 <__ieee754_rem_pio2f+0x10c>
 8018d10:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8018d14:	db06      	blt.n	8018d24 <__ieee754_rem_pio2f+0x1b8>
 8018d16:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018d1a:	edc0 7a01 	vstr	s15, [r0, #4]
 8018d1e:	edc0 7a00 	vstr	s15, [r0]
 8018d22:	e733      	b.n	8018b8c <__ieee754_rem_pio2f+0x20>
 8018d24:	15ea      	asrs	r2, r5, #23
 8018d26:	3a86      	subs	r2, #134	; 0x86
 8018d28:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018d2c:	ee07 3a90 	vmov	s15, r3
 8018d30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018d34:	eddf 6a29 	vldr	s13, [pc, #164]	; 8018ddc <__ieee754_rem_pio2f+0x270>
 8018d38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018d40:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018d44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018d48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018d4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018d54:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018d58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018d5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d64:	edcd 7a05 	vstr	s15, [sp, #20]
 8018d68:	d11e      	bne.n	8018da8 <__ieee754_rem_pio2f+0x23c>
 8018d6a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d72:	bf14      	ite	ne
 8018d74:	2302      	movne	r3, #2
 8018d76:	2301      	moveq	r3, #1
 8018d78:	4919      	ldr	r1, [pc, #100]	; (8018de0 <__ieee754_rem_pio2f+0x274>)
 8018d7a:	9101      	str	r1, [sp, #4]
 8018d7c:	2102      	movs	r1, #2
 8018d7e:	9100      	str	r1, [sp, #0]
 8018d80:	a803      	add	r0, sp, #12
 8018d82:	4621      	mov	r1, r4
 8018d84:	f000 fd5a 	bl	801983c <__kernel_rem_pio2f>
 8018d88:	2e00      	cmp	r6, #0
 8018d8a:	f6bf af1c 	bge.w	8018bc6 <__ieee754_rem_pio2f+0x5a>
 8018d8e:	edd4 7a00 	vldr	s15, [r4]
 8018d92:	eef1 7a67 	vneg.f32	s15, s15
 8018d96:	edc4 7a00 	vstr	s15, [r4]
 8018d9a:	edd4 7a01 	vldr	s15, [r4, #4]
 8018d9e:	eef1 7a67 	vneg.f32	s15, s15
 8018da2:	edc4 7a01 	vstr	s15, [r4, #4]
 8018da6:	e779      	b.n	8018c9c <__ieee754_rem_pio2f+0x130>
 8018da8:	2303      	movs	r3, #3
 8018daa:	e7e5      	b.n	8018d78 <__ieee754_rem_pio2f+0x20c>
 8018dac:	3f490fd8 	.word	0x3f490fd8
 8018db0:	4016cbe3 	.word	0x4016cbe3
 8018db4:	3fc90f80 	.word	0x3fc90f80
 8018db8:	3fc90fd0 	.word	0x3fc90fd0
 8018dbc:	37354443 	.word	0x37354443
 8018dc0:	37354400 	.word	0x37354400
 8018dc4:	2e85a308 	.word	0x2e85a308
 8018dc8:	43490f80 	.word	0x43490f80
 8018dcc:	3f22f984 	.word	0x3f22f984
 8018dd0:	0803ccf0 	.word	0x0803ccf0
 8018dd4:	2e85a300 	.word	0x2e85a300
 8018dd8:	248d3132 	.word	0x248d3132
 8018ddc:	43800000 	.word	0x43800000
 8018de0:	0803cd70 	.word	0x0803cd70

08018de4 <__ieee754_sqrtf>:
 8018de4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018de8:	4770      	bx	lr
 8018dea:	0000      	movs	r0, r0
 8018dec:	0000      	movs	r0, r0
	...

08018df0 <__kernel_cos>:
 8018df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df4:	ec57 6b10 	vmov	r6, r7, d0
 8018df8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8018dfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8018e00:	ed8d 1b00 	vstr	d1, [sp]
 8018e04:	da07      	bge.n	8018e16 <__kernel_cos+0x26>
 8018e06:	ee10 0a10 	vmov	r0, s0
 8018e0a:	4639      	mov	r1, r7
 8018e0c:	f7e7 fec4 	bl	8000b98 <__aeabi_d2iz>
 8018e10:	2800      	cmp	r0, #0
 8018e12:	f000 8088 	beq.w	8018f26 <__kernel_cos+0x136>
 8018e16:	4632      	mov	r2, r6
 8018e18:	463b      	mov	r3, r7
 8018e1a:	4630      	mov	r0, r6
 8018e1c:	4639      	mov	r1, r7
 8018e1e:	f7e7 fc0b 	bl	8000638 <__aeabi_dmul>
 8018e22:	4b51      	ldr	r3, [pc, #324]	; (8018f68 <__kernel_cos+0x178>)
 8018e24:	2200      	movs	r2, #0
 8018e26:	4604      	mov	r4, r0
 8018e28:	460d      	mov	r5, r1
 8018e2a:	f7e7 fc05 	bl	8000638 <__aeabi_dmul>
 8018e2e:	a340      	add	r3, pc, #256	; (adr r3, 8018f30 <__kernel_cos+0x140>)
 8018e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e34:	4682      	mov	sl, r0
 8018e36:	468b      	mov	fp, r1
 8018e38:	4620      	mov	r0, r4
 8018e3a:	4629      	mov	r1, r5
 8018e3c:	f7e7 fbfc 	bl	8000638 <__aeabi_dmul>
 8018e40:	a33d      	add	r3, pc, #244	; (adr r3, 8018f38 <__kernel_cos+0x148>)
 8018e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e46:	f7e7 fa41 	bl	80002cc <__adddf3>
 8018e4a:	4622      	mov	r2, r4
 8018e4c:	462b      	mov	r3, r5
 8018e4e:	f7e7 fbf3 	bl	8000638 <__aeabi_dmul>
 8018e52:	a33b      	add	r3, pc, #236	; (adr r3, 8018f40 <__kernel_cos+0x150>)
 8018e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e58:	f7e7 fa36 	bl	80002c8 <__aeabi_dsub>
 8018e5c:	4622      	mov	r2, r4
 8018e5e:	462b      	mov	r3, r5
 8018e60:	f7e7 fbea 	bl	8000638 <__aeabi_dmul>
 8018e64:	a338      	add	r3, pc, #224	; (adr r3, 8018f48 <__kernel_cos+0x158>)
 8018e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e6a:	f7e7 fa2f 	bl	80002cc <__adddf3>
 8018e6e:	4622      	mov	r2, r4
 8018e70:	462b      	mov	r3, r5
 8018e72:	f7e7 fbe1 	bl	8000638 <__aeabi_dmul>
 8018e76:	a336      	add	r3, pc, #216	; (adr r3, 8018f50 <__kernel_cos+0x160>)
 8018e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e7c:	f7e7 fa24 	bl	80002c8 <__aeabi_dsub>
 8018e80:	4622      	mov	r2, r4
 8018e82:	462b      	mov	r3, r5
 8018e84:	f7e7 fbd8 	bl	8000638 <__aeabi_dmul>
 8018e88:	a333      	add	r3, pc, #204	; (adr r3, 8018f58 <__kernel_cos+0x168>)
 8018e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e8e:	f7e7 fa1d 	bl	80002cc <__adddf3>
 8018e92:	4622      	mov	r2, r4
 8018e94:	462b      	mov	r3, r5
 8018e96:	f7e7 fbcf 	bl	8000638 <__aeabi_dmul>
 8018e9a:	4622      	mov	r2, r4
 8018e9c:	462b      	mov	r3, r5
 8018e9e:	f7e7 fbcb 	bl	8000638 <__aeabi_dmul>
 8018ea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ea6:	4604      	mov	r4, r0
 8018ea8:	460d      	mov	r5, r1
 8018eaa:	4630      	mov	r0, r6
 8018eac:	4639      	mov	r1, r7
 8018eae:	f7e7 fbc3 	bl	8000638 <__aeabi_dmul>
 8018eb2:	460b      	mov	r3, r1
 8018eb4:	4602      	mov	r2, r0
 8018eb6:	4629      	mov	r1, r5
 8018eb8:	4620      	mov	r0, r4
 8018eba:	f7e7 fa05 	bl	80002c8 <__aeabi_dsub>
 8018ebe:	4b2b      	ldr	r3, [pc, #172]	; (8018f6c <__kernel_cos+0x17c>)
 8018ec0:	4598      	cmp	r8, r3
 8018ec2:	4606      	mov	r6, r0
 8018ec4:	460f      	mov	r7, r1
 8018ec6:	dc10      	bgt.n	8018eea <__kernel_cos+0xfa>
 8018ec8:	4602      	mov	r2, r0
 8018eca:	460b      	mov	r3, r1
 8018ecc:	4650      	mov	r0, sl
 8018ece:	4659      	mov	r1, fp
 8018ed0:	f7e7 f9fa 	bl	80002c8 <__aeabi_dsub>
 8018ed4:	460b      	mov	r3, r1
 8018ed6:	4926      	ldr	r1, [pc, #152]	; (8018f70 <__kernel_cos+0x180>)
 8018ed8:	4602      	mov	r2, r0
 8018eda:	2000      	movs	r0, #0
 8018edc:	f7e7 f9f4 	bl	80002c8 <__aeabi_dsub>
 8018ee0:	ec41 0b10 	vmov	d0, r0, r1
 8018ee4:	b003      	add	sp, #12
 8018ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eea:	4b22      	ldr	r3, [pc, #136]	; (8018f74 <__kernel_cos+0x184>)
 8018eec:	4920      	ldr	r1, [pc, #128]	; (8018f70 <__kernel_cos+0x180>)
 8018eee:	4598      	cmp	r8, r3
 8018ef0:	bfcc      	ite	gt
 8018ef2:	4d21      	ldrgt	r5, [pc, #132]	; (8018f78 <__kernel_cos+0x188>)
 8018ef4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8018ef8:	2400      	movs	r4, #0
 8018efa:	4622      	mov	r2, r4
 8018efc:	462b      	mov	r3, r5
 8018efe:	2000      	movs	r0, #0
 8018f00:	f7e7 f9e2 	bl	80002c8 <__aeabi_dsub>
 8018f04:	4622      	mov	r2, r4
 8018f06:	4680      	mov	r8, r0
 8018f08:	4689      	mov	r9, r1
 8018f0a:	462b      	mov	r3, r5
 8018f0c:	4650      	mov	r0, sl
 8018f0e:	4659      	mov	r1, fp
 8018f10:	f7e7 f9da 	bl	80002c8 <__aeabi_dsub>
 8018f14:	4632      	mov	r2, r6
 8018f16:	463b      	mov	r3, r7
 8018f18:	f7e7 f9d6 	bl	80002c8 <__aeabi_dsub>
 8018f1c:	4602      	mov	r2, r0
 8018f1e:	460b      	mov	r3, r1
 8018f20:	4640      	mov	r0, r8
 8018f22:	4649      	mov	r1, r9
 8018f24:	e7da      	b.n	8018edc <__kernel_cos+0xec>
 8018f26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8018f60 <__kernel_cos+0x170>
 8018f2a:	e7db      	b.n	8018ee4 <__kernel_cos+0xf4>
 8018f2c:	f3af 8000 	nop.w
 8018f30:	be8838d4 	.word	0xbe8838d4
 8018f34:	bda8fae9 	.word	0xbda8fae9
 8018f38:	bdb4b1c4 	.word	0xbdb4b1c4
 8018f3c:	3e21ee9e 	.word	0x3e21ee9e
 8018f40:	809c52ad 	.word	0x809c52ad
 8018f44:	3e927e4f 	.word	0x3e927e4f
 8018f48:	19cb1590 	.word	0x19cb1590
 8018f4c:	3efa01a0 	.word	0x3efa01a0
 8018f50:	16c15177 	.word	0x16c15177
 8018f54:	3f56c16c 	.word	0x3f56c16c
 8018f58:	5555554c 	.word	0x5555554c
 8018f5c:	3fa55555 	.word	0x3fa55555
 8018f60:	00000000 	.word	0x00000000
 8018f64:	3ff00000 	.word	0x3ff00000
 8018f68:	3fe00000 	.word	0x3fe00000
 8018f6c:	3fd33332 	.word	0x3fd33332
 8018f70:	3ff00000 	.word	0x3ff00000
 8018f74:	3fe90000 	.word	0x3fe90000
 8018f78:	3fd20000 	.word	0x3fd20000
 8018f7c:	00000000 	.word	0x00000000

08018f80 <__kernel_rem_pio2>:
 8018f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f84:	ed2d 8b02 	vpush	{d8}
 8018f88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8018f8c:	f112 0f14 	cmn.w	r2, #20
 8018f90:	9308      	str	r3, [sp, #32]
 8018f92:	9101      	str	r1, [sp, #4]
 8018f94:	4bc6      	ldr	r3, [pc, #792]	; (80192b0 <__kernel_rem_pio2+0x330>)
 8018f96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8018f98:	9009      	str	r0, [sp, #36]	; 0x24
 8018f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018f9e:	9304      	str	r3, [sp, #16]
 8018fa0:	9b08      	ldr	r3, [sp, #32]
 8018fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8018fa6:	bfa8      	it	ge
 8018fa8:	1ed4      	subge	r4, r2, #3
 8018faa:	9306      	str	r3, [sp, #24]
 8018fac:	bfb2      	itee	lt
 8018fae:	2400      	movlt	r4, #0
 8018fb0:	2318      	movge	r3, #24
 8018fb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8018fb6:	f06f 0317 	mvn.w	r3, #23
 8018fba:	fb04 3303 	mla	r3, r4, r3, r3
 8018fbe:	eb03 0a02 	add.w	sl, r3, r2
 8018fc2:	9b04      	ldr	r3, [sp, #16]
 8018fc4:	9a06      	ldr	r2, [sp, #24]
 8018fc6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80192a0 <__kernel_rem_pio2+0x320>
 8018fca:	eb03 0802 	add.w	r8, r3, r2
 8018fce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8018fd0:	1aa7      	subs	r7, r4, r2
 8018fd2:	ae20      	add	r6, sp, #128	; 0x80
 8018fd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018fd8:	2500      	movs	r5, #0
 8018fda:	4545      	cmp	r5, r8
 8018fdc:	dd18      	ble.n	8019010 <__kernel_rem_pio2+0x90>
 8018fde:	9b08      	ldr	r3, [sp, #32]
 8018fe0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8018fe4:	aa20      	add	r2, sp, #128	; 0x80
 8018fe6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80192a0 <__kernel_rem_pio2+0x320>
 8018fea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8018fee:	f1c3 0301 	rsb	r3, r3, #1
 8018ff2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8018ff6:	9307      	str	r3, [sp, #28]
 8018ff8:	9b07      	ldr	r3, [sp, #28]
 8018ffa:	9a04      	ldr	r2, [sp, #16]
 8018ffc:	4443      	add	r3, r8
 8018ffe:	429a      	cmp	r2, r3
 8019000:	db2f      	blt.n	8019062 <__kernel_rem_pio2+0xe2>
 8019002:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019006:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801900a:	462f      	mov	r7, r5
 801900c:	2600      	movs	r6, #0
 801900e:	e01b      	b.n	8019048 <__kernel_rem_pio2+0xc8>
 8019010:	42ef      	cmn	r7, r5
 8019012:	d407      	bmi.n	8019024 <__kernel_rem_pio2+0xa4>
 8019014:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019018:	f7e7 faa4 	bl	8000564 <__aeabi_i2d>
 801901c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019020:	3501      	adds	r5, #1
 8019022:	e7da      	b.n	8018fda <__kernel_rem_pio2+0x5a>
 8019024:	ec51 0b18 	vmov	r0, r1, d8
 8019028:	e7f8      	b.n	801901c <__kernel_rem_pio2+0x9c>
 801902a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801902e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019032:	f7e7 fb01 	bl	8000638 <__aeabi_dmul>
 8019036:	4602      	mov	r2, r0
 8019038:	460b      	mov	r3, r1
 801903a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801903e:	f7e7 f945 	bl	80002cc <__adddf3>
 8019042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019046:	3601      	adds	r6, #1
 8019048:	9b06      	ldr	r3, [sp, #24]
 801904a:	429e      	cmp	r6, r3
 801904c:	f1a7 0708 	sub.w	r7, r7, #8
 8019050:	ddeb      	ble.n	801902a <__kernel_rem_pio2+0xaa>
 8019052:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019056:	3508      	adds	r5, #8
 8019058:	ecab 7b02 	vstmia	fp!, {d7}
 801905c:	f108 0801 	add.w	r8, r8, #1
 8019060:	e7ca      	b.n	8018ff8 <__kernel_rem_pio2+0x78>
 8019062:	9b04      	ldr	r3, [sp, #16]
 8019064:	aa0c      	add	r2, sp, #48	; 0x30
 8019066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801906a:	930b      	str	r3, [sp, #44]	; 0x2c
 801906c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801906e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019072:	9c04      	ldr	r4, [sp, #16]
 8019074:	930a      	str	r3, [sp, #40]	; 0x28
 8019076:	ab98      	add	r3, sp, #608	; 0x260
 8019078:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801907c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8019080:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8019084:	f8cd b008 	str.w	fp, [sp, #8]
 8019088:	4625      	mov	r5, r4
 801908a:	2d00      	cmp	r5, #0
 801908c:	dc78      	bgt.n	8019180 <__kernel_rem_pio2+0x200>
 801908e:	ec47 6b10 	vmov	d0, r6, r7
 8019092:	4650      	mov	r0, sl
 8019094:	f000 ff4c 	bl	8019f30 <scalbn>
 8019098:	ec57 6b10 	vmov	r6, r7, d0
 801909c:	2200      	movs	r2, #0
 801909e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80190a2:	ee10 0a10 	vmov	r0, s0
 80190a6:	4639      	mov	r1, r7
 80190a8:	f7e7 fac6 	bl	8000638 <__aeabi_dmul>
 80190ac:	ec41 0b10 	vmov	d0, r0, r1
 80190b0:	f7fe f8ba 	bl	8017228 <floor>
 80190b4:	4b7f      	ldr	r3, [pc, #508]	; (80192b4 <__kernel_rem_pio2+0x334>)
 80190b6:	ec51 0b10 	vmov	r0, r1, d0
 80190ba:	2200      	movs	r2, #0
 80190bc:	f7e7 fabc 	bl	8000638 <__aeabi_dmul>
 80190c0:	4602      	mov	r2, r0
 80190c2:	460b      	mov	r3, r1
 80190c4:	4630      	mov	r0, r6
 80190c6:	4639      	mov	r1, r7
 80190c8:	f7e7 f8fe 	bl	80002c8 <__aeabi_dsub>
 80190cc:	460f      	mov	r7, r1
 80190ce:	4606      	mov	r6, r0
 80190d0:	f7e7 fd62 	bl	8000b98 <__aeabi_d2iz>
 80190d4:	9007      	str	r0, [sp, #28]
 80190d6:	f7e7 fa45 	bl	8000564 <__aeabi_i2d>
 80190da:	4602      	mov	r2, r0
 80190dc:	460b      	mov	r3, r1
 80190de:	4630      	mov	r0, r6
 80190e0:	4639      	mov	r1, r7
 80190e2:	f7e7 f8f1 	bl	80002c8 <__aeabi_dsub>
 80190e6:	f1ba 0f00 	cmp.w	sl, #0
 80190ea:	4606      	mov	r6, r0
 80190ec:	460f      	mov	r7, r1
 80190ee:	dd70      	ble.n	80191d2 <__kernel_rem_pio2+0x252>
 80190f0:	1e62      	subs	r2, r4, #1
 80190f2:	ab0c      	add	r3, sp, #48	; 0x30
 80190f4:	9d07      	ldr	r5, [sp, #28]
 80190f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80190fa:	f1ca 0118 	rsb	r1, sl, #24
 80190fe:	fa40 f301 	asr.w	r3, r0, r1
 8019102:	441d      	add	r5, r3
 8019104:	408b      	lsls	r3, r1
 8019106:	1ac0      	subs	r0, r0, r3
 8019108:	ab0c      	add	r3, sp, #48	; 0x30
 801910a:	9507      	str	r5, [sp, #28]
 801910c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019110:	f1ca 0317 	rsb	r3, sl, #23
 8019114:	fa40 f303 	asr.w	r3, r0, r3
 8019118:	9302      	str	r3, [sp, #8]
 801911a:	9b02      	ldr	r3, [sp, #8]
 801911c:	2b00      	cmp	r3, #0
 801911e:	dd66      	ble.n	80191ee <__kernel_rem_pio2+0x26e>
 8019120:	9b07      	ldr	r3, [sp, #28]
 8019122:	2200      	movs	r2, #0
 8019124:	3301      	adds	r3, #1
 8019126:	9307      	str	r3, [sp, #28]
 8019128:	4615      	mov	r5, r2
 801912a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801912e:	4294      	cmp	r4, r2
 8019130:	f300 8099 	bgt.w	8019266 <__kernel_rem_pio2+0x2e6>
 8019134:	f1ba 0f00 	cmp.w	sl, #0
 8019138:	dd07      	ble.n	801914a <__kernel_rem_pio2+0x1ca>
 801913a:	f1ba 0f01 	cmp.w	sl, #1
 801913e:	f000 80a5 	beq.w	801928c <__kernel_rem_pio2+0x30c>
 8019142:	f1ba 0f02 	cmp.w	sl, #2
 8019146:	f000 80c1 	beq.w	80192cc <__kernel_rem_pio2+0x34c>
 801914a:	9b02      	ldr	r3, [sp, #8]
 801914c:	2b02      	cmp	r3, #2
 801914e:	d14e      	bne.n	80191ee <__kernel_rem_pio2+0x26e>
 8019150:	4632      	mov	r2, r6
 8019152:	463b      	mov	r3, r7
 8019154:	4958      	ldr	r1, [pc, #352]	; (80192b8 <__kernel_rem_pio2+0x338>)
 8019156:	2000      	movs	r0, #0
 8019158:	f7e7 f8b6 	bl	80002c8 <__aeabi_dsub>
 801915c:	4606      	mov	r6, r0
 801915e:	460f      	mov	r7, r1
 8019160:	2d00      	cmp	r5, #0
 8019162:	d044      	beq.n	80191ee <__kernel_rem_pio2+0x26e>
 8019164:	4650      	mov	r0, sl
 8019166:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80192a8 <__kernel_rem_pio2+0x328>
 801916a:	f000 fee1 	bl	8019f30 <scalbn>
 801916e:	4630      	mov	r0, r6
 8019170:	4639      	mov	r1, r7
 8019172:	ec53 2b10 	vmov	r2, r3, d0
 8019176:	f7e7 f8a7 	bl	80002c8 <__aeabi_dsub>
 801917a:	4606      	mov	r6, r0
 801917c:	460f      	mov	r7, r1
 801917e:	e036      	b.n	80191ee <__kernel_rem_pio2+0x26e>
 8019180:	4b4e      	ldr	r3, [pc, #312]	; (80192bc <__kernel_rem_pio2+0x33c>)
 8019182:	2200      	movs	r2, #0
 8019184:	4630      	mov	r0, r6
 8019186:	4639      	mov	r1, r7
 8019188:	f7e7 fa56 	bl	8000638 <__aeabi_dmul>
 801918c:	f7e7 fd04 	bl	8000b98 <__aeabi_d2iz>
 8019190:	f7e7 f9e8 	bl	8000564 <__aeabi_i2d>
 8019194:	4b4a      	ldr	r3, [pc, #296]	; (80192c0 <__kernel_rem_pio2+0x340>)
 8019196:	2200      	movs	r2, #0
 8019198:	4680      	mov	r8, r0
 801919a:	4689      	mov	r9, r1
 801919c:	f7e7 fa4c 	bl	8000638 <__aeabi_dmul>
 80191a0:	4602      	mov	r2, r0
 80191a2:	460b      	mov	r3, r1
 80191a4:	4630      	mov	r0, r6
 80191a6:	4639      	mov	r1, r7
 80191a8:	f7e7 f88e 	bl	80002c8 <__aeabi_dsub>
 80191ac:	f7e7 fcf4 	bl	8000b98 <__aeabi_d2iz>
 80191b0:	9b02      	ldr	r3, [sp, #8]
 80191b2:	f843 0b04 	str.w	r0, [r3], #4
 80191b6:	3d01      	subs	r5, #1
 80191b8:	9302      	str	r3, [sp, #8]
 80191ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80191bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80191c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191c4:	4640      	mov	r0, r8
 80191c6:	4649      	mov	r1, r9
 80191c8:	f7e7 f880 	bl	80002cc <__adddf3>
 80191cc:	4606      	mov	r6, r0
 80191ce:	460f      	mov	r7, r1
 80191d0:	e75b      	b.n	801908a <__kernel_rem_pio2+0x10a>
 80191d2:	d105      	bne.n	80191e0 <__kernel_rem_pio2+0x260>
 80191d4:	1e63      	subs	r3, r4, #1
 80191d6:	aa0c      	add	r2, sp, #48	; 0x30
 80191d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80191dc:	15c3      	asrs	r3, r0, #23
 80191de:	e79b      	b.n	8019118 <__kernel_rem_pio2+0x198>
 80191e0:	4b38      	ldr	r3, [pc, #224]	; (80192c4 <__kernel_rem_pio2+0x344>)
 80191e2:	2200      	movs	r2, #0
 80191e4:	f7e7 fcae 	bl	8000b44 <__aeabi_dcmpge>
 80191e8:	2800      	cmp	r0, #0
 80191ea:	d139      	bne.n	8019260 <__kernel_rem_pio2+0x2e0>
 80191ec:	9002      	str	r0, [sp, #8]
 80191ee:	2200      	movs	r2, #0
 80191f0:	2300      	movs	r3, #0
 80191f2:	4630      	mov	r0, r6
 80191f4:	4639      	mov	r1, r7
 80191f6:	f7e7 fc87 	bl	8000b08 <__aeabi_dcmpeq>
 80191fa:	2800      	cmp	r0, #0
 80191fc:	f000 80b4 	beq.w	8019368 <__kernel_rem_pio2+0x3e8>
 8019200:	f104 3bff 	add.w	fp, r4, #4294967295
 8019204:	465b      	mov	r3, fp
 8019206:	2200      	movs	r2, #0
 8019208:	9904      	ldr	r1, [sp, #16]
 801920a:	428b      	cmp	r3, r1
 801920c:	da65      	bge.n	80192da <__kernel_rem_pio2+0x35a>
 801920e:	2a00      	cmp	r2, #0
 8019210:	d07b      	beq.n	801930a <__kernel_rem_pio2+0x38a>
 8019212:	ab0c      	add	r3, sp, #48	; 0x30
 8019214:	f1aa 0a18 	sub.w	sl, sl, #24
 8019218:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801921c:	2b00      	cmp	r3, #0
 801921e:	f000 80a0 	beq.w	8019362 <__kernel_rem_pio2+0x3e2>
 8019222:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80192a8 <__kernel_rem_pio2+0x328>
 8019226:	4650      	mov	r0, sl
 8019228:	f000 fe82 	bl	8019f30 <scalbn>
 801922c:	4f23      	ldr	r7, [pc, #140]	; (80192bc <__kernel_rem_pio2+0x33c>)
 801922e:	ec55 4b10 	vmov	r4, r5, d0
 8019232:	46d8      	mov	r8, fp
 8019234:	2600      	movs	r6, #0
 8019236:	f1b8 0f00 	cmp.w	r8, #0
 801923a:	f280 80cf 	bge.w	80193dc <__kernel_rem_pio2+0x45c>
 801923e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80192a0 <__kernel_rem_pio2+0x320>
 8019242:	465f      	mov	r7, fp
 8019244:	f04f 0800 	mov.w	r8, #0
 8019248:	2f00      	cmp	r7, #0
 801924a:	f2c0 80fd 	blt.w	8019448 <__kernel_rem_pio2+0x4c8>
 801924e:	ab70      	add	r3, sp, #448	; 0x1c0
 8019250:	f8df a074 	ldr.w	sl, [pc, #116]	; 80192c8 <__kernel_rem_pio2+0x348>
 8019254:	ec55 4b18 	vmov	r4, r5, d8
 8019258:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801925c:	2600      	movs	r6, #0
 801925e:	e0e5      	b.n	801942c <__kernel_rem_pio2+0x4ac>
 8019260:	2302      	movs	r3, #2
 8019262:	9302      	str	r3, [sp, #8]
 8019264:	e75c      	b.n	8019120 <__kernel_rem_pio2+0x1a0>
 8019266:	f8db 3000 	ldr.w	r3, [fp]
 801926a:	b955      	cbnz	r5, 8019282 <__kernel_rem_pio2+0x302>
 801926c:	b123      	cbz	r3, 8019278 <__kernel_rem_pio2+0x2f8>
 801926e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8019272:	f8cb 3000 	str.w	r3, [fp]
 8019276:	2301      	movs	r3, #1
 8019278:	3201      	adds	r2, #1
 801927a:	f10b 0b04 	add.w	fp, fp, #4
 801927e:	461d      	mov	r5, r3
 8019280:	e755      	b.n	801912e <__kernel_rem_pio2+0x1ae>
 8019282:	1acb      	subs	r3, r1, r3
 8019284:	f8cb 3000 	str.w	r3, [fp]
 8019288:	462b      	mov	r3, r5
 801928a:	e7f5      	b.n	8019278 <__kernel_rem_pio2+0x2f8>
 801928c:	1e62      	subs	r2, r4, #1
 801928e:	ab0c      	add	r3, sp, #48	; 0x30
 8019290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019294:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019298:	a90c      	add	r1, sp, #48	; 0x30
 801929a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801929e:	e754      	b.n	801914a <__kernel_rem_pio2+0x1ca>
	...
 80192ac:	3ff00000 	.word	0x3ff00000
 80192b0:	0803d0c8 	.word	0x0803d0c8
 80192b4:	40200000 	.word	0x40200000
 80192b8:	3ff00000 	.word	0x3ff00000
 80192bc:	3e700000 	.word	0x3e700000
 80192c0:	41700000 	.word	0x41700000
 80192c4:	3fe00000 	.word	0x3fe00000
 80192c8:	0803d088 	.word	0x0803d088
 80192cc:	1e62      	subs	r2, r4, #1
 80192ce:	ab0c      	add	r3, sp, #48	; 0x30
 80192d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80192d8:	e7de      	b.n	8019298 <__kernel_rem_pio2+0x318>
 80192da:	a90c      	add	r1, sp, #48	; 0x30
 80192dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80192e0:	3b01      	subs	r3, #1
 80192e2:	430a      	orrs	r2, r1
 80192e4:	e790      	b.n	8019208 <__kernel_rem_pio2+0x288>
 80192e6:	3301      	adds	r3, #1
 80192e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80192ec:	2900      	cmp	r1, #0
 80192ee:	d0fa      	beq.n	80192e6 <__kernel_rem_pio2+0x366>
 80192f0:	9a08      	ldr	r2, [sp, #32]
 80192f2:	18e3      	adds	r3, r4, r3
 80192f4:	18a6      	adds	r6, r4, r2
 80192f6:	aa20      	add	r2, sp, #128	; 0x80
 80192f8:	1c65      	adds	r5, r4, #1
 80192fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80192fe:	9302      	str	r3, [sp, #8]
 8019300:	9b02      	ldr	r3, [sp, #8]
 8019302:	42ab      	cmp	r3, r5
 8019304:	da04      	bge.n	8019310 <__kernel_rem_pio2+0x390>
 8019306:	461c      	mov	r4, r3
 8019308:	e6b5      	b.n	8019076 <__kernel_rem_pio2+0xf6>
 801930a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801930c:	2301      	movs	r3, #1
 801930e:	e7eb      	b.n	80192e8 <__kernel_rem_pio2+0x368>
 8019310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019316:	f7e7 f925 	bl	8000564 <__aeabi_i2d>
 801931a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801931e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019320:	46b3      	mov	fp, r6
 8019322:	461c      	mov	r4, r3
 8019324:	2700      	movs	r7, #0
 8019326:	f04f 0800 	mov.w	r8, #0
 801932a:	f04f 0900 	mov.w	r9, #0
 801932e:	9b06      	ldr	r3, [sp, #24]
 8019330:	429f      	cmp	r7, r3
 8019332:	dd06      	ble.n	8019342 <__kernel_rem_pio2+0x3c2>
 8019334:	ab70      	add	r3, sp, #448	; 0x1c0
 8019336:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801933a:	e9c3 8900 	strd	r8, r9, [r3]
 801933e:	3501      	adds	r5, #1
 8019340:	e7de      	b.n	8019300 <__kernel_rem_pio2+0x380>
 8019342:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8019346:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801934a:	f7e7 f975 	bl	8000638 <__aeabi_dmul>
 801934e:	4602      	mov	r2, r0
 8019350:	460b      	mov	r3, r1
 8019352:	4640      	mov	r0, r8
 8019354:	4649      	mov	r1, r9
 8019356:	f7e6 ffb9 	bl	80002cc <__adddf3>
 801935a:	3701      	adds	r7, #1
 801935c:	4680      	mov	r8, r0
 801935e:	4689      	mov	r9, r1
 8019360:	e7e5      	b.n	801932e <__kernel_rem_pio2+0x3ae>
 8019362:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019366:	e754      	b.n	8019212 <__kernel_rem_pio2+0x292>
 8019368:	ec47 6b10 	vmov	d0, r6, r7
 801936c:	f1ca 0000 	rsb	r0, sl, #0
 8019370:	f000 fdde 	bl	8019f30 <scalbn>
 8019374:	ec57 6b10 	vmov	r6, r7, d0
 8019378:	4b9f      	ldr	r3, [pc, #636]	; (80195f8 <__kernel_rem_pio2+0x678>)
 801937a:	ee10 0a10 	vmov	r0, s0
 801937e:	2200      	movs	r2, #0
 8019380:	4639      	mov	r1, r7
 8019382:	f7e7 fbdf 	bl	8000b44 <__aeabi_dcmpge>
 8019386:	b300      	cbz	r0, 80193ca <__kernel_rem_pio2+0x44a>
 8019388:	4b9c      	ldr	r3, [pc, #624]	; (80195fc <__kernel_rem_pio2+0x67c>)
 801938a:	2200      	movs	r2, #0
 801938c:	4630      	mov	r0, r6
 801938e:	4639      	mov	r1, r7
 8019390:	f7e7 f952 	bl	8000638 <__aeabi_dmul>
 8019394:	f7e7 fc00 	bl	8000b98 <__aeabi_d2iz>
 8019398:	4605      	mov	r5, r0
 801939a:	f7e7 f8e3 	bl	8000564 <__aeabi_i2d>
 801939e:	4b96      	ldr	r3, [pc, #600]	; (80195f8 <__kernel_rem_pio2+0x678>)
 80193a0:	2200      	movs	r2, #0
 80193a2:	f7e7 f949 	bl	8000638 <__aeabi_dmul>
 80193a6:	460b      	mov	r3, r1
 80193a8:	4602      	mov	r2, r0
 80193aa:	4639      	mov	r1, r7
 80193ac:	4630      	mov	r0, r6
 80193ae:	f7e6 ff8b 	bl	80002c8 <__aeabi_dsub>
 80193b2:	f7e7 fbf1 	bl	8000b98 <__aeabi_d2iz>
 80193b6:	f104 0b01 	add.w	fp, r4, #1
 80193ba:	ab0c      	add	r3, sp, #48	; 0x30
 80193bc:	f10a 0a18 	add.w	sl, sl, #24
 80193c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80193c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80193c8:	e72b      	b.n	8019222 <__kernel_rem_pio2+0x2a2>
 80193ca:	4630      	mov	r0, r6
 80193cc:	4639      	mov	r1, r7
 80193ce:	f7e7 fbe3 	bl	8000b98 <__aeabi_d2iz>
 80193d2:	ab0c      	add	r3, sp, #48	; 0x30
 80193d4:	46a3      	mov	fp, r4
 80193d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80193da:	e722      	b.n	8019222 <__kernel_rem_pio2+0x2a2>
 80193dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80193de:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80193e2:	ab0c      	add	r3, sp, #48	; 0x30
 80193e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80193e8:	f7e7 f8bc 	bl	8000564 <__aeabi_i2d>
 80193ec:	4622      	mov	r2, r4
 80193ee:	462b      	mov	r3, r5
 80193f0:	f7e7 f922 	bl	8000638 <__aeabi_dmul>
 80193f4:	4632      	mov	r2, r6
 80193f6:	e9c9 0100 	strd	r0, r1, [r9]
 80193fa:	463b      	mov	r3, r7
 80193fc:	4620      	mov	r0, r4
 80193fe:	4629      	mov	r1, r5
 8019400:	f7e7 f91a 	bl	8000638 <__aeabi_dmul>
 8019404:	f108 38ff 	add.w	r8, r8, #4294967295
 8019408:	4604      	mov	r4, r0
 801940a:	460d      	mov	r5, r1
 801940c:	e713      	b.n	8019236 <__kernel_rem_pio2+0x2b6>
 801940e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8019412:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8019416:	f7e7 f90f 	bl	8000638 <__aeabi_dmul>
 801941a:	4602      	mov	r2, r0
 801941c:	460b      	mov	r3, r1
 801941e:	4620      	mov	r0, r4
 8019420:	4629      	mov	r1, r5
 8019422:	f7e6 ff53 	bl	80002cc <__adddf3>
 8019426:	3601      	adds	r6, #1
 8019428:	4604      	mov	r4, r0
 801942a:	460d      	mov	r5, r1
 801942c:	9b04      	ldr	r3, [sp, #16]
 801942e:	429e      	cmp	r6, r3
 8019430:	dc01      	bgt.n	8019436 <__kernel_rem_pio2+0x4b6>
 8019432:	45b0      	cmp	r8, r6
 8019434:	daeb      	bge.n	801940e <__kernel_rem_pio2+0x48e>
 8019436:	ab48      	add	r3, sp, #288	; 0x120
 8019438:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801943c:	e9c3 4500 	strd	r4, r5, [r3]
 8019440:	3f01      	subs	r7, #1
 8019442:	f108 0801 	add.w	r8, r8, #1
 8019446:	e6ff      	b.n	8019248 <__kernel_rem_pio2+0x2c8>
 8019448:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801944a:	2b02      	cmp	r3, #2
 801944c:	dc0b      	bgt.n	8019466 <__kernel_rem_pio2+0x4e6>
 801944e:	2b00      	cmp	r3, #0
 8019450:	dc6e      	bgt.n	8019530 <__kernel_rem_pio2+0x5b0>
 8019452:	d045      	beq.n	80194e0 <__kernel_rem_pio2+0x560>
 8019454:	9b07      	ldr	r3, [sp, #28]
 8019456:	f003 0007 	and.w	r0, r3, #7
 801945a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801945e:	ecbd 8b02 	vpop	{d8}
 8019462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019466:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8019468:	2b03      	cmp	r3, #3
 801946a:	d1f3      	bne.n	8019454 <__kernel_rem_pio2+0x4d4>
 801946c:	ab48      	add	r3, sp, #288	; 0x120
 801946e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8019472:	46d0      	mov	r8, sl
 8019474:	46d9      	mov	r9, fp
 8019476:	f1b9 0f00 	cmp.w	r9, #0
 801947a:	f1a8 0808 	sub.w	r8, r8, #8
 801947e:	dc64      	bgt.n	801954a <__kernel_rem_pio2+0x5ca>
 8019480:	465c      	mov	r4, fp
 8019482:	2c01      	cmp	r4, #1
 8019484:	f1aa 0a08 	sub.w	sl, sl, #8
 8019488:	dc7e      	bgt.n	8019588 <__kernel_rem_pio2+0x608>
 801948a:	2000      	movs	r0, #0
 801948c:	2100      	movs	r1, #0
 801948e:	f1bb 0f01 	cmp.w	fp, #1
 8019492:	f300 8097 	bgt.w	80195c4 <__kernel_rem_pio2+0x644>
 8019496:	9b02      	ldr	r3, [sp, #8]
 8019498:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801949c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	f040 8099 	bne.w	80195d8 <__kernel_rem_pio2+0x658>
 80194a6:	9b01      	ldr	r3, [sp, #4]
 80194a8:	e9c3 5600 	strd	r5, r6, [r3]
 80194ac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80194b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80194b4:	e7ce      	b.n	8019454 <__kernel_rem_pio2+0x4d4>
 80194b6:	ab48      	add	r3, sp, #288	; 0x120
 80194b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80194bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c0:	f7e6 ff04 	bl	80002cc <__adddf3>
 80194c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80194c8:	f1bb 0f00 	cmp.w	fp, #0
 80194cc:	daf3      	bge.n	80194b6 <__kernel_rem_pio2+0x536>
 80194ce:	9b02      	ldr	r3, [sp, #8]
 80194d0:	b113      	cbz	r3, 80194d8 <__kernel_rem_pio2+0x558>
 80194d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80194d6:	4619      	mov	r1, r3
 80194d8:	9b01      	ldr	r3, [sp, #4]
 80194da:	e9c3 0100 	strd	r0, r1, [r3]
 80194de:	e7b9      	b.n	8019454 <__kernel_rem_pio2+0x4d4>
 80194e0:	2000      	movs	r0, #0
 80194e2:	2100      	movs	r1, #0
 80194e4:	e7f0      	b.n	80194c8 <__kernel_rem_pio2+0x548>
 80194e6:	ab48      	add	r3, sp, #288	; 0x120
 80194e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80194ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194f0:	f7e6 feec 	bl	80002cc <__adddf3>
 80194f4:	3c01      	subs	r4, #1
 80194f6:	2c00      	cmp	r4, #0
 80194f8:	daf5      	bge.n	80194e6 <__kernel_rem_pio2+0x566>
 80194fa:	9b02      	ldr	r3, [sp, #8]
 80194fc:	b1e3      	cbz	r3, 8019538 <__kernel_rem_pio2+0x5b8>
 80194fe:	4602      	mov	r2, r0
 8019500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019504:	9c01      	ldr	r4, [sp, #4]
 8019506:	e9c4 2300 	strd	r2, r3, [r4]
 801950a:	4602      	mov	r2, r0
 801950c:	460b      	mov	r3, r1
 801950e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8019512:	f7e6 fed9 	bl	80002c8 <__aeabi_dsub>
 8019516:	ad4a      	add	r5, sp, #296	; 0x128
 8019518:	2401      	movs	r4, #1
 801951a:	45a3      	cmp	fp, r4
 801951c:	da0f      	bge.n	801953e <__kernel_rem_pio2+0x5be>
 801951e:	9b02      	ldr	r3, [sp, #8]
 8019520:	b113      	cbz	r3, 8019528 <__kernel_rem_pio2+0x5a8>
 8019522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019526:	4619      	mov	r1, r3
 8019528:	9b01      	ldr	r3, [sp, #4]
 801952a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801952e:	e791      	b.n	8019454 <__kernel_rem_pio2+0x4d4>
 8019530:	465c      	mov	r4, fp
 8019532:	2000      	movs	r0, #0
 8019534:	2100      	movs	r1, #0
 8019536:	e7de      	b.n	80194f6 <__kernel_rem_pio2+0x576>
 8019538:	4602      	mov	r2, r0
 801953a:	460b      	mov	r3, r1
 801953c:	e7e2      	b.n	8019504 <__kernel_rem_pio2+0x584>
 801953e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8019542:	f7e6 fec3 	bl	80002cc <__adddf3>
 8019546:	3401      	adds	r4, #1
 8019548:	e7e7      	b.n	801951a <__kernel_rem_pio2+0x59a>
 801954a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801954e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8019552:	4620      	mov	r0, r4
 8019554:	4632      	mov	r2, r6
 8019556:	463b      	mov	r3, r7
 8019558:	4629      	mov	r1, r5
 801955a:	f7e6 feb7 	bl	80002cc <__adddf3>
 801955e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019562:	4602      	mov	r2, r0
 8019564:	460b      	mov	r3, r1
 8019566:	4620      	mov	r0, r4
 8019568:	4629      	mov	r1, r5
 801956a:	f7e6 fead 	bl	80002c8 <__aeabi_dsub>
 801956e:	4632      	mov	r2, r6
 8019570:	463b      	mov	r3, r7
 8019572:	f7e6 feab 	bl	80002cc <__adddf3>
 8019576:	ed9d 7b04 	vldr	d7, [sp, #16]
 801957a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801957e:	ed88 7b00 	vstr	d7, [r8]
 8019582:	f109 39ff 	add.w	r9, r9, #4294967295
 8019586:	e776      	b.n	8019476 <__kernel_rem_pio2+0x4f6>
 8019588:	e9da 8900 	ldrd	r8, r9, [sl]
 801958c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8019590:	4640      	mov	r0, r8
 8019592:	4632      	mov	r2, r6
 8019594:	463b      	mov	r3, r7
 8019596:	4649      	mov	r1, r9
 8019598:	f7e6 fe98 	bl	80002cc <__adddf3>
 801959c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80195a0:	4602      	mov	r2, r0
 80195a2:	460b      	mov	r3, r1
 80195a4:	4640      	mov	r0, r8
 80195a6:	4649      	mov	r1, r9
 80195a8:	f7e6 fe8e 	bl	80002c8 <__aeabi_dsub>
 80195ac:	4632      	mov	r2, r6
 80195ae:	463b      	mov	r3, r7
 80195b0:	f7e6 fe8c 	bl	80002cc <__adddf3>
 80195b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80195b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80195bc:	ed8a 7b00 	vstr	d7, [sl]
 80195c0:	3c01      	subs	r4, #1
 80195c2:	e75e      	b.n	8019482 <__kernel_rem_pio2+0x502>
 80195c4:	ab48      	add	r3, sp, #288	; 0x120
 80195c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80195ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ce:	f7e6 fe7d 	bl	80002cc <__adddf3>
 80195d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80195d6:	e75a      	b.n	801948e <__kernel_rem_pio2+0x50e>
 80195d8:	9b01      	ldr	r3, [sp, #4]
 80195da:	9a01      	ldr	r2, [sp, #4]
 80195dc:	601d      	str	r5, [r3, #0]
 80195de:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80195e2:	605c      	str	r4, [r3, #4]
 80195e4:	609f      	str	r7, [r3, #8]
 80195e6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80195ea:	60d3      	str	r3, [r2, #12]
 80195ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80195f0:	6110      	str	r0, [r2, #16]
 80195f2:	6153      	str	r3, [r2, #20]
 80195f4:	e72e      	b.n	8019454 <__kernel_rem_pio2+0x4d4>
 80195f6:	bf00      	nop
 80195f8:	41700000 	.word	0x41700000
 80195fc:	3e700000 	.word	0x3e700000

08019600 <__kernel_sin>:
 8019600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019604:	ed2d 8b04 	vpush	{d8-d9}
 8019608:	eeb0 8a41 	vmov.f32	s16, s2
 801960c:	eef0 8a61 	vmov.f32	s17, s3
 8019610:	ec55 4b10 	vmov	r4, r5, d0
 8019614:	b083      	sub	sp, #12
 8019616:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801961a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801961e:	9001      	str	r0, [sp, #4]
 8019620:	da06      	bge.n	8019630 <__kernel_sin+0x30>
 8019622:	ee10 0a10 	vmov	r0, s0
 8019626:	4629      	mov	r1, r5
 8019628:	f7e7 fab6 	bl	8000b98 <__aeabi_d2iz>
 801962c:	2800      	cmp	r0, #0
 801962e:	d051      	beq.n	80196d4 <__kernel_sin+0xd4>
 8019630:	4622      	mov	r2, r4
 8019632:	462b      	mov	r3, r5
 8019634:	4620      	mov	r0, r4
 8019636:	4629      	mov	r1, r5
 8019638:	f7e6 fffe 	bl	8000638 <__aeabi_dmul>
 801963c:	4682      	mov	sl, r0
 801963e:	468b      	mov	fp, r1
 8019640:	4602      	mov	r2, r0
 8019642:	460b      	mov	r3, r1
 8019644:	4620      	mov	r0, r4
 8019646:	4629      	mov	r1, r5
 8019648:	f7e6 fff6 	bl	8000638 <__aeabi_dmul>
 801964c:	a341      	add	r3, pc, #260	; (adr r3, 8019754 <__kernel_sin+0x154>)
 801964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019652:	4680      	mov	r8, r0
 8019654:	4689      	mov	r9, r1
 8019656:	4650      	mov	r0, sl
 8019658:	4659      	mov	r1, fp
 801965a:	f7e6 ffed 	bl	8000638 <__aeabi_dmul>
 801965e:	a33f      	add	r3, pc, #252	; (adr r3, 801975c <__kernel_sin+0x15c>)
 8019660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019664:	f7e6 fe30 	bl	80002c8 <__aeabi_dsub>
 8019668:	4652      	mov	r2, sl
 801966a:	465b      	mov	r3, fp
 801966c:	f7e6 ffe4 	bl	8000638 <__aeabi_dmul>
 8019670:	a33c      	add	r3, pc, #240	; (adr r3, 8019764 <__kernel_sin+0x164>)
 8019672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019676:	f7e6 fe29 	bl	80002cc <__adddf3>
 801967a:	4652      	mov	r2, sl
 801967c:	465b      	mov	r3, fp
 801967e:	f7e6 ffdb 	bl	8000638 <__aeabi_dmul>
 8019682:	a33a      	add	r3, pc, #232	; (adr r3, 801976c <__kernel_sin+0x16c>)
 8019684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019688:	f7e6 fe1e 	bl	80002c8 <__aeabi_dsub>
 801968c:	4652      	mov	r2, sl
 801968e:	465b      	mov	r3, fp
 8019690:	f7e6 ffd2 	bl	8000638 <__aeabi_dmul>
 8019694:	a337      	add	r3, pc, #220	; (adr r3, 8019774 <__kernel_sin+0x174>)
 8019696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801969a:	f7e6 fe17 	bl	80002cc <__adddf3>
 801969e:	9b01      	ldr	r3, [sp, #4]
 80196a0:	4606      	mov	r6, r0
 80196a2:	460f      	mov	r7, r1
 80196a4:	b9eb      	cbnz	r3, 80196e2 <__kernel_sin+0xe2>
 80196a6:	4602      	mov	r2, r0
 80196a8:	460b      	mov	r3, r1
 80196aa:	4650      	mov	r0, sl
 80196ac:	4659      	mov	r1, fp
 80196ae:	f7e6 ffc3 	bl	8000638 <__aeabi_dmul>
 80196b2:	a325      	add	r3, pc, #148	; (adr r3, 8019748 <__kernel_sin+0x148>)
 80196b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196b8:	f7e6 fe06 	bl	80002c8 <__aeabi_dsub>
 80196bc:	4642      	mov	r2, r8
 80196be:	464b      	mov	r3, r9
 80196c0:	f7e6 ffba 	bl	8000638 <__aeabi_dmul>
 80196c4:	4602      	mov	r2, r0
 80196c6:	460b      	mov	r3, r1
 80196c8:	4620      	mov	r0, r4
 80196ca:	4629      	mov	r1, r5
 80196cc:	f7e6 fdfe 	bl	80002cc <__adddf3>
 80196d0:	4604      	mov	r4, r0
 80196d2:	460d      	mov	r5, r1
 80196d4:	ec45 4b10 	vmov	d0, r4, r5
 80196d8:	b003      	add	sp, #12
 80196da:	ecbd 8b04 	vpop	{d8-d9}
 80196de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196e2:	4b1b      	ldr	r3, [pc, #108]	; (8019750 <__kernel_sin+0x150>)
 80196e4:	ec51 0b18 	vmov	r0, r1, d8
 80196e8:	2200      	movs	r2, #0
 80196ea:	f7e6 ffa5 	bl	8000638 <__aeabi_dmul>
 80196ee:	4632      	mov	r2, r6
 80196f0:	ec41 0b19 	vmov	d9, r0, r1
 80196f4:	463b      	mov	r3, r7
 80196f6:	4640      	mov	r0, r8
 80196f8:	4649      	mov	r1, r9
 80196fa:	f7e6 ff9d 	bl	8000638 <__aeabi_dmul>
 80196fe:	4602      	mov	r2, r0
 8019700:	460b      	mov	r3, r1
 8019702:	ec51 0b19 	vmov	r0, r1, d9
 8019706:	f7e6 fddf 	bl	80002c8 <__aeabi_dsub>
 801970a:	4652      	mov	r2, sl
 801970c:	465b      	mov	r3, fp
 801970e:	f7e6 ff93 	bl	8000638 <__aeabi_dmul>
 8019712:	ec53 2b18 	vmov	r2, r3, d8
 8019716:	f7e6 fdd7 	bl	80002c8 <__aeabi_dsub>
 801971a:	a30b      	add	r3, pc, #44	; (adr r3, 8019748 <__kernel_sin+0x148>)
 801971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019720:	4606      	mov	r6, r0
 8019722:	460f      	mov	r7, r1
 8019724:	4640      	mov	r0, r8
 8019726:	4649      	mov	r1, r9
 8019728:	f7e6 ff86 	bl	8000638 <__aeabi_dmul>
 801972c:	4602      	mov	r2, r0
 801972e:	460b      	mov	r3, r1
 8019730:	4630      	mov	r0, r6
 8019732:	4639      	mov	r1, r7
 8019734:	f7e6 fdca 	bl	80002cc <__adddf3>
 8019738:	4602      	mov	r2, r0
 801973a:	460b      	mov	r3, r1
 801973c:	4620      	mov	r0, r4
 801973e:	4629      	mov	r1, r5
 8019740:	f7e6 fdc2 	bl	80002c8 <__aeabi_dsub>
 8019744:	e7c4      	b.n	80196d0 <__kernel_sin+0xd0>
 8019746:	bf00      	nop
 8019748:	55555549 	.word	0x55555549
 801974c:	3fc55555 	.word	0x3fc55555
 8019750:	3fe00000 	.word	0x3fe00000
 8019754:	5acfd57c 	.word	0x5acfd57c
 8019758:	3de5d93a 	.word	0x3de5d93a
 801975c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019760:	3e5ae5e6 	.word	0x3e5ae5e6
 8019764:	57b1fe7d 	.word	0x57b1fe7d
 8019768:	3ec71de3 	.word	0x3ec71de3
 801976c:	19c161d5 	.word	0x19c161d5
 8019770:	3f2a01a0 	.word	0x3f2a01a0
 8019774:	1110f8a6 	.word	0x1110f8a6
 8019778:	3f811111 	.word	0x3f811111

0801977c <__kernel_cosf>:
 801977c:	ee10 3a10 	vmov	r3, s0
 8019780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019784:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019788:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801978c:	da05      	bge.n	801979a <__kernel_cosf+0x1e>
 801978e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019792:	ee17 2a90 	vmov	r2, s15
 8019796:	2a00      	cmp	r2, #0
 8019798:	d03d      	beq.n	8019816 <__kernel_cosf+0x9a>
 801979a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801979e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801981c <__kernel_cosf+0xa0>
 80197a2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8019820 <__kernel_cosf+0xa4>
 80197a6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8019824 <__kernel_cosf+0xa8>
 80197aa:	4a1f      	ldr	r2, [pc, #124]	; (8019828 <__kernel_cosf+0xac>)
 80197ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80197b0:	4293      	cmp	r3, r2
 80197b2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801982c <__kernel_cosf+0xb0>
 80197b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80197ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8019830 <__kernel_cosf+0xb4>
 80197be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80197c2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8019834 <__kernel_cosf+0xb8>
 80197c6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80197ca:	eeb0 7a66 	vmov.f32	s14, s13
 80197ce:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80197d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80197d6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80197da:	ee67 6a25 	vmul.f32	s13, s14, s11
 80197de:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80197e2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80197e6:	dc04      	bgt.n	80197f2 <__kernel_cosf+0x76>
 80197e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80197ec:	ee36 0a47 	vsub.f32	s0, s12, s14
 80197f0:	4770      	bx	lr
 80197f2:	4a11      	ldr	r2, [pc, #68]	; (8019838 <__kernel_cosf+0xbc>)
 80197f4:	4293      	cmp	r3, r2
 80197f6:	bfda      	itte	le
 80197f8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80197fc:	ee06 3a90 	vmovle	s13, r3
 8019800:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8019804:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019808:	ee36 0a66 	vsub.f32	s0, s12, s13
 801980c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019810:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019814:	4770      	bx	lr
 8019816:	eeb0 0a46 	vmov.f32	s0, s12
 801981a:	4770      	bx	lr
 801981c:	ad47d74e 	.word	0xad47d74e
 8019820:	310f74f6 	.word	0x310f74f6
 8019824:	3d2aaaab 	.word	0x3d2aaaab
 8019828:	3e999999 	.word	0x3e999999
 801982c:	b493f27c 	.word	0xb493f27c
 8019830:	37d00d01 	.word	0x37d00d01
 8019834:	bab60b61 	.word	0xbab60b61
 8019838:	3f480000 	.word	0x3f480000

0801983c <__kernel_rem_pio2f>:
 801983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019840:	ed2d 8b04 	vpush	{d8-d9}
 8019844:	b0d7      	sub	sp, #348	; 0x15c
 8019846:	4616      	mov	r6, r2
 8019848:	4698      	mov	r8, r3
 801984a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801984c:	4bbb      	ldr	r3, [pc, #748]	; (8019b3c <__kernel_rem_pio2f+0x300>)
 801984e:	9001      	str	r0, [sp, #4]
 8019850:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8019854:	1d33      	adds	r3, r6, #4
 8019856:	460d      	mov	r5, r1
 8019858:	f108 39ff 	add.w	r9, r8, #4294967295
 801985c:	db29      	blt.n	80198b2 <__kernel_rem_pio2f+0x76>
 801985e:	1ef1      	subs	r1, r6, #3
 8019860:	bf48      	it	mi
 8019862:	1d31      	addmi	r1, r6, #4
 8019864:	10c9      	asrs	r1, r1, #3
 8019866:	1c4c      	adds	r4, r1, #1
 8019868:	00e3      	lsls	r3, r4, #3
 801986a:	9302      	str	r3, [sp, #8]
 801986c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801986e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8019b4c <__kernel_rem_pio2f+0x310>
 8019872:	eba1 0009 	sub.w	r0, r1, r9
 8019876:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801987a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801987e:	eb07 0c09 	add.w	ip, r7, r9
 8019882:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8019886:	2300      	movs	r3, #0
 8019888:	4563      	cmp	r3, ip
 801988a:	dd14      	ble.n	80198b6 <__kernel_rem_pio2f+0x7a>
 801988c:	ab1a      	add	r3, sp, #104	; 0x68
 801988e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8019892:	46cc      	mov	ip, r9
 8019894:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8019898:	f1c8 0b01 	rsb	fp, r8, #1
 801989c:	eb0b 020c 	add.w	r2, fp, ip
 80198a0:	4297      	cmp	r7, r2
 80198a2:	db27      	blt.n	80198f4 <__kernel_rem_pio2f+0xb8>
 80198a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80198a8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8019b4c <__kernel_rem_pio2f+0x310>
 80198ac:	4618      	mov	r0, r3
 80198ae:	2200      	movs	r2, #0
 80198b0:	e016      	b.n	80198e0 <__kernel_rem_pio2f+0xa4>
 80198b2:	2100      	movs	r1, #0
 80198b4:	e7d7      	b.n	8019866 <__kernel_rem_pio2f+0x2a>
 80198b6:	42d8      	cmn	r0, r3
 80198b8:	bf5d      	ittte	pl
 80198ba:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80198be:	ee07 2a90 	vmovpl	s15, r2
 80198c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80198c6:	eef0 7a47 	vmovmi.f32	s15, s14
 80198ca:	ecea 7a01 	vstmia	sl!, {s15}
 80198ce:	3301      	adds	r3, #1
 80198d0:	e7da      	b.n	8019888 <__kernel_rem_pio2f+0x4c>
 80198d2:	ecfe 6a01 	vldmia	lr!, {s13}
 80198d6:	ed90 7a00 	vldr	s14, [r0]
 80198da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80198de:	3201      	adds	r2, #1
 80198e0:	454a      	cmp	r2, r9
 80198e2:	f1a0 0004 	sub.w	r0, r0, #4
 80198e6:	ddf4      	ble.n	80198d2 <__kernel_rem_pio2f+0x96>
 80198e8:	ecea 7a01 	vstmia	sl!, {s15}
 80198ec:	3304      	adds	r3, #4
 80198ee:	f10c 0c01 	add.w	ip, ip, #1
 80198f2:	e7d3      	b.n	801989c <__kernel_rem_pio2f+0x60>
 80198f4:	ab06      	add	r3, sp, #24
 80198f6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80198fa:	9304      	str	r3, [sp, #16]
 80198fc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80198fe:	eddf 8a92 	vldr	s17, [pc, #584]	; 8019b48 <__kernel_rem_pio2f+0x30c>
 8019902:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8019b44 <__kernel_rem_pio2f+0x308>
 8019906:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801990a:	9303      	str	r3, [sp, #12]
 801990c:	46ba      	mov	sl, r7
 801990e:	ab56      	add	r3, sp, #344	; 0x158
 8019910:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8019914:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8019918:	ab06      	add	r3, sp, #24
 801991a:	4618      	mov	r0, r3
 801991c:	4652      	mov	r2, sl
 801991e:	2a00      	cmp	r2, #0
 8019920:	dc51      	bgt.n	80199c6 <__kernel_rem_pio2f+0x18a>
 8019922:	4620      	mov	r0, r4
 8019924:	9305      	str	r3, [sp, #20]
 8019926:	f000 fb9d 	bl	801a064 <scalbnf>
 801992a:	eeb0 8a40 	vmov.f32	s16, s0
 801992e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8019932:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019936:	f7fd fe4d 	bl	80175d4 <floorf>
 801993a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801993e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019942:	2c00      	cmp	r4, #0
 8019944:	9b05      	ldr	r3, [sp, #20]
 8019946:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801994a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801994e:	edcd 7a00 	vstr	s15, [sp]
 8019952:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019956:	dd4b      	ble.n	80199f0 <__kernel_rem_pio2f+0x1b4>
 8019958:	f10a 3cff 	add.w	ip, sl, #4294967295
 801995c:	aa06      	add	r2, sp, #24
 801995e:	f1c4 0e08 	rsb	lr, r4, #8
 8019962:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019966:	ee17 1a90 	vmov	r1, s15
 801996a:	fa42 f00e 	asr.w	r0, r2, lr
 801996e:	4401      	add	r1, r0
 8019970:	9100      	str	r1, [sp, #0]
 8019972:	fa00 f00e 	lsl.w	r0, r0, lr
 8019976:	a906      	add	r1, sp, #24
 8019978:	1a12      	subs	r2, r2, r0
 801997a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801997e:	f1c4 0007 	rsb	r0, r4, #7
 8019982:	fa42 fb00 	asr.w	fp, r2, r0
 8019986:	f1bb 0f00 	cmp.w	fp, #0
 801998a:	dd43      	ble.n	8019a14 <__kernel_rem_pio2f+0x1d8>
 801998c:	9a00      	ldr	r2, [sp, #0]
 801998e:	f04f 0e00 	mov.w	lr, #0
 8019992:	3201      	adds	r2, #1
 8019994:	9200      	str	r2, [sp, #0]
 8019996:	4670      	mov	r0, lr
 8019998:	45f2      	cmp	sl, lr
 801999a:	dc6c      	bgt.n	8019a76 <__kernel_rem_pio2f+0x23a>
 801999c:	2c00      	cmp	r4, #0
 801999e:	dd04      	ble.n	80199aa <__kernel_rem_pio2f+0x16e>
 80199a0:	2c01      	cmp	r4, #1
 80199a2:	d079      	beq.n	8019a98 <__kernel_rem_pio2f+0x25c>
 80199a4:	2c02      	cmp	r4, #2
 80199a6:	f000 8082 	beq.w	8019aae <__kernel_rem_pio2f+0x272>
 80199aa:	f1bb 0f02 	cmp.w	fp, #2
 80199ae:	d131      	bne.n	8019a14 <__kernel_rem_pio2f+0x1d8>
 80199b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80199b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80199b8:	b360      	cbz	r0, 8019a14 <__kernel_rem_pio2f+0x1d8>
 80199ba:	4620      	mov	r0, r4
 80199bc:	f000 fb52 	bl	801a064 <scalbnf>
 80199c0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80199c4:	e026      	b.n	8019a14 <__kernel_rem_pio2f+0x1d8>
 80199c6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80199ca:	3a01      	subs	r2, #1
 80199cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199d0:	a942      	add	r1, sp, #264	; 0x108
 80199d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199d6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80199da:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80199de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80199e2:	eca0 0a01 	vstmia	r0!, {s0}
 80199e6:	ed9c 0a00 	vldr	s0, [ip]
 80199ea:	ee37 0a80 	vadd.f32	s0, s15, s0
 80199ee:	e796      	b.n	801991e <__kernel_rem_pio2f+0xe2>
 80199f0:	d107      	bne.n	8019a02 <__kernel_rem_pio2f+0x1c6>
 80199f2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80199f6:	a906      	add	r1, sp, #24
 80199f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80199fc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8019a00:	e7c1      	b.n	8019986 <__kernel_rem_pio2f+0x14a>
 8019a02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019a06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a0e:	da2f      	bge.n	8019a70 <__kernel_rem_pio2f+0x234>
 8019a10:	f04f 0b00 	mov.w	fp, #0
 8019a14:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a1c:	f040 8098 	bne.w	8019b50 <__kernel_rem_pio2f+0x314>
 8019a20:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019a24:	469c      	mov	ip, r3
 8019a26:	2200      	movs	r2, #0
 8019a28:	45bc      	cmp	ip, r7
 8019a2a:	da48      	bge.n	8019abe <__kernel_rem_pio2f+0x282>
 8019a2c:	2a00      	cmp	r2, #0
 8019a2e:	d05f      	beq.n	8019af0 <__kernel_rem_pio2f+0x2b4>
 8019a30:	aa06      	add	r2, sp, #24
 8019a32:	3c08      	subs	r4, #8
 8019a34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019a38:	2900      	cmp	r1, #0
 8019a3a:	d07d      	beq.n	8019b38 <__kernel_rem_pio2f+0x2fc>
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019a42:	9301      	str	r3, [sp, #4]
 8019a44:	f000 fb0e 	bl	801a064 <scalbnf>
 8019a48:	9b01      	ldr	r3, [sp, #4]
 8019a4a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8019b48 <__kernel_rem_pio2f+0x30c>
 8019a4e:	4619      	mov	r1, r3
 8019a50:	2900      	cmp	r1, #0
 8019a52:	f280 80af 	bge.w	8019bb4 <__kernel_rem_pio2f+0x378>
 8019a56:	4618      	mov	r0, r3
 8019a58:	2400      	movs	r4, #0
 8019a5a:	2800      	cmp	r0, #0
 8019a5c:	f2c0 80d0 	blt.w	8019c00 <__kernel_rem_pio2f+0x3c4>
 8019a60:	a942      	add	r1, sp, #264	; 0x108
 8019a62:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8019a66:	4a36      	ldr	r2, [pc, #216]	; (8019b40 <__kernel_rem_pio2f+0x304>)
 8019a68:	eddf 7a38 	vldr	s15, [pc, #224]	; 8019b4c <__kernel_rem_pio2f+0x310>
 8019a6c:	2100      	movs	r1, #0
 8019a6e:	e0bb      	b.n	8019be8 <__kernel_rem_pio2f+0x3ac>
 8019a70:	f04f 0b02 	mov.w	fp, #2
 8019a74:	e78a      	b.n	801998c <__kernel_rem_pio2f+0x150>
 8019a76:	681a      	ldr	r2, [r3, #0]
 8019a78:	b948      	cbnz	r0, 8019a8e <__kernel_rem_pio2f+0x252>
 8019a7a:	b11a      	cbz	r2, 8019a84 <__kernel_rem_pio2f+0x248>
 8019a7c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019a80:	601a      	str	r2, [r3, #0]
 8019a82:	2201      	movs	r2, #1
 8019a84:	f10e 0e01 	add.w	lr, lr, #1
 8019a88:	3304      	adds	r3, #4
 8019a8a:	4610      	mov	r0, r2
 8019a8c:	e784      	b.n	8019998 <__kernel_rem_pio2f+0x15c>
 8019a8e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8019a92:	601a      	str	r2, [r3, #0]
 8019a94:	4602      	mov	r2, r0
 8019a96:	e7f5      	b.n	8019a84 <__kernel_rem_pio2f+0x248>
 8019a98:	f10a 3cff 	add.w	ip, sl, #4294967295
 8019a9c:	ab06      	add	r3, sp, #24
 8019a9e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019aa6:	aa06      	add	r2, sp, #24
 8019aa8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8019aac:	e77d      	b.n	80199aa <__kernel_rem_pio2f+0x16e>
 8019aae:	f10a 3cff 	add.w	ip, sl, #4294967295
 8019ab2:	ab06      	add	r3, sp, #24
 8019ab4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019abc:	e7f3      	b.n	8019aa6 <__kernel_rem_pio2f+0x26a>
 8019abe:	a906      	add	r1, sp, #24
 8019ac0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8019ac4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019ac8:	4302      	orrs	r2, r0
 8019aca:	e7ad      	b.n	8019a28 <__kernel_rem_pio2f+0x1ec>
 8019acc:	3001      	adds	r0, #1
 8019ace:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019ad2:	2a00      	cmp	r2, #0
 8019ad4:	d0fa      	beq.n	8019acc <__kernel_rem_pio2f+0x290>
 8019ad6:	a91a      	add	r1, sp, #104	; 0x68
 8019ad8:	eb0a 0208 	add.w	r2, sl, r8
 8019adc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019ae0:	f10a 0301 	add.w	r3, sl, #1
 8019ae4:	eb0a 0100 	add.w	r1, sl, r0
 8019ae8:	4299      	cmp	r1, r3
 8019aea:	da04      	bge.n	8019af6 <__kernel_rem_pio2f+0x2ba>
 8019aec:	468a      	mov	sl, r1
 8019aee:	e70e      	b.n	801990e <__kernel_rem_pio2f+0xd2>
 8019af0:	9b04      	ldr	r3, [sp, #16]
 8019af2:	2001      	movs	r0, #1
 8019af4:	e7eb      	b.n	8019ace <__kernel_rem_pio2f+0x292>
 8019af6:	9803      	ldr	r0, [sp, #12]
 8019af8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019afc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019b00:	9000      	str	r0, [sp, #0]
 8019b02:	ee07 0a90 	vmov	s15, r0
 8019b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b0a:	2000      	movs	r0, #0
 8019b0c:	ece2 7a01 	vstmia	r2!, {s15}
 8019b10:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019b4c <__kernel_rem_pio2f+0x310>
 8019b14:	4696      	mov	lr, r2
 8019b16:	4548      	cmp	r0, r9
 8019b18:	dd06      	ble.n	8019b28 <__kernel_rem_pio2f+0x2ec>
 8019b1a:	a842      	add	r0, sp, #264	; 0x108
 8019b1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019b20:	edc0 7a00 	vstr	s15, [r0]
 8019b24:	3301      	adds	r3, #1
 8019b26:	e7df      	b.n	8019ae8 <__kernel_rem_pio2f+0x2ac>
 8019b28:	ecfc 6a01 	vldmia	ip!, {s13}
 8019b2c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8019b30:	3001      	adds	r0, #1
 8019b32:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019b36:	e7ee      	b.n	8019b16 <__kernel_rem_pio2f+0x2da>
 8019b38:	3b01      	subs	r3, #1
 8019b3a:	e779      	b.n	8019a30 <__kernel_rem_pio2f+0x1f4>
 8019b3c:	0803d104 	.word	0x0803d104
 8019b40:	0803d0d8 	.word	0x0803d0d8
 8019b44:	43800000 	.word	0x43800000
 8019b48:	3b800000 	.word	0x3b800000
 8019b4c:	00000000 	.word	0x00000000
 8019b50:	9b02      	ldr	r3, [sp, #8]
 8019b52:	eeb0 0a48 	vmov.f32	s0, s16
 8019b56:	1b98      	subs	r0, r3, r6
 8019b58:	f000 fa84 	bl	801a064 <scalbnf>
 8019b5c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8019b44 <__kernel_rem_pio2f+0x308>
 8019b60:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b68:	db1b      	blt.n	8019ba2 <__kernel_rem_pio2f+0x366>
 8019b6a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8019b48 <__kernel_rem_pio2f+0x30c>
 8019b6e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019b72:	aa06      	add	r2, sp, #24
 8019b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b78:	a906      	add	r1, sp, #24
 8019b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b7e:	3408      	adds	r4, #8
 8019b80:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019b8c:	ee10 3a10 	vmov	r3, s0
 8019b90:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8019b94:	ee17 2a90 	vmov	r2, s15
 8019b98:	f10a 0301 	add.w	r3, sl, #1
 8019b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019ba0:	e74c      	b.n	8019a3c <__kernel_rem_pio2f+0x200>
 8019ba2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019ba6:	aa06      	add	r2, sp, #24
 8019ba8:	ee10 3a10 	vmov	r3, s0
 8019bac:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8019bb0:	4653      	mov	r3, sl
 8019bb2:	e743      	b.n	8019a3c <__kernel_rem_pio2f+0x200>
 8019bb4:	aa42      	add	r2, sp, #264	; 0x108
 8019bb6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8019bba:	aa06      	add	r2, sp, #24
 8019bbc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8019bc0:	9201      	str	r2, [sp, #4]
 8019bc2:	ee07 2a90 	vmov	s15, r2
 8019bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bca:	3901      	subs	r1, #1
 8019bcc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019bd0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019bd4:	edc0 7a00 	vstr	s15, [r0]
 8019bd8:	e73a      	b.n	8019a50 <__kernel_rem_pio2f+0x214>
 8019bda:	ecf2 6a01 	vldmia	r2!, {s13}
 8019bde:	ecb6 7a01 	vldmia	r6!, {s14}
 8019be2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019be6:	3101      	adds	r1, #1
 8019be8:	42b9      	cmp	r1, r7
 8019bea:	dc01      	bgt.n	8019bf0 <__kernel_rem_pio2f+0x3b4>
 8019bec:	428c      	cmp	r4, r1
 8019bee:	daf4      	bge.n	8019bda <__kernel_rem_pio2f+0x39e>
 8019bf0:	aa56      	add	r2, sp, #344	; 0x158
 8019bf2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8019bf6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8019bfa:	3801      	subs	r0, #1
 8019bfc:	3401      	adds	r4, #1
 8019bfe:	e72c      	b.n	8019a5a <__kernel_rem_pio2f+0x21e>
 8019c00:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019c02:	2a02      	cmp	r2, #2
 8019c04:	dc0a      	bgt.n	8019c1c <__kernel_rem_pio2f+0x3e0>
 8019c06:	2a00      	cmp	r2, #0
 8019c08:	dc61      	bgt.n	8019cce <__kernel_rem_pio2f+0x492>
 8019c0a:	d03c      	beq.n	8019c86 <__kernel_rem_pio2f+0x44a>
 8019c0c:	9b00      	ldr	r3, [sp, #0]
 8019c0e:	f003 0007 	and.w	r0, r3, #7
 8019c12:	b057      	add	sp, #348	; 0x15c
 8019c14:	ecbd 8b04 	vpop	{d8-d9}
 8019c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c1c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019c1e:	2a03      	cmp	r2, #3
 8019c20:	d1f4      	bne.n	8019c0c <__kernel_rem_pio2f+0x3d0>
 8019c22:	aa2e      	add	r2, sp, #184	; 0xb8
 8019c24:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019c28:	4608      	mov	r0, r1
 8019c2a:	461c      	mov	r4, r3
 8019c2c:	2c00      	cmp	r4, #0
 8019c2e:	f1a0 0004 	sub.w	r0, r0, #4
 8019c32:	dc59      	bgt.n	8019ce8 <__kernel_rem_pio2f+0x4ac>
 8019c34:	4618      	mov	r0, r3
 8019c36:	2801      	cmp	r0, #1
 8019c38:	f1a1 0104 	sub.w	r1, r1, #4
 8019c3c:	dc64      	bgt.n	8019d08 <__kernel_rem_pio2f+0x4cc>
 8019c3e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8019b4c <__kernel_rem_pio2f+0x310>
 8019c42:	2b01      	cmp	r3, #1
 8019c44:	dc70      	bgt.n	8019d28 <__kernel_rem_pio2f+0x4ec>
 8019c46:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8019c4a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8019c4e:	f1bb 0f00 	cmp.w	fp, #0
 8019c52:	d172      	bne.n	8019d3a <__kernel_rem_pio2f+0x4fe>
 8019c54:	edc5 6a00 	vstr	s13, [r5]
 8019c58:	ed85 7a01 	vstr	s14, [r5, #4]
 8019c5c:	edc5 7a02 	vstr	s15, [r5, #8]
 8019c60:	e7d4      	b.n	8019c0c <__kernel_rem_pio2f+0x3d0>
 8019c62:	aa2e      	add	r2, sp, #184	; 0xb8
 8019c64:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019c68:	ed91 7a00 	vldr	s14, [r1]
 8019c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019c70:	3b01      	subs	r3, #1
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	daf5      	bge.n	8019c62 <__kernel_rem_pio2f+0x426>
 8019c76:	f1bb 0f00 	cmp.w	fp, #0
 8019c7a:	d001      	beq.n	8019c80 <__kernel_rem_pio2f+0x444>
 8019c7c:	eef1 7a67 	vneg.f32	s15, s15
 8019c80:	edc5 7a00 	vstr	s15, [r5]
 8019c84:	e7c2      	b.n	8019c0c <__kernel_rem_pio2f+0x3d0>
 8019c86:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8019b4c <__kernel_rem_pio2f+0x310>
 8019c8a:	e7f2      	b.n	8019c72 <__kernel_rem_pio2f+0x436>
 8019c8c:	aa2e      	add	r2, sp, #184	; 0xb8
 8019c8e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8019c92:	edd0 7a00 	vldr	s15, [r0]
 8019c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c9a:	3901      	subs	r1, #1
 8019c9c:	2900      	cmp	r1, #0
 8019c9e:	daf5      	bge.n	8019c8c <__kernel_rem_pio2f+0x450>
 8019ca0:	f1bb 0f00 	cmp.w	fp, #0
 8019ca4:	d017      	beq.n	8019cd6 <__kernel_rem_pio2f+0x49a>
 8019ca6:	eef1 7a47 	vneg.f32	s15, s14
 8019caa:	edc5 7a00 	vstr	s15, [r5]
 8019cae:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8019cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cb6:	a82f      	add	r0, sp, #188	; 0xbc
 8019cb8:	2101      	movs	r1, #1
 8019cba:	428b      	cmp	r3, r1
 8019cbc:	da0e      	bge.n	8019cdc <__kernel_rem_pio2f+0x4a0>
 8019cbe:	f1bb 0f00 	cmp.w	fp, #0
 8019cc2:	d001      	beq.n	8019cc8 <__kernel_rem_pio2f+0x48c>
 8019cc4:	eef1 7a67 	vneg.f32	s15, s15
 8019cc8:	edc5 7a01 	vstr	s15, [r5, #4]
 8019ccc:	e79e      	b.n	8019c0c <__kernel_rem_pio2f+0x3d0>
 8019cce:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8019b4c <__kernel_rem_pio2f+0x310>
 8019cd2:	4619      	mov	r1, r3
 8019cd4:	e7e2      	b.n	8019c9c <__kernel_rem_pio2f+0x460>
 8019cd6:	eef0 7a47 	vmov.f32	s15, s14
 8019cda:	e7e6      	b.n	8019caa <__kernel_rem_pio2f+0x46e>
 8019cdc:	ecb0 7a01 	vldmia	r0!, {s14}
 8019ce0:	3101      	adds	r1, #1
 8019ce2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ce6:	e7e8      	b.n	8019cba <__kernel_rem_pio2f+0x47e>
 8019ce8:	edd0 7a00 	vldr	s15, [r0]
 8019cec:	edd0 6a01 	vldr	s13, [r0, #4]
 8019cf0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019cf4:	3c01      	subs	r4, #1
 8019cf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cfa:	ed80 7a00 	vstr	s14, [r0]
 8019cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d02:	edc0 7a01 	vstr	s15, [r0, #4]
 8019d06:	e791      	b.n	8019c2c <__kernel_rem_pio2f+0x3f0>
 8019d08:	edd1 7a00 	vldr	s15, [r1]
 8019d0c:	edd1 6a01 	vldr	s13, [r1, #4]
 8019d10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019d14:	3801      	subs	r0, #1
 8019d16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d1a:	ed81 7a00 	vstr	s14, [r1]
 8019d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d22:	edc1 7a01 	vstr	s15, [r1, #4]
 8019d26:	e786      	b.n	8019c36 <__kernel_rem_pio2f+0x3fa>
 8019d28:	aa2e      	add	r2, sp, #184	; 0xb8
 8019d2a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019d2e:	ed91 7a00 	vldr	s14, [r1]
 8019d32:	3b01      	subs	r3, #1
 8019d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d38:	e783      	b.n	8019c42 <__kernel_rem_pio2f+0x406>
 8019d3a:	eef1 6a66 	vneg.f32	s13, s13
 8019d3e:	eeb1 7a47 	vneg.f32	s14, s14
 8019d42:	edc5 6a00 	vstr	s13, [r5]
 8019d46:	ed85 7a01 	vstr	s14, [r5, #4]
 8019d4a:	eef1 7a67 	vneg.f32	s15, s15
 8019d4e:	e785      	b.n	8019c5c <__kernel_rem_pio2f+0x420>

08019d50 <__kernel_sinf>:
 8019d50:	ee10 3a10 	vmov	r3, s0
 8019d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019d58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019d5c:	da04      	bge.n	8019d68 <__kernel_sinf+0x18>
 8019d5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019d62:	ee17 3a90 	vmov	r3, s15
 8019d66:	b35b      	cbz	r3, 8019dc0 <__kernel_sinf+0x70>
 8019d68:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019d6c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019dc4 <__kernel_sinf+0x74>
 8019d70:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8019dc8 <__kernel_sinf+0x78>
 8019d74:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019d78:	eddf 7a14 	vldr	s15, [pc, #80]	; 8019dcc <__kernel_sinf+0x7c>
 8019d7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019d80:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8019dd0 <__kernel_sinf+0x80>
 8019d84:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019d88:	eddf 7a12 	vldr	s15, [pc, #72]	; 8019dd4 <__kernel_sinf+0x84>
 8019d8c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019d90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019d94:	b930      	cbnz	r0, 8019da4 <__kernel_sinf+0x54>
 8019d96:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019dd8 <__kernel_sinf+0x88>
 8019d9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019d9e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019da2:	4770      	bx	lr
 8019da4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019da8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019dac:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019db0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019db4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019ddc <__kernel_sinf+0x8c>
 8019db8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019dbc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019dc0:	4770      	bx	lr
 8019dc2:	bf00      	nop
 8019dc4:	2f2ec9d3 	.word	0x2f2ec9d3
 8019dc8:	b2d72f34 	.word	0xb2d72f34
 8019dcc:	3638ef1b 	.word	0x3638ef1b
 8019dd0:	b9500d01 	.word	0xb9500d01
 8019dd4:	3c088889 	.word	0x3c088889
 8019dd8:	be2aaaab 	.word	0xbe2aaaab
 8019ddc:	3e2aaaab 	.word	0x3e2aaaab

08019de0 <fabs>:
 8019de0:	ec51 0b10 	vmov	r0, r1, d0
 8019de4:	ee10 2a10 	vmov	r2, s0
 8019de8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019dec:	ec43 2b10 	vmov	d0, r2, r3
 8019df0:	4770      	bx	lr

08019df2 <finite>:
 8019df2:	b082      	sub	sp, #8
 8019df4:	ed8d 0b00 	vstr	d0, [sp]
 8019df8:	9801      	ldr	r0, [sp, #4]
 8019dfa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019dfe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019e02:	0fc0      	lsrs	r0, r0, #31
 8019e04:	b002      	add	sp, #8
 8019e06:	4770      	bx	lr

08019e08 <nan>:
 8019e08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019e10 <nan+0x8>
 8019e0c:	4770      	bx	lr
 8019e0e:	bf00      	nop
 8019e10:	00000000 	.word	0x00000000
 8019e14:	7ff80000 	.word	0x7ff80000

08019e18 <rint>:
 8019e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e1a:	ec51 0b10 	vmov	r0, r1, d0
 8019e1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019e22:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019e26:	2e13      	cmp	r6, #19
 8019e28:	ee10 4a10 	vmov	r4, s0
 8019e2c:	460b      	mov	r3, r1
 8019e2e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8019e32:	dc58      	bgt.n	8019ee6 <rint+0xce>
 8019e34:	2e00      	cmp	r6, #0
 8019e36:	da2b      	bge.n	8019e90 <rint+0x78>
 8019e38:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019e3c:	4302      	orrs	r2, r0
 8019e3e:	d023      	beq.n	8019e88 <rint+0x70>
 8019e40:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019e44:	4302      	orrs	r2, r0
 8019e46:	4254      	negs	r4, r2
 8019e48:	4314      	orrs	r4, r2
 8019e4a:	0c4b      	lsrs	r3, r1, #17
 8019e4c:	0b24      	lsrs	r4, r4, #12
 8019e4e:	045b      	lsls	r3, r3, #17
 8019e50:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8019e54:	ea44 0103 	orr.w	r1, r4, r3
 8019e58:	4b32      	ldr	r3, [pc, #200]	; (8019f24 <rint+0x10c>)
 8019e5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019e5e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8019e62:	4602      	mov	r2, r0
 8019e64:	460b      	mov	r3, r1
 8019e66:	4630      	mov	r0, r6
 8019e68:	4639      	mov	r1, r7
 8019e6a:	f7e6 fa2f 	bl	80002cc <__adddf3>
 8019e6e:	e9cd 0100 	strd	r0, r1, [sp]
 8019e72:	463b      	mov	r3, r7
 8019e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019e78:	4632      	mov	r2, r6
 8019e7a:	f7e6 fa25 	bl	80002c8 <__aeabi_dsub>
 8019e7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019e82:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019e86:	4639      	mov	r1, r7
 8019e88:	ec41 0b10 	vmov	d0, r0, r1
 8019e8c:	b003      	add	sp, #12
 8019e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e90:	4a25      	ldr	r2, [pc, #148]	; (8019f28 <rint+0x110>)
 8019e92:	4132      	asrs	r2, r6
 8019e94:	ea01 0702 	and.w	r7, r1, r2
 8019e98:	4307      	orrs	r7, r0
 8019e9a:	d0f5      	beq.n	8019e88 <rint+0x70>
 8019e9c:	0851      	lsrs	r1, r2, #1
 8019e9e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8019ea2:	4314      	orrs	r4, r2
 8019ea4:	d00c      	beq.n	8019ec0 <rint+0xa8>
 8019ea6:	ea23 0201 	bic.w	r2, r3, r1
 8019eaa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019eae:	2e13      	cmp	r6, #19
 8019eb0:	fa43 f606 	asr.w	r6, r3, r6
 8019eb4:	bf0c      	ite	eq
 8019eb6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019eba:	2400      	movne	r4, #0
 8019ebc:	ea42 0306 	orr.w	r3, r2, r6
 8019ec0:	4918      	ldr	r1, [pc, #96]	; (8019f24 <rint+0x10c>)
 8019ec2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019ec6:	4622      	mov	r2, r4
 8019ec8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019ecc:	4620      	mov	r0, r4
 8019ece:	4629      	mov	r1, r5
 8019ed0:	f7e6 f9fc 	bl	80002cc <__adddf3>
 8019ed4:	e9cd 0100 	strd	r0, r1, [sp]
 8019ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019edc:	4622      	mov	r2, r4
 8019ede:	462b      	mov	r3, r5
 8019ee0:	f7e6 f9f2 	bl	80002c8 <__aeabi_dsub>
 8019ee4:	e7d0      	b.n	8019e88 <rint+0x70>
 8019ee6:	2e33      	cmp	r6, #51	; 0x33
 8019ee8:	dd07      	ble.n	8019efa <rint+0xe2>
 8019eea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019eee:	d1cb      	bne.n	8019e88 <rint+0x70>
 8019ef0:	ee10 2a10 	vmov	r2, s0
 8019ef4:	f7e6 f9ea 	bl	80002cc <__adddf3>
 8019ef8:	e7c6      	b.n	8019e88 <rint+0x70>
 8019efa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8019efe:	f04f 36ff 	mov.w	r6, #4294967295
 8019f02:	40d6      	lsrs	r6, r2
 8019f04:	4230      	tst	r0, r6
 8019f06:	d0bf      	beq.n	8019e88 <rint+0x70>
 8019f08:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8019f0c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8019f10:	bf1f      	itttt	ne
 8019f12:	ea24 0101 	bicne.w	r1, r4, r1
 8019f16:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019f1a:	fa44 f202 	asrne.w	r2, r4, r2
 8019f1e:	ea41 0402 	orrne.w	r4, r1, r2
 8019f22:	e7cd      	b.n	8019ec0 <rint+0xa8>
 8019f24:	0803d110 	.word	0x0803d110
 8019f28:	000fffff 	.word	0x000fffff
 8019f2c:	00000000 	.word	0x00000000

08019f30 <scalbn>:
 8019f30:	b570      	push	{r4, r5, r6, lr}
 8019f32:	ec55 4b10 	vmov	r4, r5, d0
 8019f36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019f3a:	4606      	mov	r6, r0
 8019f3c:	462b      	mov	r3, r5
 8019f3e:	b99a      	cbnz	r2, 8019f68 <scalbn+0x38>
 8019f40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019f44:	4323      	orrs	r3, r4
 8019f46:	d036      	beq.n	8019fb6 <scalbn+0x86>
 8019f48:	4b39      	ldr	r3, [pc, #228]	; (801a030 <scalbn+0x100>)
 8019f4a:	4629      	mov	r1, r5
 8019f4c:	ee10 0a10 	vmov	r0, s0
 8019f50:	2200      	movs	r2, #0
 8019f52:	f7e6 fb71 	bl	8000638 <__aeabi_dmul>
 8019f56:	4b37      	ldr	r3, [pc, #220]	; (801a034 <scalbn+0x104>)
 8019f58:	429e      	cmp	r6, r3
 8019f5a:	4604      	mov	r4, r0
 8019f5c:	460d      	mov	r5, r1
 8019f5e:	da10      	bge.n	8019f82 <scalbn+0x52>
 8019f60:	a32b      	add	r3, pc, #172	; (adr r3, 801a010 <scalbn+0xe0>)
 8019f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f66:	e03a      	b.n	8019fde <scalbn+0xae>
 8019f68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019f6c:	428a      	cmp	r2, r1
 8019f6e:	d10c      	bne.n	8019f8a <scalbn+0x5a>
 8019f70:	ee10 2a10 	vmov	r2, s0
 8019f74:	4620      	mov	r0, r4
 8019f76:	4629      	mov	r1, r5
 8019f78:	f7e6 f9a8 	bl	80002cc <__adddf3>
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	460d      	mov	r5, r1
 8019f80:	e019      	b.n	8019fb6 <scalbn+0x86>
 8019f82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019f86:	460b      	mov	r3, r1
 8019f88:	3a36      	subs	r2, #54	; 0x36
 8019f8a:	4432      	add	r2, r6
 8019f8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019f90:	428a      	cmp	r2, r1
 8019f92:	dd08      	ble.n	8019fa6 <scalbn+0x76>
 8019f94:	2d00      	cmp	r5, #0
 8019f96:	a120      	add	r1, pc, #128	; (adr r1, 801a018 <scalbn+0xe8>)
 8019f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f9c:	da1c      	bge.n	8019fd8 <scalbn+0xa8>
 8019f9e:	a120      	add	r1, pc, #128	; (adr r1, 801a020 <scalbn+0xf0>)
 8019fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fa4:	e018      	b.n	8019fd8 <scalbn+0xa8>
 8019fa6:	2a00      	cmp	r2, #0
 8019fa8:	dd08      	ble.n	8019fbc <scalbn+0x8c>
 8019faa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019fb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019fb6:	ec45 4b10 	vmov	d0, r4, r5
 8019fba:	bd70      	pop	{r4, r5, r6, pc}
 8019fbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019fc0:	da19      	bge.n	8019ff6 <scalbn+0xc6>
 8019fc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019fc6:	429e      	cmp	r6, r3
 8019fc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019fcc:	dd0a      	ble.n	8019fe4 <scalbn+0xb4>
 8019fce:	a112      	add	r1, pc, #72	; (adr r1, 801a018 <scalbn+0xe8>)
 8019fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d1e2      	bne.n	8019f9e <scalbn+0x6e>
 8019fd8:	a30f      	add	r3, pc, #60	; (adr r3, 801a018 <scalbn+0xe8>)
 8019fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fde:	f7e6 fb2b 	bl	8000638 <__aeabi_dmul>
 8019fe2:	e7cb      	b.n	8019f7c <scalbn+0x4c>
 8019fe4:	a10a      	add	r1, pc, #40	; (adr r1, 801a010 <scalbn+0xe0>)
 8019fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d0b8      	beq.n	8019f60 <scalbn+0x30>
 8019fee:	a10e      	add	r1, pc, #56	; (adr r1, 801a028 <scalbn+0xf8>)
 8019ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ff4:	e7b4      	b.n	8019f60 <scalbn+0x30>
 8019ff6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019ffa:	3236      	adds	r2, #54	; 0x36
 8019ffc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a000:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a004:	4620      	mov	r0, r4
 801a006:	4b0c      	ldr	r3, [pc, #48]	; (801a038 <scalbn+0x108>)
 801a008:	2200      	movs	r2, #0
 801a00a:	e7e8      	b.n	8019fde <scalbn+0xae>
 801a00c:	f3af 8000 	nop.w
 801a010:	c2f8f359 	.word	0xc2f8f359
 801a014:	01a56e1f 	.word	0x01a56e1f
 801a018:	8800759c 	.word	0x8800759c
 801a01c:	7e37e43c 	.word	0x7e37e43c
 801a020:	8800759c 	.word	0x8800759c
 801a024:	fe37e43c 	.word	0xfe37e43c
 801a028:	c2f8f359 	.word	0xc2f8f359
 801a02c:	81a56e1f 	.word	0x81a56e1f
 801a030:	43500000 	.word	0x43500000
 801a034:	ffff3cb0 	.word	0xffff3cb0
 801a038:	3c900000 	.word	0x3c900000

0801a03c <fabsf>:
 801a03c:	ee10 3a10 	vmov	r3, s0
 801a040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a044:	ee00 3a10 	vmov	s0, r3
 801a048:	4770      	bx	lr

0801a04a <finitef>:
 801a04a:	b082      	sub	sp, #8
 801a04c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a050:	9801      	ldr	r0, [sp, #4]
 801a052:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a056:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a05a:	bfac      	ite	ge
 801a05c:	2000      	movge	r0, #0
 801a05e:	2001      	movlt	r0, #1
 801a060:	b002      	add	sp, #8
 801a062:	4770      	bx	lr

0801a064 <scalbnf>:
 801a064:	ee10 3a10 	vmov	r3, s0
 801a068:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a06c:	d025      	beq.n	801a0ba <scalbnf+0x56>
 801a06e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a072:	d302      	bcc.n	801a07a <scalbnf+0x16>
 801a074:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a078:	4770      	bx	lr
 801a07a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a07e:	d122      	bne.n	801a0c6 <scalbnf+0x62>
 801a080:	4b2a      	ldr	r3, [pc, #168]	; (801a12c <scalbnf+0xc8>)
 801a082:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a130 <scalbnf+0xcc>
 801a086:	4298      	cmp	r0, r3
 801a088:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a08c:	db16      	blt.n	801a0bc <scalbnf+0x58>
 801a08e:	ee10 3a10 	vmov	r3, s0
 801a092:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a096:	3a19      	subs	r2, #25
 801a098:	4402      	add	r2, r0
 801a09a:	2afe      	cmp	r2, #254	; 0xfe
 801a09c:	dd15      	ble.n	801a0ca <scalbnf+0x66>
 801a09e:	ee10 3a10 	vmov	r3, s0
 801a0a2:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a134 <scalbnf+0xd0>
 801a0a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 801a138 <scalbnf+0xd4>
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	eeb0 7a67 	vmov.f32	s14, s15
 801a0b0:	bfb8      	it	lt
 801a0b2:	eef0 7a66 	vmovlt.f32	s15, s13
 801a0b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 801a0ba:	4770      	bx	lr
 801a0bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a13c <scalbnf+0xd8>
 801a0c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a0c4:	4770      	bx	lr
 801a0c6:	0dd2      	lsrs	r2, r2, #23
 801a0c8:	e7e6      	b.n	801a098 <scalbnf+0x34>
 801a0ca:	2a00      	cmp	r2, #0
 801a0cc:	dd06      	ble.n	801a0dc <scalbnf+0x78>
 801a0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a0d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a0d6:	ee00 3a10 	vmov	s0, r3
 801a0da:	4770      	bx	lr
 801a0dc:	f112 0f16 	cmn.w	r2, #22
 801a0e0:	da1a      	bge.n	801a118 <scalbnf+0xb4>
 801a0e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a0e6:	4298      	cmp	r0, r3
 801a0e8:	ee10 3a10 	vmov	r3, s0
 801a0ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a0f0:	dd0a      	ble.n	801a108 <scalbnf+0xa4>
 801a0f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801a134 <scalbnf+0xd0>
 801a0f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801a138 <scalbnf+0xd4>
 801a0fa:	eef0 7a40 	vmov.f32	s15, s0
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	bf18      	it	ne
 801a102:	eeb0 0a47 	vmovne.f32	s0, s14
 801a106:	e7db      	b.n	801a0c0 <scalbnf+0x5c>
 801a108:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a13c <scalbnf+0xd8>
 801a10c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a140 <scalbnf+0xdc>
 801a110:	eef0 7a40 	vmov.f32	s15, s0
 801a114:	2b00      	cmp	r3, #0
 801a116:	e7f3      	b.n	801a100 <scalbnf+0x9c>
 801a118:	3219      	adds	r2, #25
 801a11a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a11e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a122:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a144 <scalbnf+0xe0>
 801a126:	ee07 3a10 	vmov	s14, r3
 801a12a:	e7c4      	b.n	801a0b6 <scalbnf+0x52>
 801a12c:	ffff3cb0 	.word	0xffff3cb0
 801a130:	4c000000 	.word	0x4c000000
 801a134:	7149f2ca 	.word	0x7149f2ca
 801a138:	f149f2ca 	.word	0xf149f2ca
 801a13c:	0da24260 	.word	0x0da24260
 801a140:	8da24260 	.word	0x8da24260
 801a144:	33000000 	.word	0x33000000

0801a148 <abort>:
 801a148:	b508      	push	{r3, lr}
 801a14a:	2006      	movs	r0, #6
 801a14c:	f000 fda0 	bl	801ac90 <raise>
 801a150:	2001      	movs	r0, #1
 801a152:	f7ed f87b 	bl	800724c <_exit>
	...

0801a158 <__assert_func>:
 801a158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a15a:	4614      	mov	r4, r2
 801a15c:	461a      	mov	r2, r3
 801a15e:	4b09      	ldr	r3, [pc, #36]	; (801a184 <__assert_func+0x2c>)
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	4605      	mov	r5, r0
 801a164:	68d8      	ldr	r0, [r3, #12]
 801a166:	b14c      	cbz	r4, 801a17c <__assert_func+0x24>
 801a168:	4b07      	ldr	r3, [pc, #28]	; (801a188 <__assert_func+0x30>)
 801a16a:	9100      	str	r1, [sp, #0]
 801a16c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a170:	4906      	ldr	r1, [pc, #24]	; (801a18c <__assert_func+0x34>)
 801a172:	462b      	mov	r3, r5
 801a174:	f000 f836 	bl	801a1e4 <fiprintf>
 801a178:	f7ff ffe6 	bl	801a148 <abort>
 801a17c:	4b04      	ldr	r3, [pc, #16]	; (801a190 <__assert_func+0x38>)
 801a17e:	461c      	mov	r4, r3
 801a180:	e7f3      	b.n	801a16a <__assert_func+0x12>
 801a182:	bf00      	nop
 801a184:	20000330 	.word	0x20000330
 801a188:	0803d120 	.word	0x0803d120
 801a18c:	0803d12d 	.word	0x0803d12d
 801a190:	0803d15b 	.word	0x0803d15b

0801a194 <atexit>:
 801a194:	2300      	movs	r3, #0
 801a196:	4601      	mov	r1, r0
 801a198:	461a      	mov	r2, r3
 801a19a:	4618      	mov	r0, r3
 801a19c:	f000 be74 	b.w	801ae88 <__register_exitproc>

0801a1a0 <calloc>:
 801a1a0:	4b02      	ldr	r3, [pc, #8]	; (801a1ac <calloc+0xc>)
 801a1a2:	460a      	mov	r2, r1
 801a1a4:	4601      	mov	r1, r0
 801a1a6:	6818      	ldr	r0, [r3, #0]
 801a1a8:	f000 b904 	b.w	801a3b4 <_calloc_r>
 801a1ac:	20000330 	.word	0x20000330

0801a1b0 <__errno>:
 801a1b0:	4b01      	ldr	r3, [pc, #4]	; (801a1b8 <__errno+0x8>)
 801a1b2:	6818      	ldr	r0, [r3, #0]
 801a1b4:	4770      	bx	lr
 801a1b6:	bf00      	nop
 801a1b8:	20000330 	.word	0x20000330

0801a1bc <exit>:
 801a1bc:	b508      	push	{r3, lr}
 801a1be:	4b07      	ldr	r3, [pc, #28]	; (801a1dc <exit+0x20>)
 801a1c0:	4604      	mov	r4, r0
 801a1c2:	b113      	cbz	r3, 801a1ca <exit+0xe>
 801a1c4:	2100      	movs	r1, #0
 801a1c6:	f000 fec1 	bl	801af4c <__call_exitprocs>
 801a1ca:	4b05      	ldr	r3, [pc, #20]	; (801a1e0 <exit+0x24>)
 801a1cc:	6818      	ldr	r0, [r3, #0]
 801a1ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a1d0:	b103      	cbz	r3, 801a1d4 <exit+0x18>
 801a1d2:	4798      	blx	r3
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	f7ed f839 	bl	800724c <_exit>
 801a1da:	bf00      	nop
 801a1dc:	0801af4d 	.word	0x0801af4d
 801a1e0:	0803d15c 	.word	0x0803d15c

0801a1e4 <fiprintf>:
 801a1e4:	b40e      	push	{r1, r2, r3}
 801a1e6:	b503      	push	{r0, r1, lr}
 801a1e8:	4601      	mov	r1, r0
 801a1ea:	ab03      	add	r3, sp, #12
 801a1ec:	4805      	ldr	r0, [pc, #20]	; (801a204 <fiprintf+0x20>)
 801a1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1f2:	6800      	ldr	r0, [r0, #0]
 801a1f4:	9301      	str	r3, [sp, #4]
 801a1f6:	f000 f9c1 	bl	801a57c <_vfiprintf_r>
 801a1fa:	b002      	add	sp, #8
 801a1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a200:	b003      	add	sp, #12
 801a202:	4770      	bx	lr
 801a204:	20000330 	.word	0x20000330

0801a208 <_fwrite_r>:
 801a208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a20c:	9c08      	ldr	r4, [sp, #32]
 801a20e:	4689      	mov	r9, r1
 801a210:	4617      	mov	r7, r2
 801a212:	fb02 f803 	mul.w	r8, r2, r3
 801a216:	4605      	mov	r5, r0
 801a218:	b118      	cbz	r0, 801a222 <_fwrite_r+0x1a>
 801a21a:	6983      	ldr	r3, [r0, #24]
 801a21c:	b90b      	cbnz	r3, 801a222 <_fwrite_r+0x1a>
 801a21e:	f001 f80d 	bl	801b23c <__sinit>
 801a222:	4b26      	ldr	r3, [pc, #152]	; (801a2bc <_fwrite_r+0xb4>)
 801a224:	429c      	cmp	r4, r3
 801a226:	d123      	bne.n	801a270 <_fwrite_r+0x68>
 801a228:	686c      	ldr	r4, [r5, #4]
 801a22a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a22c:	07de      	lsls	r6, r3, #31
 801a22e:	d405      	bmi.n	801a23c <_fwrite_r+0x34>
 801a230:	89a3      	ldrh	r3, [r4, #12]
 801a232:	0598      	lsls	r0, r3, #22
 801a234:	d402      	bmi.n	801a23c <_fwrite_r+0x34>
 801a236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a238:	f000 f879 	bl	801a32e <__retarget_lock_acquire_recursive>
 801a23c:	89a3      	ldrh	r3, [r4, #12]
 801a23e:	0719      	lsls	r1, r3, #28
 801a240:	d520      	bpl.n	801a284 <_fwrite_r+0x7c>
 801a242:	6923      	ldr	r3, [r4, #16]
 801a244:	b1f3      	cbz	r3, 801a284 <_fwrite_r+0x7c>
 801a246:	2600      	movs	r6, #0
 801a248:	4546      	cmp	r6, r8
 801a24a:	d029      	beq.n	801a2a0 <_fwrite_r+0x98>
 801a24c:	68a0      	ldr	r0, [r4, #8]
 801a24e:	f819 1006 	ldrb.w	r1, [r9, r6]
 801a252:	3801      	subs	r0, #1
 801a254:	2800      	cmp	r0, #0
 801a256:	60a0      	str	r0, [r4, #8]
 801a258:	da04      	bge.n	801a264 <_fwrite_r+0x5c>
 801a25a:	69a3      	ldr	r3, [r4, #24]
 801a25c:	4298      	cmp	r0, r3
 801a25e:	db19      	blt.n	801a294 <_fwrite_r+0x8c>
 801a260:	290a      	cmp	r1, #10
 801a262:	d017      	beq.n	801a294 <_fwrite_r+0x8c>
 801a264:	6823      	ldr	r3, [r4, #0]
 801a266:	1c5a      	adds	r2, r3, #1
 801a268:	6022      	str	r2, [r4, #0]
 801a26a:	7019      	strb	r1, [r3, #0]
 801a26c:	3601      	adds	r6, #1
 801a26e:	e7eb      	b.n	801a248 <_fwrite_r+0x40>
 801a270:	4b13      	ldr	r3, [pc, #76]	; (801a2c0 <_fwrite_r+0xb8>)
 801a272:	429c      	cmp	r4, r3
 801a274:	d101      	bne.n	801a27a <_fwrite_r+0x72>
 801a276:	68ac      	ldr	r4, [r5, #8]
 801a278:	e7d7      	b.n	801a22a <_fwrite_r+0x22>
 801a27a:	4b12      	ldr	r3, [pc, #72]	; (801a2c4 <_fwrite_r+0xbc>)
 801a27c:	429c      	cmp	r4, r3
 801a27e:	bf08      	it	eq
 801a280:	68ec      	ldreq	r4, [r5, #12]
 801a282:	e7d2      	b.n	801a22a <_fwrite_r+0x22>
 801a284:	4621      	mov	r1, r4
 801a286:	4628      	mov	r0, r5
 801a288:	f000 fd90 	bl	801adac <__swsetup_r>
 801a28c:	2800      	cmp	r0, #0
 801a28e:	d0da      	beq.n	801a246 <_fwrite_r+0x3e>
 801a290:	2600      	movs	r6, #0
 801a292:	e005      	b.n	801a2a0 <_fwrite_r+0x98>
 801a294:	4622      	mov	r2, r4
 801a296:	4628      	mov	r0, r5
 801a298:	f000 fd36 	bl	801ad08 <__swbuf_r>
 801a29c:	3001      	adds	r0, #1
 801a29e:	d1e5      	bne.n	801a26c <_fwrite_r+0x64>
 801a2a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a2a2:	07da      	lsls	r2, r3, #31
 801a2a4:	d405      	bmi.n	801a2b2 <_fwrite_r+0xaa>
 801a2a6:	89a3      	ldrh	r3, [r4, #12]
 801a2a8:	059b      	lsls	r3, r3, #22
 801a2aa:	d402      	bmi.n	801a2b2 <_fwrite_r+0xaa>
 801a2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a2ae:	f000 f840 	bl	801a332 <__retarget_lock_release_recursive>
 801a2b2:	fbb6 f0f7 	udiv	r0, r6, r7
 801a2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2ba:	bf00      	nop
 801a2bc:	0803d1b4 	.word	0x0803d1b4
 801a2c0:	0803d1d4 	.word	0x0803d1d4
 801a2c4:	0803d194 	.word	0x0803d194

0801a2c8 <fwrite>:
 801a2c8:	b507      	push	{r0, r1, r2, lr}
 801a2ca:	9300      	str	r3, [sp, #0]
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	460a      	mov	r2, r1
 801a2d0:	4601      	mov	r1, r0
 801a2d2:	4803      	ldr	r0, [pc, #12]	; (801a2e0 <fwrite+0x18>)
 801a2d4:	6800      	ldr	r0, [r0, #0]
 801a2d6:	f7ff ff97 	bl	801a208 <_fwrite_r>
 801a2da:	b003      	add	sp, #12
 801a2dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801a2e0:	20000330 	.word	0x20000330

0801a2e4 <__libc_init_array>:
 801a2e4:	b570      	push	{r4, r5, r6, lr}
 801a2e6:	4d0d      	ldr	r5, [pc, #52]	; (801a31c <__libc_init_array+0x38>)
 801a2e8:	4c0d      	ldr	r4, [pc, #52]	; (801a320 <__libc_init_array+0x3c>)
 801a2ea:	1b64      	subs	r4, r4, r5
 801a2ec:	10a4      	asrs	r4, r4, #2
 801a2ee:	2600      	movs	r6, #0
 801a2f0:	42a6      	cmp	r6, r4
 801a2f2:	d109      	bne.n	801a308 <__libc_init_array+0x24>
 801a2f4:	4d0b      	ldr	r5, [pc, #44]	; (801a324 <__libc_init_array+0x40>)
 801a2f6:	4c0c      	ldr	r4, [pc, #48]	; (801a328 <__libc_init_array+0x44>)
 801a2f8:	f001 fae4 	bl	801b8c4 <_init>
 801a2fc:	1b64      	subs	r4, r4, r5
 801a2fe:	10a4      	asrs	r4, r4, #2
 801a300:	2600      	movs	r6, #0
 801a302:	42a6      	cmp	r6, r4
 801a304:	d105      	bne.n	801a312 <__libc_init_array+0x2e>
 801a306:	bd70      	pop	{r4, r5, r6, pc}
 801a308:	f855 3b04 	ldr.w	r3, [r5], #4
 801a30c:	4798      	blx	r3
 801a30e:	3601      	adds	r6, #1
 801a310:	e7ee      	b.n	801a2f0 <__libc_init_array+0xc>
 801a312:	f855 3b04 	ldr.w	r3, [r5], #4
 801a316:	4798      	blx	r3
 801a318:	3601      	adds	r6, #1
 801a31a:	e7f2      	b.n	801a302 <__libc_init_array+0x1e>
 801a31c:	0803d1fc 	.word	0x0803d1fc
 801a320:	0803d1fc 	.word	0x0803d1fc
 801a324:	0803d1fc 	.word	0x0803d1fc
 801a328:	0803d204 	.word	0x0803d204

0801a32c <__retarget_lock_init_recursive>:
 801a32c:	4770      	bx	lr

0801a32e <__retarget_lock_acquire_recursive>:
 801a32e:	4770      	bx	lr

0801a330 <__retarget_lock_release>:
 801a330:	4770      	bx	lr

0801a332 <__retarget_lock_release_recursive>:
 801a332:	4770      	bx	lr

0801a334 <malloc>:
 801a334:	4b02      	ldr	r3, [pc, #8]	; (801a340 <malloc+0xc>)
 801a336:	4601      	mov	r1, r0
 801a338:	6818      	ldr	r0, [r3, #0]
 801a33a:	f000 b89b 	b.w	801a474 <_malloc_r>
 801a33e:	bf00      	nop
 801a340:	20000330 	.word	0x20000330

0801a344 <free>:
 801a344:	4b02      	ldr	r3, [pc, #8]	; (801a350 <free+0xc>)
 801a346:	4601      	mov	r1, r0
 801a348:	6818      	ldr	r0, [r3, #0]
 801a34a:	f000 b843 	b.w	801a3d4 <_free_r>
 801a34e:	bf00      	nop
 801a350:	20000330 	.word	0x20000330

0801a354 <memcpy>:
 801a354:	440a      	add	r2, r1
 801a356:	4291      	cmp	r1, r2
 801a358:	f100 33ff 	add.w	r3, r0, #4294967295
 801a35c:	d100      	bne.n	801a360 <memcpy+0xc>
 801a35e:	4770      	bx	lr
 801a360:	b510      	push	{r4, lr}
 801a362:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a366:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a36a:	4291      	cmp	r1, r2
 801a36c:	d1f9      	bne.n	801a362 <memcpy+0xe>
 801a36e:	bd10      	pop	{r4, pc}

0801a370 <memmove>:
 801a370:	4288      	cmp	r0, r1
 801a372:	b510      	push	{r4, lr}
 801a374:	eb01 0402 	add.w	r4, r1, r2
 801a378:	d902      	bls.n	801a380 <memmove+0x10>
 801a37a:	4284      	cmp	r4, r0
 801a37c:	4623      	mov	r3, r4
 801a37e:	d807      	bhi.n	801a390 <memmove+0x20>
 801a380:	1e43      	subs	r3, r0, #1
 801a382:	42a1      	cmp	r1, r4
 801a384:	d008      	beq.n	801a398 <memmove+0x28>
 801a386:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a38a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a38e:	e7f8      	b.n	801a382 <memmove+0x12>
 801a390:	4402      	add	r2, r0
 801a392:	4601      	mov	r1, r0
 801a394:	428a      	cmp	r2, r1
 801a396:	d100      	bne.n	801a39a <memmove+0x2a>
 801a398:	bd10      	pop	{r4, pc}
 801a39a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a39e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a3a2:	e7f7      	b.n	801a394 <memmove+0x24>

0801a3a4 <memset>:
 801a3a4:	4402      	add	r2, r0
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	4293      	cmp	r3, r2
 801a3aa:	d100      	bne.n	801a3ae <memset+0xa>
 801a3ac:	4770      	bx	lr
 801a3ae:	f803 1b01 	strb.w	r1, [r3], #1
 801a3b2:	e7f9      	b.n	801a3a8 <memset+0x4>

0801a3b4 <_calloc_r>:
 801a3b4:	b513      	push	{r0, r1, r4, lr}
 801a3b6:	434a      	muls	r2, r1
 801a3b8:	4611      	mov	r1, r2
 801a3ba:	9201      	str	r2, [sp, #4]
 801a3bc:	f000 f85a 	bl	801a474 <_malloc_r>
 801a3c0:	4604      	mov	r4, r0
 801a3c2:	b118      	cbz	r0, 801a3cc <_calloc_r+0x18>
 801a3c4:	9a01      	ldr	r2, [sp, #4]
 801a3c6:	2100      	movs	r1, #0
 801a3c8:	f7ff ffec 	bl	801a3a4 <memset>
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	b002      	add	sp, #8
 801a3d0:	bd10      	pop	{r4, pc}
	...

0801a3d4 <_free_r>:
 801a3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3d6:	2900      	cmp	r1, #0
 801a3d8:	d048      	beq.n	801a46c <_free_r+0x98>
 801a3da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3de:	9001      	str	r0, [sp, #4]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	f1a1 0404 	sub.w	r4, r1, #4
 801a3e6:	bfb8      	it	lt
 801a3e8:	18e4      	addlt	r4, r4, r3
 801a3ea:	f001 f829 	bl	801b440 <__malloc_lock>
 801a3ee:	4a20      	ldr	r2, [pc, #128]	; (801a470 <_free_r+0x9c>)
 801a3f0:	9801      	ldr	r0, [sp, #4]
 801a3f2:	6813      	ldr	r3, [r2, #0]
 801a3f4:	4615      	mov	r5, r2
 801a3f6:	b933      	cbnz	r3, 801a406 <_free_r+0x32>
 801a3f8:	6063      	str	r3, [r4, #4]
 801a3fa:	6014      	str	r4, [r2, #0]
 801a3fc:	b003      	add	sp, #12
 801a3fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a402:	f001 b823 	b.w	801b44c <__malloc_unlock>
 801a406:	42a3      	cmp	r3, r4
 801a408:	d90b      	bls.n	801a422 <_free_r+0x4e>
 801a40a:	6821      	ldr	r1, [r4, #0]
 801a40c:	1862      	adds	r2, r4, r1
 801a40e:	4293      	cmp	r3, r2
 801a410:	bf04      	itt	eq
 801a412:	681a      	ldreq	r2, [r3, #0]
 801a414:	685b      	ldreq	r3, [r3, #4]
 801a416:	6063      	str	r3, [r4, #4]
 801a418:	bf04      	itt	eq
 801a41a:	1852      	addeq	r2, r2, r1
 801a41c:	6022      	streq	r2, [r4, #0]
 801a41e:	602c      	str	r4, [r5, #0]
 801a420:	e7ec      	b.n	801a3fc <_free_r+0x28>
 801a422:	461a      	mov	r2, r3
 801a424:	685b      	ldr	r3, [r3, #4]
 801a426:	b10b      	cbz	r3, 801a42c <_free_r+0x58>
 801a428:	42a3      	cmp	r3, r4
 801a42a:	d9fa      	bls.n	801a422 <_free_r+0x4e>
 801a42c:	6811      	ldr	r1, [r2, #0]
 801a42e:	1855      	adds	r5, r2, r1
 801a430:	42a5      	cmp	r5, r4
 801a432:	d10b      	bne.n	801a44c <_free_r+0x78>
 801a434:	6824      	ldr	r4, [r4, #0]
 801a436:	4421      	add	r1, r4
 801a438:	1854      	adds	r4, r2, r1
 801a43a:	42a3      	cmp	r3, r4
 801a43c:	6011      	str	r1, [r2, #0]
 801a43e:	d1dd      	bne.n	801a3fc <_free_r+0x28>
 801a440:	681c      	ldr	r4, [r3, #0]
 801a442:	685b      	ldr	r3, [r3, #4]
 801a444:	6053      	str	r3, [r2, #4]
 801a446:	4421      	add	r1, r4
 801a448:	6011      	str	r1, [r2, #0]
 801a44a:	e7d7      	b.n	801a3fc <_free_r+0x28>
 801a44c:	d902      	bls.n	801a454 <_free_r+0x80>
 801a44e:	230c      	movs	r3, #12
 801a450:	6003      	str	r3, [r0, #0]
 801a452:	e7d3      	b.n	801a3fc <_free_r+0x28>
 801a454:	6825      	ldr	r5, [r4, #0]
 801a456:	1961      	adds	r1, r4, r5
 801a458:	428b      	cmp	r3, r1
 801a45a:	bf04      	itt	eq
 801a45c:	6819      	ldreq	r1, [r3, #0]
 801a45e:	685b      	ldreq	r3, [r3, #4]
 801a460:	6063      	str	r3, [r4, #4]
 801a462:	bf04      	itt	eq
 801a464:	1949      	addeq	r1, r1, r5
 801a466:	6021      	streq	r1, [r4, #0]
 801a468:	6054      	str	r4, [r2, #4]
 801a46a:	e7c7      	b.n	801a3fc <_free_r+0x28>
 801a46c:	b003      	add	sp, #12
 801a46e:	bd30      	pop	{r4, r5, pc}
 801a470:	200071f4 	.word	0x200071f4

0801a474 <_malloc_r>:
 801a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a476:	1ccd      	adds	r5, r1, #3
 801a478:	f025 0503 	bic.w	r5, r5, #3
 801a47c:	3508      	adds	r5, #8
 801a47e:	2d0c      	cmp	r5, #12
 801a480:	bf38      	it	cc
 801a482:	250c      	movcc	r5, #12
 801a484:	2d00      	cmp	r5, #0
 801a486:	4606      	mov	r6, r0
 801a488:	db01      	blt.n	801a48e <_malloc_r+0x1a>
 801a48a:	42a9      	cmp	r1, r5
 801a48c:	d903      	bls.n	801a496 <_malloc_r+0x22>
 801a48e:	230c      	movs	r3, #12
 801a490:	6033      	str	r3, [r6, #0]
 801a492:	2000      	movs	r0, #0
 801a494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a496:	f000 ffd3 	bl	801b440 <__malloc_lock>
 801a49a:	4921      	ldr	r1, [pc, #132]	; (801a520 <_malloc_r+0xac>)
 801a49c:	680a      	ldr	r2, [r1, #0]
 801a49e:	4614      	mov	r4, r2
 801a4a0:	b99c      	cbnz	r4, 801a4ca <_malloc_r+0x56>
 801a4a2:	4f20      	ldr	r7, [pc, #128]	; (801a524 <_malloc_r+0xb0>)
 801a4a4:	683b      	ldr	r3, [r7, #0]
 801a4a6:	b923      	cbnz	r3, 801a4b2 <_malloc_r+0x3e>
 801a4a8:	4621      	mov	r1, r4
 801a4aa:	4630      	mov	r0, r6
 801a4ac:	f000 fbb8 	bl	801ac20 <_sbrk_r>
 801a4b0:	6038      	str	r0, [r7, #0]
 801a4b2:	4629      	mov	r1, r5
 801a4b4:	4630      	mov	r0, r6
 801a4b6:	f000 fbb3 	bl	801ac20 <_sbrk_r>
 801a4ba:	1c43      	adds	r3, r0, #1
 801a4bc:	d123      	bne.n	801a506 <_malloc_r+0x92>
 801a4be:	230c      	movs	r3, #12
 801a4c0:	6033      	str	r3, [r6, #0]
 801a4c2:	4630      	mov	r0, r6
 801a4c4:	f000 ffc2 	bl	801b44c <__malloc_unlock>
 801a4c8:	e7e3      	b.n	801a492 <_malloc_r+0x1e>
 801a4ca:	6823      	ldr	r3, [r4, #0]
 801a4cc:	1b5b      	subs	r3, r3, r5
 801a4ce:	d417      	bmi.n	801a500 <_malloc_r+0x8c>
 801a4d0:	2b0b      	cmp	r3, #11
 801a4d2:	d903      	bls.n	801a4dc <_malloc_r+0x68>
 801a4d4:	6023      	str	r3, [r4, #0]
 801a4d6:	441c      	add	r4, r3
 801a4d8:	6025      	str	r5, [r4, #0]
 801a4da:	e004      	b.n	801a4e6 <_malloc_r+0x72>
 801a4dc:	6863      	ldr	r3, [r4, #4]
 801a4de:	42a2      	cmp	r2, r4
 801a4e0:	bf0c      	ite	eq
 801a4e2:	600b      	streq	r3, [r1, #0]
 801a4e4:	6053      	strne	r3, [r2, #4]
 801a4e6:	4630      	mov	r0, r6
 801a4e8:	f000 ffb0 	bl	801b44c <__malloc_unlock>
 801a4ec:	f104 000b 	add.w	r0, r4, #11
 801a4f0:	1d23      	adds	r3, r4, #4
 801a4f2:	f020 0007 	bic.w	r0, r0, #7
 801a4f6:	1ac2      	subs	r2, r0, r3
 801a4f8:	d0cc      	beq.n	801a494 <_malloc_r+0x20>
 801a4fa:	1a1b      	subs	r3, r3, r0
 801a4fc:	50a3      	str	r3, [r4, r2]
 801a4fe:	e7c9      	b.n	801a494 <_malloc_r+0x20>
 801a500:	4622      	mov	r2, r4
 801a502:	6864      	ldr	r4, [r4, #4]
 801a504:	e7cc      	b.n	801a4a0 <_malloc_r+0x2c>
 801a506:	1cc4      	adds	r4, r0, #3
 801a508:	f024 0403 	bic.w	r4, r4, #3
 801a50c:	42a0      	cmp	r0, r4
 801a50e:	d0e3      	beq.n	801a4d8 <_malloc_r+0x64>
 801a510:	1a21      	subs	r1, r4, r0
 801a512:	4630      	mov	r0, r6
 801a514:	f000 fb84 	bl	801ac20 <_sbrk_r>
 801a518:	3001      	adds	r0, #1
 801a51a:	d1dd      	bne.n	801a4d8 <_malloc_r+0x64>
 801a51c:	e7cf      	b.n	801a4be <_malloc_r+0x4a>
 801a51e:	bf00      	nop
 801a520:	200071f4 	.word	0x200071f4
 801a524:	200071f8 	.word	0x200071f8

0801a528 <__sfputc_r>:
 801a528:	6893      	ldr	r3, [r2, #8]
 801a52a:	3b01      	subs	r3, #1
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	b410      	push	{r4}
 801a530:	6093      	str	r3, [r2, #8]
 801a532:	da08      	bge.n	801a546 <__sfputc_r+0x1e>
 801a534:	6994      	ldr	r4, [r2, #24]
 801a536:	42a3      	cmp	r3, r4
 801a538:	db01      	blt.n	801a53e <__sfputc_r+0x16>
 801a53a:	290a      	cmp	r1, #10
 801a53c:	d103      	bne.n	801a546 <__sfputc_r+0x1e>
 801a53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a542:	f000 bbe1 	b.w	801ad08 <__swbuf_r>
 801a546:	6813      	ldr	r3, [r2, #0]
 801a548:	1c58      	adds	r0, r3, #1
 801a54a:	6010      	str	r0, [r2, #0]
 801a54c:	7019      	strb	r1, [r3, #0]
 801a54e:	4608      	mov	r0, r1
 801a550:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a554:	4770      	bx	lr

0801a556 <__sfputs_r>:
 801a556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a558:	4606      	mov	r6, r0
 801a55a:	460f      	mov	r7, r1
 801a55c:	4614      	mov	r4, r2
 801a55e:	18d5      	adds	r5, r2, r3
 801a560:	42ac      	cmp	r4, r5
 801a562:	d101      	bne.n	801a568 <__sfputs_r+0x12>
 801a564:	2000      	movs	r0, #0
 801a566:	e007      	b.n	801a578 <__sfputs_r+0x22>
 801a568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a56c:	463a      	mov	r2, r7
 801a56e:	4630      	mov	r0, r6
 801a570:	f7ff ffda 	bl	801a528 <__sfputc_r>
 801a574:	1c43      	adds	r3, r0, #1
 801a576:	d1f3      	bne.n	801a560 <__sfputs_r+0xa>
 801a578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a57c <_vfiprintf_r>:
 801a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a580:	460d      	mov	r5, r1
 801a582:	b09d      	sub	sp, #116	; 0x74
 801a584:	4614      	mov	r4, r2
 801a586:	4698      	mov	r8, r3
 801a588:	4606      	mov	r6, r0
 801a58a:	b118      	cbz	r0, 801a594 <_vfiprintf_r+0x18>
 801a58c:	6983      	ldr	r3, [r0, #24]
 801a58e:	b90b      	cbnz	r3, 801a594 <_vfiprintf_r+0x18>
 801a590:	f000 fe54 	bl	801b23c <__sinit>
 801a594:	4b89      	ldr	r3, [pc, #548]	; (801a7bc <_vfiprintf_r+0x240>)
 801a596:	429d      	cmp	r5, r3
 801a598:	d11b      	bne.n	801a5d2 <_vfiprintf_r+0x56>
 801a59a:	6875      	ldr	r5, [r6, #4]
 801a59c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a59e:	07d9      	lsls	r1, r3, #31
 801a5a0:	d405      	bmi.n	801a5ae <_vfiprintf_r+0x32>
 801a5a2:	89ab      	ldrh	r3, [r5, #12]
 801a5a4:	059a      	lsls	r2, r3, #22
 801a5a6:	d402      	bmi.n	801a5ae <_vfiprintf_r+0x32>
 801a5a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5aa:	f7ff fec0 	bl	801a32e <__retarget_lock_acquire_recursive>
 801a5ae:	89ab      	ldrh	r3, [r5, #12]
 801a5b0:	071b      	lsls	r3, r3, #28
 801a5b2:	d501      	bpl.n	801a5b8 <_vfiprintf_r+0x3c>
 801a5b4:	692b      	ldr	r3, [r5, #16]
 801a5b6:	b9eb      	cbnz	r3, 801a5f4 <_vfiprintf_r+0x78>
 801a5b8:	4629      	mov	r1, r5
 801a5ba:	4630      	mov	r0, r6
 801a5bc:	f000 fbf6 	bl	801adac <__swsetup_r>
 801a5c0:	b1c0      	cbz	r0, 801a5f4 <_vfiprintf_r+0x78>
 801a5c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5c4:	07dc      	lsls	r4, r3, #31
 801a5c6:	d50e      	bpl.n	801a5e6 <_vfiprintf_r+0x6a>
 801a5c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a5cc:	b01d      	add	sp, #116	; 0x74
 801a5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5d2:	4b7b      	ldr	r3, [pc, #492]	; (801a7c0 <_vfiprintf_r+0x244>)
 801a5d4:	429d      	cmp	r5, r3
 801a5d6:	d101      	bne.n	801a5dc <_vfiprintf_r+0x60>
 801a5d8:	68b5      	ldr	r5, [r6, #8]
 801a5da:	e7df      	b.n	801a59c <_vfiprintf_r+0x20>
 801a5dc:	4b79      	ldr	r3, [pc, #484]	; (801a7c4 <_vfiprintf_r+0x248>)
 801a5de:	429d      	cmp	r5, r3
 801a5e0:	bf08      	it	eq
 801a5e2:	68f5      	ldreq	r5, [r6, #12]
 801a5e4:	e7da      	b.n	801a59c <_vfiprintf_r+0x20>
 801a5e6:	89ab      	ldrh	r3, [r5, #12]
 801a5e8:	0598      	lsls	r0, r3, #22
 801a5ea:	d4ed      	bmi.n	801a5c8 <_vfiprintf_r+0x4c>
 801a5ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5ee:	f7ff fea0 	bl	801a332 <__retarget_lock_release_recursive>
 801a5f2:	e7e9      	b.n	801a5c8 <_vfiprintf_r+0x4c>
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a5f8:	2320      	movs	r3, #32
 801a5fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a5fe:	f8cd 800c 	str.w	r8, [sp, #12]
 801a602:	2330      	movs	r3, #48	; 0x30
 801a604:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a7c8 <_vfiprintf_r+0x24c>
 801a608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a60c:	f04f 0901 	mov.w	r9, #1
 801a610:	4623      	mov	r3, r4
 801a612:	469a      	mov	sl, r3
 801a614:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a618:	b10a      	cbz	r2, 801a61e <_vfiprintf_r+0xa2>
 801a61a:	2a25      	cmp	r2, #37	; 0x25
 801a61c:	d1f9      	bne.n	801a612 <_vfiprintf_r+0x96>
 801a61e:	ebba 0b04 	subs.w	fp, sl, r4
 801a622:	d00b      	beq.n	801a63c <_vfiprintf_r+0xc0>
 801a624:	465b      	mov	r3, fp
 801a626:	4622      	mov	r2, r4
 801a628:	4629      	mov	r1, r5
 801a62a:	4630      	mov	r0, r6
 801a62c:	f7ff ff93 	bl	801a556 <__sfputs_r>
 801a630:	3001      	adds	r0, #1
 801a632:	f000 80aa 	beq.w	801a78a <_vfiprintf_r+0x20e>
 801a636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a638:	445a      	add	r2, fp
 801a63a:	9209      	str	r2, [sp, #36]	; 0x24
 801a63c:	f89a 3000 	ldrb.w	r3, [sl]
 801a640:	2b00      	cmp	r3, #0
 801a642:	f000 80a2 	beq.w	801a78a <_vfiprintf_r+0x20e>
 801a646:	2300      	movs	r3, #0
 801a648:	f04f 32ff 	mov.w	r2, #4294967295
 801a64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a650:	f10a 0a01 	add.w	sl, sl, #1
 801a654:	9304      	str	r3, [sp, #16]
 801a656:	9307      	str	r3, [sp, #28]
 801a658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a65c:	931a      	str	r3, [sp, #104]	; 0x68
 801a65e:	4654      	mov	r4, sl
 801a660:	2205      	movs	r2, #5
 801a662:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a666:	4858      	ldr	r0, [pc, #352]	; (801a7c8 <_vfiprintf_r+0x24c>)
 801a668:	f7e5 fdda 	bl	8000220 <memchr>
 801a66c:	9a04      	ldr	r2, [sp, #16]
 801a66e:	b9d8      	cbnz	r0, 801a6a8 <_vfiprintf_r+0x12c>
 801a670:	06d1      	lsls	r1, r2, #27
 801a672:	bf44      	itt	mi
 801a674:	2320      	movmi	r3, #32
 801a676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a67a:	0713      	lsls	r3, r2, #28
 801a67c:	bf44      	itt	mi
 801a67e:	232b      	movmi	r3, #43	; 0x2b
 801a680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a684:	f89a 3000 	ldrb.w	r3, [sl]
 801a688:	2b2a      	cmp	r3, #42	; 0x2a
 801a68a:	d015      	beq.n	801a6b8 <_vfiprintf_r+0x13c>
 801a68c:	9a07      	ldr	r2, [sp, #28]
 801a68e:	4654      	mov	r4, sl
 801a690:	2000      	movs	r0, #0
 801a692:	f04f 0c0a 	mov.w	ip, #10
 801a696:	4621      	mov	r1, r4
 801a698:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a69c:	3b30      	subs	r3, #48	; 0x30
 801a69e:	2b09      	cmp	r3, #9
 801a6a0:	d94e      	bls.n	801a740 <_vfiprintf_r+0x1c4>
 801a6a2:	b1b0      	cbz	r0, 801a6d2 <_vfiprintf_r+0x156>
 801a6a4:	9207      	str	r2, [sp, #28]
 801a6a6:	e014      	b.n	801a6d2 <_vfiprintf_r+0x156>
 801a6a8:	eba0 0308 	sub.w	r3, r0, r8
 801a6ac:	fa09 f303 	lsl.w	r3, r9, r3
 801a6b0:	4313      	orrs	r3, r2
 801a6b2:	9304      	str	r3, [sp, #16]
 801a6b4:	46a2      	mov	sl, r4
 801a6b6:	e7d2      	b.n	801a65e <_vfiprintf_r+0xe2>
 801a6b8:	9b03      	ldr	r3, [sp, #12]
 801a6ba:	1d19      	adds	r1, r3, #4
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	9103      	str	r1, [sp, #12]
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	bfbb      	ittet	lt
 801a6c4:	425b      	neglt	r3, r3
 801a6c6:	f042 0202 	orrlt.w	r2, r2, #2
 801a6ca:	9307      	strge	r3, [sp, #28]
 801a6cc:	9307      	strlt	r3, [sp, #28]
 801a6ce:	bfb8      	it	lt
 801a6d0:	9204      	strlt	r2, [sp, #16]
 801a6d2:	7823      	ldrb	r3, [r4, #0]
 801a6d4:	2b2e      	cmp	r3, #46	; 0x2e
 801a6d6:	d10c      	bne.n	801a6f2 <_vfiprintf_r+0x176>
 801a6d8:	7863      	ldrb	r3, [r4, #1]
 801a6da:	2b2a      	cmp	r3, #42	; 0x2a
 801a6dc:	d135      	bne.n	801a74a <_vfiprintf_r+0x1ce>
 801a6de:	9b03      	ldr	r3, [sp, #12]
 801a6e0:	1d1a      	adds	r2, r3, #4
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	9203      	str	r2, [sp, #12]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	bfb8      	it	lt
 801a6ea:	f04f 33ff 	movlt.w	r3, #4294967295
 801a6ee:	3402      	adds	r4, #2
 801a6f0:	9305      	str	r3, [sp, #20]
 801a6f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a7d8 <_vfiprintf_r+0x25c>
 801a6f6:	7821      	ldrb	r1, [r4, #0]
 801a6f8:	2203      	movs	r2, #3
 801a6fa:	4650      	mov	r0, sl
 801a6fc:	f7e5 fd90 	bl	8000220 <memchr>
 801a700:	b140      	cbz	r0, 801a714 <_vfiprintf_r+0x198>
 801a702:	2340      	movs	r3, #64	; 0x40
 801a704:	eba0 000a 	sub.w	r0, r0, sl
 801a708:	fa03 f000 	lsl.w	r0, r3, r0
 801a70c:	9b04      	ldr	r3, [sp, #16]
 801a70e:	4303      	orrs	r3, r0
 801a710:	3401      	adds	r4, #1
 801a712:	9304      	str	r3, [sp, #16]
 801a714:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a718:	482c      	ldr	r0, [pc, #176]	; (801a7cc <_vfiprintf_r+0x250>)
 801a71a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a71e:	2206      	movs	r2, #6
 801a720:	f7e5 fd7e 	bl	8000220 <memchr>
 801a724:	2800      	cmp	r0, #0
 801a726:	d03f      	beq.n	801a7a8 <_vfiprintf_r+0x22c>
 801a728:	4b29      	ldr	r3, [pc, #164]	; (801a7d0 <_vfiprintf_r+0x254>)
 801a72a:	bb1b      	cbnz	r3, 801a774 <_vfiprintf_r+0x1f8>
 801a72c:	9b03      	ldr	r3, [sp, #12]
 801a72e:	3307      	adds	r3, #7
 801a730:	f023 0307 	bic.w	r3, r3, #7
 801a734:	3308      	adds	r3, #8
 801a736:	9303      	str	r3, [sp, #12]
 801a738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a73a:	443b      	add	r3, r7
 801a73c:	9309      	str	r3, [sp, #36]	; 0x24
 801a73e:	e767      	b.n	801a610 <_vfiprintf_r+0x94>
 801a740:	fb0c 3202 	mla	r2, ip, r2, r3
 801a744:	460c      	mov	r4, r1
 801a746:	2001      	movs	r0, #1
 801a748:	e7a5      	b.n	801a696 <_vfiprintf_r+0x11a>
 801a74a:	2300      	movs	r3, #0
 801a74c:	3401      	adds	r4, #1
 801a74e:	9305      	str	r3, [sp, #20]
 801a750:	4619      	mov	r1, r3
 801a752:	f04f 0c0a 	mov.w	ip, #10
 801a756:	4620      	mov	r0, r4
 801a758:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a75c:	3a30      	subs	r2, #48	; 0x30
 801a75e:	2a09      	cmp	r2, #9
 801a760:	d903      	bls.n	801a76a <_vfiprintf_r+0x1ee>
 801a762:	2b00      	cmp	r3, #0
 801a764:	d0c5      	beq.n	801a6f2 <_vfiprintf_r+0x176>
 801a766:	9105      	str	r1, [sp, #20]
 801a768:	e7c3      	b.n	801a6f2 <_vfiprintf_r+0x176>
 801a76a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a76e:	4604      	mov	r4, r0
 801a770:	2301      	movs	r3, #1
 801a772:	e7f0      	b.n	801a756 <_vfiprintf_r+0x1da>
 801a774:	ab03      	add	r3, sp, #12
 801a776:	9300      	str	r3, [sp, #0]
 801a778:	462a      	mov	r2, r5
 801a77a:	4b16      	ldr	r3, [pc, #88]	; (801a7d4 <_vfiprintf_r+0x258>)
 801a77c:	a904      	add	r1, sp, #16
 801a77e:	4630      	mov	r0, r6
 801a780:	f3af 8000 	nop.w
 801a784:	4607      	mov	r7, r0
 801a786:	1c78      	adds	r0, r7, #1
 801a788:	d1d6      	bne.n	801a738 <_vfiprintf_r+0x1bc>
 801a78a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a78c:	07d9      	lsls	r1, r3, #31
 801a78e:	d405      	bmi.n	801a79c <_vfiprintf_r+0x220>
 801a790:	89ab      	ldrh	r3, [r5, #12]
 801a792:	059a      	lsls	r2, r3, #22
 801a794:	d402      	bmi.n	801a79c <_vfiprintf_r+0x220>
 801a796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a798:	f7ff fdcb 	bl	801a332 <__retarget_lock_release_recursive>
 801a79c:	89ab      	ldrh	r3, [r5, #12]
 801a79e:	065b      	lsls	r3, r3, #25
 801a7a0:	f53f af12 	bmi.w	801a5c8 <_vfiprintf_r+0x4c>
 801a7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7a6:	e711      	b.n	801a5cc <_vfiprintf_r+0x50>
 801a7a8:	ab03      	add	r3, sp, #12
 801a7aa:	9300      	str	r3, [sp, #0]
 801a7ac:	462a      	mov	r2, r5
 801a7ae:	4b09      	ldr	r3, [pc, #36]	; (801a7d4 <_vfiprintf_r+0x258>)
 801a7b0:	a904      	add	r1, sp, #16
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	f000 f880 	bl	801a8b8 <_printf_i>
 801a7b8:	e7e4      	b.n	801a784 <_vfiprintf_r+0x208>
 801a7ba:	bf00      	nop
 801a7bc:	0803d1b4 	.word	0x0803d1b4
 801a7c0:	0803d1d4 	.word	0x0803d1d4
 801a7c4:	0803d194 	.word	0x0803d194
 801a7c8:	0803d160 	.word	0x0803d160
 801a7cc:	0803d16a 	.word	0x0803d16a
 801a7d0:	00000000 	.word	0x00000000
 801a7d4:	0801a557 	.word	0x0801a557
 801a7d8:	0803d166 	.word	0x0803d166

0801a7dc <_printf_common>:
 801a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7e0:	4616      	mov	r6, r2
 801a7e2:	4699      	mov	r9, r3
 801a7e4:	688a      	ldr	r2, [r1, #8]
 801a7e6:	690b      	ldr	r3, [r1, #16]
 801a7e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a7ec:	4293      	cmp	r3, r2
 801a7ee:	bfb8      	it	lt
 801a7f0:	4613      	movlt	r3, r2
 801a7f2:	6033      	str	r3, [r6, #0]
 801a7f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a7f8:	4607      	mov	r7, r0
 801a7fa:	460c      	mov	r4, r1
 801a7fc:	b10a      	cbz	r2, 801a802 <_printf_common+0x26>
 801a7fe:	3301      	adds	r3, #1
 801a800:	6033      	str	r3, [r6, #0]
 801a802:	6823      	ldr	r3, [r4, #0]
 801a804:	0699      	lsls	r1, r3, #26
 801a806:	bf42      	ittt	mi
 801a808:	6833      	ldrmi	r3, [r6, #0]
 801a80a:	3302      	addmi	r3, #2
 801a80c:	6033      	strmi	r3, [r6, #0]
 801a80e:	6825      	ldr	r5, [r4, #0]
 801a810:	f015 0506 	ands.w	r5, r5, #6
 801a814:	d106      	bne.n	801a824 <_printf_common+0x48>
 801a816:	f104 0a19 	add.w	sl, r4, #25
 801a81a:	68e3      	ldr	r3, [r4, #12]
 801a81c:	6832      	ldr	r2, [r6, #0]
 801a81e:	1a9b      	subs	r3, r3, r2
 801a820:	42ab      	cmp	r3, r5
 801a822:	dc26      	bgt.n	801a872 <_printf_common+0x96>
 801a824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a828:	1e13      	subs	r3, r2, #0
 801a82a:	6822      	ldr	r2, [r4, #0]
 801a82c:	bf18      	it	ne
 801a82e:	2301      	movne	r3, #1
 801a830:	0692      	lsls	r2, r2, #26
 801a832:	d42b      	bmi.n	801a88c <_printf_common+0xb0>
 801a834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a838:	4649      	mov	r1, r9
 801a83a:	4638      	mov	r0, r7
 801a83c:	47c0      	blx	r8
 801a83e:	3001      	adds	r0, #1
 801a840:	d01e      	beq.n	801a880 <_printf_common+0xa4>
 801a842:	6823      	ldr	r3, [r4, #0]
 801a844:	68e5      	ldr	r5, [r4, #12]
 801a846:	6832      	ldr	r2, [r6, #0]
 801a848:	f003 0306 	and.w	r3, r3, #6
 801a84c:	2b04      	cmp	r3, #4
 801a84e:	bf08      	it	eq
 801a850:	1aad      	subeq	r5, r5, r2
 801a852:	68a3      	ldr	r3, [r4, #8]
 801a854:	6922      	ldr	r2, [r4, #16]
 801a856:	bf0c      	ite	eq
 801a858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a85c:	2500      	movne	r5, #0
 801a85e:	4293      	cmp	r3, r2
 801a860:	bfc4      	itt	gt
 801a862:	1a9b      	subgt	r3, r3, r2
 801a864:	18ed      	addgt	r5, r5, r3
 801a866:	2600      	movs	r6, #0
 801a868:	341a      	adds	r4, #26
 801a86a:	42b5      	cmp	r5, r6
 801a86c:	d11a      	bne.n	801a8a4 <_printf_common+0xc8>
 801a86e:	2000      	movs	r0, #0
 801a870:	e008      	b.n	801a884 <_printf_common+0xa8>
 801a872:	2301      	movs	r3, #1
 801a874:	4652      	mov	r2, sl
 801a876:	4649      	mov	r1, r9
 801a878:	4638      	mov	r0, r7
 801a87a:	47c0      	blx	r8
 801a87c:	3001      	adds	r0, #1
 801a87e:	d103      	bne.n	801a888 <_printf_common+0xac>
 801a880:	f04f 30ff 	mov.w	r0, #4294967295
 801a884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a888:	3501      	adds	r5, #1
 801a88a:	e7c6      	b.n	801a81a <_printf_common+0x3e>
 801a88c:	18e1      	adds	r1, r4, r3
 801a88e:	1c5a      	adds	r2, r3, #1
 801a890:	2030      	movs	r0, #48	; 0x30
 801a892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a896:	4422      	add	r2, r4
 801a898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a89c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a8a0:	3302      	adds	r3, #2
 801a8a2:	e7c7      	b.n	801a834 <_printf_common+0x58>
 801a8a4:	2301      	movs	r3, #1
 801a8a6:	4622      	mov	r2, r4
 801a8a8:	4649      	mov	r1, r9
 801a8aa:	4638      	mov	r0, r7
 801a8ac:	47c0      	blx	r8
 801a8ae:	3001      	adds	r0, #1
 801a8b0:	d0e6      	beq.n	801a880 <_printf_common+0xa4>
 801a8b2:	3601      	adds	r6, #1
 801a8b4:	e7d9      	b.n	801a86a <_printf_common+0x8e>
	...

0801a8b8 <_printf_i>:
 801a8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a8bc:	460c      	mov	r4, r1
 801a8be:	4691      	mov	r9, r2
 801a8c0:	7e27      	ldrb	r7, [r4, #24]
 801a8c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a8c4:	2f78      	cmp	r7, #120	; 0x78
 801a8c6:	4680      	mov	r8, r0
 801a8c8:	469a      	mov	sl, r3
 801a8ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a8ce:	d807      	bhi.n	801a8e0 <_printf_i+0x28>
 801a8d0:	2f62      	cmp	r7, #98	; 0x62
 801a8d2:	d80a      	bhi.n	801a8ea <_printf_i+0x32>
 801a8d4:	2f00      	cmp	r7, #0
 801a8d6:	f000 80d8 	beq.w	801aa8a <_printf_i+0x1d2>
 801a8da:	2f58      	cmp	r7, #88	; 0x58
 801a8dc:	f000 80a3 	beq.w	801aa26 <_printf_i+0x16e>
 801a8e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a8e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a8e8:	e03a      	b.n	801a960 <_printf_i+0xa8>
 801a8ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a8ee:	2b15      	cmp	r3, #21
 801a8f0:	d8f6      	bhi.n	801a8e0 <_printf_i+0x28>
 801a8f2:	a001      	add	r0, pc, #4	; (adr r0, 801a8f8 <_printf_i+0x40>)
 801a8f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a8f8:	0801a951 	.word	0x0801a951
 801a8fc:	0801a965 	.word	0x0801a965
 801a900:	0801a8e1 	.word	0x0801a8e1
 801a904:	0801a8e1 	.word	0x0801a8e1
 801a908:	0801a8e1 	.word	0x0801a8e1
 801a90c:	0801a8e1 	.word	0x0801a8e1
 801a910:	0801a965 	.word	0x0801a965
 801a914:	0801a8e1 	.word	0x0801a8e1
 801a918:	0801a8e1 	.word	0x0801a8e1
 801a91c:	0801a8e1 	.word	0x0801a8e1
 801a920:	0801a8e1 	.word	0x0801a8e1
 801a924:	0801aa71 	.word	0x0801aa71
 801a928:	0801a995 	.word	0x0801a995
 801a92c:	0801aa53 	.word	0x0801aa53
 801a930:	0801a8e1 	.word	0x0801a8e1
 801a934:	0801a8e1 	.word	0x0801a8e1
 801a938:	0801aa93 	.word	0x0801aa93
 801a93c:	0801a8e1 	.word	0x0801a8e1
 801a940:	0801a995 	.word	0x0801a995
 801a944:	0801a8e1 	.word	0x0801a8e1
 801a948:	0801a8e1 	.word	0x0801a8e1
 801a94c:	0801aa5b 	.word	0x0801aa5b
 801a950:	680b      	ldr	r3, [r1, #0]
 801a952:	1d1a      	adds	r2, r3, #4
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	600a      	str	r2, [r1, #0]
 801a958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a95c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a960:	2301      	movs	r3, #1
 801a962:	e0a3      	b.n	801aaac <_printf_i+0x1f4>
 801a964:	6825      	ldr	r5, [r4, #0]
 801a966:	6808      	ldr	r0, [r1, #0]
 801a968:	062e      	lsls	r6, r5, #24
 801a96a:	f100 0304 	add.w	r3, r0, #4
 801a96e:	d50a      	bpl.n	801a986 <_printf_i+0xce>
 801a970:	6805      	ldr	r5, [r0, #0]
 801a972:	600b      	str	r3, [r1, #0]
 801a974:	2d00      	cmp	r5, #0
 801a976:	da03      	bge.n	801a980 <_printf_i+0xc8>
 801a978:	232d      	movs	r3, #45	; 0x2d
 801a97a:	426d      	negs	r5, r5
 801a97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a980:	485e      	ldr	r0, [pc, #376]	; (801aafc <_printf_i+0x244>)
 801a982:	230a      	movs	r3, #10
 801a984:	e019      	b.n	801a9ba <_printf_i+0x102>
 801a986:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a98a:	6805      	ldr	r5, [r0, #0]
 801a98c:	600b      	str	r3, [r1, #0]
 801a98e:	bf18      	it	ne
 801a990:	b22d      	sxthne	r5, r5
 801a992:	e7ef      	b.n	801a974 <_printf_i+0xbc>
 801a994:	680b      	ldr	r3, [r1, #0]
 801a996:	6825      	ldr	r5, [r4, #0]
 801a998:	1d18      	adds	r0, r3, #4
 801a99a:	6008      	str	r0, [r1, #0]
 801a99c:	0628      	lsls	r0, r5, #24
 801a99e:	d501      	bpl.n	801a9a4 <_printf_i+0xec>
 801a9a0:	681d      	ldr	r5, [r3, #0]
 801a9a2:	e002      	b.n	801a9aa <_printf_i+0xf2>
 801a9a4:	0669      	lsls	r1, r5, #25
 801a9a6:	d5fb      	bpl.n	801a9a0 <_printf_i+0xe8>
 801a9a8:	881d      	ldrh	r5, [r3, #0]
 801a9aa:	4854      	ldr	r0, [pc, #336]	; (801aafc <_printf_i+0x244>)
 801a9ac:	2f6f      	cmp	r7, #111	; 0x6f
 801a9ae:	bf0c      	ite	eq
 801a9b0:	2308      	moveq	r3, #8
 801a9b2:	230a      	movne	r3, #10
 801a9b4:	2100      	movs	r1, #0
 801a9b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a9ba:	6866      	ldr	r6, [r4, #4]
 801a9bc:	60a6      	str	r6, [r4, #8]
 801a9be:	2e00      	cmp	r6, #0
 801a9c0:	bfa2      	ittt	ge
 801a9c2:	6821      	ldrge	r1, [r4, #0]
 801a9c4:	f021 0104 	bicge.w	r1, r1, #4
 801a9c8:	6021      	strge	r1, [r4, #0]
 801a9ca:	b90d      	cbnz	r5, 801a9d0 <_printf_i+0x118>
 801a9cc:	2e00      	cmp	r6, #0
 801a9ce:	d04d      	beq.n	801aa6c <_printf_i+0x1b4>
 801a9d0:	4616      	mov	r6, r2
 801a9d2:	fbb5 f1f3 	udiv	r1, r5, r3
 801a9d6:	fb03 5711 	mls	r7, r3, r1, r5
 801a9da:	5dc7      	ldrb	r7, [r0, r7]
 801a9dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a9e0:	462f      	mov	r7, r5
 801a9e2:	42bb      	cmp	r3, r7
 801a9e4:	460d      	mov	r5, r1
 801a9e6:	d9f4      	bls.n	801a9d2 <_printf_i+0x11a>
 801a9e8:	2b08      	cmp	r3, #8
 801a9ea:	d10b      	bne.n	801aa04 <_printf_i+0x14c>
 801a9ec:	6823      	ldr	r3, [r4, #0]
 801a9ee:	07df      	lsls	r7, r3, #31
 801a9f0:	d508      	bpl.n	801aa04 <_printf_i+0x14c>
 801a9f2:	6923      	ldr	r3, [r4, #16]
 801a9f4:	6861      	ldr	r1, [r4, #4]
 801a9f6:	4299      	cmp	r1, r3
 801a9f8:	bfde      	ittt	le
 801a9fa:	2330      	movle	r3, #48	; 0x30
 801a9fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801aa00:	f106 36ff 	addle.w	r6, r6, #4294967295
 801aa04:	1b92      	subs	r2, r2, r6
 801aa06:	6122      	str	r2, [r4, #16]
 801aa08:	f8cd a000 	str.w	sl, [sp]
 801aa0c:	464b      	mov	r3, r9
 801aa0e:	aa03      	add	r2, sp, #12
 801aa10:	4621      	mov	r1, r4
 801aa12:	4640      	mov	r0, r8
 801aa14:	f7ff fee2 	bl	801a7dc <_printf_common>
 801aa18:	3001      	adds	r0, #1
 801aa1a:	d14c      	bne.n	801aab6 <_printf_i+0x1fe>
 801aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 801aa20:	b004      	add	sp, #16
 801aa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa26:	4835      	ldr	r0, [pc, #212]	; (801aafc <_printf_i+0x244>)
 801aa28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801aa2c:	6823      	ldr	r3, [r4, #0]
 801aa2e:	680e      	ldr	r6, [r1, #0]
 801aa30:	061f      	lsls	r7, r3, #24
 801aa32:	f856 5b04 	ldr.w	r5, [r6], #4
 801aa36:	600e      	str	r6, [r1, #0]
 801aa38:	d514      	bpl.n	801aa64 <_printf_i+0x1ac>
 801aa3a:	07d9      	lsls	r1, r3, #31
 801aa3c:	bf44      	itt	mi
 801aa3e:	f043 0320 	orrmi.w	r3, r3, #32
 801aa42:	6023      	strmi	r3, [r4, #0]
 801aa44:	b91d      	cbnz	r5, 801aa4e <_printf_i+0x196>
 801aa46:	6823      	ldr	r3, [r4, #0]
 801aa48:	f023 0320 	bic.w	r3, r3, #32
 801aa4c:	6023      	str	r3, [r4, #0]
 801aa4e:	2310      	movs	r3, #16
 801aa50:	e7b0      	b.n	801a9b4 <_printf_i+0xfc>
 801aa52:	6823      	ldr	r3, [r4, #0]
 801aa54:	f043 0320 	orr.w	r3, r3, #32
 801aa58:	6023      	str	r3, [r4, #0]
 801aa5a:	2378      	movs	r3, #120	; 0x78
 801aa5c:	4828      	ldr	r0, [pc, #160]	; (801ab00 <_printf_i+0x248>)
 801aa5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aa62:	e7e3      	b.n	801aa2c <_printf_i+0x174>
 801aa64:	065e      	lsls	r6, r3, #25
 801aa66:	bf48      	it	mi
 801aa68:	b2ad      	uxthmi	r5, r5
 801aa6a:	e7e6      	b.n	801aa3a <_printf_i+0x182>
 801aa6c:	4616      	mov	r6, r2
 801aa6e:	e7bb      	b.n	801a9e8 <_printf_i+0x130>
 801aa70:	680b      	ldr	r3, [r1, #0]
 801aa72:	6826      	ldr	r6, [r4, #0]
 801aa74:	6960      	ldr	r0, [r4, #20]
 801aa76:	1d1d      	adds	r5, r3, #4
 801aa78:	600d      	str	r5, [r1, #0]
 801aa7a:	0635      	lsls	r5, r6, #24
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	d501      	bpl.n	801aa84 <_printf_i+0x1cc>
 801aa80:	6018      	str	r0, [r3, #0]
 801aa82:	e002      	b.n	801aa8a <_printf_i+0x1d2>
 801aa84:	0671      	lsls	r1, r6, #25
 801aa86:	d5fb      	bpl.n	801aa80 <_printf_i+0x1c8>
 801aa88:	8018      	strh	r0, [r3, #0]
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	6123      	str	r3, [r4, #16]
 801aa8e:	4616      	mov	r6, r2
 801aa90:	e7ba      	b.n	801aa08 <_printf_i+0x150>
 801aa92:	680b      	ldr	r3, [r1, #0]
 801aa94:	1d1a      	adds	r2, r3, #4
 801aa96:	600a      	str	r2, [r1, #0]
 801aa98:	681e      	ldr	r6, [r3, #0]
 801aa9a:	6862      	ldr	r2, [r4, #4]
 801aa9c:	2100      	movs	r1, #0
 801aa9e:	4630      	mov	r0, r6
 801aaa0:	f7e5 fbbe 	bl	8000220 <memchr>
 801aaa4:	b108      	cbz	r0, 801aaaa <_printf_i+0x1f2>
 801aaa6:	1b80      	subs	r0, r0, r6
 801aaa8:	6060      	str	r0, [r4, #4]
 801aaaa:	6863      	ldr	r3, [r4, #4]
 801aaac:	6123      	str	r3, [r4, #16]
 801aaae:	2300      	movs	r3, #0
 801aab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aab4:	e7a8      	b.n	801aa08 <_printf_i+0x150>
 801aab6:	6923      	ldr	r3, [r4, #16]
 801aab8:	4632      	mov	r2, r6
 801aaba:	4649      	mov	r1, r9
 801aabc:	4640      	mov	r0, r8
 801aabe:	47d0      	blx	sl
 801aac0:	3001      	adds	r0, #1
 801aac2:	d0ab      	beq.n	801aa1c <_printf_i+0x164>
 801aac4:	6823      	ldr	r3, [r4, #0]
 801aac6:	079b      	lsls	r3, r3, #30
 801aac8:	d413      	bmi.n	801aaf2 <_printf_i+0x23a>
 801aaca:	68e0      	ldr	r0, [r4, #12]
 801aacc:	9b03      	ldr	r3, [sp, #12]
 801aace:	4298      	cmp	r0, r3
 801aad0:	bfb8      	it	lt
 801aad2:	4618      	movlt	r0, r3
 801aad4:	e7a4      	b.n	801aa20 <_printf_i+0x168>
 801aad6:	2301      	movs	r3, #1
 801aad8:	4632      	mov	r2, r6
 801aada:	4649      	mov	r1, r9
 801aadc:	4640      	mov	r0, r8
 801aade:	47d0      	blx	sl
 801aae0:	3001      	adds	r0, #1
 801aae2:	d09b      	beq.n	801aa1c <_printf_i+0x164>
 801aae4:	3501      	adds	r5, #1
 801aae6:	68e3      	ldr	r3, [r4, #12]
 801aae8:	9903      	ldr	r1, [sp, #12]
 801aaea:	1a5b      	subs	r3, r3, r1
 801aaec:	42ab      	cmp	r3, r5
 801aaee:	dcf2      	bgt.n	801aad6 <_printf_i+0x21e>
 801aaf0:	e7eb      	b.n	801aaca <_printf_i+0x212>
 801aaf2:	2500      	movs	r5, #0
 801aaf4:	f104 0619 	add.w	r6, r4, #25
 801aaf8:	e7f5      	b.n	801aae6 <_printf_i+0x22e>
 801aafa:	bf00      	nop
 801aafc:	0803d171 	.word	0x0803d171
 801ab00:	0803d182 	.word	0x0803d182

0801ab04 <iprintf>:
 801ab04:	b40f      	push	{r0, r1, r2, r3}
 801ab06:	4b0a      	ldr	r3, [pc, #40]	; (801ab30 <iprintf+0x2c>)
 801ab08:	b513      	push	{r0, r1, r4, lr}
 801ab0a:	681c      	ldr	r4, [r3, #0]
 801ab0c:	b124      	cbz	r4, 801ab18 <iprintf+0x14>
 801ab0e:	69a3      	ldr	r3, [r4, #24]
 801ab10:	b913      	cbnz	r3, 801ab18 <iprintf+0x14>
 801ab12:	4620      	mov	r0, r4
 801ab14:	f000 fb92 	bl	801b23c <__sinit>
 801ab18:	ab05      	add	r3, sp, #20
 801ab1a:	9a04      	ldr	r2, [sp, #16]
 801ab1c:	68a1      	ldr	r1, [r4, #8]
 801ab1e:	9301      	str	r3, [sp, #4]
 801ab20:	4620      	mov	r0, r4
 801ab22:	f7ff fd2b 	bl	801a57c <_vfiprintf_r>
 801ab26:	b002      	add	sp, #8
 801ab28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab2c:	b004      	add	sp, #16
 801ab2e:	4770      	bx	lr
 801ab30:	20000330 	.word	0x20000330

0801ab34 <_puts_r>:
 801ab34:	b570      	push	{r4, r5, r6, lr}
 801ab36:	460e      	mov	r6, r1
 801ab38:	4605      	mov	r5, r0
 801ab3a:	b118      	cbz	r0, 801ab44 <_puts_r+0x10>
 801ab3c:	6983      	ldr	r3, [r0, #24]
 801ab3e:	b90b      	cbnz	r3, 801ab44 <_puts_r+0x10>
 801ab40:	f000 fb7c 	bl	801b23c <__sinit>
 801ab44:	69ab      	ldr	r3, [r5, #24]
 801ab46:	68ac      	ldr	r4, [r5, #8]
 801ab48:	b913      	cbnz	r3, 801ab50 <_puts_r+0x1c>
 801ab4a:	4628      	mov	r0, r5
 801ab4c:	f000 fb76 	bl	801b23c <__sinit>
 801ab50:	4b2c      	ldr	r3, [pc, #176]	; (801ac04 <_puts_r+0xd0>)
 801ab52:	429c      	cmp	r4, r3
 801ab54:	d120      	bne.n	801ab98 <_puts_r+0x64>
 801ab56:	686c      	ldr	r4, [r5, #4]
 801ab58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab5a:	07db      	lsls	r3, r3, #31
 801ab5c:	d405      	bmi.n	801ab6a <_puts_r+0x36>
 801ab5e:	89a3      	ldrh	r3, [r4, #12]
 801ab60:	0598      	lsls	r0, r3, #22
 801ab62:	d402      	bmi.n	801ab6a <_puts_r+0x36>
 801ab64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab66:	f7ff fbe2 	bl	801a32e <__retarget_lock_acquire_recursive>
 801ab6a:	89a3      	ldrh	r3, [r4, #12]
 801ab6c:	0719      	lsls	r1, r3, #28
 801ab6e:	d51d      	bpl.n	801abac <_puts_r+0x78>
 801ab70:	6923      	ldr	r3, [r4, #16]
 801ab72:	b1db      	cbz	r3, 801abac <_puts_r+0x78>
 801ab74:	3e01      	subs	r6, #1
 801ab76:	68a3      	ldr	r3, [r4, #8]
 801ab78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ab7c:	3b01      	subs	r3, #1
 801ab7e:	60a3      	str	r3, [r4, #8]
 801ab80:	bb39      	cbnz	r1, 801abd2 <_puts_r+0x9e>
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	da38      	bge.n	801abf8 <_puts_r+0xc4>
 801ab86:	4622      	mov	r2, r4
 801ab88:	210a      	movs	r1, #10
 801ab8a:	4628      	mov	r0, r5
 801ab8c:	f000 f8bc 	bl	801ad08 <__swbuf_r>
 801ab90:	3001      	adds	r0, #1
 801ab92:	d011      	beq.n	801abb8 <_puts_r+0x84>
 801ab94:	250a      	movs	r5, #10
 801ab96:	e011      	b.n	801abbc <_puts_r+0x88>
 801ab98:	4b1b      	ldr	r3, [pc, #108]	; (801ac08 <_puts_r+0xd4>)
 801ab9a:	429c      	cmp	r4, r3
 801ab9c:	d101      	bne.n	801aba2 <_puts_r+0x6e>
 801ab9e:	68ac      	ldr	r4, [r5, #8]
 801aba0:	e7da      	b.n	801ab58 <_puts_r+0x24>
 801aba2:	4b1a      	ldr	r3, [pc, #104]	; (801ac0c <_puts_r+0xd8>)
 801aba4:	429c      	cmp	r4, r3
 801aba6:	bf08      	it	eq
 801aba8:	68ec      	ldreq	r4, [r5, #12]
 801abaa:	e7d5      	b.n	801ab58 <_puts_r+0x24>
 801abac:	4621      	mov	r1, r4
 801abae:	4628      	mov	r0, r5
 801abb0:	f000 f8fc 	bl	801adac <__swsetup_r>
 801abb4:	2800      	cmp	r0, #0
 801abb6:	d0dd      	beq.n	801ab74 <_puts_r+0x40>
 801abb8:	f04f 35ff 	mov.w	r5, #4294967295
 801abbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801abbe:	07da      	lsls	r2, r3, #31
 801abc0:	d405      	bmi.n	801abce <_puts_r+0x9a>
 801abc2:	89a3      	ldrh	r3, [r4, #12]
 801abc4:	059b      	lsls	r3, r3, #22
 801abc6:	d402      	bmi.n	801abce <_puts_r+0x9a>
 801abc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801abca:	f7ff fbb2 	bl	801a332 <__retarget_lock_release_recursive>
 801abce:	4628      	mov	r0, r5
 801abd0:	bd70      	pop	{r4, r5, r6, pc}
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	da04      	bge.n	801abe0 <_puts_r+0xac>
 801abd6:	69a2      	ldr	r2, [r4, #24]
 801abd8:	429a      	cmp	r2, r3
 801abda:	dc06      	bgt.n	801abea <_puts_r+0xb6>
 801abdc:	290a      	cmp	r1, #10
 801abde:	d004      	beq.n	801abea <_puts_r+0xb6>
 801abe0:	6823      	ldr	r3, [r4, #0]
 801abe2:	1c5a      	adds	r2, r3, #1
 801abe4:	6022      	str	r2, [r4, #0]
 801abe6:	7019      	strb	r1, [r3, #0]
 801abe8:	e7c5      	b.n	801ab76 <_puts_r+0x42>
 801abea:	4622      	mov	r2, r4
 801abec:	4628      	mov	r0, r5
 801abee:	f000 f88b 	bl	801ad08 <__swbuf_r>
 801abf2:	3001      	adds	r0, #1
 801abf4:	d1bf      	bne.n	801ab76 <_puts_r+0x42>
 801abf6:	e7df      	b.n	801abb8 <_puts_r+0x84>
 801abf8:	6823      	ldr	r3, [r4, #0]
 801abfa:	250a      	movs	r5, #10
 801abfc:	1c5a      	adds	r2, r3, #1
 801abfe:	6022      	str	r2, [r4, #0]
 801ac00:	701d      	strb	r5, [r3, #0]
 801ac02:	e7db      	b.n	801abbc <_puts_r+0x88>
 801ac04:	0803d1b4 	.word	0x0803d1b4
 801ac08:	0803d1d4 	.word	0x0803d1d4
 801ac0c:	0803d194 	.word	0x0803d194

0801ac10 <puts>:
 801ac10:	4b02      	ldr	r3, [pc, #8]	; (801ac1c <puts+0xc>)
 801ac12:	4601      	mov	r1, r0
 801ac14:	6818      	ldr	r0, [r3, #0]
 801ac16:	f7ff bf8d 	b.w	801ab34 <_puts_r>
 801ac1a:	bf00      	nop
 801ac1c:	20000330 	.word	0x20000330

0801ac20 <_sbrk_r>:
 801ac20:	b538      	push	{r3, r4, r5, lr}
 801ac22:	4d06      	ldr	r5, [pc, #24]	; (801ac3c <_sbrk_r+0x1c>)
 801ac24:	2300      	movs	r3, #0
 801ac26:	4604      	mov	r4, r0
 801ac28:	4608      	mov	r0, r1
 801ac2a:	602b      	str	r3, [r5, #0]
 801ac2c:	f7ec fb86 	bl	800733c <_sbrk>
 801ac30:	1c43      	adds	r3, r0, #1
 801ac32:	d102      	bne.n	801ac3a <_sbrk_r+0x1a>
 801ac34:	682b      	ldr	r3, [r5, #0]
 801ac36:	b103      	cbz	r3, 801ac3a <_sbrk_r+0x1a>
 801ac38:	6023      	str	r3, [r4, #0]
 801ac3a:	bd38      	pop	{r3, r4, r5, pc}
 801ac3c:	2000729c 	.word	0x2000729c

0801ac40 <_raise_r>:
 801ac40:	291f      	cmp	r1, #31
 801ac42:	b538      	push	{r3, r4, r5, lr}
 801ac44:	4604      	mov	r4, r0
 801ac46:	460d      	mov	r5, r1
 801ac48:	d904      	bls.n	801ac54 <_raise_r+0x14>
 801ac4a:	2316      	movs	r3, #22
 801ac4c:	6003      	str	r3, [r0, #0]
 801ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 801ac52:	bd38      	pop	{r3, r4, r5, pc}
 801ac54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ac56:	b112      	cbz	r2, 801ac5e <_raise_r+0x1e>
 801ac58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ac5c:	b94b      	cbnz	r3, 801ac72 <_raise_r+0x32>
 801ac5e:	4620      	mov	r0, r4
 801ac60:	f000 f830 	bl	801acc4 <_getpid_r>
 801ac64:	462a      	mov	r2, r5
 801ac66:	4601      	mov	r1, r0
 801ac68:	4620      	mov	r0, r4
 801ac6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac6e:	f000 b817 	b.w	801aca0 <_kill_r>
 801ac72:	2b01      	cmp	r3, #1
 801ac74:	d00a      	beq.n	801ac8c <_raise_r+0x4c>
 801ac76:	1c59      	adds	r1, r3, #1
 801ac78:	d103      	bne.n	801ac82 <_raise_r+0x42>
 801ac7a:	2316      	movs	r3, #22
 801ac7c:	6003      	str	r3, [r0, #0]
 801ac7e:	2001      	movs	r0, #1
 801ac80:	e7e7      	b.n	801ac52 <_raise_r+0x12>
 801ac82:	2400      	movs	r4, #0
 801ac84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ac88:	4628      	mov	r0, r5
 801ac8a:	4798      	blx	r3
 801ac8c:	2000      	movs	r0, #0
 801ac8e:	e7e0      	b.n	801ac52 <_raise_r+0x12>

0801ac90 <raise>:
 801ac90:	4b02      	ldr	r3, [pc, #8]	; (801ac9c <raise+0xc>)
 801ac92:	4601      	mov	r1, r0
 801ac94:	6818      	ldr	r0, [r3, #0]
 801ac96:	f7ff bfd3 	b.w	801ac40 <_raise_r>
 801ac9a:	bf00      	nop
 801ac9c:	20000330 	.word	0x20000330

0801aca0 <_kill_r>:
 801aca0:	b538      	push	{r3, r4, r5, lr}
 801aca2:	4d07      	ldr	r5, [pc, #28]	; (801acc0 <_kill_r+0x20>)
 801aca4:	2300      	movs	r3, #0
 801aca6:	4604      	mov	r4, r0
 801aca8:	4608      	mov	r0, r1
 801acaa:	4611      	mov	r1, r2
 801acac:	602b      	str	r3, [r5, #0]
 801acae:	f7ec fabd 	bl	800722c <_kill>
 801acb2:	1c43      	adds	r3, r0, #1
 801acb4:	d102      	bne.n	801acbc <_kill_r+0x1c>
 801acb6:	682b      	ldr	r3, [r5, #0]
 801acb8:	b103      	cbz	r3, 801acbc <_kill_r+0x1c>
 801acba:	6023      	str	r3, [r4, #0]
 801acbc:	bd38      	pop	{r3, r4, r5, pc}
 801acbe:	bf00      	nop
 801acc0:	2000729c 	.word	0x2000729c

0801acc4 <_getpid_r>:
 801acc4:	f7ec baaa 	b.w	800721c <_getpid>

0801acc8 <_vsiprintf_r>:
 801acc8:	b500      	push	{lr}
 801acca:	b09b      	sub	sp, #108	; 0x6c
 801accc:	9100      	str	r1, [sp, #0]
 801acce:	9104      	str	r1, [sp, #16]
 801acd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801acd4:	9105      	str	r1, [sp, #20]
 801acd6:	9102      	str	r1, [sp, #8]
 801acd8:	4905      	ldr	r1, [pc, #20]	; (801acf0 <_vsiprintf_r+0x28>)
 801acda:	9103      	str	r1, [sp, #12]
 801acdc:	4669      	mov	r1, sp
 801acde:	f000 fc3d 	bl	801b55c <_svfiprintf_r>
 801ace2:	9b00      	ldr	r3, [sp, #0]
 801ace4:	2200      	movs	r2, #0
 801ace6:	701a      	strb	r2, [r3, #0]
 801ace8:	b01b      	add	sp, #108	; 0x6c
 801acea:	f85d fb04 	ldr.w	pc, [sp], #4
 801acee:	bf00      	nop
 801acf0:	ffff0208 	.word	0xffff0208

0801acf4 <vsiprintf>:
 801acf4:	4613      	mov	r3, r2
 801acf6:	460a      	mov	r2, r1
 801acf8:	4601      	mov	r1, r0
 801acfa:	4802      	ldr	r0, [pc, #8]	; (801ad04 <vsiprintf+0x10>)
 801acfc:	6800      	ldr	r0, [r0, #0]
 801acfe:	f7ff bfe3 	b.w	801acc8 <_vsiprintf_r>
 801ad02:	bf00      	nop
 801ad04:	20000330 	.word	0x20000330

0801ad08 <__swbuf_r>:
 801ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad0a:	460e      	mov	r6, r1
 801ad0c:	4614      	mov	r4, r2
 801ad0e:	4605      	mov	r5, r0
 801ad10:	b118      	cbz	r0, 801ad1a <__swbuf_r+0x12>
 801ad12:	6983      	ldr	r3, [r0, #24]
 801ad14:	b90b      	cbnz	r3, 801ad1a <__swbuf_r+0x12>
 801ad16:	f000 fa91 	bl	801b23c <__sinit>
 801ad1a:	4b21      	ldr	r3, [pc, #132]	; (801ada0 <__swbuf_r+0x98>)
 801ad1c:	429c      	cmp	r4, r3
 801ad1e:	d12b      	bne.n	801ad78 <__swbuf_r+0x70>
 801ad20:	686c      	ldr	r4, [r5, #4]
 801ad22:	69a3      	ldr	r3, [r4, #24]
 801ad24:	60a3      	str	r3, [r4, #8]
 801ad26:	89a3      	ldrh	r3, [r4, #12]
 801ad28:	071a      	lsls	r2, r3, #28
 801ad2a:	d52f      	bpl.n	801ad8c <__swbuf_r+0x84>
 801ad2c:	6923      	ldr	r3, [r4, #16]
 801ad2e:	b36b      	cbz	r3, 801ad8c <__swbuf_r+0x84>
 801ad30:	6923      	ldr	r3, [r4, #16]
 801ad32:	6820      	ldr	r0, [r4, #0]
 801ad34:	1ac0      	subs	r0, r0, r3
 801ad36:	6963      	ldr	r3, [r4, #20]
 801ad38:	b2f6      	uxtb	r6, r6
 801ad3a:	4283      	cmp	r3, r0
 801ad3c:	4637      	mov	r7, r6
 801ad3e:	dc04      	bgt.n	801ad4a <__swbuf_r+0x42>
 801ad40:	4621      	mov	r1, r4
 801ad42:	4628      	mov	r0, r5
 801ad44:	f000 f9e6 	bl	801b114 <_fflush_r>
 801ad48:	bb30      	cbnz	r0, 801ad98 <__swbuf_r+0x90>
 801ad4a:	68a3      	ldr	r3, [r4, #8]
 801ad4c:	3b01      	subs	r3, #1
 801ad4e:	60a3      	str	r3, [r4, #8]
 801ad50:	6823      	ldr	r3, [r4, #0]
 801ad52:	1c5a      	adds	r2, r3, #1
 801ad54:	6022      	str	r2, [r4, #0]
 801ad56:	701e      	strb	r6, [r3, #0]
 801ad58:	6963      	ldr	r3, [r4, #20]
 801ad5a:	3001      	adds	r0, #1
 801ad5c:	4283      	cmp	r3, r0
 801ad5e:	d004      	beq.n	801ad6a <__swbuf_r+0x62>
 801ad60:	89a3      	ldrh	r3, [r4, #12]
 801ad62:	07db      	lsls	r3, r3, #31
 801ad64:	d506      	bpl.n	801ad74 <__swbuf_r+0x6c>
 801ad66:	2e0a      	cmp	r6, #10
 801ad68:	d104      	bne.n	801ad74 <__swbuf_r+0x6c>
 801ad6a:	4621      	mov	r1, r4
 801ad6c:	4628      	mov	r0, r5
 801ad6e:	f000 f9d1 	bl	801b114 <_fflush_r>
 801ad72:	b988      	cbnz	r0, 801ad98 <__swbuf_r+0x90>
 801ad74:	4638      	mov	r0, r7
 801ad76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad78:	4b0a      	ldr	r3, [pc, #40]	; (801ada4 <__swbuf_r+0x9c>)
 801ad7a:	429c      	cmp	r4, r3
 801ad7c:	d101      	bne.n	801ad82 <__swbuf_r+0x7a>
 801ad7e:	68ac      	ldr	r4, [r5, #8]
 801ad80:	e7cf      	b.n	801ad22 <__swbuf_r+0x1a>
 801ad82:	4b09      	ldr	r3, [pc, #36]	; (801ada8 <__swbuf_r+0xa0>)
 801ad84:	429c      	cmp	r4, r3
 801ad86:	bf08      	it	eq
 801ad88:	68ec      	ldreq	r4, [r5, #12]
 801ad8a:	e7ca      	b.n	801ad22 <__swbuf_r+0x1a>
 801ad8c:	4621      	mov	r1, r4
 801ad8e:	4628      	mov	r0, r5
 801ad90:	f000 f80c 	bl	801adac <__swsetup_r>
 801ad94:	2800      	cmp	r0, #0
 801ad96:	d0cb      	beq.n	801ad30 <__swbuf_r+0x28>
 801ad98:	f04f 37ff 	mov.w	r7, #4294967295
 801ad9c:	e7ea      	b.n	801ad74 <__swbuf_r+0x6c>
 801ad9e:	bf00      	nop
 801ada0:	0803d1b4 	.word	0x0803d1b4
 801ada4:	0803d1d4 	.word	0x0803d1d4
 801ada8:	0803d194 	.word	0x0803d194

0801adac <__swsetup_r>:
 801adac:	4b32      	ldr	r3, [pc, #200]	; (801ae78 <__swsetup_r+0xcc>)
 801adae:	b570      	push	{r4, r5, r6, lr}
 801adb0:	681d      	ldr	r5, [r3, #0]
 801adb2:	4606      	mov	r6, r0
 801adb4:	460c      	mov	r4, r1
 801adb6:	b125      	cbz	r5, 801adc2 <__swsetup_r+0x16>
 801adb8:	69ab      	ldr	r3, [r5, #24]
 801adba:	b913      	cbnz	r3, 801adc2 <__swsetup_r+0x16>
 801adbc:	4628      	mov	r0, r5
 801adbe:	f000 fa3d 	bl	801b23c <__sinit>
 801adc2:	4b2e      	ldr	r3, [pc, #184]	; (801ae7c <__swsetup_r+0xd0>)
 801adc4:	429c      	cmp	r4, r3
 801adc6:	d10f      	bne.n	801ade8 <__swsetup_r+0x3c>
 801adc8:	686c      	ldr	r4, [r5, #4]
 801adca:	89a3      	ldrh	r3, [r4, #12]
 801adcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801add0:	0719      	lsls	r1, r3, #28
 801add2:	d42c      	bmi.n	801ae2e <__swsetup_r+0x82>
 801add4:	06dd      	lsls	r5, r3, #27
 801add6:	d411      	bmi.n	801adfc <__swsetup_r+0x50>
 801add8:	2309      	movs	r3, #9
 801adda:	6033      	str	r3, [r6, #0]
 801addc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ade0:	81a3      	strh	r3, [r4, #12]
 801ade2:	f04f 30ff 	mov.w	r0, #4294967295
 801ade6:	e03e      	b.n	801ae66 <__swsetup_r+0xba>
 801ade8:	4b25      	ldr	r3, [pc, #148]	; (801ae80 <__swsetup_r+0xd4>)
 801adea:	429c      	cmp	r4, r3
 801adec:	d101      	bne.n	801adf2 <__swsetup_r+0x46>
 801adee:	68ac      	ldr	r4, [r5, #8]
 801adf0:	e7eb      	b.n	801adca <__swsetup_r+0x1e>
 801adf2:	4b24      	ldr	r3, [pc, #144]	; (801ae84 <__swsetup_r+0xd8>)
 801adf4:	429c      	cmp	r4, r3
 801adf6:	bf08      	it	eq
 801adf8:	68ec      	ldreq	r4, [r5, #12]
 801adfa:	e7e6      	b.n	801adca <__swsetup_r+0x1e>
 801adfc:	0758      	lsls	r0, r3, #29
 801adfe:	d512      	bpl.n	801ae26 <__swsetup_r+0x7a>
 801ae00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae02:	b141      	cbz	r1, 801ae16 <__swsetup_r+0x6a>
 801ae04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ae08:	4299      	cmp	r1, r3
 801ae0a:	d002      	beq.n	801ae12 <__swsetup_r+0x66>
 801ae0c:	4630      	mov	r0, r6
 801ae0e:	f7ff fae1 	bl	801a3d4 <_free_r>
 801ae12:	2300      	movs	r3, #0
 801ae14:	6363      	str	r3, [r4, #52]	; 0x34
 801ae16:	89a3      	ldrh	r3, [r4, #12]
 801ae18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ae1c:	81a3      	strh	r3, [r4, #12]
 801ae1e:	2300      	movs	r3, #0
 801ae20:	6063      	str	r3, [r4, #4]
 801ae22:	6923      	ldr	r3, [r4, #16]
 801ae24:	6023      	str	r3, [r4, #0]
 801ae26:	89a3      	ldrh	r3, [r4, #12]
 801ae28:	f043 0308 	orr.w	r3, r3, #8
 801ae2c:	81a3      	strh	r3, [r4, #12]
 801ae2e:	6923      	ldr	r3, [r4, #16]
 801ae30:	b94b      	cbnz	r3, 801ae46 <__swsetup_r+0x9a>
 801ae32:	89a3      	ldrh	r3, [r4, #12]
 801ae34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ae38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ae3c:	d003      	beq.n	801ae46 <__swsetup_r+0x9a>
 801ae3e:	4621      	mov	r1, r4
 801ae40:	4630      	mov	r0, r6
 801ae42:	f000 fabd 	bl	801b3c0 <__smakebuf_r>
 801ae46:	89a0      	ldrh	r0, [r4, #12]
 801ae48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ae4c:	f010 0301 	ands.w	r3, r0, #1
 801ae50:	d00a      	beq.n	801ae68 <__swsetup_r+0xbc>
 801ae52:	2300      	movs	r3, #0
 801ae54:	60a3      	str	r3, [r4, #8]
 801ae56:	6963      	ldr	r3, [r4, #20]
 801ae58:	425b      	negs	r3, r3
 801ae5a:	61a3      	str	r3, [r4, #24]
 801ae5c:	6923      	ldr	r3, [r4, #16]
 801ae5e:	b943      	cbnz	r3, 801ae72 <__swsetup_r+0xc6>
 801ae60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ae64:	d1ba      	bne.n	801addc <__swsetup_r+0x30>
 801ae66:	bd70      	pop	{r4, r5, r6, pc}
 801ae68:	0781      	lsls	r1, r0, #30
 801ae6a:	bf58      	it	pl
 801ae6c:	6963      	ldrpl	r3, [r4, #20]
 801ae6e:	60a3      	str	r3, [r4, #8]
 801ae70:	e7f4      	b.n	801ae5c <__swsetup_r+0xb0>
 801ae72:	2000      	movs	r0, #0
 801ae74:	e7f7      	b.n	801ae66 <__swsetup_r+0xba>
 801ae76:	bf00      	nop
 801ae78:	20000330 	.word	0x20000330
 801ae7c:	0803d1b4 	.word	0x0803d1b4
 801ae80:	0803d1d4 	.word	0x0803d1d4
 801ae84:	0803d194 	.word	0x0803d194

0801ae88 <__register_exitproc>:
 801ae88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801af48 <__register_exitproc+0xc0>
 801ae90:	4606      	mov	r6, r0
 801ae92:	f8d8 0000 	ldr.w	r0, [r8]
 801ae96:	461f      	mov	r7, r3
 801ae98:	460d      	mov	r5, r1
 801ae9a:	4691      	mov	r9, r2
 801ae9c:	f7ff fa47 	bl	801a32e <__retarget_lock_acquire_recursive>
 801aea0:	4b25      	ldr	r3, [pc, #148]	; (801af38 <__register_exitproc+0xb0>)
 801aea2:	681c      	ldr	r4, [r3, #0]
 801aea4:	b934      	cbnz	r4, 801aeb4 <__register_exitproc+0x2c>
 801aea6:	4c25      	ldr	r4, [pc, #148]	; (801af3c <__register_exitproc+0xb4>)
 801aea8:	601c      	str	r4, [r3, #0]
 801aeaa:	4b25      	ldr	r3, [pc, #148]	; (801af40 <__register_exitproc+0xb8>)
 801aeac:	b113      	cbz	r3, 801aeb4 <__register_exitproc+0x2c>
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801aeb4:	6863      	ldr	r3, [r4, #4]
 801aeb6:	2b1f      	cmp	r3, #31
 801aeb8:	dd07      	ble.n	801aeca <__register_exitproc+0x42>
 801aeba:	f8d8 0000 	ldr.w	r0, [r8]
 801aebe:	f7ff fa38 	bl	801a332 <__retarget_lock_release_recursive>
 801aec2:	f04f 30ff 	mov.w	r0, #4294967295
 801aec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aeca:	b34e      	cbz	r6, 801af20 <__register_exitproc+0x98>
 801aecc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801aed0:	b988      	cbnz	r0, 801aef6 <__register_exitproc+0x6e>
 801aed2:	4b1c      	ldr	r3, [pc, #112]	; (801af44 <__register_exitproc+0xbc>)
 801aed4:	b923      	cbnz	r3, 801aee0 <__register_exitproc+0x58>
 801aed6:	f8d8 0000 	ldr.w	r0, [r8]
 801aeda:	f7ff fa29 	bl	801a330 <__retarget_lock_release>
 801aede:	e7f0      	b.n	801aec2 <__register_exitproc+0x3a>
 801aee0:	f44f 7084 	mov.w	r0, #264	; 0x108
 801aee4:	f7ff fa26 	bl	801a334 <malloc>
 801aee8:	2800      	cmp	r0, #0
 801aeea:	d0f4      	beq.n	801aed6 <__register_exitproc+0x4e>
 801aeec:	2300      	movs	r3, #0
 801aeee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801aef2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801aef6:	6863      	ldr	r3, [r4, #4]
 801aef8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801aefc:	2201      	movs	r2, #1
 801aefe:	409a      	lsls	r2, r3
 801af00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801af04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801af08:	4313      	orrs	r3, r2
 801af0a:	2e02      	cmp	r6, #2
 801af0c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801af10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801af14:	bf02      	ittt	eq
 801af16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801af1a:	431a      	orreq	r2, r3
 801af1c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801af20:	6863      	ldr	r3, [r4, #4]
 801af22:	f8d8 0000 	ldr.w	r0, [r8]
 801af26:	1c5a      	adds	r2, r3, #1
 801af28:	3302      	adds	r3, #2
 801af2a:	6062      	str	r2, [r4, #4]
 801af2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801af30:	f7ff f9ff 	bl	801a332 <__retarget_lock_release_recursive>
 801af34:	2000      	movs	r0, #0
 801af36:	e7c6      	b.n	801aec6 <__register_exitproc+0x3e>
 801af38:	20007288 	.word	0x20007288
 801af3c:	200071fc 	.word	0x200071fc
 801af40:	00000000 	.word	0x00000000
 801af44:	0801a335 	.word	0x0801a335
 801af48:	20000394 	.word	0x20000394

0801af4c <__call_exitprocs>:
 801af4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af50:	4c2b      	ldr	r4, [pc, #172]	; (801b000 <__call_exitprocs+0xb4>)
 801af52:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801b004 <__call_exitprocs+0xb8>
 801af56:	4607      	mov	r7, r0
 801af58:	6820      	ldr	r0, [r4, #0]
 801af5a:	460e      	mov	r6, r1
 801af5c:	f7ff f9e7 	bl	801a32e <__retarget_lock_acquire_recursive>
 801af60:	46a3      	mov	fp, r4
 801af62:	f8d8 5000 	ldr.w	r5, [r8]
 801af66:	b935      	cbnz	r5, 801af76 <__call_exitprocs+0x2a>
 801af68:	f8db 0000 	ldr.w	r0, [fp]
 801af6c:	b003      	add	sp, #12
 801af6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af72:	f7ff b9de 	b.w	801a332 <__retarget_lock_release_recursive>
 801af76:	686c      	ldr	r4, [r5, #4]
 801af78:	f8d5 a088 	ldr.w	sl, [r5, #136]	; 0x88
 801af7c:	3c01      	subs	r4, #1
 801af7e:	f105 0908 	add.w	r9, r5, #8
 801af82:	2c00      	cmp	r4, #0
 801af84:	dbf0      	blt.n	801af68 <__call_exitprocs+0x1c>
 801af86:	b156      	cbz	r6, 801af9e <__call_exitprocs+0x52>
 801af88:	f1ba 0f00 	cmp.w	sl, #0
 801af8c:	d101      	bne.n	801af92 <__call_exitprocs+0x46>
 801af8e:	3c01      	subs	r4, #1
 801af90:	e7f7      	b.n	801af82 <__call_exitprocs+0x36>
 801af92:	f10a 0280 	add.w	r2, sl, #128	; 0x80
 801af96:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801af9a:	42b2      	cmp	r2, r6
 801af9c:	d1f7      	bne.n	801af8e <__call_exitprocs+0x42>
 801af9e:	6869      	ldr	r1, [r5, #4]
 801afa0:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 801afa4:	3901      	subs	r1, #1
 801afa6:	42a1      	cmp	r1, r4
 801afa8:	bf1a      	itte	ne
 801afaa:	2300      	movne	r3, #0
 801afac:	f849 3024 	strne.w	r3, [r9, r4, lsl #2]
 801afb0:	606c      	streq	r4, [r5, #4]
 801afb2:	2a00      	cmp	r2, #0
 801afb4:	d0eb      	beq.n	801af8e <__call_exitprocs+0x42>
 801afb6:	686b      	ldr	r3, [r5, #4]
 801afb8:	9301      	str	r3, [sp, #4]
 801afba:	f1ba 0f00 	cmp.w	sl, #0
 801afbe:	d007      	beq.n	801afd0 <__call_exitprocs+0x84>
 801afc0:	f8da 1100 	ldr.w	r1, [sl, #256]	; 0x100
 801afc4:	2301      	movs	r3, #1
 801afc6:	fa03 fc04 	lsl.w	ip, r3, r4
 801afca:	ea1c 0f01 	tst.w	ip, r1
 801afce:	d109      	bne.n	801afe4 <__call_exitprocs+0x98>
 801afd0:	4790      	blx	r2
 801afd2:	4b0c      	ldr	r3, [pc, #48]	; (801b004 <__call_exitprocs+0xb8>)
 801afd4:	6869      	ldr	r1, [r5, #4]
 801afd6:	681a      	ldr	r2, [r3, #0]
 801afd8:	9b01      	ldr	r3, [sp, #4]
 801afda:	4299      	cmp	r1, r3
 801afdc:	d1c1      	bne.n	801af62 <__call_exitprocs+0x16>
 801afde:	4295      	cmp	r5, r2
 801afe0:	d0d5      	beq.n	801af8e <__call_exitprocs+0x42>
 801afe2:	e7be      	b.n	801af62 <__call_exitprocs+0x16>
 801afe4:	f8da 0104 	ldr.w	r0, [sl, #260]	; 0x104
 801afe8:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801afec:	ea1c 0f00 	tst.w	ip, r0
 801aff0:	d102      	bne.n	801aff8 <__call_exitprocs+0xac>
 801aff2:	4638      	mov	r0, r7
 801aff4:	4790      	blx	r2
 801aff6:	e7ec      	b.n	801afd2 <__call_exitprocs+0x86>
 801aff8:	4608      	mov	r0, r1
 801affa:	4790      	blx	r2
 801affc:	e7e9      	b.n	801afd2 <__call_exitprocs+0x86>
 801affe:	bf00      	nop
 801b000:	20000394 	.word	0x20000394
 801b004:	20007288 	.word	0x20007288

0801b008 <__sflush_r>:
 801b008:	898a      	ldrh	r2, [r1, #12]
 801b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b00e:	4605      	mov	r5, r0
 801b010:	0710      	lsls	r0, r2, #28
 801b012:	460c      	mov	r4, r1
 801b014:	d458      	bmi.n	801b0c8 <__sflush_r+0xc0>
 801b016:	684b      	ldr	r3, [r1, #4]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	dc05      	bgt.n	801b028 <__sflush_r+0x20>
 801b01c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b01e:	2b00      	cmp	r3, #0
 801b020:	dc02      	bgt.n	801b028 <__sflush_r+0x20>
 801b022:	2000      	movs	r0, #0
 801b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b02a:	2e00      	cmp	r6, #0
 801b02c:	d0f9      	beq.n	801b022 <__sflush_r+0x1a>
 801b02e:	2300      	movs	r3, #0
 801b030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b034:	682f      	ldr	r7, [r5, #0]
 801b036:	602b      	str	r3, [r5, #0]
 801b038:	d032      	beq.n	801b0a0 <__sflush_r+0x98>
 801b03a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b03c:	89a3      	ldrh	r3, [r4, #12]
 801b03e:	075a      	lsls	r2, r3, #29
 801b040:	d505      	bpl.n	801b04e <__sflush_r+0x46>
 801b042:	6863      	ldr	r3, [r4, #4]
 801b044:	1ac0      	subs	r0, r0, r3
 801b046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b048:	b10b      	cbz	r3, 801b04e <__sflush_r+0x46>
 801b04a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b04c:	1ac0      	subs	r0, r0, r3
 801b04e:	2300      	movs	r3, #0
 801b050:	4602      	mov	r2, r0
 801b052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b054:	6a21      	ldr	r1, [r4, #32]
 801b056:	4628      	mov	r0, r5
 801b058:	47b0      	blx	r6
 801b05a:	1c43      	adds	r3, r0, #1
 801b05c:	89a3      	ldrh	r3, [r4, #12]
 801b05e:	d106      	bne.n	801b06e <__sflush_r+0x66>
 801b060:	6829      	ldr	r1, [r5, #0]
 801b062:	291d      	cmp	r1, #29
 801b064:	d82c      	bhi.n	801b0c0 <__sflush_r+0xb8>
 801b066:	4a2a      	ldr	r2, [pc, #168]	; (801b110 <__sflush_r+0x108>)
 801b068:	40ca      	lsrs	r2, r1
 801b06a:	07d6      	lsls	r6, r2, #31
 801b06c:	d528      	bpl.n	801b0c0 <__sflush_r+0xb8>
 801b06e:	2200      	movs	r2, #0
 801b070:	6062      	str	r2, [r4, #4]
 801b072:	04d9      	lsls	r1, r3, #19
 801b074:	6922      	ldr	r2, [r4, #16]
 801b076:	6022      	str	r2, [r4, #0]
 801b078:	d504      	bpl.n	801b084 <__sflush_r+0x7c>
 801b07a:	1c42      	adds	r2, r0, #1
 801b07c:	d101      	bne.n	801b082 <__sflush_r+0x7a>
 801b07e:	682b      	ldr	r3, [r5, #0]
 801b080:	b903      	cbnz	r3, 801b084 <__sflush_r+0x7c>
 801b082:	6560      	str	r0, [r4, #84]	; 0x54
 801b084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b086:	602f      	str	r7, [r5, #0]
 801b088:	2900      	cmp	r1, #0
 801b08a:	d0ca      	beq.n	801b022 <__sflush_r+0x1a>
 801b08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b090:	4299      	cmp	r1, r3
 801b092:	d002      	beq.n	801b09a <__sflush_r+0x92>
 801b094:	4628      	mov	r0, r5
 801b096:	f7ff f99d 	bl	801a3d4 <_free_r>
 801b09a:	2000      	movs	r0, #0
 801b09c:	6360      	str	r0, [r4, #52]	; 0x34
 801b09e:	e7c1      	b.n	801b024 <__sflush_r+0x1c>
 801b0a0:	6a21      	ldr	r1, [r4, #32]
 801b0a2:	2301      	movs	r3, #1
 801b0a4:	4628      	mov	r0, r5
 801b0a6:	47b0      	blx	r6
 801b0a8:	1c41      	adds	r1, r0, #1
 801b0aa:	d1c7      	bne.n	801b03c <__sflush_r+0x34>
 801b0ac:	682b      	ldr	r3, [r5, #0]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d0c4      	beq.n	801b03c <__sflush_r+0x34>
 801b0b2:	2b1d      	cmp	r3, #29
 801b0b4:	d001      	beq.n	801b0ba <__sflush_r+0xb2>
 801b0b6:	2b16      	cmp	r3, #22
 801b0b8:	d101      	bne.n	801b0be <__sflush_r+0xb6>
 801b0ba:	602f      	str	r7, [r5, #0]
 801b0bc:	e7b1      	b.n	801b022 <__sflush_r+0x1a>
 801b0be:	89a3      	ldrh	r3, [r4, #12]
 801b0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b0c4:	81a3      	strh	r3, [r4, #12]
 801b0c6:	e7ad      	b.n	801b024 <__sflush_r+0x1c>
 801b0c8:	690f      	ldr	r7, [r1, #16]
 801b0ca:	2f00      	cmp	r7, #0
 801b0cc:	d0a9      	beq.n	801b022 <__sflush_r+0x1a>
 801b0ce:	0793      	lsls	r3, r2, #30
 801b0d0:	680e      	ldr	r6, [r1, #0]
 801b0d2:	bf08      	it	eq
 801b0d4:	694b      	ldreq	r3, [r1, #20]
 801b0d6:	600f      	str	r7, [r1, #0]
 801b0d8:	bf18      	it	ne
 801b0da:	2300      	movne	r3, #0
 801b0dc:	eba6 0807 	sub.w	r8, r6, r7
 801b0e0:	608b      	str	r3, [r1, #8]
 801b0e2:	f1b8 0f00 	cmp.w	r8, #0
 801b0e6:	dd9c      	ble.n	801b022 <__sflush_r+0x1a>
 801b0e8:	6a21      	ldr	r1, [r4, #32]
 801b0ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b0ec:	4643      	mov	r3, r8
 801b0ee:	463a      	mov	r2, r7
 801b0f0:	4628      	mov	r0, r5
 801b0f2:	47b0      	blx	r6
 801b0f4:	2800      	cmp	r0, #0
 801b0f6:	dc06      	bgt.n	801b106 <__sflush_r+0xfe>
 801b0f8:	89a3      	ldrh	r3, [r4, #12]
 801b0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b0fe:	81a3      	strh	r3, [r4, #12]
 801b100:	f04f 30ff 	mov.w	r0, #4294967295
 801b104:	e78e      	b.n	801b024 <__sflush_r+0x1c>
 801b106:	4407      	add	r7, r0
 801b108:	eba8 0800 	sub.w	r8, r8, r0
 801b10c:	e7e9      	b.n	801b0e2 <__sflush_r+0xda>
 801b10e:	bf00      	nop
 801b110:	20400001 	.word	0x20400001

0801b114 <_fflush_r>:
 801b114:	b538      	push	{r3, r4, r5, lr}
 801b116:	690b      	ldr	r3, [r1, #16]
 801b118:	4605      	mov	r5, r0
 801b11a:	460c      	mov	r4, r1
 801b11c:	b913      	cbnz	r3, 801b124 <_fflush_r+0x10>
 801b11e:	2500      	movs	r5, #0
 801b120:	4628      	mov	r0, r5
 801b122:	bd38      	pop	{r3, r4, r5, pc}
 801b124:	b118      	cbz	r0, 801b12e <_fflush_r+0x1a>
 801b126:	6983      	ldr	r3, [r0, #24]
 801b128:	b90b      	cbnz	r3, 801b12e <_fflush_r+0x1a>
 801b12a:	f000 f887 	bl	801b23c <__sinit>
 801b12e:	4b14      	ldr	r3, [pc, #80]	; (801b180 <_fflush_r+0x6c>)
 801b130:	429c      	cmp	r4, r3
 801b132:	d11b      	bne.n	801b16c <_fflush_r+0x58>
 801b134:	686c      	ldr	r4, [r5, #4]
 801b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d0ef      	beq.n	801b11e <_fflush_r+0xa>
 801b13e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b140:	07d0      	lsls	r0, r2, #31
 801b142:	d404      	bmi.n	801b14e <_fflush_r+0x3a>
 801b144:	0599      	lsls	r1, r3, #22
 801b146:	d402      	bmi.n	801b14e <_fflush_r+0x3a>
 801b148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b14a:	f7ff f8f0 	bl	801a32e <__retarget_lock_acquire_recursive>
 801b14e:	4628      	mov	r0, r5
 801b150:	4621      	mov	r1, r4
 801b152:	f7ff ff59 	bl	801b008 <__sflush_r>
 801b156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b158:	07da      	lsls	r2, r3, #31
 801b15a:	4605      	mov	r5, r0
 801b15c:	d4e0      	bmi.n	801b120 <_fflush_r+0xc>
 801b15e:	89a3      	ldrh	r3, [r4, #12]
 801b160:	059b      	lsls	r3, r3, #22
 801b162:	d4dd      	bmi.n	801b120 <_fflush_r+0xc>
 801b164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b166:	f7ff f8e4 	bl	801a332 <__retarget_lock_release_recursive>
 801b16a:	e7d9      	b.n	801b120 <_fflush_r+0xc>
 801b16c:	4b05      	ldr	r3, [pc, #20]	; (801b184 <_fflush_r+0x70>)
 801b16e:	429c      	cmp	r4, r3
 801b170:	d101      	bne.n	801b176 <_fflush_r+0x62>
 801b172:	68ac      	ldr	r4, [r5, #8]
 801b174:	e7df      	b.n	801b136 <_fflush_r+0x22>
 801b176:	4b04      	ldr	r3, [pc, #16]	; (801b188 <_fflush_r+0x74>)
 801b178:	429c      	cmp	r4, r3
 801b17a:	bf08      	it	eq
 801b17c:	68ec      	ldreq	r4, [r5, #12]
 801b17e:	e7da      	b.n	801b136 <_fflush_r+0x22>
 801b180:	0803d1b4 	.word	0x0803d1b4
 801b184:	0803d1d4 	.word	0x0803d1d4
 801b188:	0803d194 	.word	0x0803d194

0801b18c <std>:
 801b18c:	2300      	movs	r3, #0
 801b18e:	b510      	push	{r4, lr}
 801b190:	4604      	mov	r4, r0
 801b192:	e9c0 3300 	strd	r3, r3, [r0]
 801b196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b19a:	6083      	str	r3, [r0, #8]
 801b19c:	8181      	strh	r1, [r0, #12]
 801b19e:	6643      	str	r3, [r0, #100]	; 0x64
 801b1a0:	81c2      	strh	r2, [r0, #14]
 801b1a2:	6183      	str	r3, [r0, #24]
 801b1a4:	4619      	mov	r1, r3
 801b1a6:	2208      	movs	r2, #8
 801b1a8:	305c      	adds	r0, #92	; 0x5c
 801b1aa:	f7ff f8fb 	bl	801a3a4 <memset>
 801b1ae:	4b05      	ldr	r3, [pc, #20]	; (801b1c4 <std+0x38>)
 801b1b0:	6263      	str	r3, [r4, #36]	; 0x24
 801b1b2:	4b05      	ldr	r3, [pc, #20]	; (801b1c8 <std+0x3c>)
 801b1b4:	62a3      	str	r3, [r4, #40]	; 0x28
 801b1b6:	4b05      	ldr	r3, [pc, #20]	; (801b1cc <std+0x40>)
 801b1b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b1ba:	4b05      	ldr	r3, [pc, #20]	; (801b1d0 <std+0x44>)
 801b1bc:	6224      	str	r4, [r4, #32]
 801b1be:	6323      	str	r3, [r4, #48]	; 0x30
 801b1c0:	bd10      	pop	{r4, pc}
 801b1c2:	bf00      	nop
 801b1c4:	0801b75d 	.word	0x0801b75d
 801b1c8:	0801b77f 	.word	0x0801b77f
 801b1cc:	0801b7b7 	.word	0x0801b7b7
 801b1d0:	0801b7db 	.word	0x0801b7db

0801b1d4 <_cleanup_r>:
 801b1d4:	4901      	ldr	r1, [pc, #4]	; (801b1dc <_cleanup_r+0x8>)
 801b1d6:	f000 b8af 	b.w	801b338 <_fwalk_reent>
 801b1da:	bf00      	nop
 801b1dc:	0801b115 	.word	0x0801b115

0801b1e0 <__sfmoreglue>:
 801b1e0:	b570      	push	{r4, r5, r6, lr}
 801b1e2:	1e4a      	subs	r2, r1, #1
 801b1e4:	2568      	movs	r5, #104	; 0x68
 801b1e6:	4355      	muls	r5, r2
 801b1e8:	460e      	mov	r6, r1
 801b1ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b1ee:	f7ff f941 	bl	801a474 <_malloc_r>
 801b1f2:	4604      	mov	r4, r0
 801b1f4:	b140      	cbz	r0, 801b208 <__sfmoreglue+0x28>
 801b1f6:	2100      	movs	r1, #0
 801b1f8:	e9c0 1600 	strd	r1, r6, [r0]
 801b1fc:	300c      	adds	r0, #12
 801b1fe:	60a0      	str	r0, [r4, #8]
 801b200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b204:	f7ff f8ce 	bl	801a3a4 <memset>
 801b208:	4620      	mov	r0, r4
 801b20a:	bd70      	pop	{r4, r5, r6, pc}

0801b20c <__sfp_lock_acquire>:
 801b20c:	4801      	ldr	r0, [pc, #4]	; (801b214 <__sfp_lock_acquire+0x8>)
 801b20e:	f7ff b88e 	b.w	801a32e <__retarget_lock_acquire_recursive>
 801b212:	bf00      	nop
 801b214:	20007294 	.word	0x20007294

0801b218 <__sfp_lock_release>:
 801b218:	4801      	ldr	r0, [pc, #4]	; (801b220 <__sfp_lock_release+0x8>)
 801b21a:	f7ff b88a 	b.w	801a332 <__retarget_lock_release_recursive>
 801b21e:	bf00      	nop
 801b220:	20007294 	.word	0x20007294

0801b224 <__sinit_lock_acquire>:
 801b224:	4801      	ldr	r0, [pc, #4]	; (801b22c <__sinit_lock_acquire+0x8>)
 801b226:	f7ff b882 	b.w	801a32e <__retarget_lock_acquire_recursive>
 801b22a:	bf00      	nop
 801b22c:	20007293 	.word	0x20007293

0801b230 <__sinit_lock_release>:
 801b230:	4801      	ldr	r0, [pc, #4]	; (801b238 <__sinit_lock_release+0x8>)
 801b232:	f7ff b87e 	b.w	801a332 <__retarget_lock_release_recursive>
 801b236:	bf00      	nop
 801b238:	20007293 	.word	0x20007293

0801b23c <__sinit>:
 801b23c:	b510      	push	{r4, lr}
 801b23e:	4604      	mov	r4, r0
 801b240:	f7ff fff0 	bl	801b224 <__sinit_lock_acquire>
 801b244:	69a3      	ldr	r3, [r4, #24]
 801b246:	b11b      	cbz	r3, 801b250 <__sinit+0x14>
 801b248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b24c:	f7ff bff0 	b.w	801b230 <__sinit_lock_release>
 801b250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b254:	6523      	str	r3, [r4, #80]	; 0x50
 801b256:	4b13      	ldr	r3, [pc, #76]	; (801b2a4 <__sinit+0x68>)
 801b258:	4a13      	ldr	r2, [pc, #76]	; (801b2a8 <__sinit+0x6c>)
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	62a2      	str	r2, [r4, #40]	; 0x28
 801b25e:	42a3      	cmp	r3, r4
 801b260:	bf04      	itt	eq
 801b262:	2301      	moveq	r3, #1
 801b264:	61a3      	streq	r3, [r4, #24]
 801b266:	4620      	mov	r0, r4
 801b268:	f000 f820 	bl	801b2ac <__sfp>
 801b26c:	6060      	str	r0, [r4, #4]
 801b26e:	4620      	mov	r0, r4
 801b270:	f000 f81c 	bl	801b2ac <__sfp>
 801b274:	60a0      	str	r0, [r4, #8]
 801b276:	4620      	mov	r0, r4
 801b278:	f000 f818 	bl	801b2ac <__sfp>
 801b27c:	2200      	movs	r2, #0
 801b27e:	60e0      	str	r0, [r4, #12]
 801b280:	2104      	movs	r1, #4
 801b282:	6860      	ldr	r0, [r4, #4]
 801b284:	f7ff ff82 	bl	801b18c <std>
 801b288:	68a0      	ldr	r0, [r4, #8]
 801b28a:	2201      	movs	r2, #1
 801b28c:	2109      	movs	r1, #9
 801b28e:	f7ff ff7d 	bl	801b18c <std>
 801b292:	68e0      	ldr	r0, [r4, #12]
 801b294:	2202      	movs	r2, #2
 801b296:	2112      	movs	r1, #18
 801b298:	f7ff ff78 	bl	801b18c <std>
 801b29c:	2301      	movs	r3, #1
 801b29e:	61a3      	str	r3, [r4, #24]
 801b2a0:	e7d2      	b.n	801b248 <__sinit+0xc>
 801b2a2:	bf00      	nop
 801b2a4:	0803d15c 	.word	0x0803d15c
 801b2a8:	0801b1d5 	.word	0x0801b1d5

0801b2ac <__sfp>:
 801b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2ae:	4607      	mov	r7, r0
 801b2b0:	f7ff ffac 	bl	801b20c <__sfp_lock_acquire>
 801b2b4:	4b1e      	ldr	r3, [pc, #120]	; (801b330 <__sfp+0x84>)
 801b2b6:	681e      	ldr	r6, [r3, #0]
 801b2b8:	69b3      	ldr	r3, [r6, #24]
 801b2ba:	b913      	cbnz	r3, 801b2c2 <__sfp+0x16>
 801b2bc:	4630      	mov	r0, r6
 801b2be:	f7ff ffbd 	bl	801b23c <__sinit>
 801b2c2:	3648      	adds	r6, #72	; 0x48
 801b2c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b2c8:	3b01      	subs	r3, #1
 801b2ca:	d503      	bpl.n	801b2d4 <__sfp+0x28>
 801b2cc:	6833      	ldr	r3, [r6, #0]
 801b2ce:	b30b      	cbz	r3, 801b314 <__sfp+0x68>
 801b2d0:	6836      	ldr	r6, [r6, #0]
 801b2d2:	e7f7      	b.n	801b2c4 <__sfp+0x18>
 801b2d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b2d8:	b9d5      	cbnz	r5, 801b310 <__sfp+0x64>
 801b2da:	4b16      	ldr	r3, [pc, #88]	; (801b334 <__sfp+0x88>)
 801b2dc:	60e3      	str	r3, [r4, #12]
 801b2de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b2e2:	6665      	str	r5, [r4, #100]	; 0x64
 801b2e4:	f7ff f822 	bl	801a32c <__retarget_lock_init_recursive>
 801b2e8:	f7ff ff96 	bl	801b218 <__sfp_lock_release>
 801b2ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b2f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b2f4:	6025      	str	r5, [r4, #0]
 801b2f6:	61a5      	str	r5, [r4, #24]
 801b2f8:	2208      	movs	r2, #8
 801b2fa:	4629      	mov	r1, r5
 801b2fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b300:	f7ff f850 	bl	801a3a4 <memset>
 801b304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b30c:	4620      	mov	r0, r4
 801b30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b310:	3468      	adds	r4, #104	; 0x68
 801b312:	e7d9      	b.n	801b2c8 <__sfp+0x1c>
 801b314:	2104      	movs	r1, #4
 801b316:	4638      	mov	r0, r7
 801b318:	f7ff ff62 	bl	801b1e0 <__sfmoreglue>
 801b31c:	4604      	mov	r4, r0
 801b31e:	6030      	str	r0, [r6, #0]
 801b320:	2800      	cmp	r0, #0
 801b322:	d1d5      	bne.n	801b2d0 <__sfp+0x24>
 801b324:	f7ff ff78 	bl	801b218 <__sfp_lock_release>
 801b328:	230c      	movs	r3, #12
 801b32a:	603b      	str	r3, [r7, #0]
 801b32c:	e7ee      	b.n	801b30c <__sfp+0x60>
 801b32e:	bf00      	nop
 801b330:	0803d15c 	.word	0x0803d15c
 801b334:	ffff0001 	.word	0xffff0001

0801b338 <_fwalk_reent>:
 801b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b33c:	4606      	mov	r6, r0
 801b33e:	4688      	mov	r8, r1
 801b340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b344:	2700      	movs	r7, #0
 801b346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b34a:	f1b9 0901 	subs.w	r9, r9, #1
 801b34e:	d505      	bpl.n	801b35c <_fwalk_reent+0x24>
 801b350:	6824      	ldr	r4, [r4, #0]
 801b352:	2c00      	cmp	r4, #0
 801b354:	d1f7      	bne.n	801b346 <_fwalk_reent+0xe>
 801b356:	4638      	mov	r0, r7
 801b358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b35c:	89ab      	ldrh	r3, [r5, #12]
 801b35e:	2b01      	cmp	r3, #1
 801b360:	d907      	bls.n	801b372 <_fwalk_reent+0x3a>
 801b362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b366:	3301      	adds	r3, #1
 801b368:	d003      	beq.n	801b372 <_fwalk_reent+0x3a>
 801b36a:	4629      	mov	r1, r5
 801b36c:	4630      	mov	r0, r6
 801b36e:	47c0      	blx	r8
 801b370:	4307      	orrs	r7, r0
 801b372:	3568      	adds	r5, #104	; 0x68
 801b374:	e7e9      	b.n	801b34a <_fwalk_reent+0x12>

0801b376 <__swhatbuf_r>:
 801b376:	b570      	push	{r4, r5, r6, lr}
 801b378:	460e      	mov	r6, r1
 801b37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b37e:	2900      	cmp	r1, #0
 801b380:	b096      	sub	sp, #88	; 0x58
 801b382:	4614      	mov	r4, r2
 801b384:	461d      	mov	r5, r3
 801b386:	da07      	bge.n	801b398 <__swhatbuf_r+0x22>
 801b388:	2300      	movs	r3, #0
 801b38a:	602b      	str	r3, [r5, #0]
 801b38c:	89b3      	ldrh	r3, [r6, #12]
 801b38e:	061a      	lsls	r2, r3, #24
 801b390:	d410      	bmi.n	801b3b4 <__swhatbuf_r+0x3e>
 801b392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b396:	e00e      	b.n	801b3b6 <__swhatbuf_r+0x40>
 801b398:	466a      	mov	r2, sp
 801b39a:	f000 fa45 	bl	801b828 <_fstat_r>
 801b39e:	2800      	cmp	r0, #0
 801b3a0:	dbf2      	blt.n	801b388 <__swhatbuf_r+0x12>
 801b3a2:	9a01      	ldr	r2, [sp, #4]
 801b3a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b3a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b3ac:	425a      	negs	r2, r3
 801b3ae:	415a      	adcs	r2, r3
 801b3b0:	602a      	str	r2, [r5, #0]
 801b3b2:	e7ee      	b.n	801b392 <__swhatbuf_r+0x1c>
 801b3b4:	2340      	movs	r3, #64	; 0x40
 801b3b6:	2000      	movs	r0, #0
 801b3b8:	6023      	str	r3, [r4, #0]
 801b3ba:	b016      	add	sp, #88	; 0x58
 801b3bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b3c0 <__smakebuf_r>:
 801b3c0:	898b      	ldrh	r3, [r1, #12]
 801b3c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b3c4:	079d      	lsls	r5, r3, #30
 801b3c6:	4606      	mov	r6, r0
 801b3c8:	460c      	mov	r4, r1
 801b3ca:	d507      	bpl.n	801b3dc <__smakebuf_r+0x1c>
 801b3cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b3d0:	6023      	str	r3, [r4, #0]
 801b3d2:	6123      	str	r3, [r4, #16]
 801b3d4:	2301      	movs	r3, #1
 801b3d6:	6163      	str	r3, [r4, #20]
 801b3d8:	b002      	add	sp, #8
 801b3da:	bd70      	pop	{r4, r5, r6, pc}
 801b3dc:	ab01      	add	r3, sp, #4
 801b3de:	466a      	mov	r2, sp
 801b3e0:	f7ff ffc9 	bl	801b376 <__swhatbuf_r>
 801b3e4:	9900      	ldr	r1, [sp, #0]
 801b3e6:	4605      	mov	r5, r0
 801b3e8:	4630      	mov	r0, r6
 801b3ea:	f7ff f843 	bl	801a474 <_malloc_r>
 801b3ee:	b948      	cbnz	r0, 801b404 <__smakebuf_r+0x44>
 801b3f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b3f4:	059a      	lsls	r2, r3, #22
 801b3f6:	d4ef      	bmi.n	801b3d8 <__smakebuf_r+0x18>
 801b3f8:	f023 0303 	bic.w	r3, r3, #3
 801b3fc:	f043 0302 	orr.w	r3, r3, #2
 801b400:	81a3      	strh	r3, [r4, #12]
 801b402:	e7e3      	b.n	801b3cc <__smakebuf_r+0xc>
 801b404:	4b0d      	ldr	r3, [pc, #52]	; (801b43c <__smakebuf_r+0x7c>)
 801b406:	62b3      	str	r3, [r6, #40]	; 0x28
 801b408:	89a3      	ldrh	r3, [r4, #12]
 801b40a:	6020      	str	r0, [r4, #0]
 801b40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b410:	81a3      	strh	r3, [r4, #12]
 801b412:	9b00      	ldr	r3, [sp, #0]
 801b414:	6163      	str	r3, [r4, #20]
 801b416:	9b01      	ldr	r3, [sp, #4]
 801b418:	6120      	str	r0, [r4, #16]
 801b41a:	b15b      	cbz	r3, 801b434 <__smakebuf_r+0x74>
 801b41c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b420:	4630      	mov	r0, r6
 801b422:	f000 fa13 	bl	801b84c <_isatty_r>
 801b426:	b128      	cbz	r0, 801b434 <__smakebuf_r+0x74>
 801b428:	89a3      	ldrh	r3, [r4, #12]
 801b42a:	f023 0303 	bic.w	r3, r3, #3
 801b42e:	f043 0301 	orr.w	r3, r3, #1
 801b432:	81a3      	strh	r3, [r4, #12]
 801b434:	89a0      	ldrh	r0, [r4, #12]
 801b436:	4305      	orrs	r5, r0
 801b438:	81a5      	strh	r5, [r4, #12]
 801b43a:	e7cd      	b.n	801b3d8 <__smakebuf_r+0x18>
 801b43c:	0801b1d5 	.word	0x0801b1d5

0801b440 <__malloc_lock>:
 801b440:	4801      	ldr	r0, [pc, #4]	; (801b448 <__malloc_lock+0x8>)
 801b442:	f7fe bf74 	b.w	801a32e <__retarget_lock_acquire_recursive>
 801b446:	bf00      	nop
 801b448:	20007290 	.word	0x20007290

0801b44c <__malloc_unlock>:
 801b44c:	4801      	ldr	r0, [pc, #4]	; (801b454 <__malloc_unlock+0x8>)
 801b44e:	f7fe bf70 	b.w	801a332 <__retarget_lock_release_recursive>
 801b452:	bf00      	nop
 801b454:	20007290 	.word	0x20007290

0801b458 <_realloc_r>:
 801b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b45a:	4607      	mov	r7, r0
 801b45c:	4614      	mov	r4, r2
 801b45e:	460e      	mov	r6, r1
 801b460:	b921      	cbnz	r1, 801b46c <_realloc_r+0x14>
 801b462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b466:	4611      	mov	r1, r2
 801b468:	f7ff b804 	b.w	801a474 <_malloc_r>
 801b46c:	b922      	cbnz	r2, 801b478 <_realloc_r+0x20>
 801b46e:	f7fe ffb1 	bl	801a3d4 <_free_r>
 801b472:	4625      	mov	r5, r4
 801b474:	4628      	mov	r0, r5
 801b476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b478:	f000 fa0a 	bl	801b890 <_malloc_usable_size_r>
 801b47c:	42a0      	cmp	r0, r4
 801b47e:	d20f      	bcs.n	801b4a0 <_realloc_r+0x48>
 801b480:	4621      	mov	r1, r4
 801b482:	4638      	mov	r0, r7
 801b484:	f7fe fff6 	bl	801a474 <_malloc_r>
 801b488:	4605      	mov	r5, r0
 801b48a:	2800      	cmp	r0, #0
 801b48c:	d0f2      	beq.n	801b474 <_realloc_r+0x1c>
 801b48e:	4631      	mov	r1, r6
 801b490:	4622      	mov	r2, r4
 801b492:	f7fe ff5f 	bl	801a354 <memcpy>
 801b496:	4631      	mov	r1, r6
 801b498:	4638      	mov	r0, r7
 801b49a:	f7fe ff9b 	bl	801a3d4 <_free_r>
 801b49e:	e7e9      	b.n	801b474 <_realloc_r+0x1c>
 801b4a0:	4635      	mov	r5, r6
 801b4a2:	e7e7      	b.n	801b474 <_realloc_r+0x1c>

0801b4a4 <__ssputs_r>:
 801b4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4a8:	688e      	ldr	r6, [r1, #8]
 801b4aa:	429e      	cmp	r6, r3
 801b4ac:	4682      	mov	sl, r0
 801b4ae:	460c      	mov	r4, r1
 801b4b0:	4690      	mov	r8, r2
 801b4b2:	461f      	mov	r7, r3
 801b4b4:	d838      	bhi.n	801b528 <__ssputs_r+0x84>
 801b4b6:	898a      	ldrh	r2, [r1, #12]
 801b4b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b4bc:	d032      	beq.n	801b524 <__ssputs_r+0x80>
 801b4be:	6825      	ldr	r5, [r4, #0]
 801b4c0:	6909      	ldr	r1, [r1, #16]
 801b4c2:	eba5 0901 	sub.w	r9, r5, r1
 801b4c6:	6965      	ldr	r5, [r4, #20]
 801b4c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b4cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b4d0:	3301      	adds	r3, #1
 801b4d2:	444b      	add	r3, r9
 801b4d4:	106d      	asrs	r5, r5, #1
 801b4d6:	429d      	cmp	r5, r3
 801b4d8:	bf38      	it	cc
 801b4da:	461d      	movcc	r5, r3
 801b4dc:	0553      	lsls	r3, r2, #21
 801b4de:	d531      	bpl.n	801b544 <__ssputs_r+0xa0>
 801b4e0:	4629      	mov	r1, r5
 801b4e2:	f7fe ffc7 	bl	801a474 <_malloc_r>
 801b4e6:	4606      	mov	r6, r0
 801b4e8:	b950      	cbnz	r0, 801b500 <__ssputs_r+0x5c>
 801b4ea:	230c      	movs	r3, #12
 801b4ec:	f8ca 3000 	str.w	r3, [sl]
 801b4f0:	89a3      	ldrh	r3, [r4, #12]
 801b4f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b4f6:	81a3      	strh	r3, [r4, #12]
 801b4f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b500:	6921      	ldr	r1, [r4, #16]
 801b502:	464a      	mov	r2, r9
 801b504:	f7fe ff26 	bl	801a354 <memcpy>
 801b508:	89a3      	ldrh	r3, [r4, #12]
 801b50a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b50e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b512:	81a3      	strh	r3, [r4, #12]
 801b514:	6126      	str	r6, [r4, #16]
 801b516:	6165      	str	r5, [r4, #20]
 801b518:	444e      	add	r6, r9
 801b51a:	eba5 0509 	sub.w	r5, r5, r9
 801b51e:	6026      	str	r6, [r4, #0]
 801b520:	60a5      	str	r5, [r4, #8]
 801b522:	463e      	mov	r6, r7
 801b524:	42be      	cmp	r6, r7
 801b526:	d900      	bls.n	801b52a <__ssputs_r+0x86>
 801b528:	463e      	mov	r6, r7
 801b52a:	4632      	mov	r2, r6
 801b52c:	6820      	ldr	r0, [r4, #0]
 801b52e:	4641      	mov	r1, r8
 801b530:	f7fe ff1e 	bl	801a370 <memmove>
 801b534:	68a3      	ldr	r3, [r4, #8]
 801b536:	6822      	ldr	r2, [r4, #0]
 801b538:	1b9b      	subs	r3, r3, r6
 801b53a:	4432      	add	r2, r6
 801b53c:	60a3      	str	r3, [r4, #8]
 801b53e:	6022      	str	r2, [r4, #0]
 801b540:	2000      	movs	r0, #0
 801b542:	e7db      	b.n	801b4fc <__ssputs_r+0x58>
 801b544:	462a      	mov	r2, r5
 801b546:	f7ff ff87 	bl	801b458 <_realloc_r>
 801b54a:	4606      	mov	r6, r0
 801b54c:	2800      	cmp	r0, #0
 801b54e:	d1e1      	bne.n	801b514 <__ssputs_r+0x70>
 801b550:	6921      	ldr	r1, [r4, #16]
 801b552:	4650      	mov	r0, sl
 801b554:	f7fe ff3e 	bl	801a3d4 <_free_r>
 801b558:	e7c7      	b.n	801b4ea <__ssputs_r+0x46>
	...

0801b55c <_svfiprintf_r>:
 801b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b560:	4698      	mov	r8, r3
 801b562:	898b      	ldrh	r3, [r1, #12]
 801b564:	061b      	lsls	r3, r3, #24
 801b566:	b09d      	sub	sp, #116	; 0x74
 801b568:	4607      	mov	r7, r0
 801b56a:	460d      	mov	r5, r1
 801b56c:	4614      	mov	r4, r2
 801b56e:	d50e      	bpl.n	801b58e <_svfiprintf_r+0x32>
 801b570:	690b      	ldr	r3, [r1, #16]
 801b572:	b963      	cbnz	r3, 801b58e <_svfiprintf_r+0x32>
 801b574:	2140      	movs	r1, #64	; 0x40
 801b576:	f7fe ff7d 	bl	801a474 <_malloc_r>
 801b57a:	6028      	str	r0, [r5, #0]
 801b57c:	6128      	str	r0, [r5, #16]
 801b57e:	b920      	cbnz	r0, 801b58a <_svfiprintf_r+0x2e>
 801b580:	230c      	movs	r3, #12
 801b582:	603b      	str	r3, [r7, #0]
 801b584:	f04f 30ff 	mov.w	r0, #4294967295
 801b588:	e0d1      	b.n	801b72e <_svfiprintf_r+0x1d2>
 801b58a:	2340      	movs	r3, #64	; 0x40
 801b58c:	616b      	str	r3, [r5, #20]
 801b58e:	2300      	movs	r3, #0
 801b590:	9309      	str	r3, [sp, #36]	; 0x24
 801b592:	2320      	movs	r3, #32
 801b594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b598:	f8cd 800c 	str.w	r8, [sp, #12]
 801b59c:	2330      	movs	r3, #48	; 0x30
 801b59e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b748 <_svfiprintf_r+0x1ec>
 801b5a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b5a6:	f04f 0901 	mov.w	r9, #1
 801b5aa:	4623      	mov	r3, r4
 801b5ac:	469a      	mov	sl, r3
 801b5ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5b2:	b10a      	cbz	r2, 801b5b8 <_svfiprintf_r+0x5c>
 801b5b4:	2a25      	cmp	r2, #37	; 0x25
 801b5b6:	d1f9      	bne.n	801b5ac <_svfiprintf_r+0x50>
 801b5b8:	ebba 0b04 	subs.w	fp, sl, r4
 801b5bc:	d00b      	beq.n	801b5d6 <_svfiprintf_r+0x7a>
 801b5be:	465b      	mov	r3, fp
 801b5c0:	4622      	mov	r2, r4
 801b5c2:	4629      	mov	r1, r5
 801b5c4:	4638      	mov	r0, r7
 801b5c6:	f7ff ff6d 	bl	801b4a4 <__ssputs_r>
 801b5ca:	3001      	adds	r0, #1
 801b5cc:	f000 80aa 	beq.w	801b724 <_svfiprintf_r+0x1c8>
 801b5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5d2:	445a      	add	r2, fp
 801b5d4:	9209      	str	r2, [sp, #36]	; 0x24
 801b5d6:	f89a 3000 	ldrb.w	r3, [sl]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	f000 80a2 	beq.w	801b724 <_svfiprintf_r+0x1c8>
 801b5e0:	2300      	movs	r3, #0
 801b5e2:	f04f 32ff 	mov.w	r2, #4294967295
 801b5e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b5ea:	f10a 0a01 	add.w	sl, sl, #1
 801b5ee:	9304      	str	r3, [sp, #16]
 801b5f0:	9307      	str	r3, [sp, #28]
 801b5f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b5f6:	931a      	str	r3, [sp, #104]	; 0x68
 801b5f8:	4654      	mov	r4, sl
 801b5fa:	2205      	movs	r2, #5
 801b5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b600:	4851      	ldr	r0, [pc, #324]	; (801b748 <_svfiprintf_r+0x1ec>)
 801b602:	f7e4 fe0d 	bl	8000220 <memchr>
 801b606:	9a04      	ldr	r2, [sp, #16]
 801b608:	b9d8      	cbnz	r0, 801b642 <_svfiprintf_r+0xe6>
 801b60a:	06d0      	lsls	r0, r2, #27
 801b60c:	bf44      	itt	mi
 801b60e:	2320      	movmi	r3, #32
 801b610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b614:	0711      	lsls	r1, r2, #28
 801b616:	bf44      	itt	mi
 801b618:	232b      	movmi	r3, #43	; 0x2b
 801b61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b61e:	f89a 3000 	ldrb.w	r3, [sl]
 801b622:	2b2a      	cmp	r3, #42	; 0x2a
 801b624:	d015      	beq.n	801b652 <_svfiprintf_r+0xf6>
 801b626:	9a07      	ldr	r2, [sp, #28]
 801b628:	4654      	mov	r4, sl
 801b62a:	2000      	movs	r0, #0
 801b62c:	f04f 0c0a 	mov.w	ip, #10
 801b630:	4621      	mov	r1, r4
 801b632:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b636:	3b30      	subs	r3, #48	; 0x30
 801b638:	2b09      	cmp	r3, #9
 801b63a:	d94e      	bls.n	801b6da <_svfiprintf_r+0x17e>
 801b63c:	b1b0      	cbz	r0, 801b66c <_svfiprintf_r+0x110>
 801b63e:	9207      	str	r2, [sp, #28]
 801b640:	e014      	b.n	801b66c <_svfiprintf_r+0x110>
 801b642:	eba0 0308 	sub.w	r3, r0, r8
 801b646:	fa09 f303 	lsl.w	r3, r9, r3
 801b64a:	4313      	orrs	r3, r2
 801b64c:	9304      	str	r3, [sp, #16]
 801b64e:	46a2      	mov	sl, r4
 801b650:	e7d2      	b.n	801b5f8 <_svfiprintf_r+0x9c>
 801b652:	9b03      	ldr	r3, [sp, #12]
 801b654:	1d19      	adds	r1, r3, #4
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	9103      	str	r1, [sp, #12]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	bfbb      	ittet	lt
 801b65e:	425b      	neglt	r3, r3
 801b660:	f042 0202 	orrlt.w	r2, r2, #2
 801b664:	9307      	strge	r3, [sp, #28]
 801b666:	9307      	strlt	r3, [sp, #28]
 801b668:	bfb8      	it	lt
 801b66a:	9204      	strlt	r2, [sp, #16]
 801b66c:	7823      	ldrb	r3, [r4, #0]
 801b66e:	2b2e      	cmp	r3, #46	; 0x2e
 801b670:	d10c      	bne.n	801b68c <_svfiprintf_r+0x130>
 801b672:	7863      	ldrb	r3, [r4, #1]
 801b674:	2b2a      	cmp	r3, #42	; 0x2a
 801b676:	d135      	bne.n	801b6e4 <_svfiprintf_r+0x188>
 801b678:	9b03      	ldr	r3, [sp, #12]
 801b67a:	1d1a      	adds	r2, r3, #4
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	9203      	str	r2, [sp, #12]
 801b680:	2b00      	cmp	r3, #0
 801b682:	bfb8      	it	lt
 801b684:	f04f 33ff 	movlt.w	r3, #4294967295
 801b688:	3402      	adds	r4, #2
 801b68a:	9305      	str	r3, [sp, #20]
 801b68c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b758 <_svfiprintf_r+0x1fc>
 801b690:	7821      	ldrb	r1, [r4, #0]
 801b692:	2203      	movs	r2, #3
 801b694:	4650      	mov	r0, sl
 801b696:	f7e4 fdc3 	bl	8000220 <memchr>
 801b69a:	b140      	cbz	r0, 801b6ae <_svfiprintf_r+0x152>
 801b69c:	2340      	movs	r3, #64	; 0x40
 801b69e:	eba0 000a 	sub.w	r0, r0, sl
 801b6a2:	fa03 f000 	lsl.w	r0, r3, r0
 801b6a6:	9b04      	ldr	r3, [sp, #16]
 801b6a8:	4303      	orrs	r3, r0
 801b6aa:	3401      	adds	r4, #1
 801b6ac:	9304      	str	r3, [sp, #16]
 801b6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6b2:	4826      	ldr	r0, [pc, #152]	; (801b74c <_svfiprintf_r+0x1f0>)
 801b6b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b6b8:	2206      	movs	r2, #6
 801b6ba:	f7e4 fdb1 	bl	8000220 <memchr>
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	d038      	beq.n	801b734 <_svfiprintf_r+0x1d8>
 801b6c2:	4b23      	ldr	r3, [pc, #140]	; (801b750 <_svfiprintf_r+0x1f4>)
 801b6c4:	bb1b      	cbnz	r3, 801b70e <_svfiprintf_r+0x1b2>
 801b6c6:	9b03      	ldr	r3, [sp, #12]
 801b6c8:	3307      	adds	r3, #7
 801b6ca:	f023 0307 	bic.w	r3, r3, #7
 801b6ce:	3308      	adds	r3, #8
 801b6d0:	9303      	str	r3, [sp, #12]
 801b6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6d4:	4433      	add	r3, r6
 801b6d6:	9309      	str	r3, [sp, #36]	; 0x24
 801b6d8:	e767      	b.n	801b5aa <_svfiprintf_r+0x4e>
 801b6da:	fb0c 3202 	mla	r2, ip, r2, r3
 801b6de:	460c      	mov	r4, r1
 801b6e0:	2001      	movs	r0, #1
 801b6e2:	e7a5      	b.n	801b630 <_svfiprintf_r+0xd4>
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	3401      	adds	r4, #1
 801b6e8:	9305      	str	r3, [sp, #20]
 801b6ea:	4619      	mov	r1, r3
 801b6ec:	f04f 0c0a 	mov.w	ip, #10
 801b6f0:	4620      	mov	r0, r4
 801b6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b6f6:	3a30      	subs	r2, #48	; 0x30
 801b6f8:	2a09      	cmp	r2, #9
 801b6fa:	d903      	bls.n	801b704 <_svfiprintf_r+0x1a8>
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d0c5      	beq.n	801b68c <_svfiprintf_r+0x130>
 801b700:	9105      	str	r1, [sp, #20]
 801b702:	e7c3      	b.n	801b68c <_svfiprintf_r+0x130>
 801b704:	fb0c 2101 	mla	r1, ip, r1, r2
 801b708:	4604      	mov	r4, r0
 801b70a:	2301      	movs	r3, #1
 801b70c:	e7f0      	b.n	801b6f0 <_svfiprintf_r+0x194>
 801b70e:	ab03      	add	r3, sp, #12
 801b710:	9300      	str	r3, [sp, #0]
 801b712:	462a      	mov	r2, r5
 801b714:	4b0f      	ldr	r3, [pc, #60]	; (801b754 <_svfiprintf_r+0x1f8>)
 801b716:	a904      	add	r1, sp, #16
 801b718:	4638      	mov	r0, r7
 801b71a:	f3af 8000 	nop.w
 801b71e:	1c42      	adds	r2, r0, #1
 801b720:	4606      	mov	r6, r0
 801b722:	d1d6      	bne.n	801b6d2 <_svfiprintf_r+0x176>
 801b724:	89ab      	ldrh	r3, [r5, #12]
 801b726:	065b      	lsls	r3, r3, #25
 801b728:	f53f af2c 	bmi.w	801b584 <_svfiprintf_r+0x28>
 801b72c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b72e:	b01d      	add	sp, #116	; 0x74
 801b730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b734:	ab03      	add	r3, sp, #12
 801b736:	9300      	str	r3, [sp, #0]
 801b738:	462a      	mov	r2, r5
 801b73a:	4b06      	ldr	r3, [pc, #24]	; (801b754 <_svfiprintf_r+0x1f8>)
 801b73c:	a904      	add	r1, sp, #16
 801b73e:	4638      	mov	r0, r7
 801b740:	f7ff f8ba 	bl	801a8b8 <_printf_i>
 801b744:	e7eb      	b.n	801b71e <_svfiprintf_r+0x1c2>
 801b746:	bf00      	nop
 801b748:	0803d160 	.word	0x0803d160
 801b74c:	0803d16a 	.word	0x0803d16a
 801b750:	00000000 	.word	0x00000000
 801b754:	0801b4a5 	.word	0x0801b4a5
 801b758:	0803d166 	.word	0x0803d166

0801b75c <__sread>:
 801b75c:	b510      	push	{r4, lr}
 801b75e:	460c      	mov	r4, r1
 801b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b764:	f000 f89c 	bl	801b8a0 <_read_r>
 801b768:	2800      	cmp	r0, #0
 801b76a:	bfab      	itete	ge
 801b76c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b76e:	89a3      	ldrhlt	r3, [r4, #12]
 801b770:	181b      	addge	r3, r3, r0
 801b772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b776:	bfac      	ite	ge
 801b778:	6563      	strge	r3, [r4, #84]	; 0x54
 801b77a:	81a3      	strhlt	r3, [r4, #12]
 801b77c:	bd10      	pop	{r4, pc}

0801b77e <__swrite>:
 801b77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b782:	461f      	mov	r7, r3
 801b784:	898b      	ldrh	r3, [r1, #12]
 801b786:	05db      	lsls	r3, r3, #23
 801b788:	4605      	mov	r5, r0
 801b78a:	460c      	mov	r4, r1
 801b78c:	4616      	mov	r6, r2
 801b78e:	d505      	bpl.n	801b79c <__swrite+0x1e>
 801b790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b794:	2302      	movs	r3, #2
 801b796:	2200      	movs	r2, #0
 801b798:	f000 f868 	bl	801b86c <_lseek_r>
 801b79c:	89a3      	ldrh	r3, [r4, #12]
 801b79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b7a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b7a6:	81a3      	strh	r3, [r4, #12]
 801b7a8:	4632      	mov	r2, r6
 801b7aa:	463b      	mov	r3, r7
 801b7ac:	4628      	mov	r0, r5
 801b7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7b2:	f000 b817 	b.w	801b7e4 <_write_r>

0801b7b6 <__sseek>:
 801b7b6:	b510      	push	{r4, lr}
 801b7b8:	460c      	mov	r4, r1
 801b7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7be:	f000 f855 	bl	801b86c <_lseek_r>
 801b7c2:	1c43      	adds	r3, r0, #1
 801b7c4:	89a3      	ldrh	r3, [r4, #12]
 801b7c6:	bf15      	itete	ne
 801b7c8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b7ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b7ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b7d2:	81a3      	strheq	r3, [r4, #12]
 801b7d4:	bf18      	it	ne
 801b7d6:	81a3      	strhne	r3, [r4, #12]
 801b7d8:	bd10      	pop	{r4, pc}

0801b7da <__sclose>:
 801b7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7de:	f000 b813 	b.w	801b808 <_close_r>
	...

0801b7e4 <_write_r>:
 801b7e4:	b538      	push	{r3, r4, r5, lr}
 801b7e6:	4d07      	ldr	r5, [pc, #28]	; (801b804 <_write_r+0x20>)
 801b7e8:	4604      	mov	r4, r0
 801b7ea:	4608      	mov	r0, r1
 801b7ec:	4611      	mov	r1, r2
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	602a      	str	r2, [r5, #0]
 801b7f2:	461a      	mov	r2, r3
 801b7f4:	f7eb fd51 	bl	800729a <_write>
 801b7f8:	1c43      	adds	r3, r0, #1
 801b7fa:	d102      	bne.n	801b802 <_write_r+0x1e>
 801b7fc:	682b      	ldr	r3, [r5, #0]
 801b7fe:	b103      	cbz	r3, 801b802 <_write_r+0x1e>
 801b800:	6023      	str	r3, [r4, #0]
 801b802:	bd38      	pop	{r3, r4, r5, pc}
 801b804:	2000729c 	.word	0x2000729c

0801b808 <_close_r>:
 801b808:	b538      	push	{r3, r4, r5, lr}
 801b80a:	4d06      	ldr	r5, [pc, #24]	; (801b824 <_close_r+0x1c>)
 801b80c:	2300      	movs	r3, #0
 801b80e:	4604      	mov	r4, r0
 801b810:	4608      	mov	r0, r1
 801b812:	602b      	str	r3, [r5, #0]
 801b814:	f7eb fd5d 	bl	80072d2 <_close>
 801b818:	1c43      	adds	r3, r0, #1
 801b81a:	d102      	bne.n	801b822 <_close_r+0x1a>
 801b81c:	682b      	ldr	r3, [r5, #0]
 801b81e:	b103      	cbz	r3, 801b822 <_close_r+0x1a>
 801b820:	6023      	str	r3, [r4, #0]
 801b822:	bd38      	pop	{r3, r4, r5, pc}
 801b824:	2000729c 	.word	0x2000729c

0801b828 <_fstat_r>:
 801b828:	b538      	push	{r3, r4, r5, lr}
 801b82a:	4d07      	ldr	r5, [pc, #28]	; (801b848 <_fstat_r+0x20>)
 801b82c:	2300      	movs	r3, #0
 801b82e:	4604      	mov	r4, r0
 801b830:	4608      	mov	r0, r1
 801b832:	4611      	mov	r1, r2
 801b834:	602b      	str	r3, [r5, #0]
 801b836:	f7eb fd58 	bl	80072ea <_fstat>
 801b83a:	1c43      	adds	r3, r0, #1
 801b83c:	d102      	bne.n	801b844 <_fstat_r+0x1c>
 801b83e:	682b      	ldr	r3, [r5, #0]
 801b840:	b103      	cbz	r3, 801b844 <_fstat_r+0x1c>
 801b842:	6023      	str	r3, [r4, #0]
 801b844:	bd38      	pop	{r3, r4, r5, pc}
 801b846:	bf00      	nop
 801b848:	2000729c 	.word	0x2000729c

0801b84c <_isatty_r>:
 801b84c:	b538      	push	{r3, r4, r5, lr}
 801b84e:	4d06      	ldr	r5, [pc, #24]	; (801b868 <_isatty_r+0x1c>)
 801b850:	2300      	movs	r3, #0
 801b852:	4604      	mov	r4, r0
 801b854:	4608      	mov	r0, r1
 801b856:	602b      	str	r3, [r5, #0]
 801b858:	f7eb fd57 	bl	800730a <_isatty>
 801b85c:	1c43      	adds	r3, r0, #1
 801b85e:	d102      	bne.n	801b866 <_isatty_r+0x1a>
 801b860:	682b      	ldr	r3, [r5, #0]
 801b862:	b103      	cbz	r3, 801b866 <_isatty_r+0x1a>
 801b864:	6023      	str	r3, [r4, #0]
 801b866:	bd38      	pop	{r3, r4, r5, pc}
 801b868:	2000729c 	.word	0x2000729c

0801b86c <_lseek_r>:
 801b86c:	b538      	push	{r3, r4, r5, lr}
 801b86e:	4d07      	ldr	r5, [pc, #28]	; (801b88c <_lseek_r+0x20>)
 801b870:	4604      	mov	r4, r0
 801b872:	4608      	mov	r0, r1
 801b874:	4611      	mov	r1, r2
 801b876:	2200      	movs	r2, #0
 801b878:	602a      	str	r2, [r5, #0]
 801b87a:	461a      	mov	r2, r3
 801b87c:	f7eb fd50 	bl	8007320 <_lseek>
 801b880:	1c43      	adds	r3, r0, #1
 801b882:	d102      	bne.n	801b88a <_lseek_r+0x1e>
 801b884:	682b      	ldr	r3, [r5, #0]
 801b886:	b103      	cbz	r3, 801b88a <_lseek_r+0x1e>
 801b888:	6023      	str	r3, [r4, #0]
 801b88a:	bd38      	pop	{r3, r4, r5, pc}
 801b88c:	2000729c 	.word	0x2000729c

0801b890 <_malloc_usable_size_r>:
 801b890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b894:	1f18      	subs	r0, r3, #4
 801b896:	2b00      	cmp	r3, #0
 801b898:	bfbc      	itt	lt
 801b89a:	580b      	ldrlt	r3, [r1, r0]
 801b89c:	18c0      	addlt	r0, r0, r3
 801b89e:	4770      	bx	lr

0801b8a0 <_read_r>:
 801b8a0:	b538      	push	{r3, r4, r5, lr}
 801b8a2:	4d07      	ldr	r5, [pc, #28]	; (801b8c0 <_read_r+0x20>)
 801b8a4:	4604      	mov	r4, r0
 801b8a6:	4608      	mov	r0, r1
 801b8a8:	4611      	mov	r1, r2
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	602a      	str	r2, [r5, #0]
 801b8ae:	461a      	mov	r2, r3
 801b8b0:	f7eb fcd6 	bl	8007260 <_read>
 801b8b4:	1c43      	adds	r3, r0, #1
 801b8b6:	d102      	bne.n	801b8be <_read_r+0x1e>
 801b8b8:	682b      	ldr	r3, [r5, #0]
 801b8ba:	b103      	cbz	r3, 801b8be <_read_r+0x1e>
 801b8bc:	6023      	str	r3, [r4, #0]
 801b8be:	bd38      	pop	{r3, r4, r5, pc}
 801b8c0:	2000729c 	.word	0x2000729c

0801b8c4 <_init>:
 801b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8c6:	bf00      	nop
 801b8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b8ca:	bc08      	pop	{r3}
 801b8cc:	469e      	mov	lr, r3
 801b8ce:	4770      	bx	lr

0801b8d0 <_fini>:
 801b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8d2:	bf00      	nop
 801b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b8d6:	bc08      	pop	{r3}
 801b8d8:	469e      	mov	lr, r3
 801b8da:	4770      	bx	lr
